
Real-Time-project-on-STM-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800c368  0800c368  0001c368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c670  0800c670  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800c670  0800c670  0001c670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c678  0800c678  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c678  0800c678  0001c678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c67c  0800c67c  0001c67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800c680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c9c  20000150  0800c7d0  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dec  0800c7d0  00022dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b07a  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004abf  00000000  00000000  0004b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023c0  00000000  00000000  0004fcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002188  00000000  00000000  00052080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000067f0  00000000  00000000  00054208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bdb8  00000000  00000000  0005a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010823e  00000000  00000000  000767b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e9ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ff8  00000000  00000000  0017ea6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c34c 	.word	0x0800c34c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800c34c 	.word	0x0800c34c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f001 fe9e 	bl	8002c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f8b8 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 fac4 	bl	80014d0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f48:	f000 f958 	bl	80011fc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f4c:	f000 f98e 	bl	800126c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f50:	f000 f9cc 	bl	80012ec <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f54:	f000 f9f0 	bl	8001338 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f58:	f000 fa2c 	bl	80013b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f5c:	f000 fa5a 	bl	8001414 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f60:	f000 fa88 	bl	8001474 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	/*Transmit the initialization messages and initialize the temperature sensor*/
	HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), 1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	222f      	movs	r2, #47	; 0x2f
 8000f6a:	493a      	ldr	r1, [pc, #232]	; (8001054 <main+0x11c>)
 8000f6c:	483a      	ldr	r0, [pc, #232]	; (8001058 <main+0x120>)
 8000f6e:	f005 f9e5 	bl	800633c <HAL_UART_Transmit>
	BSP_TSENSOR_Init();
 8000f72:	f001 fcc7 	bl	8002904 <BSP_TSENSOR_Init>
	HAL_UART_Transmit(&huart1, msg2, sizeof(msg2), 1000);
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	2230      	movs	r2, #48	; 0x30
 8000f7c:	4937      	ldr	r1, [pc, #220]	; (800105c <main+0x124>)
 8000f7e:	4836      	ldr	r0, [pc, #216]	; (8001058 <main+0x120>)
 8000f80:	f005 f9dc 	bl	800633c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, msg3, sizeof(msg3), 1000);
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	222c      	movs	r2, #44	; 0x2c
 8000f8a:	4935      	ldr	r1, [pc, #212]	; (8001060 <main+0x128>)
 8000f8c:	4832      	ldr	r0, [pc, #200]	; (8001058 <main+0x120>)
 8000f8e:	f005 f9d5 	bl	800633c <HAL_UART_Transmit>
	BSP_HSENSOR_Init();
 8000f92:	f001 fc89 	bl	80028a8 <BSP_HSENSOR_Init>
	HAL_UART_Transmit(&huart1, msg4, sizeof(msg4), 1000);
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	222d      	movs	r2, #45	; 0x2d
 8000f9c:	4931      	ldr	r1, [pc, #196]	; (8001064 <main+0x12c>)
 8000f9e:	482e      	ldr	r0, [pc, #184]	; (8001058 <main+0x120>)
 8000fa0:	f005 f9cc 	bl	800633c <HAL_UART_Transmit>

	/*Initialize the data structure*/
	struct_init(&ambient_conditions);
 8000fa4:	4830      	ldr	r0, [pc, #192]	; (8001068 <main+0x130>)
 8000fa6:	f000 fcb7 	bl	8001918 <struct_init>
  /* USER CODE END 2 */

  osKernelInitialize();
 8000faa:	f006 f94f 	bl	800724c <osKernelInitialize>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */

	temp_sem = osSemaphoreNew(1, 1, NULL);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f006 fb36 	bl	8007624 <osSemaphoreNew>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <main+0x134>)
 8000fbc:	601a      	str	r2, [r3, #0]
	humid_sem = osSemaphoreNew(1, 0, NULL);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f006 fb2e 	bl	8007624 <osSemaphoreNew>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <main+0x138>)
 8000fcc:	601a      	str	r2, [r3, #0]
	apparent_temp_sem = osSemaphoreNew(1, 0, NULL);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f006 fb26 	bl	8007624 <osSemaphoreNew>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <main+0x13c>)
 8000fdc:	601a      	str	r2, [r3, #0]
	safety_sem = osSemaphoreNew(1, 0, NULL);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f006 fb1e 	bl	8007624 <osSemaphoreNew>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <main+0x140>)
 8000fec:	601a      	str	r2, [r3, #0]

  /* Create the timer(s) */

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  timer_handle = osTimerNew(Callbacktimer, osTimerPeriodic, NULL, &timer_attributes);
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <main+0x144>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4822      	ldr	r0, [pc, #136]	; (8001080 <main+0x148>)
 8000ff6:	f006 fa51 	bl	800749c <osTimerNew>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <main+0x14c>)
 8000ffe:	601a      	str	r2, [r3, #0]
  osTimerStart (timer_handle, 2000);
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <main+0x14c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001008:	4618      	mov	r0, r3
 800100a:	f006 facb 	bl	80075a4 <osTimerStart>

  /* Create the thread(s) */

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	apparent_temp_task_handle = osThreadNew(apparent_temp_task,
 800100e:	4a1e      	ldr	r2, [pc, #120]	; (8001088 <main+0x150>)
 8001010:	4915      	ldr	r1, [pc, #84]	; (8001068 <main+0x130>)
 8001012:	481e      	ldr	r0, [pc, #120]	; (800108c <main+0x154>)
 8001014:	f006 f982 	bl	800731c <osThreadNew>
 8001018:	4602      	mov	r2, r0
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <main+0x158>)
 800101c:	601a      	str	r2, [r3, #0]
			&ambient_conditions, &apparent_temp_task_attributes);
	temp_task_handle = osThreadNew(temp_task, &ambient_conditions,
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <main+0x15c>)
 8001020:	4911      	ldr	r1, [pc, #68]	; (8001068 <main+0x130>)
 8001022:	481d      	ldr	r0, [pc, #116]	; (8001098 <main+0x160>)
 8001024:	f006 f97a 	bl	800731c <osThreadNew>
 8001028:	4602      	mov	r2, r0
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <main+0x164>)
 800102c:	601a      	str	r2, [r3, #0]
			&sensors_tasks_attributes);
	humid_task_handle = osThreadNew(humid_task, &ambient_conditions,
 800102e:	4a19      	ldr	r2, [pc, #100]	; (8001094 <main+0x15c>)
 8001030:	490d      	ldr	r1, [pc, #52]	; (8001068 <main+0x130>)
 8001032:	481b      	ldr	r0, [pc, #108]	; (80010a0 <main+0x168>)
 8001034:	f006 f972 	bl	800731c <osThreadNew>
 8001038:	4602      	mov	r2, r0
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <main+0x16c>)
 800103c:	601a      	str	r2, [r3, #0]
			&sensors_tasks_attributes);
	safety_task_handle = osThreadNew(safety_task, &ambient_conditions,
 800103e:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <main+0x170>)
 8001040:	4909      	ldr	r1, [pc, #36]	; (8001068 <main+0x130>)
 8001042:	481a      	ldr	r0, [pc, #104]	; (80010ac <main+0x174>)
 8001044:	f006 f96a 	bl	800731c <osThreadNew>
 8001048:	4602      	mov	r2, r0
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <main+0x178>)
 800104c:	601a      	str	r2, [r3, #0]
			&safety_task_attributes);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800104e:	f006 f931 	bl	80072b4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001052:	e7fe      	b.n	8001052 <main+0x11a>
 8001054:	20000000 	.word	0x20000000
 8001058:	20002bb8 	.word	0x20002bb8
 800105c:	20000030 	.word	0x20000030
 8001060:	20000060 	.word	0x20000060
 8001064:	2000008c 	.word	0x2000008c
 8001068:	20002664 	.word	0x20002664
 800106c:	20002b50 	.word	0x20002b50
 8001070:	20002afc 	.word	0x20002afc
 8001074:	20002c3c 	.word	0x20002c3c
 8001078:	20002c48 	.word	0x20002c48
 800107c:	0800c59c 	.word	0x0800c59c
 8001080:	08001ed9 	.word	0x08001ed9
 8001084:	2000265c 	.word	0x2000265c
 8001088:	0800c554 	.word	0x0800c554
 800108c:	08001c31 	.word	0x08001c31
 8001090:	20002b4c 	.word	0x20002b4c
 8001094:	0800c530 	.word	0x0800c530
 8001098:	08001a41 	.word	0x08001a41
 800109c:	20002c50 	.word	0x20002c50
 80010a0:	08001b3d 	.word	0x08001b3d
 80010a4:	20002c4c 	.word	0x20002c4c
 80010a8:	0800c578 	.word	0x0800c578
 80010ac:	08001e1d 	.word	0x08001e1d
 80010b0:	20002c38 	.word	0x20002c38

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0b8      	sub	sp, #224	; 0xe0
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010be:	2244      	movs	r2, #68	; 0x44
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f009 fc97 	bl	800a9f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2288      	movs	r2, #136	; 0x88
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fc89 	bl	800a9f6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80010e4:	f003 fa00 	bl	80044e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <SystemClock_Config+0x140>)
 80010ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ee:	4a41      	ldr	r2, [pc, #260]	; (80011f4 <SystemClock_Config+0x140>)
 80010f0:	f023 0318 	bic.w	r3, r3, #24
 80010f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010f8:	2314      	movs	r3, #20
 80010fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001110:	2360      	movs	r3, #96	; 0x60
 8001112:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800111c:	2301      	movs	r3, #1
 800111e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001128:	2328      	movs	r3, #40	; 0x28
 800112a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800112e:	2307      	movs	r3, #7
 8001130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fb1b 	bl	8004780 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001150:	f000 feea 	bl	8001f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
 8001156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115a:	2303      	movs	r3, #3
 800115c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001172:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f003 feb1 	bl	8004ee0 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001184:	f000 fed0 	bl	8001f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <SystemClock_Config+0x144>)
 800118a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800118c:	2300      	movs	r3, #0
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001194:	2300      	movs	r3, #0
 8001196:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800119e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80011ac:	2318      	movs	r3, #24
 80011ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011b0:	2307      	movs	r3, #7
 80011b2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011c0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c2:	463b      	mov	r3, r7
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 f8c1 	bl	800534c <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80011d0:	f000 feaa 	bl	8001f28 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011d8:	f003 f9a4 	bl	8004524 <HAL_PWREx_ControlVoltageScaling>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x132>
  {
    Error_Handler();
 80011e2:	f000 fea1 	bl	8001f28 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011e6:	f004 fb97 	bl	8005918 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011ea:	bf00      	nop
 80011ec:	37e0      	adds	r7, #224	; 0xe0
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	00012085 	.word	0x00012085

080011fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <MX_DFSDM1_Init+0x6c>)
 8001204:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001208:	2201      	movs	r2, #1
 800120a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_DFSDM1_Init+0x68>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001214:	2202      	movs	r2, #2
 8001216:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_DFSDM1_Init+0x68>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <MX_DFSDM1_Init+0x68>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001234:	2204      	movs	r2, #4
 8001236:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <MX_DFSDM1_Init+0x68>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001240:	2201      	movs	r2, #1
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001246:	2200      	movs	r2, #0
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_DFSDM1_Init+0x68>)
 800124c:	2200      	movs	r2, #0
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_DFSDM1_Init+0x68>)
 8001252:	f001 fe4d 	bl	8002ef0 <HAL_DFSDM_ChannelInit>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800125c:	f000 fe64 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20002624 	.word	0x20002624
 8001268:	40016020 	.word	0x40016020

0800126c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_I2C2_Init+0x78>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <MX_I2C2_Init+0x7c>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_I2C2_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001284:	2201      	movs	r2, #1
 8001286:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_I2C2_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <MX_I2C2_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_I2C2_Init+0x74>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012a8:	f002 fa36 	bl	8003718 <HAL_I2C_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012b2:	f000 fe39 	bl	8001f28 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012ba:	f002 ff35 	bl	8004128 <HAL_I2CEx_ConfigAnalogFilter>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012c4:	f000 fe30 	bl	8001f28 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_I2C2_Init+0x74>)
 80012cc:	f002 ff77 	bl	80041be <HAL_I2CEx_ConfigDigitalFilter>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012d6:	f000 fe27 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20002b00 	.word	0x20002b00
 80012e4:	40005800 	.word	0x40005800
 80012e8:	10909cec 	.word	0x10909cec

080012ec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_QUADSPI_Init+0x44>)
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <MX_QUADSPI_Init+0x48>)
 80012f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_QUADSPI_Init+0x44>)
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_QUADSPI_Init+0x44>)
 80012fe:	2201      	movs	r2, #1
 8001300:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_QUADSPI_Init+0x44>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_QUADSPI_Init+0x44>)
 800130a:	2201      	movs	r2, #1
 800130c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_QUADSPI_Init+0x44>)
 8001310:	2200      	movs	r2, #0
 8001312:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_QUADSPI_Init+0x44>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_QUADSPI_Init+0x44>)
 800131c:	f003 f968 	bl	80045f0 <HAL_QSPI_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001326:	f000 fdff 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20002c54 	.word	0x20002c54
 8001334:	a0001000 	.word	0xa0001000

08001338 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_SPI3_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_SPI3_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_SPI3_Init+0x74>)
 8001344:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001348:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_SPI3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SPI3_Init+0x74>)
 8001352:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001356:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_SPI3_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_SPI3_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_SPI3_Init+0x74>)
 8001366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_SPI3_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SPI3_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_SPI3_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_SPI3_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SPI3_Init+0x74>)
 8001386:	2207      	movs	r2, #7
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_SPI3_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SPI3_Init+0x74>)
 8001392:	2208      	movs	r2, #8
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_SPI3_Init+0x74>)
 8001398:	f004 fc98 	bl	8005ccc <HAL_SPI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013a2:	f000 fdc1 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20002b54 	.word	0x20002b54
 80013b0:	40003c00 	.word	0x40003c00

080013b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <MX_USART1_UART_Init+0x5c>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_USART1_UART_Init+0x58>)
 80013f8:	f004 ff52 	bl	80062a0 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001402:	f000 fd91 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20002bb8 	.word	0x20002bb8
 8001410:	40013800 	.word	0x40013800

08001414 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_USART3_UART_Init+0x58>)
 800141a:	4a15      	ldr	r2, [pc, #84]	; (8001470 <MX_USART3_UART_Init+0x5c>)
 800141c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800141e:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_USART3_UART_Init+0x58>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_USART3_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_USART3_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <MX_USART3_UART_Init+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <MX_USART3_UART_Init+0x58>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <MX_USART3_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <MX_USART3_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <MX_USART3_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <MX_USART3_UART_Init+0x58>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_USART3_UART_Init+0x58>)
 8001458:	f004 ff22 	bl	80062a0 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001462:	f000 fd61 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20002674 	.word	0x20002674
 8001470:	40004800 	.word	0x40004800

08001474 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800147e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001482:	2206      	movs	r2, #6
 8001484:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001488:	2202      	movs	r2, #2
 800148a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148e:	2202      	movs	r2, #2
 8001490:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b8:	f002 fecd 	bl	8004256 <HAL_PCD_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014c2:	f000 fd31 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200026f4 	.word	0x200026f4

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014e6:	4bba      	ldr	r3, [pc, #744]	; (80017d0 <MX_GPIO_Init+0x300>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4ab9      	ldr	r2, [pc, #740]	; (80017d0 <MX_GPIO_Init+0x300>)
 80014ec:	f043 0310 	orr.w	r3, r3, #16
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4bb7      	ldr	r3, [pc, #732]	; (80017d0 <MX_GPIO_Init+0x300>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4bb4      	ldr	r3, [pc, #720]	; (80017d0 <MX_GPIO_Init+0x300>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4ab3      	ldr	r2, [pc, #716]	; (80017d0 <MX_GPIO_Init+0x300>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4bb1      	ldr	r3, [pc, #708]	; (80017d0 <MX_GPIO_Init+0x300>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4bae      	ldr	r3, [pc, #696]	; (80017d0 <MX_GPIO_Init+0x300>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4aad      	ldr	r2, [pc, #692]	; (80017d0 <MX_GPIO_Init+0x300>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4bab      	ldr	r3, [pc, #684]	; (80017d0 <MX_GPIO_Init+0x300>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4ba8      	ldr	r3, [pc, #672]	; (80017d0 <MX_GPIO_Init+0x300>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4aa7      	ldr	r2, [pc, #668]	; (80017d0 <MX_GPIO_Init+0x300>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4ba5      	ldr	r3, [pc, #660]	; (80017d0 <MX_GPIO_Init+0x300>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	4ba2      	ldr	r3, [pc, #648]	; (80017d0 <MX_GPIO_Init+0x300>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4aa1      	ldr	r2, [pc, #644]	; (80017d0 <MX_GPIO_Init+0x300>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b9f      	ldr	r3, [pc, #636]	; (80017d0 <MX_GPIO_Init+0x300>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001564:	489b      	ldr	r0, [pc, #620]	; (80017d4 <MX_GPIO_Init+0x304>)
 8001566:	f002 f88d 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f002 f886 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8001578:	2200      	movs	r2, #0
 800157a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800157e:	4896      	ldr	r0, [pc, #600]	; (80017d8 <MX_GPIO_Init+0x308>)
 8001580:	f002 f880 	bl	8003684 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f241 0181 	movw	r1, #4225	; 0x1081
 800158a:	4894      	ldr	r0, [pc, #592]	; (80017dc <MX_GPIO_Init+0x30c>)
 800158c:	f002 f87a 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001596:	4891      	ldr	r0, [pc, #580]	; (80017dc <MX_GPIO_Init+0x30c>)
 8001598:	f002 f874 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80015a2:	488f      	ldr	r0, [pc, #572]	; (80017e0 <MX_GPIO_Init+0x310>)
 80015a4:	f002 f86e 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2120      	movs	r1, #32
 80015ac:	488a      	ldr	r0, [pc, #552]	; (80017d8 <MX_GPIO_Init+0x308>)
 80015ae:	f002 f869 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2101      	movs	r1, #1
 80015b6:	4887      	ldr	r0, [pc, #540]	; (80017d4 <MX_GPIO_Init+0x304>)
 80015b8:	f002 f864 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80015bc:	f240 1315 	movw	r3, #277	; 0x115
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	487f      	ldr	r0, [pc, #508]	; (80017d4 <MX_GPIO_Init+0x304>)
 80015d6:	f001 fda1 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015da:	236a      	movs	r3, #106	; 0x6a
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015de:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <MX_GPIO_Init+0x314>)
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4879      	ldr	r0, [pc, #484]	; (80017d4 <MX_GPIO_Init+0x304>)
 80015ee:	f001 fd95 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f8:	4b7b      	ldr	r3, [pc, #492]	; (80017e8 <MX_GPIO_Init+0x318>)
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4876      	ldr	r0, [pc, #472]	; (80017e0 <MX_GPIO_Init+0x310>)
 8001608:	f001 fd88 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800160c:	233f      	movs	r3, #63	; 0x3f
 800160e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001610:	230b      	movs	r3, #11
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4870      	ldr	r0, [pc, #448]	; (80017e0 <MX_GPIO_Init+0x310>)
 8001620:	f001 fd7c 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001624:	2303      	movs	r3, #3
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001634:	2308      	movs	r3, #8
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001642:	f001 fd6b 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001646:	f248 1304 	movw	r3, #33028	; 0x8104
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f001 fd5b 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001666:	2308      	movs	r3, #8
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001676:	2301      	movs	r3, #1
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f001 fd4a 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001688:	2310      	movs	r3, #16
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800168c:	230b      	movs	r3, #11
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f001 fd3d 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80016a2:	23e0      	movs	r3, #224	; 0xe0
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b2:	2305      	movs	r3, #5
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f001 fd2c 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80016c4:	2301      	movs	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <MX_GPIO_Init+0x314>)
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4840      	ldr	r0, [pc, #256]	; (80017d8 <MX_GPIO_Init+0x308>)
 80016d8:	f001 fd20 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016dc:	2302      	movs	r3, #2
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016e0:	230b      	movs	r3, #11
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	483a      	ldr	r0, [pc, #232]	; (80017d8 <MX_GPIO_Init+0x308>)
 80016f0:	f001 fd14 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80016f4:	f24f 0334 	movw	r3, #61492	; 0xf034
 80016f8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4832      	ldr	r0, [pc, #200]	; (80017d8 <MX_GPIO_Init+0x308>)
 800170e:	f001 fd05 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8001712:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001716:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001718:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <MX_GPIO_Init+0x314>)
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	482d      	ldr	r0, [pc, #180]	; (80017dc <MX_GPIO_Init+0x30c>)
 8001728:	f001 fcf8 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800172c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4825      	ldr	r0, [pc, #148]	; (80017dc <MX_GPIO_Init+0x30c>)
 8001746:	f001 fce9 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800174a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	481f      	ldr	r0, [pc, #124]	; (80017e0 <MX_GPIO_Init+0x310>)
 8001764:	f001 fcda 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001768:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_GPIO_Init+0x314>)
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4818      	ldr	r0, [pc, #96]	; (80017e0 <MX_GPIO_Init+0x310>)
 800177e:	f001 fccd 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001782:	2302      	movs	r3, #2
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001792:	2305      	movs	r3, #5
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <MX_GPIO_Init+0x30c>)
 800179e:	f001 fcbd 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80017a2:	2378      	movs	r3, #120	; 0x78
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b2:	2307      	movs	r3, #7
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <MX_GPIO_Init+0x30c>)
 80017be:	f001 fcad 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80017c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c8:	2312      	movs	r3, #18
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e00d      	b.n	80017ec <MX_GPIO_Init+0x31c>
 80017d0:	40021000 	.word	0x40021000
 80017d4:	48001000 	.word	0x48001000
 80017d8:	48000400 	.word	0x48000400
 80017dc:	48000c00 	.word	0x48000c00
 80017e0:	48000800 	.word	0x48000800
 80017e4:	10110000 	.word	0x10110000
 80017e8:	10210000 	.word	0x10210000
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f2:	2304      	movs	r3, #4
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <MX_GPIO_Init+0x35c>)
 80017fe:	f001 fc8d 	bl	800311c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2017      	movs	r0, #23
 8001808:	f001 fb48 	bl	8002e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800180c:	2017      	movs	r0, #23
 800180e:	f001 fb61 	bl	8002ed4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	2028      	movs	r0, #40	; 0x28
 8001818:	f001 fb40 	bl	8002e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800181c:	2028      	movs	r0, #40	; 0x28
 800181e:	f001 fb59 	bl	8002ed4 <HAL_NVIC_EnableIRQ>

}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	; 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	48000400 	.word	0x48000400

08001830 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/*When the user button is pressed, an interrupt is generated and the set temperature is increased by 1 degree*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b096      	sub	sp, #88	; 0x58
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
	char msg[32];
	char line[] = "--------------------------------------\n\r";
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_GPIO_EXTI_Callback+0xd0>)
 800183c:	f107 0408 	add.w	r4, r7, #8
 8001840:	461d      	mov	r5, r3
 8001842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800184e:	c403      	stmia	r4!, {r0, r1}
 8001850:	7022      	strb	r2, [r4, #0]
	uint32_t tick;

	if (GPIO_Pin == BUTTON_EXTI13_Pin) {
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001858:	d14e      	bne.n	80018f8 <HAL_GPIO_EXTI_Callback+0xc8>
		tick = HAL_GetTick();
 800185a:	f001 fa39 	bl	8002cd0 <HAL_GetTick>
 800185e:	6578      	str	r0, [r7, #84]	; 0x54

		while (HAL_GetTick() - tick < 500);
 8001860:	bf00      	nop
 8001862:	f001 fa35 	bl	8002cd0 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001870:	d3f7      	bcc.n	8001862 <HAL_GPIO_EXTI_Callback+0x32>

		/*Keep pushed = reset, release = set*/
		if (!HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin)) {
 8001872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001878:	f001 feec 	bl	8003654 <HAL_GPIO_ReadPin>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11d      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0x8e>
			snprintf(msg, 32, "TEMPERATURE DECREASED BY 1 %cC\r\n", '°');
 8001882:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001886:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <HAL_GPIO_EXTI_Callback+0xd8>)
 800188c:	2120      	movs	r1, #32
 800188e:	f009 f8bb 	bl	800aa08 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8001892:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	2220      	movs	r2, #32
 800189c:	481b      	ldr	r0, [pc, #108]	; (800190c <HAL_GPIO_EXTI_Callback+0xdc>)
 800189e:	f004 fd4d 	bl	800633c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) line, sizeof(line), 1000);
 80018a2:	f107 0108 	add.w	r1, r7, #8
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	2229      	movs	r2, #41	; 0x29
 80018ac:	4817      	ldr	r0, [pc, #92]	; (800190c <HAL_GPIO_EXTI_Callback+0xdc>)
 80018ae:	f004 fd45 	bl	800633c <HAL_UART_Transmit>
			ambient_conditions.set_temperature--;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	4a15      	ldr	r2, [pc, #84]	; (8001910 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018ba:	60d3      	str	r3, [r2, #12]
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
			HAL_UART_Transmit(&huart1, (uint8_t*) line, sizeof(line), 1000);
			ambient_conditions.set_temperature++;
		}
	}
}
 80018bc:	e01c      	b.n	80018f8 <HAL_GPIO_EXTI_Callback+0xc8>
			snprintf(msg, 32, "TEMPERATURE INCREASED BY 1 %cC\r\n", '°');
 80018be:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80018c2:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <HAL_GPIO_EXTI_Callback+0xe4>)
 80018c8:	2120      	movs	r1, #32
 80018ca:	f009 f89d 	bl	800aa08 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 80018ce:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	2220      	movs	r2, #32
 80018d8:	480c      	ldr	r0, [pc, #48]	; (800190c <HAL_GPIO_EXTI_Callback+0xdc>)
 80018da:	f004 fd2f 	bl	800633c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) line, sizeof(line), 1000);
 80018de:	f107 0108 	add.w	r1, r7, #8
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	2229      	movs	r2, #41	; 0x29
 80018e8:	4808      	ldr	r0, [pc, #32]	; (800190c <HAL_GPIO_EXTI_Callback+0xdc>)
 80018ea:	f004 fd27 	bl	800633c <HAL_UART_Transmit>
			ambient_conditions.set_temperature++;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_GPIO_EXTI_Callback+0xe0>)
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3758      	adds	r7, #88	; 0x58
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001900:	0800c3e4 	.word	0x0800c3e4
 8001904:	48000800 	.word	0x48000800
 8001908:	0800c39c 	.word	0x0800c39c
 800190c:	20002bb8 	.word	0x20002bb8
 8001910:	20002664 	.word	0x20002664
 8001914:	0800c3c0 	.word	0x0800c3c0

08001918 <struct_init>:
/*Initialize the data structure*/
void struct_init(struct ambient_conditions *ac) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	ac->humid_value = 0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
	ac->temp_value = 0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
	ac->humidex = 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
	ac->set_temperature = 25;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2219      	movs	r2, #25
 800193c:	60da      	str	r2, [r3, #12]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	0000      	movs	r0, r0
 800194c:	0000      	movs	r0, r0
	...

08001950 <calculate_h>:

/*Calculate humidex based on temperature and humidity*/
float calculate_h(struct ambient_conditions *ac) {
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	float h = 0;
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
	float e = 0;
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]

	e = 0.06 * ac->humid_value * (pow(10, 0.03 * ac->temp_value));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fde5 	bl	8000538 <__aeabi_f2d>
 800196e:	a32e      	add	r3, pc, #184	; (adr r3, 8001a28 <calculate_h+0xd8>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fe38 	bl	80005e8 <__aeabi_dmul>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	4625      	mov	r5, r4
 800197e:	461c      	mov	r4, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fdd7 	bl	8000538 <__aeabi_f2d>
 800198a:	a329      	add	r3, pc, #164	; (adr r3, 8001a30 <calculate_h+0xe0>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fe2a 	bl	80005e8 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	ec43 2b17 	vmov	d7, r2, r3
 800199c:	eeb0 1a47 	vmov.f32	s2, s14
 80019a0:	eef0 1a67 	vmov.f32	s3, s15
 80019a4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001a20 <calculate_h+0xd0>
 80019a8:	f009 fc78 	bl	800b29c <pow>
 80019ac:	ec53 2b10 	vmov	r2, r3, d0
 80019b0:	4620      	mov	r0, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	f7fe fe18 	bl	80005e8 <__aeabi_dmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	460c      	mov	r4, r1
 80019bc:	4618      	mov	r0, r3
 80019be:	4621      	mov	r1, r4
 80019c0:	f7ff f8ea 	bl	8000b98 <__aeabi_d2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	60bb      	str	r3, [r7, #8]
	h = ac->temp_value + (0.55555 * (e - 10));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdb3 	bl	8000538 <__aeabi_f2d>
 80019d2:	4604      	mov	r4, r0
 80019d4:	460d      	mov	r5, r1
 80019d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019e2:	ee17 0a90 	vmov	r0, s15
 80019e6:	f7fe fda7 	bl	8000538 <__aeabi_f2d>
 80019ea:	a313      	add	r3, pc, #76	; (adr r3, 8001a38 <calculate_h+0xe8>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fdfa 	bl	80005e8 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc3e 	bl	800027c <__adddf3>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4618      	mov	r0, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f7ff f8c6 	bl	8000b98 <__aeabi_d2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60fb      	str	r3, [r7, #12]

	return h;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	ee07 3a90 	vmov	s15, r3
}
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40240000 	.word	0x40240000
 8001a28:	eb851eb8 	.word	0xeb851eb8
 8001a2c:	3faeb851 	.word	0x3faeb851
 8001a30:	eb851eb8 	.word	0xeb851eb8
 8001a34:	3f9eb851 	.word	0x3f9eb851
 8001a38:	cb295e9e 	.word	0xcb295e9e
 8001a3c:	3fe1c710 	.word	0x3fe1c710

08001a40 <temp_task>:

/*Read the temperature value from the sensor and split it in 2 integer (1 for integer part and 1 for fractional part).
 *Then the message is prepared and printed on serial. Float are not supported, so 2 integer are required*/
void temp_task(struct ambient_conditions *ac) {
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b091      	sub	sp, #68	; 0x44
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6078      	str	r0, [r7, #4]
	int int1 = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
	float frac = 0;
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
	int int2 = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	char msg[30] = "";
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]
 8001a6a:	615a      	str	r2, [r3, #20]
 8001a6c:	831a      	strh	r2, [r3, #24]

	for (;;) {
		temp_state = BLOCKED;
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <temp_task+0xe4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
		osSemaphoreAcquire(temp_sem, portMAX_DELAY);
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <temp_task+0xe8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f005 fe6f 	bl	8007760 <osSemaphoreAcquire>
		temp_state = RUNNING;
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <temp_task+0xe4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
		ac->temp_value = BSP_TSENSOR_ReadTemp();
 8001a88:	f000 ff58 	bl	800293c <BSP_TSENSOR_ReadTemp>
 8001a8c:	eef0 7a40 	vmov.f32	s15, s0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edc3 7a00 	vstr	s15, [r3]

		int1 = ac->temp_value;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa0:	ee17 3a90 	vmov	r3, s15
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
		frac = ac->temp_value - int1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	ed93 7a00 	vldr	s14, [r3]
 8001aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		int2 = trunc(frac * 100);
 8001abe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ac2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001b2c <temp_task+0xec>
 8001ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aca:	ee17 0a90 	vmov	r0, s15
 8001ace:	f7fe fd33 	bl	8000538 <__aeabi_f2d>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	ec44 3b10 	vmov	d0, r3, r4
 8001ada:	f009 fba5 	bl	800b228 <trunc>
 8001ade:	ec54 3b10 	vmov	r3, r4, d0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	f7ff f82f 	bl	8000b48 <__aeabi_d2iz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
		snprintf(msg, 30, "TEMPERATURE = %d.%02d %cC\r\n", int1, int2, '°');
 8001aee:	f107 000c 	add.w	r0, r7, #12
 8001af2:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <temp_task+0xf0>)
 8001b00:	211e      	movs	r1, #30
 8001b02:	f008 ff81 	bl	800aa08 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8001b06:	f107 010c 	add.w	r1, r7, #12
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	221e      	movs	r2, #30
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <temp_task+0xf4>)
 8001b12:	f004 fc13 	bl	800633c <HAL_UART_Transmit>
		osSemaphoreRelease(humid_sem);
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <temp_task+0xf8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f005 fe86 	bl	800782c <osSemaphoreRelease>
		temp_state = BLOCKED;
 8001b20:	e7a5      	b.n	8001a6e <temp_task+0x2e>
 8001b22:	bf00      	nop
 8001b24:	20002c44 	.word	0x20002c44
 8001b28:	20002b50 	.word	0x20002b50
 8001b2c:	42c80000 	.word	0x42c80000
 8001b30:	0800c410 	.word	0x0800c410
 8001b34:	20002bb8 	.word	0x20002bb8
 8001b38:	20002afc 	.word	0x20002afc

08001b3c <humid_task>:
	}
}

/*Read the humidity value from the sensor and split it in 2 integer (1 for integer part and 1 for fractional part).
 *Then the message is prepared and printed on serial. Float are not supported, so 2 integer are required*/
void humid_task(struct ambient_conditions *ac) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b091      	sub	sp, #68	; 0x44
 8001b40:	af02      	add	r7, sp, #8
 8001b42:	6078      	str	r0, [r7, #4]
	int int1 = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
	float frac = 0;
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
	int int2 = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
	char msg[30] = "";
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	f107 0310 	add.w	r3, r7, #16
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	831a      	strh	r2, [r3, #24]

	for (;;) {
		humid_state = BLOCKED;
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <humid_task+0xdc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
		osSemaphoreAcquire(humid_sem, portMAX_DELAY);
 8001b70:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <humid_task+0xe0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f005 fdf1 	bl	8007760 <osSemaphoreAcquire>
		humid_state = RUNNING;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <humid_task+0xdc>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
		ac->humid_value = BSP_HSENSOR_ReadHumidity();
 8001b84:	f000 feb0 	bl	80028e8 <BSP_HSENSOR_ReadHumidity>
 8001b88:	eef0 7a40 	vmov.f32	s15, s0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	edc3 7a01 	vstr	s15, [r3, #4]

		int1 = ac->humid_value;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9c:	ee17 3a90 	vmov	r3, s15
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
		frac = ac->humid_value - int1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		int2 = trunc(frac * 100);
 8001bba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001bbe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001c20 <humid_task+0xe4>
 8001bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc6:	ee17 0a90 	vmov	r0, s15
 8001bca:	f7fe fcb5 	bl	8000538 <__aeabi_f2d>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	ec44 3b10 	vmov	d0, r3, r4
 8001bd6:	f009 fb27 	bl	800b228 <trunc>
 8001bda:	ec54 3b10 	vmov	r3, r4, d0
 8001bde:	4618      	mov	r0, r3
 8001be0:	4621      	mov	r1, r4
 8001be2:	f7fe ffb1 	bl	8000b48 <__aeabi_d2iz>
 8001be6:	4603      	mov	r3, r0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
		snprintf(msg, 30, "HUMIDITY = %d.%02d %%\r\n", int1, int2);
 8001bea:	f107 000c 	add.w	r0, r7, #12
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <humid_task+0xe8>)
 8001bf6:	211e      	movs	r1, #30
 8001bf8:	f008 ff06 	bl	800aa08 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8001bfc:	f107 010c 	add.w	r1, r7, #12
 8001c00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c04:	221e      	movs	r2, #30
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <humid_task+0xec>)
 8001c08:	f004 fb98 	bl	800633c <HAL_UART_Transmit>
		osSemaphoreRelease(apparent_temp_sem);
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <humid_task+0xf0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f005 fe0b 	bl	800782c <osSemaphoreRelease>
		humid_state = BLOCKED;
 8001c16:	e7a8      	b.n	8001b6a <humid_task+0x2e>
 8001c18:	20002c40 	.word	0x20002c40
 8001c1c:	20002afc 	.word	0x20002afc
 8001c20:	42c80000 	.word	0x42c80000
 8001c24:	0800c42c 	.word	0x0800c42c
 8001c28:	20002bb8 	.word	0x20002bb8
 8001c2c:	20002c3c 	.word	0x20002c3c

08001c30 <apparent_temp_task>:
	}
}

/*Compute the apparent temperature based on real temperature and humidity using the Humidex method (can only be used if the temperature is >=20)
 *Print the current set temperature and periodically, wake up the safety thread*/
void apparent_temp_task(struct ambient_conditions *ac) {
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b0b2      	sub	sp, #200	; 0xc8
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	6078      	str	r0, [r7, #4]
	int counter = 600;
 8001c38:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int int1 = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float frac = 0;
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	int int2 = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	char msg1[80] = "";
 8001c54:	2300      	movs	r3, #0
 8001c56:	663b      	str	r3, [r7, #96]	; 0x60
 8001c58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c5c:	224c      	movs	r2, #76	; 0x4c
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f008 fec8 	bl	800a9f6 <memset>
	char msg2[40] = "";
 8001c66:	2300      	movs	r3, #0
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f008 febf 	bl	800a9f6 <memset>
	char line[] = "--------------------------------------\n\r";
 8001c78:	4b5f      	ldr	r3, [pc, #380]	; (8001df8 <apparent_temp_task+0x1c8>)
 8001c7a:	f107 040c 	add.w	r4, r7, #12
 8001c7e:	461d      	mov	r5, r3
 8001c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c8c:	c403      	stmia	r4!, {r0, r1}
 8001c8e:	7022      	strb	r2, [r4, #0]

	for (;;) {
		apparent_temp_state = BLOCKED;
 8001c90:	4b5a      	ldr	r3, [pc, #360]	; (8001dfc <apparent_temp_task+0x1cc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
		osSemaphoreAcquire(apparent_temp_sem, portMAX_DELAY);
 8001c96:	4b5a      	ldr	r3, [pc, #360]	; (8001e00 <apparent_temp_task+0x1d0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f005 fd5e 	bl	8007760 <osSemaphoreAcquire>
		apparent_temp_state = RUNNING;
 8001ca4:	4b55      	ldr	r3, [pc, #340]	; (8001dfc <apparent_temp_task+0x1cc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

		/*Calculate humidex if the temperature>=20 or else set a value of 0, meaning the apparent temperature has no meaning */
		if (ac->temp_value >= 20) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbc:	db08      	blt.n	8001cd0 <apparent_temp_task+0xa0>
			ac->humidex = calculate_h(ac);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fe46 	bl	8001950 <calculate_h>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edc3 7a02 	vstr	s15, [r3, #8]
 8001cce:	e003      	b.n	8001cd8 <apparent_temp_task+0xa8>
		} else {
			ac->humidex = 0;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
		}

		if (ac->humidex) {
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	d045      	beq.n	8001d74 <apparent_temp_task+0x144>
			int1 = ac->humidex;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf2:	ee17 3a90 	vmov	r3, s15
 8001cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			frac = ac->humidex - int1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d10:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
			int2 = trunc(frac * 100);
 8001d14:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001d18:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001e04 <apparent_temp_task+0x1d4>
 8001d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d20:	ee17 0a90 	vmov	r0, s15
 8001d24:	f7fe fc08 	bl	8000538 <__aeabi_f2d>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	460c      	mov	r4, r1
 8001d2c:	ec44 3b10 	vmov	d0, r3, r4
 8001d30:	f009 fa7a 	bl	800b228 <trunc>
 8001d34:	ec54 3b10 	vmov	r3, r4, d0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	f7fe ff04 	bl	8000b48 <__aeabi_d2iz>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			snprintf(msg1, 80, "APPARENT TEMPERATURE = %d.%02d %cC\r\n", int1,
 8001d46:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001d4a:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d5a:	4a2b      	ldr	r2, [pc, #172]	; (8001e08 <apparent_temp_task+0x1d8>)
 8001d5c:	2150      	movs	r1, #80	; 0x50
 8001d5e:	f008 fe53 	bl	800aa08 <sniprintf>
					int2, '°');
			HAL_UART_Transmit(&huart1, (uint8_t*) msg1, sizeof(msg1), 1000);
 8001d62:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	2250      	movs	r2, #80	; 0x50
 8001d6c:	4827      	ldr	r0, [pc, #156]	; (8001e0c <apparent_temp_task+0x1dc>)
 8001d6e:	f004 fae5 	bl	800633c <HAL_UART_Transmit>
 8001d72:	e010      	b.n	8001d96 <apparent_temp_task+0x166>
		} else {
			snprintf(msg1, 80,
 8001d74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <apparent_temp_task+0x1e0>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	234c      	movs	r3, #76	; 0x4c
 8001d80:	461a      	mov	r2, r3
 8001d82:	f008 fe2d 	bl	800a9e0 <memcpy>
					"THE TEMPERATURE IS TOO LOW IN ORDER TO CALCULATE THE APPARENT TEMPERATURE\r\n");
			HAL_UART_Transmit(&huart1, (uint8_t*) msg1, sizeof(msg1), 1000);
 8001d86:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d8e:	2250      	movs	r2, #80	; 0x50
 8001d90:	481e      	ldr	r0, [pc, #120]	; (8001e0c <apparent_temp_task+0x1dc>)
 8001d92:	f004 fad3 	bl	800633c <HAL_UART_Transmit>
		}
		snprintf(msg2, 40, "THE SET TEMPERATURE IS %d %cC\r\n",
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001d9e:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <apparent_temp_task+0x1e4>)
 8001da8:	2128      	movs	r1, #40	; 0x28
 8001daa:	f008 fe2d 	bl	800aa08 <sniprintf>
				ac->set_temperature, '°');
		HAL_UART_Transmit(&huart1, (uint8_t*) msg2, sizeof(msg2), 1000);
 8001dae:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	2228      	movs	r2, #40	; 0x28
 8001db8:	4814      	ldr	r0, [pc, #80]	; (8001e0c <apparent_temp_task+0x1dc>)
 8001dba:	f004 fabf 	bl	800633c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) line, sizeof(line), 1000);
 8001dbe:	f107 010c 	add.w	r1, r7, #12
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	2229      	movs	r2, #41	; 0x29
 8001dc8:	4810      	ldr	r0, [pc, #64]	; (8001e0c <apparent_temp_task+0x1dc>)
 8001dca:	f004 fab7 	bl	800633c <HAL_UART_Transmit>

		/*Wake up the safety thread every 20 minutes*/
		if (!counter) {
 8001dce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <apparent_temp_task+0x1ba>
			counter = 600;
 8001dd6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001dda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			osSemaphoreRelease(safety_sem);
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <apparent_temp_task+0x1e8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 fd22 	bl	800782c <osSemaphoreRelease>
 8001de8:	e752      	b.n	8001c90 <apparent_temp_task+0x60>
		} else {
			counter--;
 8001dea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		apparent_temp_state = BLOCKED;
 8001df4:	e74c      	b.n	8001c90 <apparent_temp_task+0x60>
 8001df6:	bf00      	nop
 8001df8:	0800c3e4 	.word	0x0800c3e4
 8001dfc:	20002660 	.word	0x20002660
 8001e00:	20002c3c 	.word	0x20002c3c
 8001e04:	42c80000 	.word	0x42c80000
 8001e08:	0800c444 	.word	0x0800c444
 8001e0c:	20002bb8 	.word	0x20002bb8
 8001e10:	0800c46c 	.word	0x0800c46c
 8001e14:	0800c4b8 	.word	0x0800c4b8
 8001e18:	20002c48 	.word	0x20002c48

08001e1c <safety_task>:
		}
	}
}

/*Check that the apparent temperature is not too high. If it is, lower the set temperature*/
void safety_task(struct ambient_conditions *ac) {
 8001e1c:	b5b0      	push	{r4, r5, r7, lr}
 8001e1e:	b0a2      	sub	sp, #136	; 0x88
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
	char msg[70] = "";
 8001e24:	2300      	movs	r3, #0
 8001e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e2c:	2242      	movs	r2, #66	; 0x42
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f008 fde0 	bl	800a9f6 <memset>
	char line[] = "--------------------------------------\n\r";
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <safety_task+0xa4>)
 8001e38:	f107 040c 	add.w	r4, r7, #12
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e4a:	c403      	stmia	r4!, {r0, r1}
 8001e4c:	7022      	strb	r2, [r4, #0]

	for (;;) {
		safety_state = BLOCKED;
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <safety_task+0xa8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
		osSemaphoreAcquire(safety_sem, portMAX_DELAY);
 8001e54:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <safety_task+0xac>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f005 fc7f 	bl	8007760 <osSemaphoreAcquire>
		safety_state = RUNNING;
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <safety_task+0xa8>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

		if (ac->humidex >= 35) {
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e6e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001ecc <safety_task+0xb0>
 8001e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7a:	db20      	blt.n	8001ebe <safety_task+0xa2>
			ac->set_temperature--;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60da      	str	r2, [r3, #12]
			snprintf(msg, 70,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e8e:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <safety_task+0xb4>)
 8001e98:	2146      	movs	r1, #70	; 0x46
 8001e9a:	f008 fdb5 	bl	800aa08 <sniprintf>
					"THE TEMPERATURE IS TOO HIGH! DECREASING TEMPERATURE TO %d %cC\r\n",
					ac->set_temperature, '°');
			HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8001e9e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	2246      	movs	r2, #70	; 0x46
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <safety_task+0xb8>)
 8001eaa:	f004 fa47 	bl	800633c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) line, sizeof(line), 1000);
 8001eae:	f107 010c 	add.w	r1, r7, #12
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	2229      	movs	r2, #41	; 0x29
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <safety_task+0xb8>)
 8001eba:	f004 fa3f 	bl	800633c <HAL_UART_Transmit>
		safety_state = BLOCKED;
 8001ebe:	e7c6      	b.n	8001e4e <safety_task+0x32>
 8001ec0:	0800c3e4 	.word	0x0800c3e4
 8001ec4:	2000016c 	.word	0x2000016c
 8001ec8:	20002c48 	.word	0x20002c48
 8001ecc:	420c0000 	.word	0x420c0000
 8001ed0:	0800c4d8 	.word	0x0800c4d8
 8001ed4:	20002bb8 	.word	0x20002bb8

08001ed8 <Callbacktimer>:
/* USER CODE END 4 */


/* Callbacktimer function. Periodically wake up the temperature thread */
void Callbacktimer(void *argument)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin );
 8001ee0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <Callbacktimer+0x24>)
 8001ee6:	f001 fbe5 	bl	80036b4 <HAL_GPIO_TogglePin>
	osSemaphoreRelease(temp_sem);
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <Callbacktimer+0x28>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f005 fc9c 	bl	800782c <osSemaphoreRelease>

  /* USER CODE END Callback01 */
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	48000400 	.word	0x48000400
 8001f00:	20002b50 	.word	0x20002b50

08001f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f16:	f000 fec9 	bl	8002cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40012c00 	.word	0x40012c00

08001f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6593      	str	r3, [r2, #88]	; 0x58
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_MspInit+0x4c>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	210f      	movs	r1, #15
 8001f72:	f06f 0001 	mvn.w	r0, #1
 8001f76:	f000 ff91 	bl	8002e9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d128      	bne.n	8001ffa <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	4a16      	ldr	r2, [pc, #88]	; (8002008 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc4:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001fd8:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001fea:	2306      	movs	r3, #6
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4805      	ldr	r0, [pc, #20]	; (800200c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001ff6:	f001 f891 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000170 	.word	0x20000170
 8002008:	40021000 	.word	0x40021000
 800200c:	48001000 	.word	0x48001000

08002010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_I2C_MspInit+0x7c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d128      	bne.n	8002084 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_I2C_MspInit+0x80>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a16      	ldr	r2, [pc, #88]	; (8002090 <HAL_I2C_MspInit+0x80>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_I2C_MspInit+0x80>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800204a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002050:	2312      	movs	r3, #18
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800205c:	2304      	movs	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	480b      	ldr	r0, [pc, #44]	; (8002094 <HAL_I2C_MspInit+0x84>)
 8002068:	f001 f858 	bl	800311c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_I2C_MspInit+0x80>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_I2C_MspInit+0x80>)
 8002072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002076:	6593      	str	r3, [r2, #88]	; 0x58
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_I2C_MspInit+0x80>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40005800 	.word	0x40005800
 8002090:	40021000 	.word	0x40021000
 8002094:	48000400 	.word	0x48000400

08002098 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_I2C_MspDeInit+0x30>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10a      	bne.n	80020c0 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_I2C_MspDeInit+0x34>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_I2C_MspDeInit+0x34>)
 80020b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020b4:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80020b6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <HAL_I2C_MspDeInit+0x38>)
 80020bc:	f001 f9d6 	bl	800346c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40005800 	.word	0x40005800
 80020cc:	40021000 	.word	0x40021000
 80020d0:	48000400 	.word	0x48000400

080020d4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_QSPI_MspInit+0x7c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d128      	bne.n	8002148 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_QSPI_MspInit+0x80>)
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <HAL_QSPI_MspInit+0x80>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6513      	str	r3, [r2, #80]	; 0x50
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_QSPI_MspInit+0x80>)
 8002104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_QSPI_MspInit+0x80>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	4a10      	ldr	r2, [pc, #64]	; (8002154 <HAL_QSPI_MspInit+0x80>)
 8002114:	f043 0310 	orr.w	r3, r3, #16
 8002118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_QSPI_MspInit+0x80>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8002126:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800212a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212c:	2302      	movs	r3, #2
 800212e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002138:	230a      	movs	r3, #10
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <HAL_QSPI_MspInit+0x84>)
 8002144:	f000 ffea 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	a0001000 	.word	0xa0001000
 8002154:	40021000 	.word	0x40021000
 8002158:	48001000 	.word	0x48001000

0800215c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_SPI_MspInit+0x7c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d128      	bne.n	80021d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_SPI_MspInit+0x80>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <HAL_SPI_MspInit+0x80>)
 8002184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_SPI_MspInit+0x80>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_SPI_MspInit+0x80>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <HAL_SPI_MspInit+0x80>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_SPI_MspInit+0x80>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80021ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021c0:	2306      	movs	r3, #6
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_SPI_MspInit+0x84>)
 80021cc:	f000 ffa6 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40003c00 	.word	0x40003c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	48000800 	.word	0x48000800

080021e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2e      	ldr	r2, [pc, #184]	; (80022bc <HAL_UART_MspInit+0xd8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d128      	bne.n	8002258 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6613      	str	r3, [r2, #96]	; 0x60
 8002212:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002236:	23c0      	movs	r3, #192	; 0xc0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002246:	2307      	movs	r3, #7
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	481c      	ldr	r0, [pc, #112]	; (80022c4 <HAL_UART_MspInit+0xe0>)
 8002252:	f000 ff63 	bl	800311c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002256:	e02d      	b.n	80022b4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <HAL_UART_MspInit+0xe4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d128      	bne.n	80022b4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_UART_MspInit+0xdc>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022a4:	2307      	movs	r3, #7
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4807      	ldr	r0, [pc, #28]	; (80022cc <HAL_UART_MspInit+0xe8>)
 80022b0:	f000 ff34 	bl	800311c <HAL_GPIO_Init>
}
 80022b4:	bf00      	nop
 80022b6:	3730      	adds	r7, #48	; 0x30
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40013800 	.word	0x40013800
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000400 	.word	0x48000400
 80022c8:	40004800 	.word	0x40004800
 80022cc:	48000c00 	.word	0x48000c00

080022d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f0:	d154      	bne.n	800239c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f6:	4a2b      	ldr	r2, [pc, #172]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800230a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002322:	f000 fefb 	bl	800311c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002326:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002338:	230a      	movs	r3, #10
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002346:	f000 fee9 	bl	800311c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 8002350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	6593      	str	r3, [r2, #88]	; 0x58
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002386:	f002 f923 	bl	80045d0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_PCD_MspInit+0xd4>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002396:	e001      	b.n	800239c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002398:	f002 f91a 	bl	80045d0 <HAL_PWREx_EnableVddUSB>
}
 800239c:	bf00      	nop
 800239e:	3728      	adds	r7, #40	; 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80023b8:	2200      	movs	r2, #0
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	2019      	movs	r0, #25
 80023be:	f000 fd6d 	bl	8002e9c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80023c2:	2019      	movs	r0, #25
 80023c4:	f000 fd86 	bl	8002ed4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_InitTick+0x9c>)
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <HAL_InitTick+0x9c>)
 80023ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023d2:	6613      	str	r3, [r2, #96]	; 0x60
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_InitTick+0x9c>)
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023e0:	f107 0210 	add.w	r2, r7, #16
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 ff1c 	bl	8005228 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80023f0:	f002 ff04 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 80023f4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	4a13      	ldr	r2, [pc, #76]	; (8002448 <HAL_InitTick+0xa0>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0c9b      	lsrs	r3, r3, #18
 8002400:	3b01      	subs	r3, #1
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_InitTick+0xa4>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_InitTick+0xa8>)
 8002408:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_InitTick+0xa4>)
 800240c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002410:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002412:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_InitTick+0xa4>)
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_InitTick+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_InitTick+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002424:	4809      	ldr	r0, [pc, #36]	; (800244c <HAL_InitTick+0xa4>)
 8002426:	f003 fcdb 	bl	8005de0 <HAL_TIM_Base_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d104      	bne.n	800243a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002430:	4806      	ldr	r0, [pc, #24]	; (800244c <HAL_InitTick+0xa4>)
 8002432:	f003 fd0b 	bl	8005e4c <HAL_TIM_Base_Start_IT>
 8002436:	4603      	mov	r3, r0
 8002438:	e000      	b.n	800243c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3730      	adds	r7, #48	; 0x30
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	431bde83 	.word	0x431bde83
 800244c:	20002c98 	.word	0x20002c98
 8002450:	40012c00 	.word	0x40012c00

08002454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800248c:	2020      	movs	r0, #32
 800248e:	f001 f92b 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002492:	2040      	movs	r0, #64	; 0x40
 8002494:	f001 f928 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002498:	2080      	movs	r0, #128	; 0x80
 800249a:	f001 f925 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800249e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024a2:	f001 f921 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80024b2:	f003 fcf5 	bl	8005ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20002c98 	.word	0x20002c98

080024c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80024c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80024c8:	f001 f90e 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024d0:	f001 f90a 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80024d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024d8:	f001 f906 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80024dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024e0:	f001 f902 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80024e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024e8:	f001 f8fe 	bl	80036e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <_sbrk+0x50>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <_sbrk+0x16>
		heap_end = &end;
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <_sbrk+0x50>)
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <_sbrk+0x54>)
 8002504:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <_sbrk+0x50>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <_sbrk+0x50>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	466a      	mov	r2, sp
 8002516:	4293      	cmp	r3, r2
 8002518:	d907      	bls.n	800252a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800251a:	f008 fa37 	bl	800a98c <__errno>
 800251e:	4602      	mov	r2, r0
 8002520:	230c      	movs	r3, #12
 8002522:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
 8002528:	e006      	b.n	8002538 <_sbrk+0x48>
	}

	heap_end += incr;
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <_sbrk+0x50>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	4a03      	ldr	r2, [pc, #12]	; (8002540 <_sbrk+0x50>)
 8002534:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002536:	68fb      	ldr	r3, [r7, #12]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000174 	.word	0x20000174
 8002544:	20002df0 	.word	0x20002df0

08002548 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <SystemInit+0x64>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	4a16      	ldr	r2, [pc, #88]	; (80025ac <SystemInit+0x64>)
 8002554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <SystemInit+0x68>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <SystemInit+0x68>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <SystemInit+0x68>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <SystemInit+0x68>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <SystemInit+0x68>)
 8002574:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002578:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800257c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <SystemInit+0x68>)
 8002580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002584:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <SystemInit+0x68>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <SystemInit+0x68>)
 800258c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002590:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002592:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <SystemInit+0x68>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <SystemInit+0x64>)
 800259a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800259e:	609a      	str	r2, [r3, #8]
#endif
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000ed00 	.word	0xe000ed00
 80025b0:	40021000 	.word	0x40021000

080025b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025ba:	e003      	b.n	80025c4 <LoopCopyDataInit>

080025bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025c2:	3104      	adds	r1, #4

080025c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80025c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025cc:	d3f6      	bcc.n	80025bc <CopyDataInit>
	ldr	r2, =_sbss
 80025ce:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80025d0:	e002      	b.n	80025d8 <LoopFillZerobss>

080025d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025d4:	f842 3b04 	str.w	r3, [r2], #4

080025d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <LoopForever+0x16>)
	cmp	r2, r3
 80025da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025dc:	d3f9      	bcc.n	80025d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025de:	f7ff ffb3 	bl	8002548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025e2:	f008 f9d9 	bl	800a998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025e6:	f7fe fca7 	bl	8000f38 <main>

080025ea <LoopForever>:

LoopForever:
    b LoopForever
 80025ea:	e7fe      	b.n	80025ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80025f0:	0800c680 	.word	0x0800c680
	ldr	r0, =_sdata
 80025f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025f8:	20000150 	.word	0x20000150
	ldr	r2, =_sbss
 80025fc:	20000150 	.word	0x20000150
	ldr	r3, = _ebss
 8002600:	20002dec 	.word	0x20002dec

08002604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002604:	e7fe      	b.n	8002604 <ADC1_2_IRQHandler>
	...

08002608 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <I2Cx_MspInit+0xa8>)
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <I2Cx_MspInit+0xa8>)
 8002616:	f043 0302 	orr.w	r3, r3, #2
 800261a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261c:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <I2Cx_MspInit+0xa8>)
 800261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002628:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800262c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800262e:	2312      	movs	r3, #18
 8002630:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002632:	2301      	movs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800263a:	2304      	movs	r3, #4
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	481b      	ldr	r0, [pc, #108]	; (80026b4 <I2Cx_MspInit+0xac>)
 8002646:	f000 fd69 	bl	800311c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	4818      	ldr	r0, [pc, #96]	; (80026b4 <I2Cx_MspInit+0xac>)
 8002652:	f000 fd63 	bl	800311c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <I2Cx_MspInit+0xa8>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <I2Cx_MspInit+0xa8>)
 800265c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <I2Cx_MspInit+0xa8>)
 8002664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <I2Cx_MspInit+0xa8>)
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <I2Cx_MspInit+0xa8>)
 8002674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002678:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <I2Cx_MspInit+0xa8>)
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <I2Cx_MspInit+0xa8>)
 8002680:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002684:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	210f      	movs	r1, #15
 800268a:	2021      	movs	r0, #33	; 0x21
 800268c:	f000 fc06 	bl	8002e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002690:	2021      	movs	r0, #33	; 0x21
 8002692:	f000 fc1f 	bl	8002ed4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	210f      	movs	r1, #15
 800269a:	2022      	movs	r0, #34	; 0x22
 800269c:	f000 fbfe 	bl	8002e9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80026a0:	2022      	movs	r0, #34	; 0x22
 80026a2:	f000 fc17 	bl	8002ed4 <HAL_NVIC_EnableIRQ>
}
 80026a6:	bf00      	nop
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	48000400 	.word	0x48000400

080026b8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <I2Cx_Init+0x54>)
 80026c4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a11      	ldr	r2, [pc, #68]	; (8002710 <I2Cx_Init+0x58>)
 80026ca:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff89 	bl	8002608 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f001 f80e 	bl	8003718 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80026fc:	2100      	movs	r1, #0
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f001 fd12 	bl	8004128 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40005800 	.word	0x40005800
 8002710:	00702681 	.word	0x00702681

08002714 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	; 0x28
 8002718:	af04      	add	r7, sp, #16
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	72fb      	strb	r3, [r7, #11]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	b299      	uxth	r1, r3
 8002736:	88f8      	ldrh	r0, [r7, #6]
 8002738:	893a      	ldrh	r2, [r7, #8]
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	4603      	mov	r3, r0
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 f9b6 	bl	8003abc <HAL_I2C_Mem_Read>
 8002750:	4603      	mov	r3, r0
 8002752:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	4619      	mov	r1, r3
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f832 	bl	80027c8 <I2Cx_Error>
  }
  return status;
 8002764:	7dfb      	ldrb	r3, [r7, #23]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b08a      	sub	sp, #40	; 0x28
 8002772:	af04      	add	r7, sp, #16
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	4608      	mov	r0, r1
 8002778:	4611      	mov	r1, r2
 800277a:	461a      	mov	r2, r3
 800277c:	4603      	mov	r3, r0
 800277e:	72fb      	strb	r3, [r7, #11]
 8002780:	460b      	mov	r3, r1
 8002782:	813b      	strh	r3, [r7, #8]
 8002784:	4613      	mov	r3, r2
 8002786:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800278c:	7afb      	ldrb	r3, [r7, #11]
 800278e:	b299      	uxth	r1, r3
 8002790:	88f8      	ldrh	r0, [r7, #6]
 8002792:	893a      	ldrh	r2, [r7, #8]
 8002794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	4603      	mov	r3, r0
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f001 f875 	bl	8003894 <HAL_I2C_Mem_Write>
 80027aa:	4603      	mov	r3, r0
 80027ac:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80027b4:	7afb      	ldrb	r3, [r7, #11]
 80027b6:	4619      	mov	r1, r3
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f805 	bl	80027c8 <I2Cx_Error>
  }
  return status;
 80027be:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f001 f82e 	bl	8003836 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ff6c 	bl	80026b8 <I2Cx_Init>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <SENSOR_IO_Init+0x10>)
 80027ee:	f7ff ff63 	bl	80026b8 <I2Cx_Init>
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20002d58 	.word	0x20002d58

080027fc <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af02      	add	r7, sp, #8
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
 8002806:	460b      	mov	r3, r1
 8002808:	71bb      	strb	r3, [r7, #6]
 800280a:	4613      	mov	r3, r2
 800280c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	b29a      	uxth	r2, r3
 8002812:	79f9      	ldrb	r1, [r7, #7]
 8002814:	2301      	movs	r3, #1
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	1d7b      	adds	r3, r7, #5
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2301      	movs	r3, #1
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <SENSOR_IO_Write+0x30>)
 8002820:	f7ff ffa5 	bl	800276e <I2Cx_WriteMultiple>
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20002d58 	.word	0x20002d58

08002830 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af02      	add	r7, sp, #8
 8002836:	4603      	mov	r3, r0
 8002838:	460a      	mov	r2, r1
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	4613      	mov	r3, r2
 800283e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002844:	79bb      	ldrb	r3, [r7, #6]
 8002846:	b29a      	uxth	r2, r3
 8002848:	79f9      	ldrb	r1, [r7, #7]
 800284a:	2301      	movs	r3, #1
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	f107 030f 	add.w	r3, r7, #15
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2301      	movs	r3, #1
 8002856:	4804      	ldr	r0, [pc, #16]	; (8002868 <SENSOR_IO_Read+0x38>)
 8002858:	f7ff ff5c 	bl	8002714 <I2Cx_ReadMultiple>

  return read_value;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20002d58 	.word	0x20002d58

0800286c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af02      	add	r7, sp, #8
 8002872:	603a      	str	r2, [r7, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
 800287a:	460b      	mov	r3, r1
 800287c:	71bb      	strb	r3, [r7, #6]
 800287e:	4613      	mov	r3, r2
 8002880:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002882:	79bb      	ldrb	r3, [r7, #6]
 8002884:	b29a      	uxth	r2, r3
 8002886:	79f9      	ldrb	r1, [r7, #7]
 8002888:	88bb      	ldrh	r3, [r7, #4]
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2301      	movs	r3, #1
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <SENSOR_IO_ReadMultiple+0x38>)
 8002894:	f7ff ff3e 	bl	8002714 <I2Cx_ReadMultiple>
 8002898:	4603      	mov	r3, r0
 800289a:	b29b      	uxth	r3, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20002d58 	.word	0x20002d58

080028a8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <BSP_HSENSOR_Init+0x38>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	20be      	movs	r0, #190	; 0xbe
 80028b4:	4798      	blx	r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	2bbc      	cmp	r3, #188	; 0xbc
 80028ba:	d002      	beq.n	80028c2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	e009      	b.n	80028d6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <BSP_HSENSOR_Init+0x3c>)
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <BSP_HSENSOR_Init+0x38>)
 80028c6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <BSP_HSENSOR_Init+0x3c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	20be      	movs	r0, #190	; 0xbe
 80028d0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80028d6:	687b      	ldr	r3, [r7, #4]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200000c0 	.word	0x200000c0
 80028e4:	20000178 	.word	0x20000178

080028e8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <BSP_HSENSOR_ReadHumidity+0x18>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	20be      	movs	r0, #190	; 0xbe
 80028f4:	4798      	blx	r3
 80028f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80028fa:	eeb0 0a67 	vmov.f32	s0, s15
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000178 	.word	0x20000178

08002904 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <BSP_TSENSOR_Init+0x30>)
 8002910:	4a09      	ldr	r2, [pc, #36]	; (8002938 <BSP_TSENSOR_Init+0x34>)
 8002912:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002914:	f7ff ff68 	bl	80027e8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <BSP_TSENSOR_Init+0x30>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2100      	movs	r1, #0
 8002920:	20be      	movs	r0, #190	; 0xbe
 8002922:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002928:	79fb      	ldrb	r3, [r7, #7]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000017c 	.word	0x2000017c
 8002938:	200000cc 	.word	0x200000cc

0800293c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <BSP_TSENSOR_ReadTemp+0x18>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	20be      	movs	r0, #190	; 0xbe
 8002948:	4798      	blx	r3
 800294a:	eef0 7a40 	vmov.f32	s15, s0
}
 800294e:	eeb0 0a67 	vmov.f32	s0, s15
 8002952:	bd80      	pop	{r7, pc}
 8002954:	2000017c 	.word	0x2000017c

08002958 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2120      	movs	r1, #32
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff61 	bl	8002830 <SENSOR_IO_Read>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	f023 0303 	bic.w	r3, r3, #3
 8002988:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002998:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	2120      	movs	r1, #32
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff2a 	bl	80027fc <SENSOR_IO_Write>
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80029be:	f7ff ff13 	bl	80027e8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	210f      	movs	r1, #15
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff31 	bl	8002830 <SENSOR_IO_Read>
 80029ce:	4603      	mov	r3, r0
 80029d0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	b2d8      	uxtb	r0, r3
 80029ea:	f107 020c 	add.w	r2, r7, #12
 80029ee:	2302      	movs	r3, #2
 80029f0:	21b0      	movs	r1, #176	; 0xb0
 80029f2:	f7ff ff3b 	bl	800286c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80029f6:	7b3b      	ldrb	r3, [r7, #12]
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80029fe:	7b7b      	ldrb	r3, [r7, #13]
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	b2d8      	uxtb	r0, r3
 8002a0a:	f107 020c 	add.w	r2, r7, #12
 8002a0e:	2302      	movs	r3, #2
 8002a10:	21b6      	movs	r1, #182	; 0xb6
 8002a12:	f7ff ff2b 	bl	800286c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a16:	7b7b      	ldrb	r3, [r7, #13]
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	b2d8      	uxtb	r0, r3
 8002a28:	f107 020c 	add.w	r2, r7, #12
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	21ba      	movs	r1, #186	; 0xba
 8002a30:	f7ff ff1c 	bl	800286c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a34:	7b7b      	ldrb	r3, [r7, #13]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	b21a      	sxth	r2, r3
 8002a3a:	7b3b      	ldrb	r3, [r7, #12]
 8002a3c:	b21b      	sxth	r3, r3
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	b2d8      	uxtb	r0, r3
 8002a46:	f107 020c 	add.w	r2, r7, #12
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	21a8      	movs	r1, #168	; 0xa8
 8002a4e:	f7ff ff0d 	bl	800286c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a52:	7b7b      	ldrb	r3, [r7, #13]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	7b3b      	ldrb	r3, [r7, #12]
 8002a5a:	b21b      	sxth	r3, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002a60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a64:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a72:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002a76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a88:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002a8c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a9e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aae:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002ab2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ab6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abe:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002ac2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ac6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b0c <HTS221_H_ReadHumidity+0x130>
 8002aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	dd01      	ble.n	8002ad8 <HTS221_H_ReadHumidity+0xfc>
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HTS221_H_ReadHumidity+0x134>)
 8002ad6:	e00a      	b.n	8002aee <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002ad8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae4:	d502      	bpl.n	8002aec <HTS221_H_ReadHumidity+0x110>
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e000      	b.n	8002aee <HTS221_H_ReadHumidity+0x112>
 8002aec:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002aee:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002af0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002af4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002af8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002afc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b00:	eeb0 0a67 	vmov.f32	s0, s15
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	447a0000 	.word	0x447a0000
 8002b10:	447a0000 	.word	0x447a0000

08002b14 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2120      	movs	r1, #32
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fe82 	bl	8002830 <SENSOR_IO_Read>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b56:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002b58:	88fb      	ldrh	r3, [r7, #6]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	2120      	movs	r1, #32
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe4b 	bl	80027fc <SENSOR_IO_Write>
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b088      	sub	sp, #32
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	b2d8      	uxtb	r0, r3
 8002b7c:	f107 0208 	add.w	r2, r7, #8
 8002b80:	2302      	movs	r3, #2
 8002b82:	21b2      	movs	r1, #178	; 0xb2
 8002b84:	f7ff fe72 	bl	800286c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2135      	movs	r1, #53	; 0x35
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fe4e 	bl	8002830 <SENSOR_IO_Read>
 8002b94:	4603      	mov	r3, r0
 8002b96:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002b98:	7ffb      	ldrb	r3, [r7, #31]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	b21a      	sxth	r2, r3
 8002ba4:	7a3b      	ldrb	r3, [r7, #8]
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
 8002bae:	019b      	lsls	r3, r3, #6
 8002bb0:	b21b      	sxth	r3, r3
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	7a7b      	ldrb	r3, [r7, #9]
 8002bba:	b21b      	sxth	r3, r3
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002bc0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002bc4:	10db      	asrs	r3, r3, #3
 8002bc6:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002bc8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bcc:	10db      	asrs	r3, r3, #3
 8002bce:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	b2d8      	uxtb	r0, r3
 8002bd4:	f107 0208 	add.w	r2, r7, #8
 8002bd8:	2304      	movs	r3, #4
 8002bda:	21bc      	movs	r1, #188	; 0xbc
 8002bdc:	f7ff fe46 	bl	800286c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002be0:	7a7b      	ldrb	r3, [r7, #9]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	b21a      	sxth	r2, r3
 8002be6:	7a3b      	ldrb	r3, [r7, #8]
 8002be8:	b21b      	sxth	r3, r3
 8002bea:	4313      	orrs	r3, r2
 8002bec:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	7abb      	ldrb	r3, [r7, #10]
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	b2d8      	uxtb	r0, r3
 8002c00:	f107 0208 	add.w	r2, r7, #8
 8002c04:	2302      	movs	r3, #2
 8002c06:	21aa      	movs	r1, #170	; 0xaa
 8002c08:	f7ff fe30 	bl	800286c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c0c:	7a7b      	ldrb	r3, [r7, #9]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	b21a      	sxth	r2, r3
 8002c12:	7a3b      	ldrb	r3, [r7, #8]
 8002c14:	b21b      	sxth	r3, r3
 8002c16:	4313      	orrs	r3, r2
 8002c18:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002c1a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c30:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c42:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c58:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c68:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	ee07 3a90 	vmov	s15, r3
}
 8002c72:	eeb0 0a67 	vmov.f32	s0, s15
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c86:	2003      	movs	r0, #3
 8002c88:	f000 f8fd 	bl	8002e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff fb8b 	bl	80023a8 <HAL_InitTick>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	71fb      	strb	r3, [r7, #7]
 8002c9c:	e001      	b.n	8002ca2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c9e:	f7ff f94b 	bl	8001f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_IncTick+0x1c>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <HAL_IncTick+0x20>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a03      	ldr	r2, [pc, #12]	; (8002cc8 <HAL_IncTick+0x1c>)
 8002cbc:	6013      	str	r3, [r2, #0]
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	20002da4 	.word	0x20002da4
 8002ccc:	200000e0 	.word	0x200000e0

08002cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <HAL_GetTick+0x14>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20002da4 	.word	0x20002da4

08002ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf0:	f7ff ffee 	bl	8002cd0 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d004      	beq.n	8002d0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_Delay+0x40>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4413      	add	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d0c:	bf00      	nop
 8002d0e:	f7ff ffdf 	bl	8002cd0 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d8f7      	bhi.n	8002d0e <HAL_Delay+0x26>
  {
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200000e0 	.word	0x200000e0

08002d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	; (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ff4c 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eae:	f7ff ff61 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002eb2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	6978      	ldr	r0, [r7, #20]
 8002eba:	f7ff ffb1 	bl	8002e20 <NVIC_EncodePriority>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff80 	bl	8002dcc <__NVIC_SetPriority>
}
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff54 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0ac      	b.n	800305c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 f8b2 	bl	8003070 <DFSDM_GetChannelFromInstance>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	4b55      	ldr	r3, [pc, #340]	; (8003064 <HAL_DFSDM_ChannelInit+0x174>)
 8002f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e09f      	b.n	800305c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff f833 	bl	8001f88 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002f22:	4b51      	ldr	r3, [pc, #324]	; (8003068 <HAL_DFSDM_ChannelInit+0x178>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <HAL_DFSDM_ChannelInit+0x178>)
 8002f2a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002f2c:	4b4e      	ldr	r3, [pc, #312]	; (8003068 <HAL_DFSDM_ChannelInit+0x178>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d125      	bne.n	8002f80 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002f34:	4b4d      	ldr	r3, [pc, #308]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a4c      	ldr	r2, [pc, #304]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f3e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002f40:	4b4a      	ldr	r3, [pc, #296]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4948      	ldr	r1, [pc, #288]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002f4e:	4b47      	ldr	r3, [pc, #284]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a46      	ldr	r2, [pc, #280]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f54:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002f58:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	791b      	ldrb	r3, [r3, #4]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d108      	bne.n	8002f74 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002f62:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	493f      	ldr	r1, [pc, #252]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002f74:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a3c      	ldr	r2, [pc, #240]	; (800306c <HAL_DFSDM_ChannelInit+0x17c>)
 8002f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f7e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002f8e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f9e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002fa4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 020f 	bic.w	r2, r2, #15
 8002fbc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002fe4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f002 0207 	and.w	r2, r2, #7
 8003010:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800303c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f810 	bl	8003070 <DFSDM_GetChannelFromInstance>
 8003050:	4601      	mov	r1, r0
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <HAL_DFSDM_ChannelInit+0x174>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000184 	.word	0x20000184
 8003068:	20000180 	.word	0x20000180
 800306c:	40016000 	.word	0x40016000

08003070 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a20      	ldr	r2, [pc, #128]	; (80030fc <DFSDM_GetChannelFromInstance+0x8c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d102      	bne.n	8003086 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e032      	b.n	80030ec <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <DFSDM_GetChannelFromInstance+0x90>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d102      	bne.n	8003094 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800308e:	2301      	movs	r3, #1
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	e02b      	b.n	80030ec <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <DFSDM_GetChannelFromInstance+0x94>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800309c:	2302      	movs	r3, #2
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e024      	b.n	80030ec <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <DFSDM_GetChannelFromInstance+0x98>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80030aa:	2303      	movs	r3, #3
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e01d      	b.n	80030ec <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <DFSDM_GetChannelFromInstance+0x9c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d102      	bne.n	80030be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80030b8:	2304      	movs	r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e016      	b.n	80030ec <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <DFSDM_GetChannelFromInstance+0xa0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d102      	bne.n	80030cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80030c6:	2305      	movs	r3, #5
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e00f      	b.n	80030ec <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <DFSDM_GetChannelFromInstance+0xa4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d102      	bne.n	80030da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80030d4:	2306      	movs	r3, #6
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e008      	b.n	80030ec <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a0e      	ldr	r2, [pc, #56]	; (8003118 <DFSDM_GetChannelFromInstance+0xa8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d102      	bne.n	80030e8 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 80030e2:	2307      	movs	r3, #7
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e001      	b.n	80030ec <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80030ec:	68fb      	ldr	r3, [r7, #12]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40016000 	.word	0x40016000
 8003100:	40016020 	.word	0x40016020
 8003104:	40016040 	.word	0x40016040
 8003108:	40016060 	.word	0x40016060
 800310c:	40016080 	.word	0x40016080
 8003110:	400160a0 	.word	0x400160a0
 8003114:	400160c0 	.word	0x400160c0
 8003118:	400160e0 	.word	0x400160e0

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312a:	e17f      	b.n	800342c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8171 	beq.w	8003426 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x38>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b12      	cmp	r3, #18
 8003152:	d123      	bne.n	800319c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	220f      	movs	r2, #15
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	08da      	lsrs	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3208      	adds	r2, #8
 8003196:	6939      	ldr	r1, [r7, #16]
 8003198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0203 	and.w	r2, r3, #3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d00b      	beq.n	80031f0 <HAL_GPIO_Init+0xd4>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d007      	beq.n	80031f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e4:	2b11      	cmp	r3, #17
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b12      	cmp	r3, #18
 80031ee:	d130      	bne.n	8003252 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	2203      	movs	r2, #3
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003226:	2201      	movs	r2, #1
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 0201 	and.w	r2, r3, #1
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b03      	cmp	r3, #3
 800325c:	d118      	bne.n	8003290 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003264:	2201      	movs	r2, #1
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	08db      	lsrs	r3, r3, #3
 800327a:	f003 0201 	and.w	r2, r3, #1
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4013      	ands	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 80ac 	beq.w	8003426 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ce:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	4a5d      	ldr	r2, [pc, #372]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6613      	str	r3, [r2, #96]	; 0x60
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <HAL_GPIO_Init+0x32c>)
 80032dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032e6:	4a59      	ldr	r2, [pc, #356]	; (800344c <HAL_GPIO_Init+0x330>)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3302      	adds	r3, #2
 80032ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	220f      	movs	r2, #15
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003310:	d025      	beq.n	800335e <HAL_GPIO_Init+0x242>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4e      	ldr	r2, [pc, #312]	; (8003450 <HAL_GPIO_Init+0x334>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01f      	beq.n	800335a <HAL_GPIO_Init+0x23e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4d      	ldr	r2, [pc, #308]	; (8003454 <HAL_GPIO_Init+0x338>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d019      	beq.n	8003356 <HAL_GPIO_Init+0x23a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4c      	ldr	r2, [pc, #304]	; (8003458 <HAL_GPIO_Init+0x33c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <HAL_GPIO_Init+0x236>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4b      	ldr	r2, [pc, #300]	; (800345c <HAL_GPIO_Init+0x340>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00d      	beq.n	800334e <HAL_GPIO_Init+0x232>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <HAL_GPIO_Init+0x344>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <HAL_GPIO_Init+0x22e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a49      	ldr	r2, [pc, #292]	; (8003464 <HAL_GPIO_Init+0x348>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d101      	bne.n	8003346 <HAL_GPIO_Init+0x22a>
 8003342:	2306      	movs	r3, #6
 8003344:	e00c      	b.n	8003360 <HAL_GPIO_Init+0x244>
 8003346:	2307      	movs	r3, #7
 8003348:	e00a      	b.n	8003360 <HAL_GPIO_Init+0x244>
 800334a:	2305      	movs	r3, #5
 800334c:	e008      	b.n	8003360 <HAL_GPIO_Init+0x244>
 800334e:	2304      	movs	r3, #4
 8003350:	e006      	b.n	8003360 <HAL_GPIO_Init+0x244>
 8003352:	2303      	movs	r3, #3
 8003354:	e004      	b.n	8003360 <HAL_GPIO_Init+0x244>
 8003356:	2302      	movs	r3, #2
 8003358:	e002      	b.n	8003360 <HAL_GPIO_Init+0x244>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_GPIO_Init+0x244>
 800335e:	2300      	movs	r3, #0
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	f002 0203 	and.w	r2, r2, #3
 8003366:	0092      	lsls	r2, r2, #2
 8003368:	4093      	lsls	r3, r2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003370:	4936      	ldr	r1, [pc, #216]	; (800344c <HAL_GPIO_Init+0x330>)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800337e:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_GPIO_Init+0x34c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033a2:	4a31      	ldr	r2, [pc, #196]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033a8:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d2:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_GPIO_Init+0x34c>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	43db      	mvns	r3, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_GPIO_Init+0x34c>)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	3301      	adds	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	f47f ae78 	bne.w	800312c <HAL_GPIO_Init+0x10>
  }
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40021000 	.word	0x40021000
 800344c:	40010000 	.word	0x40010000
 8003450:	48000400 	.word	0x48000400
 8003454:	48000800 	.word	0x48000800
 8003458:	48000c00 	.word	0x48000c00
 800345c:	48001000 	.word	0x48001000
 8003460:	48001400 	.word	0x48001400
 8003464:	48001800 	.word	0x48001800
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800347a:	e0cd      	b.n	8003618 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800347c:	2201      	movs	r2, #1
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80c0 	beq.w	8003612 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003492:	4a68      	ldr	r2, [pc, #416]	; (8003634 <HAL_GPIO_DeInit+0x1c8>)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034ba:	d025      	beq.n	8003508 <HAL_GPIO_DeInit+0x9c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a5e      	ldr	r2, [pc, #376]	; (8003638 <HAL_GPIO_DeInit+0x1cc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d01f      	beq.n	8003504 <HAL_GPIO_DeInit+0x98>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_GPIO_DeInit+0x1d0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d019      	beq.n	8003500 <HAL_GPIO_DeInit+0x94>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a5c      	ldr	r2, [pc, #368]	; (8003640 <HAL_GPIO_DeInit+0x1d4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d013      	beq.n	80034fc <HAL_GPIO_DeInit+0x90>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a5b      	ldr	r2, [pc, #364]	; (8003644 <HAL_GPIO_DeInit+0x1d8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00d      	beq.n	80034f8 <HAL_GPIO_DeInit+0x8c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a5a      	ldr	r2, [pc, #360]	; (8003648 <HAL_GPIO_DeInit+0x1dc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <HAL_GPIO_DeInit+0x88>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a59      	ldr	r2, [pc, #356]	; (800364c <HAL_GPIO_DeInit+0x1e0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_GPIO_DeInit+0x84>
 80034ec:	2306      	movs	r3, #6
 80034ee:	e00c      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 80034f0:	2307      	movs	r3, #7
 80034f2:	e00a      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 80034f4:	2305      	movs	r3, #5
 80034f6:	e008      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e006      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 80034fc:	2303      	movs	r3, #3
 80034fe:	e004      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 8003500:	2302      	movs	r3, #2
 8003502:	e002      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_GPIO_DeInit+0x9e>
 8003508:	2300      	movs	r3, #0
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	f002 0203 	and.w	r2, r2, #3
 8003510:	0092      	lsls	r2, r2, #2
 8003512:	4093      	lsls	r3, r2
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	429a      	cmp	r2, r3
 8003518:	d132      	bne.n	8003580 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	494b      	ldr	r1, [pc, #300]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003524:	4013      	ands	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003528:	4b49      	ldr	r3, [pc, #292]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	4947      	ldr	r1, [pc, #284]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003532:	4013      	ands	r3, r2
 8003534:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003536:	4b46      	ldr	r3, [pc, #280]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	4944      	ldr	r1, [pc, #272]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003540:	4013      	ands	r3, r2
 8003542:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003544:	4b42      	ldr	r3, [pc, #264]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	4940      	ldr	r1, [pc, #256]	; (8003650 <HAL_GPIO_DeInit+0x1e4>)
 800354e:	4013      	ands	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	220f      	movs	r2, #15
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003562:	4a34      	ldr	r2, [pc, #208]	; (8003634 <HAL_GPIO_DeInit+0x1c8>)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	43da      	mvns	r2, r3
 8003572:	4830      	ldr	r0, [pc, #192]	; (8003634 <HAL_GPIO_DeInit+0x1c8>)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	400a      	ands	r2, r1
 800357a:	3302      	adds	r3, #2
 800357c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2103      	movs	r1, #3
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	08da      	lsrs	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3208      	adds	r2, #8
 800359c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	220f      	movs	r2, #15
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	08d2      	lsrs	r2, r2, #3
 80035b4:	4019      	ands	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3208      	adds	r2, #8
 80035ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2103      	movs	r1, #3
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	401a      	ands	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	2101      	movs	r1, #1
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	401a      	ands	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2103      	movs	r1, #3
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	401a      	ands	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	2101      	movs	r1, #1
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	3301      	adds	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f af2b 	bne.w	800347c <HAL_GPIO_DeInit+0x10>
  }
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	48000400 	.word	0x48000400
 800363c:	48000800 	.word	0x48000800
 8003640:	48000c00 	.word	0x48000c00
 8003644:	48001000 	.word	0x48001000
 8003648:	48001400 	.word	0x48001400
 800364c:	48001800 	.word	0x48001800
 8003650:	40010400 	.word	0x40010400

08003654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	887b      	ldrh	r3, [r7, #2]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
 8003670:	e001      	b.n	8003676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036cc:	887a      	ldrh	r2, [r7, #2]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80036d2:	e002      	b.n	80036da <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036d4:	887a      	ldrh	r2, [r7, #2]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d006      	beq.n	800370c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe f892 	bl	8001830 <HAL_GPIO_EXTI_Callback>
  }
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40010400 	.word	0x40010400

08003718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e081      	b.n	800382e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fc66 	bl	8002010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003768:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003778:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	e006      	b.n	80037a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800379e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d104      	bne.n	80037b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	ea42 0103 	orr.w	r1, r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69d9      	ldr	r1, [r3, #28]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e021      	b.n	800388c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fe fc19 	bl	8002098 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	4608      	mov	r0, r1
 800389e:	4611      	mov	r1, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	817b      	strh	r3, [r7, #10]
 80038a6:	460b      	mov	r3, r1
 80038a8:	813b      	strh	r3, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	f040 80f9 	bne.w	8003aae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_I2C_Mem_Write+0x34>
 80038c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0ed      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_I2C_Mem_Write+0x4e>
 80038de:	2302      	movs	r3, #2
 80038e0:	e0e6      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x21c>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038ea:	f7ff f9f1 	bl	8002cd0 <HAL_GetTick>
 80038ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2319      	movs	r3, #25
 80038f6:	2201      	movs	r2, #1
 80038f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fac3 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0d1      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2221      	movs	r2, #33	; 0x21
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2240      	movs	r2, #64	; 0x40
 8003918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a3a      	ldr	r2, [r7, #32]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003934:	88f8      	ldrh	r0, [r7, #6]
 8003936:	893a      	ldrh	r2, [r7, #8]
 8003938:	8979      	ldrh	r1, [r7, #10]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	4603      	mov	r3, r0
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f9d3 	bl	8003cf0 <I2C_RequestMemoryWrite>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0a9      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2bff      	cmp	r3, #255	; 0xff
 8003964:	d90e      	bls.n	8003984 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	b2da      	uxtb	r2, r3
 8003972:	8979      	ldrh	r1, [r7, #10]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fba5 	bl	80040cc <I2C_TransferConfig>
 8003982:	e00f      	b.n	80039a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	b2da      	uxtb	r2, r3
 8003994:	8979      	ldrh	r1, [r7, #10]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fb94 	bl	80040cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faad 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e07b      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d034      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x1c8>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d130      	bne.n	8003a5c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2200      	movs	r2, #0
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fa3f 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e04d      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2bff      	cmp	r3, #255	; 0xff
 8003a1c:	d90e      	bls.n	8003a3c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	22ff      	movs	r2, #255	; 0xff
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	8979      	ldrh	r1, [r7, #10]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fb49 	bl	80040cc <I2C_TransferConfig>
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	8979      	ldrh	r1, [r7, #10]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fb38 	bl	80040cc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d19e      	bne.n	80039a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fa8c 	bl	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e01a      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <HAL_I2C_Mem_Write+0x224>)
 8003a8e:	400b      	ands	r3, r1
 8003a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	fe00e800 	.word	0xfe00e800

08003abc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	f040 80fd 	bne.w	8003cde <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_I2C_Mem_Read+0x34>
 8003aea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0f1      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x4e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e0ea      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x224>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b12:	f7ff f8dd 	bl	8002cd0 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	2319      	movs	r3, #25
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f9af 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0d5      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2222      	movs	r2, #34	; 0x22
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b5c:	88f8      	ldrh	r0, [r7, #6]
 8003b5e:	893a      	ldrh	r2, [r7, #8]
 8003b60:	8979      	ldrh	r1, [r7, #10]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f913 	bl	8003d98 <I2C_RequestMemoryRead>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0ad      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2bff      	cmp	r3, #255	; 0xff
 8003b8c:	d90e      	bls.n	8003bac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	22ff      	movs	r2, #255	; 0xff
 8003b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	8979      	ldrh	r1, [r7, #10]
 8003b9c:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <HAL_I2C_Mem_Read+0x22c>)
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fa91 	bl	80040cc <I2C_TransferConfig>
 8003baa:	e00f      	b.n	8003bcc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	8979      	ldrh	r1, [r7, #10]
 8003bbe:	4b4a      	ldr	r3, [pc, #296]	; (8003ce8 <HAL_I2C_Mem_Read+0x22c>)
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa80 	bl	80040cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2104      	movs	r1, #4
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f956 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07c      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d034      	beq.n	8003c8c <HAL_I2C_Mem_Read+0x1d0>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d130      	bne.n	8003c8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	2200      	movs	r2, #0
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f927 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e04d      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2bff      	cmp	r3, #255	; 0xff
 8003c4c:	d90e      	bls.n	8003c6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	22ff      	movs	r2, #255	; 0xff
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fa31 	bl	80040cc <I2C_TransferConfig>
 8003c6a:	e00f      	b.n	8003c8c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	8979      	ldrh	r1, [r7, #10]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fa20 	bl	80040cc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d19a      	bne.n	8003bcc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f974 	bl	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e01a      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_I2C_Mem_Read+0x230>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e000      	b.n	8003ce0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	80002400 	.word	0x80002400
 8003cec:	fe00e800 	.word	0xfe00e800

08003cf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	8979      	ldrh	r1, [r7, #10]
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <I2C_RequestMemoryWrite+0xa4>)
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f9d7 	bl	80040cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	69b9      	ldr	r1, [r7, #24]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f8f0 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e02c      	b.n	8003d8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d105      	bne.n	8003d44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d38:	893b      	ldrh	r3, [r7, #8]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
 8003d42:	e015      	b.n	8003d70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d44:	893b      	ldrh	r3, [r7, #8]
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	69b9      	ldr	r1, [r7, #24]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f8d6 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e012      	b.n	8003d8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d66:	893b      	ldrh	r3, [r7, #8]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2200      	movs	r2, #0
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f884 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	80002000 	.word	0x80002000

08003d98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	4608      	mov	r0, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	461a      	mov	r2, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]
 8003daa:	460b      	mov	r3, r1
 8003dac:	813b      	strh	r3, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	b2da      	uxtb	r2, r3
 8003db6:	8979      	ldrh	r1, [r7, #10]
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <I2C_RequestMemoryRead+0xa4>)
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f984 	bl	80040cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	69b9      	ldr	r1, [r7, #24]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f89d 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e02c      	b.n	8003e32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d105      	bne.n	8003dea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
 8003de8:	e015      	b.n	8003e16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dea:	893b      	ldrh	r3, [r7, #8]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	69b9      	ldr	r1, [r7, #24]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f883 	bl	8003f08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e012      	b.n	8003e32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e0c:	893b      	ldrh	r3, [r7, #8]
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2140      	movs	r1, #64	; 0x40
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f831 	bl	8003e88 <I2C_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	80002000 	.word	0x80002000

08003e40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d103      	bne.n	8003e5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d007      	beq.n	8003e7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	619a      	str	r2, [r3, #24]
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e98:	e022      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d01e      	beq.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea2:	f7fe ff15 	bl	8002cd0 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d113      	bne.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e00f      	b.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d0cd      	beq.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f14:	e02c      	b.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f870 	bl	8004000 <I2C_IsAcknowledgeFailed>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e02a      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d01e      	beq.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fe fecd 	bl	8002cd0 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d113      	bne.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e007      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d1cb      	bne.n	8003f16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f94:	e028      	b.n	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f830 	bl	8004000 <I2C_IsAcknowledgeFailed>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e026      	b.n	8003ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fe fe91 	bl	8002cd0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d113      	bne.n	8003fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e007      	b.n	8003ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d1cf      	bne.n	8003f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b10      	cmp	r3, #16
 8004018:	d151      	bne.n	80040be <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800401a:	e022      	b.n	8004062 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d01e      	beq.n	8004062 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004024:	f7fe fe54 	bl	8002cd0 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <I2C_IsAcknowledgeFailed+0x3a>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d113      	bne.n	8004062 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e02e      	b.n	80040c0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b20      	cmp	r3, #32
 800406e:	d1d5      	bne.n	800401c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2210      	movs	r2, #16
 8004076:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2220      	movs	r2, #32
 800407e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff fedd 	bl	8003e40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004092:	400b      	ands	r3, r1
 8004094:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f043 0204 	orr.w	r2, r3, #4
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	fe00e800 	.word	0xfe00e800

080040cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	817b      	strh	r3, [r7, #10]
 80040da:	4613      	mov	r3, r2
 80040dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	0d5b      	lsrs	r3, r3, #21
 80040e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <I2C_TransferConfig+0x58>)
 80040ee:	430b      	orrs	r3, r1
 80040f0:	43db      	mvns	r3, r3
 80040f2:	ea02 0103 	and.w	r1, r2, r3
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040fc:	7a7b      	ldrb	r3, [r7, #9]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	431a      	orrs	r2, r3
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	03ff63ff 	.word	0x03ff63ff

08004128 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d138      	bne.n	80041b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004148:	2302      	movs	r3, #2
 800414a:	e032      	b.n	80041b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800417a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6819      	ldr	r1, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d139      	bne.n	8004248 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041de:	2302      	movs	r3, #2
 80041e0:	e033      	b.n	800424a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2224      	movs	r2, #36	; 0x24
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004210:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	e000      	b.n	800424a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004248:	2302      	movs	r3, #2
  }
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004258:	b08f      	sub	sp, #60	; 0x3c
 800425a:	af0a      	add	r7, sp, #40	; 0x28
 800425c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e116      	b.n	8004496 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fe f824 	bl	80022d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2203      	movs	r2, #3
 800428c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f002 fda5 	bl	8006df6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	687e      	ldr	r6, [r7, #4]
 80042b4:	466d      	mov	r5, sp
 80042b6:	f106 0410 	add.w	r4, r6, #16
 80042ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ca:	1d33      	adds	r3, r6, #4
 80042cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ce:	6838      	ldr	r0, [r7, #0]
 80042d0:	f002 fd3f 	bl	8006d52 <USB_CoreInit>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0d7      	b.n	8004496 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 fd93 	bl	8006e18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
 80042f6:	e04a      	b.n	800438e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042f8:	7bfa      	ldrb	r2, [r7, #15]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	333d      	adds	r3, #61	; 0x3d
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	333c      	adds	r3, #60	; 0x3c
 800431c:	7bfa      	ldrb	r2, [r7, #15]
 800431e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004320:	7bfa      	ldrb	r2, [r7, #15]
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	b298      	uxth	r0, r3
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3342      	adds	r3, #66	; 0x42
 8004334:	4602      	mov	r2, r0
 8004336:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	333f      	adds	r3, #63	; 0x3f
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	3344      	adds	r3, #68	; 0x44
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	3348      	adds	r3, #72	; 0x48
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	3350      	adds	r3, #80	; 0x50
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	3301      	adds	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	d3af      	bcc.n	80042f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]
 800439c:	e044      	b.n	8004428 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043f6:	7bfa      	ldrb	r2, [r7, #15]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	3301      	adds	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	7bfa      	ldrb	r2, [r7, #15]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d3b5      	bcc.n	800439e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	687e      	ldr	r6, [r7, #4]
 800443a:	466d      	mov	r5, sp
 800443c:	f106 0410 	add.w	r4, r6, #16
 8004440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004448:	e894 0003 	ldmia.w	r4, {r0, r1}
 800444c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004450:	1d33      	adds	r3, r6, #4
 8004452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004454:	6838      	ldr	r0, [r7, #0]
 8004456:	f002 fd09 	bl	8006e6c <USB_DevInit>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e014      	b.n	8004496 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2b01      	cmp	r3, #1
 8004482:	d102      	bne.n	800448a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f80a 	bl	800449e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f002 fe8f 	bl	80071b2 <USB_DevDisconnect>

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800449e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	f043 0303 	orr.w	r3, r3, #3
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f6:	6013      	str	r3, [r2, #0]
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40007000 	.word	0x40007000

08004508 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <HAL_PWREx_GetVoltageRange+0x18>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40007000 	.word	0x40007000

08004524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004532:	d130      	bne.n	8004596 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004534:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800453c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004540:	d038      	beq.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800454a:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800454c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004550:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2232      	movs	r2, #50	; 0x32
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0c9b      	lsrs	r3, r3, #18
 8004564:	3301      	adds	r3, #1
 8004566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004568:	e002      	b.n	8004570 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b01      	subs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457c:	d102      	bne.n	8004584 <HAL_PWREx_ControlVoltageScaling+0x60>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f2      	bne.n	800456a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	d110      	bne.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e00f      	b.n	80045b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800459e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a2:	d007      	beq.n	80045b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80045a4:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045ac:	4a05      	ldr	r2, [pc, #20]	; (80045c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40007000 	.word	0x40007000
 80045c8:	200000bc 	.word	0x200000bc
 80045cc:	431bde83 	.word	0x431bde83

080045d0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a04      	ldr	r2, [pc, #16]	; (80045ec <HAL_PWREx_EnableVddUSB+0x1c>)
 80045da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045de:	6053      	str	r3, [r2, #4]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40007000 	.word	0x40007000

080045f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80045f8:	f7fe fb6a 	bl	8002cd0 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e06f      	b.n	80046e8 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_QSPI_Init+0x28>
 8004614:	2302      	movs	r3, #2
 8004616:	e067      	b.n	80046e8 <HAL_QSPI_Init+0xf8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fd fd4d 	bl	80020d4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800463a:	f241 3188 	movw	r1, #5000	; 0x1388
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f858 	bl	80046f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	021a      	lsls	r2, r3, #8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	2120      	movs	r1, #32
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f850 	bl	8004710 <QSPI_WaitFlagStateUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004674:	7afb      	ldrb	r3, [r7, #11]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d131      	bne.n	80046de <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004684:	f023 0310 	bic.w	r3, r3, #16
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6852      	ldr	r2, [r2, #4]
 800468c:	0611      	lsls	r1, r2, #24
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68d2      	ldr	r2, [r2, #12]
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	430b      	orrs	r3, r1
 800469a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_QSPI_Init+0x100>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6912      	ldr	r2, [r2, #16]
 80046aa:	0411      	lsls	r1, r2, #16
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6952      	ldr	r2, [r2, #20]
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6992      	ldr	r2, [r2, #24]
 80046b6:	4311      	orrs	r1, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	430b      	orrs	r3, r1
 80046be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80046e6:	7afb      	ldrb	r3, [r7, #11]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	ffe0f8fe 	.word	0xffe0f8fe

080046f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004720:	e01a      	b.n	8004758 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d016      	beq.n	8004758 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fe fad1 	bl	8002cd0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10b      	bne.n	8004758 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2204      	movs	r2, #4
 8004744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	f043 0201 	orr.w	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e00e      	b.n	8004776 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	429a      	cmp	r2, r3
 8004772:	d1d6      	bne.n	8004722 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e39d      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004792:	4ba4      	ldr	r3, [pc, #656]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800479c:	4ba1      	ldr	r3, [pc, #644]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80e1 	beq.w	8004976 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_RCC_OscConfig+0x4a>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	f040 8088 	bne.w	80048d2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 8084 	bne.w	80048d2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047ca:	4b96      	ldr	r3, [pc, #600]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_RCC_OscConfig+0x62>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e375      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	4b8f      	ldr	r3, [pc, #572]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <HAL_RCC_OscConfig+0x7c>
 80047f2:	4b8c      	ldr	r3, [pc, #560]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fa:	e005      	b.n	8004808 <HAL_RCC_OscConfig+0x88>
 80047fc:	4b89      	ldr	r3, [pc, #548]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004808:	4293      	cmp	r3, r2
 800480a:	d223      	bcs.n	8004854 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd3b 	bl	800528c <RCC_SetFlashLatencyFromMSIRange>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e356      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004820:	4b80      	ldr	r3, [pc, #512]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a7f      	ldr	r2, [pc, #508]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004826:	f043 0308 	orr.w	r3, r3, #8
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b7d      	ldr	r3, [pc, #500]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	497a      	ldr	r1, [pc, #488]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483e:	4b79      	ldr	r3, [pc, #484]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	4975      	ldr	r1, [pc, #468]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
 8004852:	e022      	b.n	800489a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004854:	4b73      	ldr	r3, [pc, #460]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a72      	ldr	r2, [pc, #456]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800485a:	f043 0308 	orr.w	r3, r3, #8
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b70      	ldr	r3, [pc, #448]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	496d      	ldr	r1, [pc, #436]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004872:	4b6c      	ldr	r3, [pc, #432]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	4968      	ldr	r1, [pc, #416]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fcfe 	bl	800528c <RCC_SetFlashLatencyFromMSIRange>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e319      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489a:	f000 fc03 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800489e:	4601      	mov	r1, r0
 80048a0:	4b60      	ldr	r3, [pc, #384]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	4a5f      	ldr	r2, [pc, #380]	; (8004a28 <HAL_RCC_OscConfig+0x2a8>)
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	fa21 f303 	lsr.w	r3, r1, r3
 80048b6:	4a5d      	ldr	r2, [pc, #372]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048ba:	4b5d      	ldr	r3, [pc, #372]	; (8004a30 <HAL_RCC_OscConfig+0x2b0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd fd72 	bl	80023a8 <HAL_InitTick>
 80048c4:	4603      	mov	r3, r0
 80048c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d052      	beq.n	8004974 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	e2fd      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d032      	beq.n	8004940 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048da:	4b52      	ldr	r3, [pc, #328]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a51      	ldr	r2, [pc, #324]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e6:	f7fe f9f3 	bl	8002cd0 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ee:	f7fe f9ef 	bl	8002cd0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e2e6      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004900:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490c:	4b45      	ldr	r3, [pc, #276]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a44      	ldr	r2, [pc, #272]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004912:	f043 0308 	orr.w	r3, r3, #8
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	4b42      	ldr	r3, [pc, #264]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	493f      	ldr	r1, [pc, #252]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492a:	4b3e      	ldr	r3, [pc, #248]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	493a      	ldr	r1, [pc, #232]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]
 800493e:	e01a      	b.n	8004976 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004940:	4b38      	ldr	r3, [pc, #224]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a37      	ldr	r2, [pc, #220]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494c:	f7fe f9c0 	bl	8002cd0 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004954:	f7fe f9bc 	bl	8002cd0 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e2b3      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004966:	4b2f      	ldr	r3, [pc, #188]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x1d4>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004974:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d074      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d005      	beq.n	8004994 <HAL_RCC_OscConfig+0x214>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d10e      	bne.n	80049ac <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d10b      	bne.n	80049ac <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	4b23      	ldr	r3, [pc, #140]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d064      	beq.n	8004a6a <HAL_RCC_OscConfig+0x2ea>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d160      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e290      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_OscConfig+0x244>
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e01d      	b.n	8004a00 <HAL_RCC_OscConfig+0x280>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x268>
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a14      	ldr	r2, [pc, #80]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a11      	ldr	r2, [pc, #68]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e00b      	b.n	8004a00 <HAL_RCC_OscConfig+0x280>
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <HAL_RCC_OscConfig+0x2a4>)
 80049fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01c      	beq.n	8004a42 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a08:	f7fe f962 	bl	8002cd0 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0e:	e011      	b.n	8004a34 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a10:	f7fe f95e 	bl	8002cd0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d90a      	bls.n	8004a34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e255      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	0800c5ac 	.word	0x0800c5ac
 8004a2c:	200000bc 	.word	0x200000bc
 8004a30:	200000dc 	.word	0x200000dc
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a34:	4bae      	ldr	r3, [pc, #696]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0e7      	beq.n	8004a10 <HAL_RCC_OscConfig+0x290>
 8004a40:	e014      	b.n	8004a6c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fe f945 	bl	8002cd0 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4a:	f7fe f941 	bl	8002cd0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b64      	cmp	r3, #100	; 0x64
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e238      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5c:	4ba4      	ldr	r3, [pc, #656]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x2ca>
 8004a68:	e000      	b.n	8004a6c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d060      	beq.n	8004b3a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d005      	beq.n	8004a8a <HAL_RCC_OscConfig+0x30a>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d119      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d116      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8a:	4b99      	ldr	r3, [pc, #612]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d005      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x322>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e215      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa2:	4b93      	ldr	r3, [pc, #588]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	498f      	ldr	r1, [pc, #572]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab6:	e040      	b.n	8004b3a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d023      	beq.n	8004b08 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac0:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a8a      	ldr	r2, [pc, #552]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fe f900 	bl	8002cd0 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad4:	f7fe f8fc 	bl	8002cd0 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e1f3      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae6:	4b82      	ldr	r3, [pc, #520]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af2:	4b7f      	ldr	r3, [pc, #508]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	497b      	ldr	r1, [pc, #492]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
 8004b06:	e018      	b.n	8004b3a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b08:	4b79      	ldr	r3, [pc, #484]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a78      	ldr	r2, [pc, #480]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fe f8dc 	bl	8002cd0 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1c:	f7fe f8d8 	bl	8002cd0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1cf      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b2e:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d03c      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4e:	4b68      	ldr	r3, [pc, #416]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b54:	4a66      	ldr	r2, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5e:	f7fe f8b7 	bl	8002cd0 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b66:	f7fe f8b3 	bl	8002cd0 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1aa      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b78:	4b5d      	ldr	r3, [pc, #372]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ef      	beq.n	8004b66 <HAL_RCC_OscConfig+0x3e6>
 8004b86:	e01b      	b.n	8004bc0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b88:	4b59      	ldr	r3, [pc, #356]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8e:	4a58      	ldr	r2, [pc, #352]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fe f89a 	bl	8002cd0 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba0:	f7fe f896 	bl	8002cd0 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e18d      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb2:	4b4f      	ldr	r3, [pc, #316]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ef      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80a5 	beq.w	8004d18 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10d      	bne.n	8004bfa <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bde:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	4a43      	ldr	r2, [pc, #268]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6593      	str	r3, [r2, #88]	; 0x58
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	; (8004cf4 <HAL_RCC_OscConfig+0x574>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d118      	bne.n	8004c38 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c06:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_OscConfig+0x574>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a3a      	ldr	r2, [pc, #232]	; (8004cf4 <HAL_RCC_OscConfig+0x574>)
 8004c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c12:	f7fe f85d 	bl	8002cd0 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1a:	f7fe f859 	bl	8002cd0 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e150      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2c:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <HAL_RCC_OscConfig+0x574>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d108      	bne.n	8004c52 <HAL_RCC_OscConfig+0x4d2>
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c50:	e024      	b.n	8004c9c <HAL_RCC_OscConfig+0x51c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d110      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4fc>
 8004c5a:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	4a23      	ldr	r2, [pc, #140]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c6a:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7a:	e00f      	b.n	8004c9c <HAL_RCC_OscConfig+0x51c>
 8004c7c:	4b1c      	ldr	r3, [pc, #112]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c8c:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004c94:	f023 0304 	bic.w	r3, r3, #4
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d016      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca4:	f7fe f814 	bl	8002cd0 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cac:	f7fe f810 	bl	8002cd0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e105      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x570>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ed      	beq.n	8004cac <HAL_RCC_OscConfig+0x52c>
 8004cd0:	e019      	b.n	8004d06 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd2:	f7fd fffd 	bl	8002cd0 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd8:	e00e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fd fff9 	bl	8002cd0 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d905      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e0ee      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf8:	4b77      	ldr	r3, [pc, #476]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e9      	bne.n	8004cda <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0c:	4b72      	ldr	r3, [pc, #456]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	4a71      	ldr	r2, [pc, #452]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80d5 	beq.w	8004ecc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	f000 808e 	beq.w	8004e46 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d15b      	bne.n	8004dea <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d32:	4b69      	ldr	r3, [pc, #420]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a68      	ldr	r2, [pc, #416]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fd ffc7 	bl	8002cd0 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d46:	f7fd ffc3 	bl	8002cd0 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e0ba      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d58:	4b5f      	ldr	r3, [pc, #380]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f0      	bne.n	8004d46 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d64:	4b5c      	ldr	r3, [pc, #368]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	4b5c      	ldr	r3, [pc, #368]	; (8004edc <HAL_RCC_OscConfig+0x75c>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d74:	3a01      	subs	r2, #1
 8004d76:	0112      	lsls	r2, r2, #4
 8004d78:	4311      	orrs	r1, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d7e:	0212      	lsls	r2, r2, #8
 8004d80:	4311      	orrs	r1, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d86:	0852      	lsrs	r2, r2, #1
 8004d88:	3a01      	subs	r2, #1
 8004d8a:	0552      	lsls	r2, r2, #21
 8004d8c:	4311      	orrs	r1, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d92:	0852      	lsrs	r2, r2, #1
 8004d94:	3a01      	subs	r2, #1
 8004d96:	0652      	lsls	r2, r2, #25
 8004d98:	4311      	orrs	r1, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d9e:	0912      	lsrs	r2, r2, #4
 8004da0:	0452      	lsls	r2, r2, #17
 8004da2:	430a      	orrs	r2, r1
 8004da4:	494c      	ldr	r1, [pc, #304]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004daa:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a4a      	ldr	r2, [pc, #296]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004db6:	4b48      	ldr	r3, [pc, #288]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a47      	ldr	r2, [pc, #284]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fd ff85 	bl	8002cd0 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fd ff81 	bl	8002cd0 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e078      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ddc:	4b3e      	ldr	r3, [pc, #248]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x64a>
 8004de8:	e070      	b.n	8004ecc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dea:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a3a      	ldr	r2, [pc, #232]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004df4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004df6:	4b38      	ldr	r3, [pc, #224]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d105      	bne.n	8004e0e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e02:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4a34      	ldr	r2, [pc, #208]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004e08:	f023 0303 	bic.w	r3, r3, #3
 8004e0c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e0e:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	4a31      	ldr	r2, [pc, #196]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004e14:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fd ff57 	bl	8002cd0 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fd ff53 	bl	8002cd0 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e04a      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e38:	4b27      	ldr	r3, [pc, #156]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <HAL_RCC_OscConfig+0x6a6>
 8004e44:	e042      	b.n	8004ecc <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e03d      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004e52:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <HAL_RCC_OscConfig+0x758>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0203 	and.w	r2, r3, #3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d130      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	3b01      	subs	r3, #1
 8004e72:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d127      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d11f      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e92:	2a07      	cmp	r2, #7
 8004e94:	bf14      	ite	ne
 8004e96:	2201      	movne	r2, #1
 8004e98:	2200      	moveq	r2, #0
 8004e9a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d113      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	3b01      	subs	r3, #1
 8004eae:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d109      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40021000 	.word	0x40021000
 8004edc:	f99d808c 	.word	0xf99d808c

08004ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0c8      	b.n	8005086 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b66      	ldr	r3, [pc, #408]	; (8005090 <HAL_RCC_ClockConfig+0x1b0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d910      	bls.n	8004f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b63      	ldr	r3, [pc, #396]	; (8005090 <HAL_RCC_ClockConfig+0x1b0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 0207 	bic.w	r2, r3, #7
 8004f0a:	4961      	ldr	r1, [pc, #388]	; (8005090 <HAL_RCC_ClockConfig+0x1b0>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b5f      	ldr	r3, [pc, #380]	; (8005090 <HAL_RCC_ClockConfig+0x1b0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0b0      	b.n	8005086 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d04c      	beq.n	8004fca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f38:	4b56      	ldr	r3, [pc, #344]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d121      	bne.n	8004f88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e09e      	b.n	8005086 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f50:	4b50      	ldr	r3, [pc, #320]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d115      	bne.n	8004f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e092      	b.n	8005086 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f68:	4b4a      	ldr	r3, [pc, #296]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d109      	bne.n	8004f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e086      	b.n	8005086 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f78:	4b46      	ldr	r3, [pc, #280]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e07e      	b.n	8005086 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f88:	4b42      	ldr	r3, [pc, #264]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f023 0203 	bic.w	r2, r3, #3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	493f      	ldr	r1, [pc, #252]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fd fe99 	bl	8002cd0 <HAL_GetTick>
 8004f9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa2:	f7fd fe95 	bl	8002cd0 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e066      	b.n	8005086 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb8:	4b36      	ldr	r3, [pc, #216]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 020c 	and.w	r2, r3, #12
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d1eb      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd6:	4b2f      	ldr	r3, [pc, #188]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	492c      	ldr	r1, [pc, #176]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b29      	ldr	r3, [pc, #164]	; (8005090 <HAL_RCC_ClockConfig+0x1b0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d210      	bcs.n	8005018 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b26      	ldr	r3, [pc, #152]	; (8005090 <HAL_RCC_ClockConfig+0x1b0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 0207 	bic.w	r2, r3, #7
 8004ffe:	4924      	ldr	r1, [pc, #144]	; (8005090 <HAL_RCC_ClockConfig+0x1b0>)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_ClockConfig+0x1b0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e036      	b.n	8005086 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4918      	ldr	r1, [pc, #96]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005042:	4b14      	ldr	r3, [pc, #80]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	4910      	ldr	r1, [pc, #64]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005056:	f000 f825 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800505a:	4601      	mov	r1, r0
 800505c:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <HAL_RCC_ClockConfig+0x1b4>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	5cd3      	ldrb	r3, [r2, r3]
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	fa21 f303 	lsr.w	r3, r1, r3
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <HAL_RCC_ClockConfig+0x1c0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd f994 	bl	80023a8 <HAL_InitTick>
 8005080:	4603      	mov	r3, r0
 8005082:	72fb      	strb	r3, [r7, #11]

  return status;
 8005084:	7afb      	ldrb	r3, [r7, #11]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40022000 	.word	0x40022000
 8005094:	40021000 	.word	0x40021000
 8005098:	0800c5ac 	.word	0x0800c5ac
 800509c:	200000bc 	.word	0x200000bc
 80050a0:	200000dc 	.word	0x200000dc

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b089      	sub	sp, #36	; 0x24
 80050a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050b2:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050bc:	4b3a      	ldr	r3, [pc, #232]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x34>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d121      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d11e      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050d8:	4b33      	ldr	r3, [pc, #204]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050e4:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80050e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e005      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050f4:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005100:	4a2a      	ldr	r2, [pc, #168]	; (80051ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10d      	bne.n	800512c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005114:	e00a      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b04      	cmp	r3, #4
 800511a:	d102      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800511c:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800511e:	61bb      	str	r3, [r7, #24]
 8005120:	e004      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d101      	bne.n	800512c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005128:	4b22      	ldr	r3, [pc, #136]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800512a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d133      	bne.n	800519a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005132:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d002      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0xa4>
 8005142:	2b03      	cmp	r3, #3
 8005144:	d003      	beq.n	800514e <HAL_RCC_GetSysClockFreq+0xaa>
 8005146:	e005      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800514a:	617b      	str	r3, [r7, #20]
      break;
 800514c:	e005      	b.n	800515a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800514e:	4b19      	ldr	r3, [pc, #100]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005150:	617b      	str	r3, [r7, #20]
      break;
 8005152:	e002      	b.n	800515a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	617b      	str	r3, [r7, #20]
      break;
 8005158:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800515a:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	3301      	adds	r3, #1
 8005166:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	fb02 f203 	mul.w	r2, r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	0e5b      	lsrs	r3, r3, #25
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800519a:	69bb      	ldr	r3, [r7, #24]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3724      	adds	r7, #36	; 0x24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40021000 	.word	0x40021000
 80051ac:	0800c5c4 	.word	0x0800c5c4
 80051b0:	00f42400 	.word	0x00f42400
 80051b4:	007a1200 	.word	0x007a1200

080051b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051bc:	4b03      	ldr	r3, [pc, #12]	; (80051cc <HAL_RCC_GetHCLKFreq+0x14>)
 80051be:	681b      	ldr	r3, [r3, #0]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	200000bc 	.word	0x200000bc

080051d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051d4:	f7ff fff0 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80051d8:	4601      	mov	r1, r0
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051e6:	5cd3      	ldrb	r3, [r2, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000
 80051f8:	0800c5bc 	.word	0x0800c5bc

080051fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005200:	f7ff ffda 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8005204:	4601      	mov	r1, r0
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	0adb      	lsrs	r3, r3, #11
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4a04      	ldr	r2, [pc, #16]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005212:	5cd3      	ldrb	r3, [r2, r3]
 8005214:	f003 031f 	and.w	r3, r3, #31
 8005218:	fa21 f303 	lsr.w	r3, r1, r3
}
 800521c:	4618      	mov	r0, r3
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000
 8005224:	0800c5bc 	.word	0x0800c5bc

08005228 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	220f      	movs	r2, #15
 8005236:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005238:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0203 	and.w	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005250:	4b0c      	ldr	r3, [pc, #48]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800525c:	4b09      	ldr	r3, [pc, #36]	; (8005284 <HAL_RCC_GetClockConfig+0x5c>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800526a:	4b07      	ldr	r3, [pc, #28]	; (8005288 <HAL_RCC_GetClockConfig+0x60>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0207 	and.w	r2, r3, #7
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	601a      	str	r2, [r3, #0]
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40021000 	.word	0x40021000
 8005288:	40022000 	.word	0x40022000

0800528c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005298:	4b2a      	ldr	r3, [pc, #168]	; (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052a4:	f7ff f930 	bl	8004508 <HAL_PWREx_GetVoltageRange>
 80052a8:	6178      	str	r0, [r7, #20]
 80052aa:	e014      	b.n	80052d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052ac:	4b25      	ldr	r3, [pc, #148]	; (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	4a24      	ldr	r2, [pc, #144]	; (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b6:	6593      	str	r3, [r2, #88]	; 0x58
 80052b8:	4b22      	ldr	r3, [pc, #136]	; (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80052c4:	f7ff f920 	bl	8004508 <HAL_PWREx_GetVoltageRange>
 80052c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80052ca:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80052d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052dc:	d10b      	bne.n	80052f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b80      	cmp	r3, #128	; 0x80
 80052e2:	d919      	bls.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2ba0      	cmp	r3, #160	; 0xa0
 80052e8:	d902      	bls.n	80052f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052ea:	2302      	movs	r3, #2
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	e013      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052f0:	2301      	movs	r3, #1
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	e010      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b80      	cmp	r3, #128	; 0x80
 80052fa:	d902      	bls.n	8005302 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052fc:	2303      	movs	r3, #3
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	e00a      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b80      	cmp	r3, #128	; 0x80
 8005306:	d102      	bne.n	800530e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005308:	2302      	movs	r3, #2
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e004      	b.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b70      	cmp	r3, #112	; 0x70
 8005312:	d101      	bne.n	8005318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005314:	2301      	movs	r3, #1
 8005316:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f023 0207 	bic.w	r2, r3, #7
 8005320:	4909      	ldr	r1, [pc, #36]	; (8005348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005328:	4b07      	ldr	r3, [pc, #28]	; (8005348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	d001      	beq.n	800533a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40021000 	.word	0x40021000
 8005348:	40022000 	.word	0x40022000

0800534c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005354:	2300      	movs	r3, #0
 8005356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005358:	2300      	movs	r3, #0
 800535a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005364:	2b00      	cmp	r3, #0
 8005366:	d03f      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005370:	d01c      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005376:	d802      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00e      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800537c:	e01f      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x72>
 800537e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005382:	d003      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005384:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005388:	d01c      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800538a:	e018      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800538c:	4b85      	ldr	r3, [pc, #532]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4a84      	ldr	r2, [pc, #528]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005396:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005398:	e015      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fac9 	bl	8005938 <RCCEx_PLLSAI1_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053aa:	e00c      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3320      	adds	r3, #32
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fbb0 	bl	8005b18 <RCCEx_PLLSAI2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80053bc:	e003      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	74fb      	strb	r3, [r7, #19]
      break;
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80053c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053cc:	4b75      	ldr	r3, [pc, #468]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053da:	4972      	ldr	r1, [pc, #456]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053e2:	e001      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d03f      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053fc:	d01c      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80053fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005402:	d802      	bhi.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00e      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005408:	e01f      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800540a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800540e:	d003      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005410:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005414:	d01c      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005416:	e018      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005418:	4b62      	ldr	r3, [pc, #392]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4a61      	ldr	r2, [pc, #388]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800541e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005422:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005424:	e015      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fa83 	bl	8005938 <RCCEx_PLLSAI1_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005436:	e00c      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3320      	adds	r3, #32
 800543c:	2100      	movs	r1, #0
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fb6a 	bl	8005b18 <RCCEx_PLLSAI2_Config>
 8005444:	4603      	mov	r3, r0
 8005446:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005448:	e003      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	74fb      	strb	r3, [r7, #19]
      break;
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005452:	7cfb      	ldrb	r3, [r7, #19]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10b      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005458:	4b52      	ldr	r3, [pc, #328]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800545a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005466:	494f      	ldr	r1, [pc, #316]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800546e:	e001      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	7cfb      	ldrb	r3, [r7, #19]
 8005472:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a0 	beq.w	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005486:	4b47      	ldr	r3, [pc, #284]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00d      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800549c:	4b41      	ldr	r3, [pc, #260]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	4a40      	ldr	r2, [pc, #256]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	6593      	str	r3, [r2, #88]	; 0x58
 80054a8:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054b4:	2301      	movs	r3, #1
 80054b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054b8:	4b3b      	ldr	r3, [pc, #236]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3a      	ldr	r2, [pc, #232]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054c4:	f7fd fc04 	bl	8002cd0 <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054ca:	e009      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054cc:	f7fd fc00 	bl	8002cd0 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d902      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	74fb      	strb	r3, [r7, #19]
        break;
 80054de:	e005      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054e0:	4b31      	ldr	r3, [pc, #196]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ef      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d15c      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054f2:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01f      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	429a      	cmp	r2, r3
 800550e:	d019      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800551a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800551c:	4b21      	ldr	r3, [pc, #132]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800552c:	4b1d      	ldr	r3, [pc, #116]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	4a1c      	ldr	r2, [pc, #112]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554e:	f7fd fbbf 	bl	8002cd0 <HAL_GetTick>
 8005552:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005554:	e00b      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005556:	f7fd fbbb 	bl	8002cd0 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f241 3288 	movw	r2, #5000	; 0x1388
 8005564:	4293      	cmp	r3, r2
 8005566:	d902      	bls.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	74fb      	strb	r3, [r7, #19]
            break;
 800556c:	e006      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0ec      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800557c:	7cfb      	ldrb	r3, [r7, #19]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10c      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005592:	4904      	ldr	r1, [pc, #16]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800559a:	e009      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	74bb      	strb	r3, [r7, #18]
 80055a0:	e006      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80055a2:	bf00      	nop
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ac:	7cfb      	ldrb	r3, [r7, #19]
 80055ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b0:	7c7b      	ldrb	r3, [r7, #17]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b6:	4b9e      	ldr	r3, [pc, #632]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	4a9d      	ldr	r2, [pc, #628]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ce:	4b98      	ldr	r3, [pc, #608]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f023 0203 	bic.w	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	4994      	ldr	r1, [pc, #592]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055f0:	4b8f      	ldr	r3, [pc, #572]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f6:	f023 020c 	bic.w	r2, r3, #12
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	498c      	ldr	r1, [pc, #560]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005612:	4b87      	ldr	r3, [pc, #540]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	4983      	ldr	r1, [pc, #524]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005634:	4b7e      	ldr	r3, [pc, #504]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	497b      	ldr	r1, [pc, #492]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005656:	4b76      	ldr	r3, [pc, #472]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005664:	4972      	ldr	r1, [pc, #456]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005678:	4b6d      	ldr	r3, [pc, #436]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005686:	496a      	ldr	r1, [pc, #424]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800569a:	4b65      	ldr	r3, [pc, #404]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a8:	4961      	ldr	r1, [pc, #388]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056bc:	4b5c      	ldr	r3, [pc, #368]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ca:	4959      	ldr	r1, [pc, #356]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056de:	4b54      	ldr	r3, [pc, #336]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ec:	4950      	ldr	r1, [pc, #320]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005700:	4b4b      	ldr	r3, [pc, #300]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	4948      	ldr	r1, [pc, #288]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005722:	4b43      	ldr	r3, [pc, #268]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005730:	493f      	ldr	r1, [pc, #252]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d028      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005744:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005752:	4937      	ldr	r1, [pc, #220]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800575e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005762:	d106      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005764:	4b32      	ldr	r3, [pc, #200]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a31      	ldr	r2, [pc, #196]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800576a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800576e:	60d3      	str	r3, [r2, #12]
 8005770:	e011      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800577a:	d10c      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	2101      	movs	r1, #1
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f8d8 	bl	8005938 <RCCEx_PLLSAI1_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005792:	7cfb      	ldrb	r3, [r7, #19]
 8005794:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d028      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057a2:	4b23      	ldr	r3, [pc, #140]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	491f      	ldr	r1, [pc, #124]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c0:	d106      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	4a1a      	ldr	r2, [pc, #104]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057cc:	60d3      	str	r3, [r2, #12]
 80057ce:	e011      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3304      	adds	r3, #4
 80057de:	2101      	movs	r1, #1
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f8a9 	bl	8005938 <RCCEx_PLLSAI1_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ea:	7cfb      	ldrb	r3, [r7, #19]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d02b      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005800:	4b0b      	ldr	r3, [pc, #44]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580e:	4908      	ldr	r1, [pc, #32]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800581a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800581e:	d109      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4a02      	ldr	r2, [pc, #8]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800582a:	60d3      	str	r3, [r2, #12]
 800582c:	e014      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800582e:	bf00      	nop
 8005830:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800583c:	d10c      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3304      	adds	r3, #4
 8005842:	2101      	movs	r1, #1
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f877 	bl	8005938 <RCCEx_PLLSAI1_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d02f      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005864:	4b2b      	ldr	r3, [pc, #172]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005872:	4928      	ldr	r1, [pc, #160]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005882:	d10d      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3304      	adds	r3, #4
 8005888:	2102      	movs	r1, #2
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f854 	bl	8005938 <RCCEx_PLLSAI1_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005894:	7cfb      	ldrb	r3, [r7, #19]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d014      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800589a:	7cfb      	ldrb	r3, [r7, #19]
 800589c:	74bb      	strb	r3, [r7, #18]
 800589e:	e011      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3320      	adds	r3, #32
 80058ae:	2102      	movs	r1, #2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 f931 	bl	8005b18 <RCCEx_PLLSAI2_Config>
 80058b6:	4603      	mov	r3, r0
 80058b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80058c0:	7cfb      	ldrb	r3, [r7, #19]
 80058c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058d0:	4b10      	ldr	r3, [pc, #64]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058de:	490d      	ldr	r1, [pc, #52]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005902:	4904      	ldr	r1, [pc, #16]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800590a:	7cbb      	ldrb	r3, [r7, #18]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40021000 	.word	0x40021000

08005918 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a04      	ldr	r2, [pc, #16]	; (8005934 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005922:	f043 0304 	orr.w	r3, r3, #4
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000

08005938 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005946:	4b73      	ldr	r3, [pc, #460]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d018      	beq.n	8005984 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005952:	4b70      	ldr	r3, [pc, #448]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0203 	and.w	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d10d      	bne.n	800597e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
       ||
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800596a:	4b6a      	ldr	r3, [pc, #424]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	091b      	lsrs	r3, r3, #4
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
       ||
 800597a:	429a      	cmp	r2, r3
 800597c:	d044      	beq.n	8005a08 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	73fb      	strb	r3, [r7, #15]
 8005982:	e041      	b.n	8005a08 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d00c      	beq.n	80059a6 <RCCEx_PLLSAI1_Config+0x6e>
 800598c:	2b03      	cmp	r3, #3
 800598e:	d013      	beq.n	80059b8 <RCCEx_PLLSAI1_Config+0x80>
 8005990:	2b01      	cmp	r3, #1
 8005992:	d120      	bne.n	80059d6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005994:	4b5f      	ldr	r3, [pc, #380]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11d      	bne.n	80059dc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a4:	e01a      	b.n	80059dc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a6:	4b5b      	ldr	r3, [pc, #364]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d116      	bne.n	80059e0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b6:	e013      	b.n	80059e0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059b8:	4b56      	ldr	r3, [pc, #344]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10f      	bne.n	80059e4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059c4:	4b53      	ldr	r3, [pc, #332]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059d4:	e006      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	73fb      	strb	r3, [r7, #15]
      break;
 80059da:	e004      	b.n	80059e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80059e4:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10d      	bne.n	8005a08 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059ec:	4b49      	ldr	r3, [pc, #292]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6819      	ldr	r1, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	430b      	orrs	r3, r1
 8005a02:	4944      	ldr	r1, [pc, #272]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d17d      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a0e:	4b41      	ldr	r3, [pc, #260]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a40      	ldr	r2, [pc, #256]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1a:	f7fd f959 	bl	8002cd0 <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a20:	e009      	b.n	8005a36 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a22:	f7fd f955 	bl	8002cd0 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d902      	bls.n	8005a36 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	73fb      	strb	r3, [r7, #15]
        break;
 8005a34:	e005      	b.n	8005a42 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a36:	4b37      	ldr	r3, [pc, #220]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1ef      	bne.n	8005a22 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d160      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d111      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6892      	ldr	r2, [r2, #8]
 8005a5e:	0211      	lsls	r1, r2, #8
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68d2      	ldr	r2, [r2, #12]
 8005a64:	0912      	lsrs	r2, r2, #4
 8005a66:	0452      	lsls	r2, r2, #17
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	492a      	ldr	r1, [pc, #168]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	610b      	str	r3, [r1, #16]
 8005a70:	e027      	b.n	8005ac2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d112      	bne.n	8005a9e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a78:	4b26      	ldr	r3, [pc, #152]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6892      	ldr	r2, [r2, #8]
 8005a88:	0211      	lsls	r1, r2, #8
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6912      	ldr	r2, [r2, #16]
 8005a8e:	0852      	lsrs	r2, r2, #1
 8005a90:	3a01      	subs	r2, #1
 8005a92:	0552      	lsls	r2, r2, #21
 8005a94:	430a      	orrs	r2, r1
 8005a96:	491f      	ldr	r1, [pc, #124]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	610b      	str	r3, [r1, #16]
 8005a9c:	e011      	b.n	8005ac2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005aa6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6892      	ldr	r2, [r2, #8]
 8005aae:	0211      	lsls	r1, r2, #8
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6952      	ldr	r2, [r2, #20]
 8005ab4:	0852      	lsrs	r2, r2, #1
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0652      	lsls	r2, r2, #25
 8005aba:	430a      	orrs	r2, r1
 8005abc:	4915      	ldr	r1, [pc, #84]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ac2:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005acc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ace:	f7fd f8ff 	bl	8002cd0 <HAL_GetTick>
 8005ad2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ad4:	e009      	b.n	8005aea <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad6:	f7fd f8fb 	bl	8002cd0 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d902      	bls.n	8005aea <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	73fb      	strb	r3, [r7, #15]
          break;
 8005ae8:	e005      	b.n	8005af6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ef      	beq.n	8005ad6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	4903      	ldr	r1, [pc, #12]	; (8005b14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40021000 	.word	0x40021000

08005b18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b26:	4b68      	ldr	r3, [pc, #416]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d018      	beq.n	8005b64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005b32:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0203 	and.w	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d10d      	bne.n	8005b5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
       ||
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005b4a:	4b5f      	ldr	r3, [pc, #380]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
       ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d044      	beq.n	8005be8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	73fb      	strb	r3, [r7, #15]
 8005b62:	e041      	b.n	8005be8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d00c      	beq.n	8005b86 <RCCEx_PLLSAI2_Config+0x6e>
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d013      	beq.n	8005b98 <RCCEx_PLLSAI2_Config+0x80>
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d120      	bne.n	8005bb6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b74:	4b54      	ldr	r3, [pc, #336]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d11d      	bne.n	8005bbc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b84:	e01a      	b.n	8005bbc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b86:	4b50      	ldr	r3, [pc, #320]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d116      	bne.n	8005bc0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b96:	e013      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b98:	4b4b      	ldr	r3, [pc, #300]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10f      	bne.n	8005bc4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ba4:	4b48      	ldr	r3, [pc, #288]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d109      	bne.n	8005bc4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bb4:	e006      	b.n	8005bc4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bba:	e004      	b.n	8005bc6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005bbc:	bf00      	nop
 8005bbe:	e002      	b.n	8005bc6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005bc0:	bf00      	nop
 8005bc2:	e000      	b.n	8005bc6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005bc4:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10d      	bne.n	8005be8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bcc:	4b3e      	ldr	r3, [pc, #248]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6819      	ldr	r1, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	430b      	orrs	r3, r1
 8005be2:	4939      	ldr	r1, [pc, #228]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d167      	bne.n	8005cbe <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005bee:	4b36      	ldr	r3, [pc, #216]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a35      	ldr	r2, [pc, #212]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bfa:	f7fd f869 	bl	8002cd0 <HAL_GetTick>
 8005bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c00:	e009      	b.n	8005c16 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c02:	f7fd f865 	bl	8002cd0 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d902      	bls.n	8005c16 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	73fb      	strb	r3, [r7, #15]
        break;
 8005c14:	e005      	b.n	8005c22 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c16:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1ef      	bne.n	8005c02 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d14a      	bne.n	8005cbe <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d111      	bne.n	8005c52 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c2e:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6892      	ldr	r2, [r2, #8]
 8005c3e:	0211      	lsls	r1, r2, #8
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	68d2      	ldr	r2, [r2, #12]
 8005c44:	0912      	lsrs	r2, r2, #4
 8005c46:	0452      	lsls	r2, r2, #17
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	491f      	ldr	r1, [pc, #124]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	614b      	str	r3, [r1, #20]
 8005c50:	e011      	b.n	8005c76 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005c52:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6892      	ldr	r2, [r2, #8]
 8005c62:	0211      	lsls	r1, r2, #8
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6912      	ldr	r2, [r2, #16]
 8005c68:	0852      	lsrs	r2, r2, #1
 8005c6a:	3a01      	subs	r2, #1
 8005c6c:	0652      	lsls	r2, r2, #25
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	4915      	ldr	r1, [pc, #84]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a13      	ldr	r2, [pc, #76]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c82:	f7fd f825 	bl	8002cd0 <HAL_GetTick>
 8005c86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c88:	e009      	b.n	8005c9e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c8a:	f7fd f821 	bl	8002cd0 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d902      	bls.n	8005c9e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	73fb      	strb	r3, [r7, #15]
          break;
 8005c9c:	e005      	b.n	8005caa <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0ef      	beq.n	8005c8a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cb2:	695a      	ldr	r2, [r3, #20]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	4903      	ldr	r1, [pc, #12]	; (8005cc8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40021000 	.word	0x40021000

08005ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e07c      	b.n	8005dd8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fc fa2f 	bl	800215c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d14:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d1e:	d902      	bls.n	8005d26 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e002      	b.n	8005d2c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d34:	d007      	beq.n	8005d46 <HAL_SPI_Init+0x7a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d3e:	d002      	beq.n	8005d46 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d56:	d903      	bls.n	8005d60 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d5e:	e002      	b.n	8005d66 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	ea42 0103 	orr.w	r1, r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	0c1b      	lsrs	r3, r3, #16
 8005da6:	f003 0204 	and.w	r2, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	ea42 0103 	orr.w	r1, r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e01d      	b.n	8005e2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f815 	bl	8005e36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	f000 f986 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
	...

08005e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <HAL_TIM_Base_Start_IT+0x50>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b06      	cmp	r3, #6
 8005e74:	d00b      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0x42>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d007      	beq.n	8005e8e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	00010007 	.word	0x00010007

08005ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d122      	bne.n	8005efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d11b      	bne.n	8005efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0202 	mvn.w	r2, #2
 8005ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f905 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f8f7 	bl	80060de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f908 	bl	8006106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0204 	mvn.w	r2, #4
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2202      	movs	r2, #2
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8db 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8cd 	bl	80060de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f8de 	bl	8006106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d122      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0208 	mvn.w	r2, #8
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f8b1 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8a3 	bl	80060de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f8b4 	bl	8006106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0310 	and.w	r3, r3, #16
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	d122      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d11b      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0210 	mvn.w	r2, #16
 8005fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2208      	movs	r2, #8
 8005fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f887 	bl	80060f2 <HAL_TIM_IC_CaptureCallback>
 8005fe4:	e005      	b.n	8005ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f879 	bl	80060de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f88a 	bl	8006106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b01      	cmp	r3, #1
 8006004:	d10e      	bne.n	8006024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b01      	cmp	r3, #1
 8006012:	d107      	bne.n	8006024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0201 	mvn.w	r2, #1
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fb ff70 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d10e      	bne.n	8006050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d107      	bne.n	8006050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f914 	bl	8006278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605e:	d10e      	bne.n	800607e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b80      	cmp	r3, #128	; 0x80
 800606c:	d107      	bne.n	800607e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f907 	bl	800628c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d10e      	bne.n	80060aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d107      	bne.n	80060aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f838 	bl	800611a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d10e      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b20      	cmp	r3, #32
 80060c4:	d107      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f06f 0220 	mvn.w	r2, #32
 80060ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f8c7 	bl	8006264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a40      	ldr	r2, [pc, #256]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d00f      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3d      	ldr	r2, [pc, #244]	; (8006248 <TIM_Base_SetConfig+0x118>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00b      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3c      	ldr	r2, [pc, #240]	; (800624c <TIM_Base_SetConfig+0x11c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3b      	ldr	r2, [pc, #236]	; (8006250 <TIM_Base_SetConfig+0x120>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3a      	ldr	r2, [pc, #232]	; (8006254 <TIM_Base_SetConfig+0x124>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d108      	bne.n	8006182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2f      	ldr	r2, [pc, #188]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01f      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006190:	d01b      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2c      	ldr	r2, [pc, #176]	; (8006248 <TIM_Base_SetConfig+0x118>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d017      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2b      	ldr	r2, [pc, #172]	; (800624c <TIM_Base_SetConfig+0x11c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <TIM_Base_SetConfig+0x120>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00f      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a29      	ldr	r2, [pc, #164]	; (8006254 <TIM_Base_SetConfig+0x124>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00b      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a28      	ldr	r2, [pc, #160]	; (8006258 <TIM_Base_SetConfig+0x128>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a27      	ldr	r2, [pc, #156]	; (800625c <TIM_Base_SetConfig+0x12c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a26      	ldr	r2, [pc, #152]	; (8006260 <TIM_Base_SetConfig+0x130>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d108      	bne.n	80061dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a10      	ldr	r2, [pc, #64]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a12      	ldr	r2, [pc, #72]	; (8006254 <TIM_Base_SetConfig+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a11      	ldr	r2, [pc, #68]	; (8006258 <TIM_Base_SetConfig+0x128>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a10      	ldr	r2, [pc, #64]	; (800625c <TIM_Base_SetConfig+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0f      	ldr	r2, [pc, #60]	; (8006260 <TIM_Base_SetConfig+0x130>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	615a      	str	r2, [r3, #20]
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40014000 	.word	0x40014000
 800625c:	40014400 	.word	0x40014400
 8006260:	40014800 	.word	0x40014800

08006264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e040      	b.n	8006334 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fb ff8e 	bl	80021e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2224      	movs	r2, #36	; 0x24
 80062cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0201 	bic.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8c0 	bl	8006464 <UART_SetConfig>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e022      	b.n	8006334 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fbfc 	bl	8006af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800630a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800631a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fc83 	bl	8006c38 <UART_CheckIdleState>
 8006332:	4603      	mov	r3, r0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006350:	2b20      	cmp	r3, #32
 8006352:	f040 8081 	bne.w	8006458 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_UART_Transmit+0x26>
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e079      	b.n	800645a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_UART_Transmit+0x38>
 8006370:	2302      	movs	r3, #2
 8006372:	e072      	b.n	800645a <HAL_UART_Transmit+0x11e>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2221      	movs	r2, #33	; 0x21
 8006386:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006388:	f7fc fca2 	bl	8002cd0 <HAL_GetTick>
 800638c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	88fa      	ldrh	r2, [r7, #6]
 800639a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a6:	d108      	bne.n	80063ba <HAL_UART_Transmit+0x7e>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	e003      	b.n	80063c2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063c2:	e02d      	b.n	8006420 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2200      	movs	r2, #0
 80063cc:	2180      	movs	r1, #128	; 0x80
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fc77 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e03d      	b.n	800645a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	881a      	ldrh	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f0:	b292      	uxth	r2, r2
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	3302      	adds	r3, #2
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	e008      	b.n	800640e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	781a      	ldrb	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	b292      	uxth	r2, r2
 8006406:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1cb      	bne.n	80063c4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	2140      	movs	r1, #64	; 0x40
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fc43 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e009      	b.n	800645a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e000      	b.n	800645a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006464:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006468:	b088      	sub	sp, #32
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	4313      	orrs	r3, r2
 8006490:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4bac      	ldr	r3, [pc, #688]	; (800674c <UART_SetConfig+0x2e8>)
 800649a:	4013      	ands	r3, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6812      	ldr	r2, [r2, #0]
 80064a0:	69f9      	ldr	r1, [r7, #28]
 80064a2:	430b      	orrs	r3, r1
 80064a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4aa2      	ldr	r2, [pc, #648]	; (8006750 <UART_SetConfig+0x2ec>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d004      	beq.n	80064d6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a99      	ldr	r2, [pc, #612]	; (8006754 <UART_SetConfig+0x2f0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d121      	bne.n	8006538 <UART_SetConfig+0xd4>
 80064f4:	4b98      	ldr	r3, [pc, #608]	; (8006758 <UART_SetConfig+0x2f4>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d816      	bhi.n	8006530 <UART_SetConfig+0xcc>
 8006502:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <UART_SetConfig+0xa4>)
 8006504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006508:	08006519 	.word	0x08006519
 800650c:	08006525 	.word	0x08006525
 8006510:	0800651f 	.word	0x0800651f
 8006514:	0800652b 	.word	0x0800652b
 8006518:	2301      	movs	r3, #1
 800651a:	76fb      	strb	r3, [r7, #27]
 800651c:	e0e8      	b.n	80066f0 <UART_SetConfig+0x28c>
 800651e:	2302      	movs	r3, #2
 8006520:	76fb      	strb	r3, [r7, #27]
 8006522:	e0e5      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006524:	2304      	movs	r3, #4
 8006526:	76fb      	strb	r3, [r7, #27]
 8006528:	e0e2      	b.n	80066f0 <UART_SetConfig+0x28c>
 800652a:	2308      	movs	r3, #8
 800652c:	76fb      	strb	r3, [r7, #27]
 800652e:	e0df      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006530:	2310      	movs	r3, #16
 8006532:	76fb      	strb	r3, [r7, #27]
 8006534:	bf00      	nop
 8006536:	e0db      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a87      	ldr	r2, [pc, #540]	; (800675c <UART_SetConfig+0x2f8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d134      	bne.n	80065ac <UART_SetConfig+0x148>
 8006542:	4b85      	ldr	r3, [pc, #532]	; (8006758 <UART_SetConfig+0x2f4>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	f003 030c 	and.w	r3, r3, #12
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d829      	bhi.n	80065a4 <UART_SetConfig+0x140>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0xf4>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800658d 	.word	0x0800658d
 800655c:	080065a5 	.word	0x080065a5
 8006560:	080065a5 	.word	0x080065a5
 8006564:	080065a5 	.word	0x080065a5
 8006568:	08006599 	.word	0x08006599
 800656c:	080065a5 	.word	0x080065a5
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065a5 	.word	0x080065a5
 8006578:	08006593 	.word	0x08006593
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065a5 	.word	0x080065a5
 8006588:	0800659f 	.word	0x0800659f
 800658c:	2300      	movs	r3, #0
 800658e:	76fb      	strb	r3, [r7, #27]
 8006590:	e0ae      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006592:	2302      	movs	r3, #2
 8006594:	76fb      	strb	r3, [r7, #27]
 8006596:	e0ab      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006598:	2304      	movs	r3, #4
 800659a:	76fb      	strb	r3, [r7, #27]
 800659c:	e0a8      	b.n	80066f0 <UART_SetConfig+0x28c>
 800659e:	2308      	movs	r3, #8
 80065a0:	76fb      	strb	r3, [r7, #27]
 80065a2:	e0a5      	b.n	80066f0 <UART_SetConfig+0x28c>
 80065a4:	2310      	movs	r3, #16
 80065a6:	76fb      	strb	r3, [r7, #27]
 80065a8:	bf00      	nop
 80065aa:	e0a1      	b.n	80066f0 <UART_SetConfig+0x28c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a6b      	ldr	r2, [pc, #428]	; (8006760 <UART_SetConfig+0x2fc>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d120      	bne.n	80065f8 <UART_SetConfig+0x194>
 80065b6:	4b68      	ldr	r3, [pc, #416]	; (8006758 <UART_SetConfig+0x2f4>)
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d00f      	beq.n	80065e4 <UART_SetConfig+0x180>
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d802      	bhi.n	80065ce <UART_SetConfig+0x16a>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <UART_SetConfig+0x174>
 80065cc:	e010      	b.n	80065f0 <UART_SetConfig+0x18c>
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d005      	beq.n	80065de <UART_SetConfig+0x17a>
 80065d2:	2b30      	cmp	r3, #48	; 0x30
 80065d4:	d009      	beq.n	80065ea <UART_SetConfig+0x186>
 80065d6:	e00b      	b.n	80065f0 <UART_SetConfig+0x18c>
 80065d8:	2300      	movs	r3, #0
 80065da:	76fb      	strb	r3, [r7, #27]
 80065dc:	e088      	b.n	80066f0 <UART_SetConfig+0x28c>
 80065de:	2302      	movs	r3, #2
 80065e0:	76fb      	strb	r3, [r7, #27]
 80065e2:	e085      	b.n	80066f0 <UART_SetConfig+0x28c>
 80065e4:	2304      	movs	r3, #4
 80065e6:	76fb      	strb	r3, [r7, #27]
 80065e8:	e082      	b.n	80066f0 <UART_SetConfig+0x28c>
 80065ea:	2308      	movs	r3, #8
 80065ec:	76fb      	strb	r3, [r7, #27]
 80065ee:	e07f      	b.n	80066f0 <UART_SetConfig+0x28c>
 80065f0:	2310      	movs	r3, #16
 80065f2:	76fb      	strb	r3, [r7, #27]
 80065f4:	bf00      	nop
 80065f6:	e07b      	b.n	80066f0 <UART_SetConfig+0x28c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a59      	ldr	r2, [pc, #356]	; (8006764 <UART_SetConfig+0x300>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d120      	bne.n	8006644 <UART_SetConfig+0x1e0>
 8006602:	4b55      	ldr	r3, [pc, #340]	; (8006758 <UART_SetConfig+0x2f4>)
 8006604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006608:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d00f      	beq.n	8006630 <UART_SetConfig+0x1cc>
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d802      	bhi.n	800661a <UART_SetConfig+0x1b6>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <UART_SetConfig+0x1c0>
 8006618:	e010      	b.n	800663c <UART_SetConfig+0x1d8>
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d005      	beq.n	800662a <UART_SetConfig+0x1c6>
 800661e:	2bc0      	cmp	r3, #192	; 0xc0
 8006620:	d009      	beq.n	8006636 <UART_SetConfig+0x1d2>
 8006622:	e00b      	b.n	800663c <UART_SetConfig+0x1d8>
 8006624:	2300      	movs	r3, #0
 8006626:	76fb      	strb	r3, [r7, #27]
 8006628:	e062      	b.n	80066f0 <UART_SetConfig+0x28c>
 800662a:	2302      	movs	r3, #2
 800662c:	76fb      	strb	r3, [r7, #27]
 800662e:	e05f      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006630:	2304      	movs	r3, #4
 8006632:	76fb      	strb	r3, [r7, #27]
 8006634:	e05c      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006636:	2308      	movs	r3, #8
 8006638:	76fb      	strb	r3, [r7, #27]
 800663a:	e059      	b.n	80066f0 <UART_SetConfig+0x28c>
 800663c:	2310      	movs	r3, #16
 800663e:	76fb      	strb	r3, [r7, #27]
 8006640:	bf00      	nop
 8006642:	e055      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a47      	ldr	r2, [pc, #284]	; (8006768 <UART_SetConfig+0x304>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d124      	bne.n	8006698 <UART_SetConfig+0x234>
 800664e:	4b42      	ldr	r3, [pc, #264]	; (8006758 <UART_SetConfig+0x2f4>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800665c:	d012      	beq.n	8006684 <UART_SetConfig+0x220>
 800665e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006662:	d802      	bhi.n	800666a <UART_SetConfig+0x206>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <UART_SetConfig+0x214>
 8006668:	e012      	b.n	8006690 <UART_SetConfig+0x22c>
 800666a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666e:	d006      	beq.n	800667e <UART_SetConfig+0x21a>
 8006670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006674:	d009      	beq.n	800668a <UART_SetConfig+0x226>
 8006676:	e00b      	b.n	8006690 <UART_SetConfig+0x22c>
 8006678:	2300      	movs	r3, #0
 800667a:	76fb      	strb	r3, [r7, #27]
 800667c:	e038      	b.n	80066f0 <UART_SetConfig+0x28c>
 800667e:	2302      	movs	r3, #2
 8006680:	76fb      	strb	r3, [r7, #27]
 8006682:	e035      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006684:	2304      	movs	r3, #4
 8006686:	76fb      	strb	r3, [r7, #27]
 8006688:	e032      	b.n	80066f0 <UART_SetConfig+0x28c>
 800668a:	2308      	movs	r3, #8
 800668c:	76fb      	strb	r3, [r7, #27]
 800668e:	e02f      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006690:	2310      	movs	r3, #16
 8006692:	76fb      	strb	r3, [r7, #27]
 8006694:	bf00      	nop
 8006696:	e02b      	b.n	80066f0 <UART_SetConfig+0x28c>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a2c      	ldr	r2, [pc, #176]	; (8006750 <UART_SetConfig+0x2ec>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d124      	bne.n	80066ec <UART_SetConfig+0x288>
 80066a2:	4b2d      	ldr	r3, [pc, #180]	; (8006758 <UART_SetConfig+0x2f4>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b0:	d012      	beq.n	80066d8 <UART_SetConfig+0x274>
 80066b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b6:	d802      	bhi.n	80066be <UART_SetConfig+0x25a>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d007      	beq.n	80066cc <UART_SetConfig+0x268>
 80066bc:	e012      	b.n	80066e4 <UART_SetConfig+0x280>
 80066be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c2:	d006      	beq.n	80066d2 <UART_SetConfig+0x26e>
 80066c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066c8:	d009      	beq.n	80066de <UART_SetConfig+0x27a>
 80066ca:	e00b      	b.n	80066e4 <UART_SetConfig+0x280>
 80066cc:	2300      	movs	r3, #0
 80066ce:	76fb      	strb	r3, [r7, #27]
 80066d0:	e00e      	b.n	80066f0 <UART_SetConfig+0x28c>
 80066d2:	2302      	movs	r3, #2
 80066d4:	76fb      	strb	r3, [r7, #27]
 80066d6:	e00b      	b.n	80066f0 <UART_SetConfig+0x28c>
 80066d8:	2304      	movs	r3, #4
 80066da:	76fb      	strb	r3, [r7, #27]
 80066dc:	e008      	b.n	80066f0 <UART_SetConfig+0x28c>
 80066de:	2308      	movs	r3, #8
 80066e0:	76fb      	strb	r3, [r7, #27]
 80066e2:	e005      	b.n	80066f0 <UART_SetConfig+0x28c>
 80066e4:	2310      	movs	r3, #16
 80066e6:	76fb      	strb	r3, [r7, #27]
 80066e8:	bf00      	nop
 80066ea:	e001      	b.n	80066f0 <UART_SetConfig+0x28c>
 80066ec:	2310      	movs	r3, #16
 80066ee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a16      	ldr	r2, [pc, #88]	; (8006750 <UART_SetConfig+0x2ec>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f040 80fa 	bne.w	80068f0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066fc:	7efb      	ldrb	r3, [r7, #27]
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d836      	bhi.n	8006770 <UART_SetConfig+0x30c>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <UART_SetConfig+0x2a4>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800672d 	.word	0x0800672d
 800670c:	08006771 	.word	0x08006771
 8006710:	08006735 	.word	0x08006735
 8006714:	08006771 	.word	0x08006771
 8006718:	0800673b 	.word	0x0800673b
 800671c:	08006771 	.word	0x08006771
 8006720:	08006771 	.word	0x08006771
 8006724:	08006771 	.word	0x08006771
 8006728:	08006743 	.word	0x08006743
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800672c:	f7fe fd50 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8006730:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006732:	e020      	b.n	8006776 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006734:	4b0d      	ldr	r3, [pc, #52]	; (800676c <UART_SetConfig+0x308>)
 8006736:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006738:	e01d      	b.n	8006776 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800673a:	f7fe fcb3 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800673e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006740:	e019      	b.n	8006776 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006746:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006748:	e015      	b.n	8006776 <UART_SetConfig+0x312>
 800674a:	bf00      	nop
 800674c:	efff69f3 	.word	0xefff69f3
 8006750:	40008000 	.word	0x40008000
 8006754:	40013800 	.word	0x40013800
 8006758:	40021000 	.word	0x40021000
 800675c:	40004400 	.word	0x40004400
 8006760:	40004800 	.word	0x40004800
 8006764:	40004c00 	.word	0x40004c00
 8006768:	40005000 	.word	0x40005000
 800676c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	74fb      	strb	r3, [r7, #19]
        break;
 8006774:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 81ac 	beq.w	8006ad6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4413      	add	r3, r2
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	429a      	cmp	r2, r3
 800678c:	d305      	bcc.n	800679a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	429a      	cmp	r2, r3
 8006798:	d902      	bls.n	80067a0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	74fb      	strb	r3, [r7, #19]
 800679e:	e19a      	b.n	8006ad6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80067a0:	7efb      	ldrb	r3, [r7, #27]
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	f200 8091 	bhi.w	80068ca <UART_SetConfig+0x466>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x34c>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080068cb 	.word	0x080068cb
 80067b8:	08006821 	.word	0x08006821
 80067bc:	080068cb 	.word	0x080068cb
 80067c0:	08006855 	.word	0x08006855
 80067c4:	080068cb 	.word	0x080068cb
 80067c8:	080068cb 	.word	0x080068cb
 80067cc:	080068cb 	.word	0x080068cb
 80067d0:	080068a1 	.word	0x080068a1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80067d4:	f7fe fcfc 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 80067d8:	4603      	mov	r3, r0
 80067da:	4619      	mov	r1, r3
 80067dc:	f04f 0200 	mov.w	r2, #0
 80067e0:	f04f 0300 	mov.w	r3, #0
 80067e4:	f04f 0400 	mov.w	r4, #0
 80067e8:	0214      	lsls	r4, r2, #8
 80067ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067ee:	020b      	lsls	r3, r1, #8
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6852      	ldr	r2, [r2, #4]
 80067f4:	0852      	lsrs	r2, r2, #1
 80067f6:	4611      	mov	r1, r2
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	eb13 0b01 	adds.w	fp, r3, r1
 8006800:	eb44 0c02 	adc.w	ip, r4, r2
 8006804:	4658      	mov	r0, fp
 8006806:	4661      	mov	r1, ip
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f04f 0400 	mov.w	r4, #0
 8006810:	461a      	mov	r2, r3
 8006812:	4623      	mov	r3, r4
 8006814:	f7fa fa10 	bl	8000c38 <__aeabi_uldivmod>
 8006818:	4603      	mov	r3, r0
 800681a:	460c      	mov	r4, r1
 800681c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800681e:	e057      	b.n	80068d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	085b      	lsrs	r3, r3, #1
 8006826:	f04f 0400 	mov.w	r4, #0
 800682a:	49b1      	ldr	r1, [pc, #708]	; (8006af0 <UART_SetConfig+0x68c>)
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	eb13 0b01 	adds.w	fp, r3, r1
 8006834:	eb44 0c02 	adc.w	ip, r4, r2
 8006838:	4658      	mov	r0, fp
 800683a:	4661      	mov	r1, ip
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f04f 0400 	mov.w	r4, #0
 8006844:	461a      	mov	r2, r3
 8006846:	4623      	mov	r3, r4
 8006848:	f7fa f9f6 	bl	8000c38 <__aeabi_uldivmod>
 800684c:	4603      	mov	r3, r0
 800684e:	460c      	mov	r4, r1
 8006850:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006852:	e03d      	b.n	80068d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006854:	f7fe fc26 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006858:	4603      	mov	r3, r0
 800685a:	4619      	mov	r1, r3
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	f04f 0400 	mov.w	r4, #0
 8006868:	0214      	lsls	r4, r2, #8
 800686a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800686e:	020b      	lsls	r3, r1, #8
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6852      	ldr	r2, [r2, #4]
 8006874:	0852      	lsrs	r2, r2, #1
 8006876:	4611      	mov	r1, r2
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	eb13 0b01 	adds.w	fp, r3, r1
 8006880:	eb44 0c02 	adc.w	ip, r4, r2
 8006884:	4658      	mov	r0, fp
 8006886:	4661      	mov	r1, ip
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f04f 0400 	mov.w	r4, #0
 8006890:	461a      	mov	r2, r3
 8006892:	4623      	mov	r3, r4
 8006894:	f7fa f9d0 	bl	8000c38 <__aeabi_uldivmod>
 8006898:	4603      	mov	r3, r0
 800689a:	460c      	mov	r4, r1
 800689c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800689e:	e017      	b.n	80068d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	f04f 0400 	mov.w	r4, #0
 80068aa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80068ae:	f144 0100 	adc.w	r1, r4, #0
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f04f 0400 	mov.w	r4, #0
 80068ba:	461a      	mov	r2, r3
 80068bc:	4623      	mov	r3, r4
 80068be:	f7fa f9bb 	bl	8000c38 <__aeabi_uldivmod>
 80068c2:	4603      	mov	r3, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80068c8:	e002      	b.n	80068d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	74fb      	strb	r3, [r7, #19]
            break;
 80068ce:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068d6:	d308      	bcc.n	80068ea <UART_SetConfig+0x486>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068de:	d204      	bcs.n	80068ea <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	60da      	str	r2, [r3, #12]
 80068e8:	e0f5      	b.n	8006ad6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	74fb      	strb	r3, [r7, #19]
 80068ee:	e0f2      	b.n	8006ad6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068f8:	d17f      	bne.n	80069fa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80068fa:	7efb      	ldrb	r3, [r7, #27]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d85c      	bhi.n	80069ba <UART_SetConfig+0x556>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <UART_SetConfig+0x4a4>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	0800692d 	.word	0x0800692d
 800690c:	0800694b 	.word	0x0800694b
 8006910:	08006969 	.word	0x08006969
 8006914:	080069bb 	.word	0x080069bb
 8006918:	08006985 	.word	0x08006985
 800691c:	080069bb 	.word	0x080069bb
 8006920:	080069bb 	.word	0x080069bb
 8006924:	080069bb 	.word	0x080069bb
 8006928:	080069a3 	.word	0x080069a3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800692c:	f7fe fc50 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8006930:	4603      	mov	r3, r0
 8006932:	005a      	lsls	r2, r3, #1
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	085b      	lsrs	r3, r3, #1
 800693a:	441a      	add	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	fbb2 f3f3 	udiv	r3, r2, r3
 8006944:	b29b      	uxth	r3, r3
 8006946:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006948:	e03a      	b.n	80069c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800694a:	f7fe fc57 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 800694e:	4603      	mov	r3, r0
 8006950:	005a      	lsls	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	441a      	add	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006966:	e02b      	b.n	80069c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006972:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6852      	ldr	r2, [r2, #4]
 800697a:	fbb3 f3f2 	udiv	r3, r3, r2
 800697e:	b29b      	uxth	r3, r3
 8006980:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006982:	e01d      	b.n	80069c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006984:	f7fe fb8e 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006988:	4603      	mov	r3, r0
 800698a:	005a      	lsls	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	441a      	add	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	fbb2 f3f3 	udiv	r3, r2, r3
 800699c:	b29b      	uxth	r3, r3
 800699e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069a0:	e00e      	b.n	80069c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	085b      	lsrs	r3, r3, #1
 80069a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069b8:	e002      	b.n	80069c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	74fb      	strb	r3, [r7, #19]
        break;
 80069be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2b0f      	cmp	r3, #15
 80069c4:	d916      	bls.n	80069f4 <UART_SetConfig+0x590>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069cc:	d212      	bcs.n	80069f4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f023 030f 	bic.w	r3, r3, #15
 80069d6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	897b      	ldrh	r3, [r7, #10]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	897a      	ldrh	r2, [r7, #10]
 80069f0:	60da      	str	r2, [r3, #12]
 80069f2:	e070      	b.n	8006ad6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	74fb      	strb	r3, [r7, #19]
 80069f8:	e06d      	b.n	8006ad6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80069fa:	7efb      	ldrb	r3, [r7, #27]
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d859      	bhi.n	8006ab4 <UART_SetConfig+0x650>
 8006a00:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0x5a4>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a49 	.word	0x08006a49
 8006a10:	08006a65 	.word	0x08006a65
 8006a14:	08006ab5 	.word	0x08006ab5
 8006a18:	08006a81 	.word	0x08006a81
 8006a1c:	08006ab5 	.word	0x08006ab5
 8006a20:	08006ab5 	.word	0x08006ab5
 8006a24:	08006ab5 	.word	0x08006ab5
 8006a28:	08006a9d 	.word	0x08006a9d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006a2c:	f7fe fbd0 	bl	80051d0 <HAL_RCC_GetPCLK1Freq>
 8006a30:	4602      	mov	r2, r0
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	085b      	lsrs	r3, r3, #1
 8006a38:	441a      	add	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a46:	e038      	b.n	8006aba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006a48:	f7fe fbd8 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	441a      	add	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a62:	e02a      	b.n	8006aba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006a6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6852      	ldr	r2, [r2, #4]
 8006a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a7e:	e01c      	b.n	8006aba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006a80:	f7fe fb10 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	441a      	add	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a9a:	e00e      	b.n	8006aba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	085b      	lsrs	r3, r3, #1
 8006aa2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ab2:	e002      	b.n	8006aba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	74fb      	strb	r3, [r7, #19]
        break;
 8006ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b0f      	cmp	r3, #15
 8006abe:	d908      	bls.n	8006ad2 <UART_SetConfig+0x66e>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac6:	d204      	bcs.n	8006ad2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	60da      	str	r2, [r3, #12]
 8006ad0:	e001      	b.n	8006ad6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006ae2:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006aee:	bf00      	nop
 8006af0:	f4240000 	.word	0xf4240000

08006af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01a      	beq.n	8006c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bf2:	d10a      	bne.n	8006c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	605a      	str	r2, [r3, #4]
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006c46:	f7fc f843 	bl	8002cd0 <HAL_GetTick>
 8006c4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d10e      	bne.n	8006c78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f82a 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e020      	b.n	8006cba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d10e      	bne.n	8006ca4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f814 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e00a      	b.n	8006cba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd2:	e02a      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	d026      	beq.n	8006d2a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cdc:	f7fb fff8 	bl	8002cd0 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d302      	bcc.n	8006cf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d11b      	bne.n	8006d2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e00f      	b.n	8006d4a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4013      	ands	r3, r2
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	bf0c      	ite	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	2300      	movne	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d0c5      	beq.n	8006cd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d52:	b084      	sub	sp, #16
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	f107 001c 	add.w	r0, r7, #28
 8006d60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d122      	bne.n	8006db0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d105      	bne.n	8006da4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fa1d 	bl	80071e4 <USB_CoreReset>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	e01a      	b.n	8006de6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fa11 	bl	80071e4 <USB_CoreReset>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006dd8:	e005      	b.n	8006de6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006df2:	b004      	add	sp, #16
 8006df4:	4770      	bx	lr

08006df6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f023 0201 	bic.w	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d106      	bne.n	8006e44 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60da      	str	r2, [r3, #12]
 8006e42:	e00b      	b.n	8006e5c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60da      	str	r2, [r3, #12]
 8006e56:	e001      	b.n	8006e5c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e003      	b.n	8006e64 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006e5c:	2032      	movs	r0, #50	; 0x32
 8006e5e:	f7fb ff43 	bl	8002ce8 <HAL_Delay>

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	e009      	b.n	8006ea0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	3340      	adds	r3, #64	; 0x40
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	2200      	movs	r2, #0
 8006e98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	613b      	str	r3, [r7, #16]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b0e      	cmp	r3, #14
 8006ea4:	d9f2      	bls.n	8006e8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d112      	bne.n	8006ed2 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	e005      	b.n	8006ede <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef8:	461a      	mov	r2, r3
 8006efa:	680b      	ldr	r3, [r1, #0]
 8006efc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006efe:	2103      	movs	r1, #3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f93d 	bl	8007180 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f06:	2110      	movs	r1, #16
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f8f1 	bl	80070f0 <USB_FlushTxFifo>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f90f 	bl	800713c <USB_FlushRxFifo>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2e:	461a      	mov	r2, r3
 8006f30:	2300      	movs	r3, #0
 8006f32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	461a      	mov	r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	e043      	b.n	8006fda <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f68:	d118      	bne.n	8006f9c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	e013      	b.n	8006fae <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f92:	461a      	mov	r2, r3
 8006f94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	e008      	b.n	8006fae <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2300      	movs	r3, #0
 8006fac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fba:	461a      	mov	r2, r3
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d3b7      	bcc.n	8006f52 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	e043      	b.n	8007070 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ffe:	d118      	bne.n	8007032 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10a      	bne.n	800701c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	461a      	mov	r2, r3
 8007014:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e013      	b.n	8007044 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007028:	461a      	mov	r2, r3
 800702a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	e008      	b.n	8007044 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	461a      	mov	r2, r3
 8007040:	2300      	movs	r3, #0
 8007042:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	461a      	mov	r2, r3
 8007052:	2300      	movs	r3, #0
 8007054:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4413      	add	r3, r2
 800705e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007062:	461a      	mov	r2, r3
 8007064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007068:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	3301      	adds	r3, #1
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	429a      	cmp	r2, r3
 8007076:	d3b7      	bcc.n	8006fe8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007098:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	f043 0210 	orr.w	r2, r3, #16
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <USB_DevInit+0x280>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f043 0208 	orr.w	r2, r3, #8
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d107      	bne.n	80070da <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d2:	f043 0304 	orr.w	r3, r3, #4
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070e6:	b004      	add	sp, #16
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	803c3800 	.word	0x803c3800

080070f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	019b      	lsls	r3, r3, #6
 8007102:	f043 0220 	orr.w	r2, r3, #32
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a09      	ldr	r2, [pc, #36]	; (8007138 <USB_FlushTxFifo+0x48>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e006      	b.n	800712a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b20      	cmp	r3, #32
 8007126:	d0f0      	beq.n	800710a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	00030d40 	.word	0x00030d40

0800713c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2210      	movs	r2, #16
 800714c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4a09      	ldr	r2, [pc, #36]	; (800717c <USB_FlushRxFifo+0x40>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d901      	bls.n	8007160 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e006      	b.n	800716e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f003 0310 	and.w	r3, r3, #16
 8007168:	2b10      	cmp	r3, #16
 800716a:	d0f0      	beq.n	800714e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	00030d40 	.word	0x00030d40

08007180 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	78fb      	ldrb	r3, [r7, #3]
 800719a:	68f9      	ldr	r1, [r7, #12]
 800719c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071a0:	4313      	orrs	r3, r2
 80071a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071cc:	f043 0302 	orr.w	r3, r3, #2
 80071d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80071d2:	2003      	movs	r0, #3
 80071d4:	f7fb fd88 	bl	8002ce8 <HAL_Delay>

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	4a13      	ldr	r2, [pc, #76]	; (8007248 <USB_CoreReset+0x64>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d901      	bls.n	8007202 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e01b      	b.n	800723a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	daf2      	bge.n	80071f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f043 0201 	orr.w	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3301      	adds	r3, #1
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a09      	ldr	r2, [pc, #36]	; (8007248 <USB_CoreReset+0x64>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d901      	bls.n	800722c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e006      	b.n	800723a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d0f0      	beq.n	800721a <USB_CoreReset+0x36>

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	00030d40 	.word	0x00030d40

0800724c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007252:	f3ef 8305 	mrs	r3, IPSR
 8007256:	60bb      	str	r3, [r7, #8]
  return(result);
 8007258:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10f      	bne.n	800727e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800725e:	f3ef 8310 	mrs	r3, PRIMASK
 8007262:	607b      	str	r3, [r7, #4]
  return(result);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <osKernelInitialize+0x32>
 800726a:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <osKernelInitialize+0x64>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d109      	bne.n	8007286 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007272:	f3ef 8311 	mrs	r3, BASEPRI
 8007276:	603b      	str	r3, [r7, #0]
  return(result);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800727e:	f06f 0305 	mvn.w	r3, #5
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e00c      	b.n	80072a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007286:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <osKernelInitialize+0x64>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d105      	bne.n	800729a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800728e:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <osKernelInitialize+0x64>)
 8007290:	2201      	movs	r2, #1
 8007292:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e002      	b.n	80072a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800729a:	f04f 33ff 	mov.w	r3, #4294967295
 800729e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072a0:	68fb      	ldr	r3, [r7, #12]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	200001a4 	.word	0x200001a4

080072b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ba:	f3ef 8305 	mrs	r3, IPSR
 80072be:	60bb      	str	r3, [r7, #8]
  return(result);
 80072c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10f      	bne.n	80072e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c6:	f3ef 8310 	mrs	r3, PRIMASK
 80072ca:	607b      	str	r3, [r7, #4]
  return(result);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d109      	bne.n	80072e6 <osKernelStart+0x32>
 80072d2:	4b11      	ldr	r3, [pc, #68]	; (8007318 <osKernelStart+0x64>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d109      	bne.n	80072ee <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072da:	f3ef 8311 	mrs	r3, BASEPRI
 80072de:	603b      	str	r3, [r7, #0]
  return(result);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80072e6:	f06f 0305 	mvn.w	r3, #5
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	e00e      	b.n	800730c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80072ee:	4b0a      	ldr	r3, [pc, #40]	; (8007318 <osKernelStart+0x64>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d107      	bne.n	8007306 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80072f6:	4b08      	ldr	r3, [pc, #32]	; (8007318 <osKernelStart+0x64>)
 80072f8:	2202      	movs	r2, #2
 80072fa:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80072fc:	f001 fd54 	bl	8008da8 <vTaskStartScheduler>
      stat = osOK;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e002      	b.n	800730c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007306:	f04f 33ff 	mov.w	r3, #4294967295
 800730a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800730c:	68fb      	ldr	r3, [r7, #12]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	200001a4 	.word	0x200001a4

0800731c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b092      	sub	sp, #72	; 0x48
 8007320:	af04      	add	r7, sp, #16
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800732c:	f3ef 8305 	mrs	r3, IPSR
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007334:	2b00      	cmp	r3, #0
 8007336:	f040 8094 	bne.w	8007462 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733a:	f3ef 8310 	mrs	r3, PRIMASK
 800733e:	623b      	str	r3, [r7, #32]
  return(result);
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f040 808d 	bne.w	8007462 <osThreadNew+0x146>
 8007348:	4b48      	ldr	r3, [pc, #288]	; (800746c <osThreadNew+0x150>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d106      	bne.n	800735e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007350:	f3ef 8311 	mrs	r3, BASEPRI
 8007354:	61fb      	str	r3, [r7, #28]
  return(result);
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f040 8082 	bne.w	8007462 <osThreadNew+0x146>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d07e      	beq.n	8007462 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007364:	2380      	movs	r3, #128	; 0x80
 8007366:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007368:	2318      	movs	r3, #24
 800736a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800736c:	2300      	movs	r3, #0
 800736e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007370:	f107 031b 	add.w	r3, r7, #27
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007376:	f04f 33ff 	mov.w	r3, #4294967295
 800737a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d045      	beq.n	800740e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <osThreadNew+0x74>
        name = attr->name;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <osThreadNew+0x9a>
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2b38      	cmp	r3, #56	; 0x38
 80073a8:	d805      	bhi.n	80073b6 <osThreadNew+0x9a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <osThreadNew+0x9e>
        return (NULL);
 80073b6:	2300      	movs	r3, #0
 80073b8:	e054      	b.n	8007464 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	089b      	lsrs	r3, r3, #2
 80073c8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00e      	beq.n	80073f0 <osThreadNew+0xd4>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	2b5b      	cmp	r3, #91	; 0x5b
 80073d8:	d90a      	bls.n	80073f0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d006      	beq.n	80073f0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <osThreadNew+0xd4>
        mem = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ee:	e010      	b.n	8007412 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10c      	bne.n	8007412 <osThreadNew+0xf6>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d108      	bne.n	8007412 <osThreadNew+0xf6>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <osThreadNew+0xf6>
          mem = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
 800740c:	e001      	b.n	8007412 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	2b01      	cmp	r3, #1
 8007416:	d110      	bne.n	800743a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007420:	9202      	str	r2, [sp, #8]
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f001 fb26 	bl	8008a80 <xTaskCreateStatic>
 8007434:	4603      	mov	r3, r0
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e013      	b.n	8007462 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	2b00      	cmp	r3, #0
 800743e:	d110      	bne.n	8007462 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	b29a      	uxth	r2, r3
 8007444:	f107 0314 	add.w	r3, r7, #20
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f001 fb6d 	bl	8008b32 <xTaskCreate>
 8007458:	4603      	mov	r3, r0
 800745a:	2b01      	cmp	r3, #1
 800745c:	d001      	beq.n	8007462 <osThreadNew+0x146>
          hTask = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007462:	697b      	ldr	r3, [r7, #20]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3738      	adds	r7, #56	; 0x38
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200001a4 	.word	0x200001a4

08007470 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f002 fe53 	bl	800a124 <pvTimerGetTimerID>
 800747e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	6852      	ldr	r2, [r2, #4]
 800748e:	4610      	mov	r0, r2
 8007490:	4798      	blx	r3
  }
}
 8007492:	bf00      	nop
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b08e      	sub	sp, #56	; 0x38
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	460b      	mov	r3, r1
 80074aa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074b0:	f3ef 8305 	mrs	r3, IPSR
 80074b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80074b6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d16a      	bne.n	8007592 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074bc:	f3ef 8310 	mrs	r3, PRIMASK
 80074c0:	617b      	str	r3, [r7, #20]
  return(result);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d164      	bne.n	8007592 <osTimerNew+0xf6>
 80074c8:	4b34      	ldr	r3, [pc, #208]	; (800759c <osTimerNew+0x100>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d105      	bne.n	80074dc <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074d0:	f3ef 8311 	mrs	r3, BASEPRI
 80074d4:	613b      	str	r3, [r7, #16]
  return(result);
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d15a      	bne.n	8007592 <osTimerNew+0xf6>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d057      	beq.n	8007592 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80074e2:	2008      	movs	r0, #8
 80074e4:	f003 f87c 	bl	800a5e0 <pvPortMalloc>
 80074e8:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d050      	beq.n	8007592 <osTimerNew+0xf6>
      callb->func = func;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80074fc:	7afb      	ldrb	r3, [r7, #11]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d102      	bne.n	8007508 <osTimerNew+0x6c>
        reload = pdFALSE;
 8007502:	2300      	movs	r3, #0
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
 8007506:	e001      	b.n	800750c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800750c:	f04f 33ff 	mov.w	r3, #4294967295
 8007510:	623b      	str	r3, [r7, #32]
      name = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01c      	beq.n	8007556 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <osTimerNew+0x8e>
          name = attr->name;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d006      	beq.n	8007540 <osTimerNew+0xa4>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b2f      	cmp	r3, #47	; 0x2f
 8007538:	d902      	bls.n	8007540 <osTimerNew+0xa4>
          mem = 1;
 800753a:	2301      	movs	r3, #1
 800753c:	623b      	str	r3, [r7, #32]
 800753e:	e00c      	b.n	800755a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d108      	bne.n	800755a <osTimerNew+0xbe>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <osTimerNew+0xbe>
            mem = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	623b      	str	r3, [r7, #32]
 8007554:	e001      	b.n	800755a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d10c      	bne.n	800757a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <osTimerNew+0x104>)
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756e:	2101      	movs	r1, #1
 8007570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007572:	f002 faa8 	bl	8009ac6 <xTimerCreateStatic>
 8007576:	62b8      	str	r0, [r7, #40]	; 0x28
 8007578:	e00b      	b.n	8007592 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <osTimerNew+0x104>)
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007588:	2101      	movs	r1, #1
 800758a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800758c:	f002 fa7a 	bl	8009a84 <xTimerCreate>
 8007590:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007594:	4618      	mov	r0, r3
 8007596:	3730      	adds	r7, #48	; 0x30
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	200001a4 	.word	0x200001a4
 80075a0:	08007471 	.word	0x08007471

080075a4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	; 0x28
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b2:	f3ef 8305 	mrs	r3, IPSR
 80075b6:	617b      	str	r3, [r7, #20]
  return(result);
 80075b8:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075be:	f3ef 8310 	mrs	r3, PRIMASK
 80075c2:	613b      	str	r3, [r7, #16]
  return(result);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <osTimerStart+0x3a>
 80075ca:	4b15      	ldr	r3, [pc, #84]	; (8007620 <osTimerStart+0x7c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d109      	bne.n	80075e6 <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075d2:	f3ef 8311 	mrs	r3, BASEPRI
 80075d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <osTimerStart+0x42>
    stat = osErrorISR;
 80075de:	f06f 0305 	mvn.w	r3, #5
 80075e2:	61fb      	str	r3, [r7, #28]
 80075e4:	e017      	b.n	8007616 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d103      	bne.n	80075f4 <osTimerStart+0x50>
    stat = osErrorParameter;
 80075ec:	f06f 0303 	mvn.w	r3, #3
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	e010      	b.n	8007616 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80075f4:	2300      	movs	r3, #0
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	2300      	movs	r3, #0
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	2104      	movs	r1, #4
 80075fe:	69b8      	ldr	r0, [r7, #24]
 8007600:	f002 face 	bl	8009ba0 <xTimerGenericCommand>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d102      	bne.n	8007610 <osTimerStart+0x6c>
      stat = osOK;
 800760a:	2300      	movs	r3, #0
 800760c:	61fb      	str	r3, [r7, #28]
 800760e:	e002      	b.n	8007616 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8007610:	f06f 0302 	mvn.w	r3, #2
 8007614:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8007616:	69fb      	ldr	r3, [r7, #28]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200001a4 	.word	0x200001a4

08007624 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007624:	b580      	push	{r7, lr}
 8007626:	b08c      	sub	sp, #48	; 0x30
 8007628:	af02      	add	r7, sp, #8
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007634:	f3ef 8305 	mrs	r3, IPSR
 8007638:	61bb      	str	r3, [r7, #24]
  return(result);
 800763a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 8088 	bne.w	8007752 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007642:	f3ef 8310 	mrs	r3, PRIMASK
 8007646:	617b      	str	r3, [r7, #20]
  return(result);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f040 8081 	bne.w	8007752 <osSemaphoreNew+0x12e>
 8007650:	4b42      	ldr	r3, [pc, #264]	; (800775c <osSemaphoreNew+0x138>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d105      	bne.n	8007664 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007658:	f3ef 8311 	mrs	r3, BASEPRI
 800765c:	613b      	str	r3, [r7, #16]
  return(result);
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d176      	bne.n	8007752 <osSemaphoreNew+0x12e>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d073      	beq.n	8007752 <osSemaphoreNew+0x12e>
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	429a      	cmp	r2, r3
 8007670:	d86f      	bhi.n	8007752 <osSemaphoreNew+0x12e>
    mem = -1;
 8007672:	f04f 33ff 	mov.w	r3, #4294967295
 8007676:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d015      	beq.n	80076aa <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d006      	beq.n	8007694 <osSemaphoreNew+0x70>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	2b4f      	cmp	r3, #79	; 0x4f
 800768c:	d902      	bls.n	8007694 <osSemaphoreNew+0x70>
        mem = 1;
 800768e:	2301      	movs	r3, #1
 8007690:	623b      	str	r3, [r7, #32]
 8007692:	e00c      	b.n	80076ae <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d108      	bne.n	80076ae <osSemaphoreNew+0x8a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <osSemaphoreNew+0x8a>
          mem = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	623b      	str	r3, [r7, #32]
 80076a8:	e001      	b.n	80076ae <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b4:	d04d      	beq.n	8007752 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d129      	bne.n	8007710 <osSemaphoreNew+0xec>
        if (mem == 1) {
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d10b      	bne.n	80076da <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	2303      	movs	r3, #3
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	4613      	mov	r3, r2
 80076cc:	2200      	movs	r2, #0
 80076ce:	2100      	movs	r1, #0
 80076d0:	2001      	movs	r0, #1
 80076d2:	f000 fa53 	bl	8007b7c <xQueueGenericCreateStatic>
 80076d6:	6278      	str	r0, [r7, #36]	; 0x24
 80076d8:	e005      	b.n	80076e6 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80076da:	2203      	movs	r2, #3
 80076dc:	2100      	movs	r1, #0
 80076de:	2001      	movs	r0, #1
 80076e0:	f000 fabe 	bl	8007c60 <xQueueGenericCreate>
 80076e4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d022      	beq.n	8007732 <osSemaphoreNew+0x10e>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01f      	beq.n	8007732 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80076f2:	2300      	movs	r3, #0
 80076f4:	2200      	movs	r2, #0
 80076f6:	2100      	movs	r1, #0
 80076f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076fa:	f000 fb77 	bl	8007dec <xQueueGenericSend>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b01      	cmp	r3, #1
 8007702:	d016      	beq.n	8007732 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8007704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007706:	f000 ffea 	bl	80086de <vQueueDelete>
            hSemaphore = NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
 800770e:	e010      	b.n	8007732 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d108      	bne.n	8007728 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	461a      	mov	r2, r3
 800771c:	68b9      	ldr	r1, [r7, #8]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fafe 	bl	8007d20 <xQueueCreateCountingSemaphoreStatic>
 8007724:	6278      	str	r0, [r7, #36]	; 0x24
 8007726:	e004      	b.n	8007732 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 fb2d 	bl	8007d8a <xQueueCreateCountingSemaphore>
 8007730:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00c      	beq.n	8007752 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <osSemaphoreNew+0x122>
          name = attr->name;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	61fb      	str	r3, [r7, #28]
 8007744:	e001      	b.n	800774a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800774a:	69f9      	ldr	r1, [r7, #28]
 800774c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800774e:	f001 f911 	bl	8008974 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007754:	4618      	mov	r0, r3
 8007756:	3728      	adds	r7, #40	; 0x28
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	200001a4 	.word	0x200001a4

08007760 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800776e:	2300      	movs	r3, #0
 8007770:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d103      	bne.n	8007780 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007778:	f06f 0303 	mvn.w	r3, #3
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	e04b      	b.n	8007818 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007780:	f3ef 8305 	mrs	r3, IPSR
 8007784:	617b      	str	r3, [r7, #20]
  return(result);
 8007786:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10f      	bne.n	80077ac <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800778c:	f3ef 8310 	mrs	r3, PRIMASK
 8007790:	613b      	str	r3, [r7, #16]
  return(result);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <osSemaphoreAcquire+0x4c>
 8007798:	4b22      	ldr	r3, [pc, #136]	; (8007824 <osSemaphoreAcquire+0xc4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d128      	bne.n	80077f2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077a0:	f3ef 8311 	mrs	r3, BASEPRI
 80077a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d022      	beq.n	80077f2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80077b2:	f06f 0303 	mvn.w	r3, #3
 80077b6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80077b8:	e02d      	b.n	8007816 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80077be:	f107 0308 	add.w	r3, r7, #8
 80077c2:	461a      	mov	r2, r3
 80077c4:	2100      	movs	r1, #0
 80077c6:	69b8      	ldr	r0, [r7, #24]
 80077c8:	f000 ff0c 	bl	80085e4 <xQueueReceiveFromISR>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d003      	beq.n	80077da <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80077d2:	f06f 0302 	mvn.w	r3, #2
 80077d6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80077d8:	e01d      	b.n	8007816 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01a      	beq.n	8007816 <osSemaphoreAcquire+0xb6>
 80077e0:	4b11      	ldr	r3, [pc, #68]	; (8007828 <osSemaphoreAcquire+0xc8>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80077f0:	e011      	b.n	8007816 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	69b8      	ldr	r0, [r7, #24]
 80077f6:	f000 fded 	bl	80083d4 <xQueueSemaphoreTake>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d00b      	beq.n	8007818 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007806:	f06f 0301 	mvn.w	r3, #1
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	e004      	b.n	8007818 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800780e:	f06f 0302 	mvn.w	r3, #2
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	e000      	b.n	8007818 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007816:	bf00      	nop
      }
    }
  }

  return (stat);
 8007818:	69fb      	ldr	r3, [r7, #28]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3720      	adds	r7, #32
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200001a4 	.word	0x200001a4
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d103      	bne.n	800784a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007842:	f06f 0303 	mvn.w	r3, #3
 8007846:	61fb      	str	r3, [r7, #28]
 8007848:	e03e      	b.n	80078c8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800784a:	f3ef 8305 	mrs	r3, IPSR
 800784e:	617b      	str	r3, [r7, #20]
  return(result);
 8007850:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10f      	bne.n	8007876 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007856:	f3ef 8310 	mrs	r3, PRIMASK
 800785a:	613b      	str	r3, [r7, #16]
  return(result);
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <osSemaphoreRelease+0x4a>
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <osSemaphoreRelease+0xa8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d120      	bne.n	80078ac <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800786a:	f3ef 8311 	mrs	r3, BASEPRI
 800786e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01a      	beq.n	80078ac <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007876:	2300      	movs	r3, #0
 8007878:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800787a:	f107 0308 	add.w	r3, r7, #8
 800787e:	4619      	mov	r1, r3
 8007880:	69b8      	ldr	r0, [r7, #24]
 8007882:	f000 fc41 	bl	8008108 <xQueueGiveFromISR>
 8007886:	4603      	mov	r3, r0
 8007888:	2b01      	cmp	r3, #1
 800788a:	d003      	beq.n	8007894 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800788c:	f06f 0302 	mvn.w	r3, #2
 8007890:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007892:	e018      	b.n	80078c6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d015      	beq.n	80078c6 <osSemaphoreRelease+0x9a>
 800789a:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <osSemaphoreRelease+0xac>)
 800789c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80078aa:	e00c      	b.n	80078c6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80078ac:	2300      	movs	r3, #0
 80078ae:	2200      	movs	r2, #0
 80078b0:	2100      	movs	r1, #0
 80078b2:	69b8      	ldr	r0, [r7, #24]
 80078b4:	f000 fa9a 	bl	8007dec <xQueueGenericSend>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d004      	beq.n	80078c8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80078be:	f06f 0302 	mvn.w	r3, #2
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	e000      	b.n	80078c8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80078c6:	bf00      	nop
    }
  }

  return (stat);
 80078c8:	69fb      	ldr	r3, [r7, #28]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	200001a4 	.word	0x200001a4
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a07      	ldr	r2, [pc, #28]	; (8007908 <vApplicationGetIdleTaskMemory+0x2c>)
 80078ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4a06      	ldr	r2, [pc, #24]	; (800790c <vApplicationGetIdleTaskMemory+0x30>)
 80078f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2280      	movs	r2, #128	; 0x80
 80078f8:	601a      	str	r2, [r3, #0]
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	200001a8 	.word	0x200001a8
 800790c:	20000204 	.word	0x20000204

08007910 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4a07      	ldr	r2, [pc, #28]	; (800793c <vApplicationGetTimerTaskMemory+0x2c>)
 8007920:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	4a06      	ldr	r2, [pc, #24]	; (8007940 <vApplicationGetTimerTaskMemory+0x30>)
 8007926:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800792e:	601a      	str	r2, [r3, #0]
}
 8007930:	bf00      	nop
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	20000404 	.word	0x20000404
 8007940:	20000460 	.word	0x20000460

08007944 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f103 0208 	add.w	r2, r3, #8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f04f 32ff 	mov.w	r2, #4294967295
 800795c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f103 0208 	add.w	r2, r3, #8
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f103 0208 	add.w	r2, r3, #8
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007992:	bf00      	nop
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800799e:	b480      	push	{r7}
 80079a0:	b085      	sub	sp, #20
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]
}
 80079da:	bf00      	nop
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fc:	d103      	bne.n	8007a06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	e00c      	b.n	8007a20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3308      	adds	r3, #8
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e002      	b.n	8007a14 <vListInsert+0x2e>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d2f6      	bcs.n	8007a0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	601a      	str	r2, [r3, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6892      	ldr	r2, [r2, #8]
 8007a6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6852      	ldr	r2, [r2, #4]
 8007a78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d103      	bne.n	8007a8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	1e5a      	subs	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d109      	bne.n	8007ad4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60bb      	str	r3, [r7, #8]
 8007ad2:	e7fe      	b.n	8007ad2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007ad4:	f002 fc6a 	bl	800a3ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae0:	68f9      	ldr	r1, [r7, #12]
 8007ae2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ae4:	fb01 f303 	mul.w	r3, r1, r3
 8007ae8:	441a      	add	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	3b01      	subs	r3, #1
 8007b06:	68f9      	ldr	r1, [r7, #12]
 8007b08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b0a:	fb01 f303 	mul.w	r3, r1, r3
 8007b0e:	441a      	add	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	22ff      	movs	r2, #255	; 0xff
 8007b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	22ff      	movs	r2, #255	; 0xff
 8007b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d114      	bne.n	8007b54 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d01a      	beq.n	8007b68 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3310      	adds	r3, #16
 8007b36:	4618      	mov	r0, r3
 8007b38:	f001 fbbc 	bl	80092b4 <xTaskRemoveFromEventList>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d012      	beq.n	8007b68 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b42:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <xQueueGenericReset+0xcc>)
 8007b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	e009      	b.n	8007b68 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3310      	adds	r3, #16
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff fef3 	bl	8007944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3324      	adds	r3, #36	; 0x24
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff feee 	bl	8007944 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b68:	f002 fc4e 	bl	800a408 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b6c:	2301      	movs	r3, #1
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08e      	sub	sp, #56	; 0x38
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d109      	bne.n	8007ba4 <xQueueGenericCreateStatic+0x28>
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba2:	e7fe      	b.n	8007ba2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <xQueueGenericCreateStatic+0x42>
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
 8007bbc:	e7fe      	b.n	8007bbc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <xQueueGenericCreateStatic+0x4e>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <xQueueGenericCreateStatic+0x52>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <xQueueGenericCreateStatic+0x54>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <xQueueGenericCreateStatic+0x6c>
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	623b      	str	r3, [r7, #32]
 8007be6:	e7fe      	b.n	8007be6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d102      	bne.n	8007bf4 <xQueueGenericCreateStatic+0x78>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <xQueueGenericCreateStatic+0x7c>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <xQueueGenericCreateStatic+0x7e>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <xQueueGenericCreateStatic+0x96>
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	61fb      	str	r3, [r7, #28]
 8007c10:	e7fe      	b.n	8007c10 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c12:	2350      	movs	r3, #80	; 0x50
 8007c14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b50      	cmp	r3, #80	; 0x50
 8007c1a:	d009      	beq.n	8007c30 <xQueueGenericCreateStatic+0xb4>
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	e7fe      	b.n	8007c2e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00d      	beq.n	8007c56 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f842 	bl	8007cda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3730      	adds	r7, #48	; 0x30
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d109      	bne.n	8007c88 <xQueueGenericCreate+0x28>
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	613b      	str	r3, [r7, #16]
 8007c86:	e7fe      	b.n	8007c86 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61fb      	str	r3, [r7, #28]
 8007c92:	e004      	b.n	8007c9e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	fb02 f303 	mul.w	r3, r2, r3
 8007c9c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	3350      	adds	r3, #80	; 0x50
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f002 fc9c 	bl	800a5e0 <pvPortMalloc>
 8007ca8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00f      	beq.n	8007cd0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	3350      	adds	r3, #80	; 0x50
 8007cb4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cbe:	79fa      	ldrb	r2, [r7, #7]
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f805 	bl	8007cda <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
	}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d103      	bne.n	8007cf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	e002      	b.n	8007cfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d08:	2101      	movs	r1, #1
 8007d0a:	69b8      	ldr	r0, [r7, #24]
 8007d0c:	f7ff fece 	bl	8007aac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08a      	sub	sp, #40	; 0x28
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <xQueueCreateCountingSemaphoreStatic+0x26>
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	61bb      	str	r3, [r7, #24]
 8007d44:	e7fe      	b.n	8007d44 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d909      	bls.n	8007d62 <xQueueCreateCountingSemaphoreStatic+0x42>
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e7fe      	b.n	8007d60 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d62:	2302      	movs	r3, #2
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff ff05 	bl	8007b7c <xQueueGenericCreateStatic>
 8007d72:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d80:	69fb      	ldr	r3, [r7, #28]
	}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3720      	adds	r7, #32
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d109      	bne.n	8007dae <xQueueCreateCountingSemaphore+0x24>
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	e7fe      	b.n	8007dac <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d909      	bls.n	8007dca <xQueueCreateCountingSemaphore+0x40>
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007dca:	2202      	movs	r2, #2
 8007dcc:	2100      	movs	r1, #0
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7ff ff46 	bl	8007c60 <xQueueGenericCreate>
 8007dd4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007de2:	697b      	ldr	r3, [r7, #20]
	}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08e      	sub	sp, #56	; 0x38
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <xQueueGenericSend+0x30>
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e1a:	e7fe      	b.n	8007e1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <xQueueGenericSend+0x3e>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <xQueueGenericSend+0x42>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <xQueueGenericSend+0x44>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <xQueueGenericSend+0x5c>
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
 8007e46:	e7fe      	b.n	8007e46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d103      	bne.n	8007e56 <xQueueGenericSend+0x6a>
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <xQueueGenericSend+0x6e>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <xQueueGenericSend+0x70>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <xQueueGenericSend+0x88>
 8007e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	623b      	str	r3, [r7, #32]
 8007e72:	e7fe      	b.n	8007e72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e74:	f001 fbda 	bl	800962c <xTaskGetSchedulerState>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d102      	bne.n	8007e84 <xQueueGenericSend+0x98>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <xQueueGenericSend+0x9c>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <xQueueGenericSend+0x9e>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d109      	bne.n	8007ea2 <xQueueGenericSend+0xb6>
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e7fe      	b.n	8007ea0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ea2:	f002 fa83 	bl	800a3ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d302      	bcc.n	8007eb8 <xQueueGenericSend+0xcc>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d129      	bne.n	8007f0c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ebe:	f000 fc48 	bl	8008752 <prvCopyDataToQueue>
 8007ec2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d010      	beq.n	8007eee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	3324      	adds	r3, #36	; 0x24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 f9ef 	bl	80092b4 <xTaskRemoveFromEventList>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d013      	beq.n	8007f04 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007edc:	4b3f      	ldr	r3, [pc, #252]	; (8007fdc <xQueueGenericSend+0x1f0>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	e00a      	b.n	8007f04 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d007      	beq.n	8007f04 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ef4:	4b39      	ldr	r3, [pc, #228]	; (8007fdc <xQueueGenericSend+0x1f0>)
 8007ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f04:	f002 fa80 	bl	800a408 <vPortExitCritical>
				return pdPASS;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e063      	b.n	8007fd4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f12:	f002 fa79 	bl	800a408 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	e05c      	b.n	8007fd4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d106      	bne.n	8007f2e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f20:	f107 0314 	add.w	r3, r7, #20
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 fa27 	bl	8009378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f2e:	f002 fa6b 	bl	800a408 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f32:	f000 ff9d 	bl	8008e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f36:	f002 fa39 	bl	800a3ac <vPortEnterCritical>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f40:	b25b      	sxtb	r3, r3
 8007f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f46:	d103      	bne.n	8007f50 <xQueueGenericSend+0x164>
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f56:	b25b      	sxtb	r3, r3
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d103      	bne.n	8007f66 <xQueueGenericSend+0x17a>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f66:	f002 fa4f 	bl	800a408 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f6a:	1d3a      	adds	r2, r7, #4
 8007f6c:	f107 0314 	add.w	r3, r7, #20
 8007f70:	4611      	mov	r1, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	f001 fa16 	bl	80093a4 <xTaskCheckForTimeOut>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d124      	bne.n	8007fc8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f80:	f000 fcdf 	bl	8008942 <prvIsQueueFull>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	3310      	adds	r3, #16
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4611      	mov	r1, r2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f001 f940 	bl	8009218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f9a:	f000 fc6a 	bl	8008872 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f9e:	f000 ff75 	bl	8008e8c <xTaskResumeAll>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f47f af7c 	bne.w	8007ea2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007faa:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <xQueueGenericSend+0x1f0>)
 8007fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	e772      	b.n	8007ea2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fbe:	f000 fc58 	bl	8008872 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fc2:	f000 ff63 	bl	8008e8c <xTaskResumeAll>
 8007fc6:	e76c      	b.n	8007ea2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fca:	f000 fc52 	bl	8008872 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fce:	f000 ff5d 	bl	8008e8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fd2:	2300      	movs	r3, #0
		}
	}
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3738      	adds	r7, #56	; 0x38
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	e000ed04 	.word	0xe000ed04

08007fe0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08e      	sub	sp, #56	; 0x38
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d109      	bne.n	800800c <xQueueGenericSendFromISR+0x2c>
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
 800800a:	e7fe      	b.n	800800a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <xQueueGenericSendFromISR+0x3a>
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <xQueueGenericSendFromISR+0x3e>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <xQueueGenericSendFromISR+0x40>
 800801e:	2300      	movs	r3, #0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d109      	bne.n	8008038 <xQueueGenericSendFromISR+0x58>
 8008024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	623b      	str	r3, [r7, #32]
 8008036:	e7fe      	b.n	8008036 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b02      	cmp	r3, #2
 800803c:	d103      	bne.n	8008046 <xQueueGenericSendFromISR+0x66>
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008042:	2b01      	cmp	r3, #1
 8008044:	d101      	bne.n	800804a <xQueueGenericSendFromISR+0x6a>
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <xQueueGenericSendFromISR+0x6c>
 800804a:	2300      	movs	r3, #0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d109      	bne.n	8008064 <xQueueGenericSendFromISR+0x84>
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	61fb      	str	r3, [r7, #28]
 8008062:	e7fe      	b.n	8008062 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008064:	f002 fa7e 	bl	800a564 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008068:	f3ef 8211 	mrs	r2, BASEPRI
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	61ba      	str	r2, [r7, #24]
 800807e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008080:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808c:	429a      	cmp	r2, r3
 800808e:	d302      	bcc.n	8008096 <xQueueGenericSendFromISR+0xb6>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b02      	cmp	r3, #2
 8008094:	d12c      	bne.n	80080f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800809c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080a0:	683a      	ldr	r2, [r7, #0]
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a6:	f000 fb54 	bl	8008752 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d112      	bne.n	80080da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d016      	beq.n	80080ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	3324      	adds	r3, #36	; 0x24
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 f8f7 	bl	80092b4 <xTaskRemoveFromEventList>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00e      	beq.n	80080ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00b      	beq.n	80080ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	e007      	b.n	80080ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080de:	3301      	adds	r3, #1
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	b25a      	sxtb	r2, r3
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080ea:	2301      	movs	r3, #1
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80080ee:	e001      	b.n	80080f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	637b      	str	r3, [r7, #52]	; 0x34
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008100:	4618      	mov	r0, r3
 8008102:	3738      	adds	r7, #56	; 0x38
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08e      	sub	sp, #56	; 0x38
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <xQueueGiveFromISR+0x28>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	623b      	str	r3, [r7, #32]
 800812e:	e7fe      	b.n	800812e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <xQueueGiveFromISR+0x44>
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	61fb      	str	r3, [r7, #28]
 800814a:	e7fe      	b.n	800814a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d103      	bne.n	800815c <xQueueGiveFromISR+0x54>
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <xQueueGiveFromISR+0x58>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <xQueueGiveFromISR+0x5a>
 8008160:	2300      	movs	r3, #0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <xQueueGiveFromISR+0x72>
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	e7fe      	b.n	8008178 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800817a:	f002 f9f3 	bl	800a564 <vPortValidateInterruptPriority>
	__asm volatile
 800817e:	f3ef 8211 	mrs	r2, BASEPRI
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	617a      	str	r2, [r7, #20]
 8008194:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008196:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008198:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d22b      	bcs.n	8008202 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c4:	d112      	bne.n	80081ec <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d016      	beq.n	80081fc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	3324      	adds	r3, #36	; 0x24
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 f86e 	bl	80092b4 <xTaskRemoveFromEventList>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00e      	beq.n	80081fc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00b      	beq.n	80081fc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2201      	movs	r2, #1
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	e007      	b.n	80081fc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081f0:	3301      	adds	r3, #1
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	b25a      	sxtb	r2, r3
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081fc:	2301      	movs	r3, #1
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008200:	e001      	b.n	8008206 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008202:	2300      	movs	r3, #0
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008212:	4618      	mov	r0, r3
 8008214:	3738      	adds	r7, #56	; 0x38
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08c      	sub	sp, #48	; 0x30
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008228:	2300      	movs	r3, #0
 800822a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	2b00      	cmp	r3, #0
 8008234:	d109      	bne.n	800824a <xQueueReceive+0x2e>
	__asm volatile
 8008236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	623b      	str	r3, [r7, #32]
 8008248:	e7fe      	b.n	8008248 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <xQueueReceive+0x3c>
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <xQueueReceive+0x40>
 8008258:	2301      	movs	r3, #1
 800825a:	e000      	b.n	800825e <xQueueReceive+0x42>
 800825c:	2300      	movs	r3, #0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <xQueueReceive+0x5a>
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	e7fe      	b.n	8008274 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008276:	f001 f9d9 	bl	800962c <xTaskGetSchedulerState>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <xQueueReceive+0x6a>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <xQueueReceive+0x6e>
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <xQueueReceive+0x70>
 800828a:	2300      	movs	r3, #0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <xQueueReceive+0x88>
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	61bb      	str	r3, [r7, #24]
 80082a2:	e7fe      	b.n	80082a2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a4:	f002 f882 	bl	800a3ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01f      	beq.n	80082f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082b4:	68b9      	ldr	r1, [r7, #8]
 80082b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b8:	f000 fab5 	bl	8008826 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	1e5a      	subs	r2, r3, #1
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00f      	beq.n	80082ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	3310      	adds	r3, #16
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 ffef 	bl	80092b4 <xTaskRemoveFromEventList>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082dc:	4b3c      	ldr	r3, [pc, #240]	; (80083d0 <xQueueReceive+0x1b4>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ec:	f002 f88c 	bl	800a408 <vPortExitCritical>
				return pdPASS;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e069      	b.n	80083c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d103      	bne.n	8008302 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082fa:	f002 f885 	bl	800a408 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082fe:	2300      	movs	r3, #0
 8008300:	e062      	b.n	80083c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008308:	f107 0310 	add.w	r3, r7, #16
 800830c:	4618      	mov	r0, r3
 800830e:	f001 f833 	bl	8009378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008312:	2301      	movs	r3, #1
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008316:	f002 f877 	bl	800a408 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800831a:	f000 fda9 	bl	8008e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800831e:	f002 f845 	bl	800a3ac <vPortEnterCritical>
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008328:	b25b      	sxtb	r3, r3
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d103      	bne.n	8008338 <xQueueReceive+0x11c>
 8008330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800833e:	b25b      	sxtb	r3, r3
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d103      	bne.n	800834e <xQueueReceive+0x132>
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800834e:	f002 f85b 	bl	800a408 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008352:	1d3a      	adds	r2, r7, #4
 8008354:	f107 0310 	add.w	r3, r7, #16
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f001 f822 	bl	80093a4 <xTaskCheckForTimeOut>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d123      	bne.n	80083ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008368:	f000 fad5 	bl	8008916 <prvIsQueueEmpty>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d017      	beq.n	80083a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	3324      	adds	r3, #36	; 0x24
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f000 ff4c 	bl	8009218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008382:	f000 fa76 	bl	8008872 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008386:	f000 fd81 	bl	8008e8c <xTaskResumeAll>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d189      	bne.n	80082a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <xQueueReceive+0x1b4>)
 8008392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	e780      	b.n	80082a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80083a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083a4:	f000 fa65 	bl	8008872 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083a8:	f000 fd70 	bl	8008e8c <xTaskResumeAll>
 80083ac:	e77a      	b.n	80082a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b0:	f000 fa5f 	bl	8008872 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083b4:	f000 fd6a 	bl	8008e8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ba:	f000 faac 	bl	8008916 <prvIsQueueEmpty>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f43f af6f 	beq.w	80082a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3730      	adds	r7, #48	; 0x30
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	e000ed04 	.word	0xe000ed04

080083d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08e      	sub	sp, #56	; 0x38
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <xQueueSemaphoreTake+0x30>
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	623b      	str	r3, [r7, #32]
 8008402:	e7fe      	b.n	8008402 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <xQueueSemaphoreTake+0x4c>
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	e7fe      	b.n	800841e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008420:	f001 f904 	bl	800962c <xTaskGetSchedulerState>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <xQueueSemaphoreTake+0x5c>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <xQueueSemaphoreTake+0x60>
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <xQueueSemaphoreTake+0x62>
 8008434:	2300      	movs	r3, #0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d109      	bne.n	800844e <xQueueSemaphoreTake+0x7a>
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	61bb      	str	r3, [r7, #24]
 800844c:	e7fe      	b.n	800844c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800844e:	f001 ffad 	bl	800a3ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	d024      	beq.n	80084a8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	1e5a      	subs	r2, r3, #1
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d104      	bne.n	8008478 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800846e:	f001 fa59 	bl	8009924 <pvTaskIncrementMutexHeldCount>
 8008472:	4602      	mov	r2, r0
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00f      	beq.n	80084a0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008482:	3310      	adds	r3, #16
 8008484:	4618      	mov	r0, r3
 8008486:	f000 ff15 	bl	80092b4 <xTaskRemoveFromEventList>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d007      	beq.n	80084a0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008490:	4b53      	ldr	r3, [pc, #332]	; (80085e0 <xQueueSemaphoreTake+0x20c>)
 8008492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084a0:	f001 ffb2 	bl	800a408 <vPortExitCritical>
				return pdPASS;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e096      	b.n	80085d6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d110      	bne.n	80084d0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <xQueueSemaphoreTake+0xf4>
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	e7fe      	b.n	80084c6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80084c8:	f001 ff9e 	bl	800a408 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e082      	b.n	80085d6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084d6:	f107 030c 	add.w	r3, r7, #12
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 ff4c 	bl	8009378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084e4:	f001 ff90 	bl	800a408 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084e8:	f000 fcc2 	bl	8008e70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084ec:	f001 ff5e 	bl	800a3ac <vPortEnterCritical>
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084f6:	b25b      	sxtb	r3, r3
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fc:	d103      	bne.n	8008506 <xQueueSemaphoreTake+0x132>
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800850c:	b25b      	sxtb	r3, r3
 800850e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008512:	d103      	bne.n	800851c <xQueueSemaphoreTake+0x148>
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800851c:	f001 ff74 	bl	800a408 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008520:	463a      	mov	r2, r7
 8008522:	f107 030c 	add.w	r3, r7, #12
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f000 ff3b 	bl	80093a4 <xTaskCheckForTimeOut>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d132      	bne.n	800859a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008536:	f000 f9ee 	bl	8008916 <prvIsQueueEmpty>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d026      	beq.n	800858e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d109      	bne.n	800855c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008548:	f001 ff30 	bl	800a3ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800854c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	4618      	mov	r0, r3
 8008552:	f001 f889 	bl	8009668 <xTaskPriorityInherit>
 8008556:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008558:	f001 ff56 	bl	800a408 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	3324      	adds	r3, #36	; 0x24
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fe57 	bl	8009218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800856a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800856c:	f000 f981 	bl	8008872 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008570:	f000 fc8c 	bl	8008e8c <xTaskResumeAll>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	f47f af69 	bne.w	800844e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800857c:	4b18      	ldr	r3, [pc, #96]	; (80085e0 <xQueueSemaphoreTake+0x20c>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	e75f      	b.n	800844e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800858e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008590:	f000 f96f 	bl	8008872 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008594:	f000 fc7a 	bl	8008e8c <xTaskResumeAll>
 8008598:	e759      	b.n	800844e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800859a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800859c:	f000 f969 	bl	8008872 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085a0:	f000 fc74 	bl	8008e8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085a6:	f000 f9b6 	bl	8008916 <prvIsQueueEmpty>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f43f af4e 	beq.w	800844e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00d      	beq.n	80085d4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80085b8:	f001 fef8 	bl	800a3ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80085bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085be:	f000 f8b0 	bl	8008722 <prvGetDisinheritPriorityAfterTimeout>
 80085c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80085c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 f926 	bl	800981c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80085d0:	f001 ff1a 	bl	800a408 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3738      	adds	r7, #56	; 0x38
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	e000ed04 	.word	0xe000ed04

080085e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08e      	sub	sp, #56	; 0x38
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d109      	bne.n	800860e <xQueueReceiveFromISR+0x2a>
 80085fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	623b      	str	r3, [r7, #32]
 800860c:	e7fe      	b.n	800860c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d103      	bne.n	800861c <xQueueReceiveFromISR+0x38>
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <xQueueReceiveFromISR+0x3c>
 800861c:	2301      	movs	r3, #1
 800861e:	e000      	b.n	8008622 <xQueueReceiveFromISR+0x3e>
 8008620:	2300      	movs	r3, #0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d109      	bne.n	800863a <xQueueReceiveFromISR+0x56>
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	e7fe      	b.n	8008638 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800863a:	f001 ff93 	bl	800a564 <vPortValidateInterruptPriority>
	__asm volatile
 800863e:	f3ef 8211 	mrs	r2, BASEPRI
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	61ba      	str	r2, [r7, #24]
 8008654:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008656:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	2b00      	cmp	r3, #0
 8008664:	d02f      	beq.n	80086c6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800866c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008674:	f000 f8d7 	bl	8008826 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	1e5a      	subs	r2, r3, #1
 800867c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d112      	bne.n	80086b0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d016      	beq.n	80086c0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	3310      	adds	r3, #16
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fe0c 	bl	80092b4 <xTaskRemoveFromEventList>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00e      	beq.n	80086c0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e007      	b.n	80086c0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80086b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086b4:	3301      	adds	r3, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	b25a      	sxtb	r2, r3
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
 80086c4:	e001      	b.n	80086ca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	637b      	str	r3, [r7, #52]	; 0x34
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3738      	adds	r7, #56	; 0x38
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d109      	bne.n	8008704 <vQueueDelete+0x26>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	60bb      	str	r3, [r7, #8]
 8008702:	e7fe      	b.n	8008702 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 f95d 	bl	80089c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f002 f825 	bl	800a764 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800871a:	bf00      	nop
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	2b00      	cmp	r3, #0
 8008730:	d006      	beq.n	8008740 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	e001      	b.n	8008744 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008744:	68fb      	ldr	r3, [r7, #12]
	}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10d      	bne.n	800878c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d14d      	bne.n	8008814 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 ffe1 	bl	8009744 <xTaskPriorityDisinherit>
 8008782:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	605a      	str	r2, [r3, #4]
 800878a:	e043      	b.n	8008814 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d119      	bne.n	80087c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6898      	ldr	r0, [r3, #8]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	461a      	mov	r2, r3
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	f002 f91f 	bl	800a9e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689a      	ldr	r2, [r3, #8]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	441a      	add	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d32b      	bcc.n	8008814 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	609a      	str	r2, [r3, #8]
 80087c4:	e026      	b.n	8008814 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68d8      	ldr	r0, [r3, #12]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ce:	461a      	mov	r2, r3
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	f002 f905 	bl	800a9e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	425b      	negs	r3, r3
 80087e0:	441a      	add	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d207      	bcs.n	8008802 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	425b      	negs	r3, r3
 80087fc:	441a      	add	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b02      	cmp	r3, #2
 8008806:	d105      	bne.n	8008814 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800881c:	697b      	ldr	r3, [r7, #20]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3718      	adds	r7, #24
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	d018      	beq.n	800886a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	441a      	add	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	429a      	cmp	r2, r3
 8008850:	d303      	bcc.n	800885a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68d9      	ldr	r1, [r3, #12]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	461a      	mov	r2, r3
 8008864:	6838      	ldr	r0, [r7, #0]
 8008866:	f002 f8bb 	bl	800a9e0 <memcpy>
	}
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800887a:	f001 fd97 	bl	800a3ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008884:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008886:	e011      	b.n	80088ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	d012      	beq.n	80088b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3324      	adds	r3, #36	; 0x24
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fd0d 	bl	80092b4 <xTaskRemoveFromEventList>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088a0:	f000 fde0 	bl	8009464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dce9      	bgt.n	8008888 <prvUnlockQueue+0x16>
 80088b4:	e000      	b.n	80088b8 <prvUnlockQueue+0x46>
					break;
 80088b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	22ff      	movs	r2, #255	; 0xff
 80088bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088c0:	f001 fda2 	bl	800a408 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088c4:	f001 fd72 	bl	800a3ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088d0:	e011      	b.n	80088f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d012      	beq.n	8008900 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3310      	adds	r3, #16
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fce8 	bl	80092b4 <xTaskRemoveFromEventList>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088ea:	f000 fdbb 	bl	8009464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dce9      	bgt.n	80088d2 <prvUnlockQueue+0x60>
 80088fe:	e000      	b.n	8008902 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008900:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	22ff      	movs	r2, #255	; 0xff
 8008906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800890a:	f001 fd7d 	bl	800a408 <vPortExitCritical>
}
 800890e:	bf00      	nop
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800891e:	f001 fd45 	bl	800a3ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	2b00      	cmp	r3, #0
 8008928:	d102      	bne.n	8008930 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800892a:	2301      	movs	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	e001      	b.n	8008934 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008934:	f001 fd68 	bl	800a408 <vPortExitCritical>

	return xReturn;
 8008938:	68fb      	ldr	r3, [r7, #12]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800894a:	f001 fd2f 	bl	800a3ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008956:	429a      	cmp	r2, r3
 8008958:	d102      	bne.n	8008960 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800895a:	2301      	movs	r3, #1
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	e001      	b.n	8008964 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008960:	2300      	movs	r3, #0
 8008962:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008964:	f001 fd50 	bl	800a408 <vPortExitCritical>

	return xReturn;
 8008968:	68fb      	ldr	r3, [r7, #12]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e014      	b.n	80089ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008984:	4a0e      	ldr	r2, [pc, #56]	; (80089c0 <vQueueAddToRegistry+0x4c>)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008990:	490b      	ldr	r1, [pc, #44]	; (80089c0 <vQueueAddToRegistry+0x4c>)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800899a:	4a09      	ldr	r2, [pc, #36]	; (80089c0 <vQueueAddToRegistry+0x4c>)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089a6:	e005      	b.n	80089b4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3301      	adds	r3, #1
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b07      	cmp	r3, #7
 80089b2:	d9e7      	bls.n	8008984 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	20002da8 	.word	0x20002da8

080089c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	e016      	b.n	8008a00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80089d2:	4a10      	ldr	r2, [pc, #64]	; (8008a14 <vQueueUnregisterQueue+0x50>)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	4413      	add	r3, r2
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d10b      	bne.n	80089fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80089e2:	4a0c      	ldr	r2, [pc, #48]	; (8008a14 <vQueueUnregisterQueue+0x50>)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2100      	movs	r1, #0
 80089e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80089ec:	4a09      	ldr	r2, [pc, #36]	; (8008a14 <vQueueUnregisterQueue+0x50>)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	4413      	add	r3, r2
 80089f4:	2200      	movs	r2, #0
 80089f6:	605a      	str	r2, [r3, #4]
				break;
 80089f8:	e005      	b.n	8008a06 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3301      	adds	r3, #1
 80089fe:	60fb      	str	r3, [r7, #12]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b07      	cmp	r3, #7
 8008a04:	d9e5      	bls.n	80089d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a06:	bf00      	nop
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	20002da8 	.word	0x20002da8

08008a18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a28:	f001 fcc0 	bl	800a3ac <vPortEnterCritical>
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a32:	b25b      	sxtb	r3, r3
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d103      	bne.n	8008a42 <vQueueWaitForMessageRestricted+0x2a>
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a48:	b25b      	sxtb	r3, r3
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4e:	d103      	bne.n	8008a58 <vQueueWaitForMessageRestricted+0x40>
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a58:	f001 fcd6 	bl	800a408 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d106      	bne.n	8008a72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	3324      	adds	r3, #36	; 0x24
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	68b9      	ldr	r1, [r7, #8]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 fbf7 	bl	8009260 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a72:	6978      	ldr	r0, [r7, #20]
 8008a74:	f7ff fefd 	bl	8008872 <prvUnlockQueue>
	}
 8008a78:	bf00      	nop
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08e      	sub	sp, #56	; 0x38
 8008a84:	af04      	add	r7, sp, #16
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d109      	bne.n	8008aa8 <xTaskCreateStatic+0x28>
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	623b      	str	r3, [r7, #32]
 8008aa6:	e7fe      	b.n	8008aa6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d109      	bne.n	8008ac2 <xTaskCreateStatic+0x42>
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61fb      	str	r3, [r7, #28]
 8008ac0:	e7fe      	b.n	8008ac0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ac2:	235c      	movs	r3, #92	; 0x5c
 8008ac4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b5c      	cmp	r3, #92	; 0x5c
 8008aca:	d009      	beq.n	8008ae0 <xTaskCreateStatic+0x60>
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	61bb      	str	r3, [r7, #24]
 8008ade:	e7fe      	b.n	8008ade <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01e      	beq.n	8008b24 <xTaskCreateStatic+0xa4>
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01b      	beq.n	8008b24 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	2202      	movs	r2, #2
 8008afa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008afe:	2300      	movs	r3, #0
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	f107 0314 	add.w	r3, r7, #20
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 f850 	bl	8008bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b1e:	f000 f8d3 	bl	8008cc8 <prvAddNewTaskToReadyList>
 8008b22:	e001      	b.n	8008b28 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b28:	697b      	ldr	r3, [r7, #20]
	}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3728      	adds	r7, #40	; 0x28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b08c      	sub	sp, #48	; 0x30
 8008b36:	af04      	add	r7, sp, #16
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	603b      	str	r3, [r7, #0]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b42:	88fb      	ldrh	r3, [r7, #6]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4618      	mov	r0, r3
 8008b48:	f001 fd4a 	bl	800a5e0 <pvPortMalloc>
 8008b4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00e      	beq.n	8008b72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b54:	205c      	movs	r0, #92	; 0x5c
 8008b56:	f001 fd43 	bl	800a5e0 <pvPortMalloc>
 8008b5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	631a      	str	r2, [r3, #48]	; 0x30
 8008b68:	e005      	b.n	8008b76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b6a:	6978      	ldr	r0, [r7, #20]
 8008b6c:	f001 fdfa 	bl	800a764 <vPortFree>
 8008b70:	e001      	b.n	8008b76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d017      	beq.n	8008bac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b84:	88fa      	ldrh	r2, [r7, #6]
 8008b86:	2300      	movs	r3, #0
 8008b88:	9303      	str	r3, [sp, #12]
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	9302      	str	r3, [sp, #8]
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 f80e 	bl	8008bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ba0:	69f8      	ldr	r0, [r7, #28]
 8008ba2:	f000 f891 	bl	8008cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	61bb      	str	r3, [r7, #24]
 8008baa:	e002      	b.n	8008bb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bac:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bb2:	69bb      	ldr	r3, [r7, #24]
	}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3720      	adds	r7, #32
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	21a5      	movs	r1, #165	; 0xa5
 8008bd6:	f001 ff0e 	bl	800a9f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008be4:	3b01      	subs	r3, #1
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <prvInitialiseNewTask+0x56>
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	e7fe      	b.n	8008c10 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c12:	2300      	movs	r3, #0
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	e012      	b.n	8008c3e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	7819      	ldrb	r1, [r3, #0]
 8008c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	3334      	adds	r3, #52	; 0x34
 8008c28:	460a      	mov	r2, r1
 8008c2a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4413      	add	r3, r2
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	61fb      	str	r3, [r7, #28]
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	2b0f      	cmp	r3, #15
 8008c42:	d9e9      	bls.n	8008c18 <prvInitialiseNewTask+0x5c>
 8008c44:	e000      	b.n	8008c48 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008c46:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	2b37      	cmp	r3, #55	; 0x37
 8008c54:	d901      	bls.n	8008c5a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c56:	2337      	movs	r3, #55	; 0x37
 8008c58:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c64:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	2200      	movs	r2, #0
 8008c6a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fe87 	bl	8007984 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	3318      	adds	r3, #24
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fe82 	bl	8007984 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c94:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	2200      	movs	r2, #0
 8008c9a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ca4:	683a      	ldr	r2, [r7, #0]
 8008ca6:	68f9      	ldr	r1, [r7, #12]
 8008ca8:	69b8      	ldr	r0, [r7, #24]
 8008caa:	f001 fa5b 	bl	800a164 <pxPortInitialiseStack>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc0:	bf00      	nop
 8008cc2:	3720      	adds	r7, #32
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cd0:	f001 fb6c 	bl	800a3ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cd4:	4b2d      	ldr	r3, [pc, #180]	; (8008d8c <prvAddNewTaskToReadyList+0xc4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	4a2c      	ldr	r2, [pc, #176]	; (8008d8c <prvAddNewTaskToReadyList+0xc4>)
 8008cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cde:	4b2c      	ldr	r3, [pc, #176]	; (8008d90 <prvAddNewTaskToReadyList+0xc8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ce6:	4a2a      	ldr	r2, [pc, #168]	; (8008d90 <prvAddNewTaskToReadyList+0xc8>)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cec:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <prvAddNewTaskToReadyList+0xc4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d110      	bne.n	8008d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cf4:	f000 fbda 	bl	80094ac <prvInitialiseTaskLists>
 8008cf8:	e00d      	b.n	8008d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cfa:	4b26      	ldr	r3, [pc, #152]	; (8008d94 <prvAddNewTaskToReadyList+0xcc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d02:	4b23      	ldr	r3, [pc, #140]	; (8008d90 <prvAddNewTaskToReadyList+0xc8>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d802      	bhi.n	8008d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d10:	4a1f      	ldr	r2, [pc, #124]	; (8008d90 <prvAddNewTaskToReadyList+0xc8>)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d16:	4b20      	ldr	r3, [pc, #128]	; (8008d98 <prvAddNewTaskToReadyList+0xd0>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <prvAddNewTaskToReadyList+0xd0>)
 8008d1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d20:	4b1d      	ldr	r3, [pc, #116]	; (8008d98 <prvAddNewTaskToReadyList+0xd0>)
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	4b1b      	ldr	r3, [pc, #108]	; (8008d9c <prvAddNewTaskToReadyList+0xd4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d903      	bls.n	8008d3c <prvAddNewTaskToReadyList+0x74>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	4a18      	ldr	r2, [pc, #96]	; (8008d9c <prvAddNewTaskToReadyList+0xd4>)
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4a15      	ldr	r2, [pc, #84]	; (8008da0 <prvAddNewTaskToReadyList+0xd8>)
 8008d4a:	441a      	add	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f7fe fe23 	bl	800799e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d58:	f001 fb56 	bl	800a408 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d5c:	4b0d      	ldr	r3, [pc, #52]	; (8008d94 <prvAddNewTaskToReadyList+0xcc>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00e      	beq.n	8008d82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d64:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <prvAddNewTaskToReadyList+0xc8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d207      	bcs.n	8008d82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d72:	4b0c      	ldr	r3, [pc, #48]	; (8008da4 <prvAddNewTaskToReadyList+0xdc>)
 8008d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20000d34 	.word	0x20000d34
 8008d90:	20000860 	.word	0x20000860
 8008d94:	20000d40 	.word	0x20000d40
 8008d98:	20000d50 	.word	0x20000d50
 8008d9c:	20000d3c 	.word	0x20000d3c
 8008da0:	20000864 	.word	0x20000864
 8008da4:	e000ed04 	.word	0xe000ed04

08008da8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008db6:	463a      	mov	r2, r7
 8008db8:	1d39      	adds	r1, r7, #4
 8008dba:	f107 0308 	add.w	r3, r7, #8
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fd8c 	bl	80078dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	9202      	str	r2, [sp, #8]
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	460a      	mov	r2, r1
 8008dd6:	4920      	ldr	r1, [pc, #128]	; (8008e58 <vTaskStartScheduler+0xb0>)
 8008dd8:	4820      	ldr	r0, [pc, #128]	; (8008e5c <vTaskStartScheduler+0xb4>)
 8008dda:	f7ff fe51 	bl	8008a80 <xTaskCreateStatic>
 8008dde:	4602      	mov	r2, r0
 8008de0:	4b1f      	ldr	r3, [pc, #124]	; (8008e60 <vTaskStartScheduler+0xb8>)
 8008de2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008de4:	4b1e      	ldr	r3, [pc, #120]	; (8008e60 <vTaskStartScheduler+0xb8>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dec:	2301      	movs	r3, #1
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	e001      	b.n	8008df6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d102      	bne.n	8008e02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dfc:	f000 fdfa 	bl	80099f4 <xTimerCreateTimerTask>
 8008e00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d115      	bne.n	8008e34 <vTaskStartScheduler+0x8c>
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e1a:	4b12      	ldr	r3, [pc, #72]	; (8008e64 <vTaskStartScheduler+0xbc>)
 8008e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e22:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <vTaskStartScheduler+0xc0>)
 8008e24:	2201      	movs	r2, #1
 8008e26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e28:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <vTaskStartScheduler+0xc4>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e2e:	f001 fa1f 	bl	800a270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e32:	e00d      	b.n	8008e50 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d109      	bne.n	8008e50 <vTaskStartScheduler+0xa8>
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	e7fe      	b.n	8008e4e <vTaskStartScheduler+0xa6>
}
 8008e50:	bf00      	nop
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	0800c518 	.word	0x0800c518
 8008e5c:	0800947d 	.word	0x0800947d
 8008e60:	20000d58 	.word	0x20000d58
 8008e64:	20000d54 	.word	0x20000d54
 8008e68:	20000d40 	.word	0x20000d40
 8008e6c:	20000d38 	.word	0x20000d38

08008e70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008e74:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <vTaskSuspendAll+0x18>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	4a03      	ldr	r2, [pc, #12]	; (8008e88 <vTaskSuspendAll+0x18>)
 8008e7c:	6013      	str	r3, [r2, #0]
}
 8008e7e:	bf00      	nop
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	20000d5c 	.word	0x20000d5c

08008e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e9a:	4b41      	ldr	r3, [pc, #260]	; (8008fa0 <xTaskResumeAll+0x114>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d109      	bne.n	8008eb6 <xTaskResumeAll+0x2a>
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	e7fe      	b.n	8008eb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008eb6:	f001 fa79 	bl	800a3ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008eba:	4b39      	ldr	r3, [pc, #228]	; (8008fa0 <xTaskResumeAll+0x114>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	4a37      	ldr	r2, [pc, #220]	; (8008fa0 <xTaskResumeAll+0x114>)
 8008ec2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ec4:	4b36      	ldr	r3, [pc, #216]	; (8008fa0 <xTaskResumeAll+0x114>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d162      	bne.n	8008f92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ecc:	4b35      	ldr	r3, [pc, #212]	; (8008fa4 <xTaskResumeAll+0x118>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d05e      	beq.n	8008f92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ed4:	e02f      	b.n	8008f36 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008ed6:	4b34      	ldr	r3, [pc, #208]	; (8008fa8 <xTaskResumeAll+0x11c>)
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3318      	adds	r3, #24
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe fdb8 	bl	8007a58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7fe fdb3 	bl	8007a58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef6:	4b2d      	ldr	r3, [pc, #180]	; (8008fac <xTaskResumeAll+0x120>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d903      	bls.n	8008f06 <xTaskResumeAll+0x7a>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f02:	4a2a      	ldr	r2, [pc, #168]	; (8008fac <xTaskResumeAll+0x120>)
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4a27      	ldr	r2, [pc, #156]	; (8008fb0 <xTaskResumeAll+0x124>)
 8008f14:	441a      	add	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f7fe fd3e 	bl	800799e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f26:	4b23      	ldr	r3, [pc, #140]	; (8008fb4 <xTaskResumeAll+0x128>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d302      	bcc.n	8008f36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008f30:	4b21      	ldr	r3, [pc, #132]	; (8008fb8 <xTaskResumeAll+0x12c>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f36:	4b1c      	ldr	r3, [pc, #112]	; (8008fa8 <xTaskResumeAll+0x11c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1cb      	bne.n	8008ed6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f44:	f000 fb4c 	bl	80095e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008f48:	4b1c      	ldr	r3, [pc, #112]	; (8008fbc <xTaskResumeAll+0x130>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d010      	beq.n	8008f76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f54:	f000 f846 	bl	8008fe4 <xTaskIncrementTick>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008f5e:	4b16      	ldr	r3, [pc, #88]	; (8008fb8 <xTaskResumeAll+0x12c>)
 8008f60:	2201      	movs	r2, #1
 8008f62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1f1      	bne.n	8008f54 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008f70:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <xTaskResumeAll+0x130>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f76:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <xTaskResumeAll+0x12c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d009      	beq.n	8008f92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f82:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <xTaskResumeAll+0x134>)
 8008f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f88:	601a      	str	r2, [r3, #0]
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f92:	f001 fa39 	bl	800a408 <vPortExitCritical>

	return xAlreadyYielded;
 8008f96:	68bb      	ldr	r3, [r7, #8]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000d5c 	.word	0x20000d5c
 8008fa4:	20000d34 	.word	0x20000d34
 8008fa8:	20000cf4 	.word	0x20000cf4
 8008fac:	20000d3c 	.word	0x20000d3c
 8008fb0:	20000864 	.word	0x20000864
 8008fb4:	20000860 	.word	0x20000860
 8008fb8:	20000d48 	.word	0x20000d48
 8008fbc:	20000d44 	.word	0x20000d44
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fca:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <xTaskGetTickCount+0x1c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fd0:	687b      	ldr	r3, [r7, #4]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20000d38 	.word	0x20000d38

08008fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fee:	4b51      	ldr	r3, [pc, #324]	; (8009134 <xTaskIncrementTick+0x150>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f040 808d 	bne.w	8009112 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ff8:	4b4f      	ldr	r3, [pc, #316]	; (8009138 <xTaskIncrementTick+0x154>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009000:	4a4d      	ldr	r2, [pc, #308]	; (8009138 <xTaskIncrementTick+0x154>)
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d11f      	bne.n	800904c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800900c:	4b4b      	ldr	r3, [pc, #300]	; (800913c <xTaskIncrementTick+0x158>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <xTaskIncrementTick+0x46>
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	e7fe      	b.n	8009028 <xTaskIncrementTick+0x44>
 800902a:	4b44      	ldr	r3, [pc, #272]	; (800913c <xTaskIncrementTick+0x158>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	4b43      	ldr	r3, [pc, #268]	; (8009140 <xTaskIncrementTick+0x15c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a41      	ldr	r2, [pc, #260]	; (800913c <xTaskIncrementTick+0x158>)
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	4a41      	ldr	r2, [pc, #260]	; (8009140 <xTaskIncrementTick+0x15c>)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	4b41      	ldr	r3, [pc, #260]	; (8009144 <xTaskIncrementTick+0x160>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3301      	adds	r3, #1
 8009044:	4a3f      	ldr	r2, [pc, #252]	; (8009144 <xTaskIncrementTick+0x160>)
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	f000 faca 	bl	80095e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800904c:	4b3e      	ldr	r3, [pc, #248]	; (8009148 <xTaskIncrementTick+0x164>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	429a      	cmp	r2, r3
 8009054:	d34e      	bcc.n	80090f4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009056:	4b39      	ldr	r3, [pc, #228]	; (800913c <xTaskIncrementTick+0x158>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <xTaskIncrementTick+0x80>
 8009060:	2301      	movs	r3, #1
 8009062:	e000      	b.n	8009066 <xTaskIncrementTick+0x82>
 8009064:	2300      	movs	r3, #0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d004      	beq.n	8009074 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800906a:	4b37      	ldr	r3, [pc, #220]	; (8009148 <xTaskIncrementTick+0x164>)
 800906c:	f04f 32ff 	mov.w	r2, #4294967295
 8009070:	601a      	str	r2, [r3, #0]
					break;
 8009072:	e03f      	b.n	80090f4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009074:	4b31      	ldr	r3, [pc, #196]	; (800913c <xTaskIncrementTick+0x158>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	429a      	cmp	r2, r3
 800908a:	d203      	bcs.n	8009094 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800908c:	4a2e      	ldr	r2, [pc, #184]	; (8009148 <xTaskIncrementTick+0x164>)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6013      	str	r3, [r2, #0]
						break;
 8009092:	e02f      	b.n	80090f4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3304      	adds	r3, #4
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe fcdd 	bl	8007a58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d004      	beq.n	80090b0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	3318      	adds	r3, #24
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fcd4 	bl	8007a58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b4:	4b25      	ldr	r3, [pc, #148]	; (800914c <xTaskIncrementTick+0x168>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d903      	bls.n	80090c4 <xTaskIncrementTick+0xe0>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c0:	4a22      	ldr	r2, [pc, #136]	; (800914c <xTaskIncrementTick+0x168>)
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4a1f      	ldr	r2, [pc, #124]	; (8009150 <xTaskIncrementTick+0x16c>)
 80090d2:	441a      	add	r2, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fe fc5f 	bl	800799e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	4b1b      	ldr	r3, [pc, #108]	; (8009154 <xTaskIncrementTick+0x170>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d3b3      	bcc.n	8009056 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090f2:	e7b0      	b.n	8009056 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090f4:	4b17      	ldr	r3, [pc, #92]	; (8009154 <xTaskIncrementTick+0x170>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090fa:	4915      	ldr	r1, [pc, #84]	; (8009150 <xTaskIncrementTick+0x16c>)
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d907      	bls.n	800911c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800910c:	2301      	movs	r3, #1
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	e004      	b.n	800911c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009112:	4b11      	ldr	r3, [pc, #68]	; (8009158 <xTaskIncrementTick+0x174>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	4a0f      	ldr	r2, [pc, #60]	; (8009158 <xTaskIncrementTick+0x174>)
 800911a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800911c:	4b0f      	ldr	r3, [pc, #60]	; (800915c <xTaskIncrementTick+0x178>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009128:	697b      	ldr	r3, [r7, #20]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20000d5c 	.word	0x20000d5c
 8009138:	20000d38 	.word	0x20000d38
 800913c:	20000cec 	.word	0x20000cec
 8009140:	20000cf0 	.word	0x20000cf0
 8009144:	20000d4c 	.word	0x20000d4c
 8009148:	20000d54 	.word	0x20000d54
 800914c:	20000d3c 	.word	0x20000d3c
 8009150:	20000864 	.word	0x20000864
 8009154:	20000860 	.word	0x20000860
 8009158:	20000d44 	.word	0x20000d44
 800915c:	20000d48 	.word	0x20000d48

08009160 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009166:	4b27      	ldr	r3, [pc, #156]	; (8009204 <vTaskSwitchContext+0xa4>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800916e:	4b26      	ldr	r3, [pc, #152]	; (8009208 <vTaskSwitchContext+0xa8>)
 8009170:	2201      	movs	r2, #1
 8009172:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009174:	e040      	b.n	80091f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009176:	4b24      	ldr	r3, [pc, #144]	; (8009208 <vTaskSwitchContext+0xa8>)
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800917c:	4b23      	ldr	r3, [pc, #140]	; (800920c <vTaskSwitchContext+0xac>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e00f      	b.n	80091a4 <vTaskSwitchContext+0x44>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d109      	bne.n	800919e <vTaskSwitchContext+0x3e>
 800918a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	607b      	str	r3, [r7, #4]
 800919c:	e7fe      	b.n	800919c <vTaskSwitchContext+0x3c>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	491a      	ldr	r1, [pc, #104]	; (8009210 <vTaskSwitchContext+0xb0>)
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	4613      	mov	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0e5      	beq.n	8009184 <vTaskSwitchContext+0x24>
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4a13      	ldr	r2, [pc, #76]	; (8009210 <vTaskSwitchContext+0xb0>)
 80091c4:	4413      	add	r3, r2
 80091c6:	60bb      	str	r3, [r7, #8]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	685a      	ldr	r2, [r3, #4]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	605a      	str	r2, [r3, #4]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	3308      	adds	r3, #8
 80091da:	429a      	cmp	r2, r3
 80091dc:	d104      	bne.n	80091e8 <vTaskSwitchContext+0x88>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	605a      	str	r2, [r3, #4]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	4a09      	ldr	r2, [pc, #36]	; (8009214 <vTaskSwitchContext+0xb4>)
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	4a06      	ldr	r2, [pc, #24]	; (800920c <vTaskSwitchContext+0xac>)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6013      	str	r3, [r2, #0]
}
 80091f8:	bf00      	nop
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	20000d5c 	.word	0x20000d5c
 8009208:	20000d48 	.word	0x20000d48
 800920c:	20000d3c 	.word	0x20000d3c
 8009210:	20000864 	.word	0x20000864
 8009214:	20000860 	.word	0x20000860

08009218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d109      	bne.n	800923c <vTaskPlaceOnEventList+0x24>
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	e7fe      	b.n	800923a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800923c:	4b07      	ldr	r3, [pc, #28]	; (800925c <vTaskPlaceOnEventList+0x44>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3318      	adds	r3, #24
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7fe fbce 	bl	80079e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800924a:	2101      	movs	r1, #1
 800924c:	6838      	ldr	r0, [r7, #0]
 800924e:	f000 fb7d 	bl	800994c <prvAddCurrentTaskToDelayedList>
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000860 	.word	0x20000860

08009260 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d109      	bne.n	8009286 <vTaskPlaceOnEventListRestricted+0x26>
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	e7fe      	b.n	8009284 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009286:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <vTaskPlaceOnEventListRestricted+0x50>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3318      	adds	r3, #24
 800928c:	4619      	mov	r1, r3
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7fe fb85 	bl	800799e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800929a:	f04f 33ff 	mov.w	r3, #4294967295
 800929e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	68b8      	ldr	r0, [r7, #8]
 80092a4:	f000 fb52 	bl	800994c <prvAddCurrentTaskToDelayedList>
	}
 80092a8:	bf00      	nop
 80092aa:	3718      	adds	r7, #24
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20000860 	.word	0x20000860

080092b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <xTaskRemoveFromEventList+0x2a>
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	e7fe      	b.n	80092dc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	3318      	adds	r3, #24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fbb8 	bl	8007a58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092e8:	4b1d      	ldr	r3, [pc, #116]	; (8009360 <xTaskRemoveFromEventList+0xac>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d11d      	bne.n	800932c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	3304      	adds	r3, #4
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe fbaf 	bl	8007a58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092fe:	4b19      	ldr	r3, [pc, #100]	; (8009364 <xTaskRemoveFromEventList+0xb0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	d903      	bls.n	800930e <xTaskRemoveFromEventList+0x5a>
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	4a16      	ldr	r2, [pc, #88]	; (8009364 <xTaskRemoveFromEventList+0xb0>)
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4a13      	ldr	r2, [pc, #76]	; (8009368 <xTaskRemoveFromEventList+0xb4>)
 800931c:	441a      	add	r2, r3
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7fe fb3a 	bl	800799e <vListInsertEnd>
 800932a:	e005      	b.n	8009338 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	3318      	adds	r3, #24
 8009330:	4619      	mov	r1, r3
 8009332:	480e      	ldr	r0, [pc, #56]	; (800936c <xTaskRemoveFromEventList+0xb8>)
 8009334:	f7fe fb33 	bl	800799e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4b0c      	ldr	r3, [pc, #48]	; (8009370 <xTaskRemoveFromEventList+0xbc>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009342:	429a      	cmp	r2, r3
 8009344:	d905      	bls.n	8009352 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009346:	2301      	movs	r3, #1
 8009348:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800934a:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <xTaskRemoveFromEventList+0xc0>)
 800934c:	2201      	movs	r2, #1
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	e001      	b.n	8009356 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009356:	697b      	ldr	r3, [r7, #20]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20000d5c 	.word	0x20000d5c
 8009364:	20000d3c 	.word	0x20000d3c
 8009368:	20000864 	.word	0x20000864
 800936c:	20000cf4 	.word	0x20000cf4
 8009370:	20000860 	.word	0x20000860
 8009374:	20000d48 	.word	0x20000d48

08009378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009380:	4b06      	ldr	r3, [pc, #24]	; (800939c <vTaskInternalSetTimeOutState+0x24>)
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009388:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <vTaskInternalSetTimeOutState+0x28>)
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	605a      	str	r2, [r3, #4]
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	20000d4c 	.word	0x20000d4c
 80093a0:	20000d38 	.word	0x20000d38

080093a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b088      	sub	sp, #32
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <xTaskCheckForTimeOut+0x24>
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	e7fe      	b.n	80093c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <xTaskCheckForTimeOut+0x3e>
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e7fe      	b.n	80093e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80093e2:	f000 ffe3 	bl	800a3ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093e6:	4b1d      	ldr	r3, [pc, #116]	; (800945c <xTaskCheckForTimeOut+0xb8>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fe:	d102      	bne.n	8009406 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009400:	2300      	movs	r3, #0
 8009402:	61fb      	str	r3, [r7, #28]
 8009404:	e023      	b.n	800944e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	4b15      	ldr	r3, [pc, #84]	; (8009460 <xTaskCheckForTimeOut+0xbc>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d007      	beq.n	8009422 <xTaskCheckForTimeOut+0x7e>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	69ba      	ldr	r2, [r7, #24]
 8009418:	429a      	cmp	r2, r3
 800941a:	d302      	bcc.n	8009422 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800941c:	2301      	movs	r3, #1
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	e015      	b.n	800944e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	429a      	cmp	r2, r3
 800942a:	d20b      	bcs.n	8009444 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	1ad2      	subs	r2, r2, r3
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7ff ff9d 	bl	8009378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800943e:	2300      	movs	r3, #0
 8009440:	61fb      	str	r3, [r7, #28]
 8009442:	e004      	b.n	800944e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800944a:	2301      	movs	r3, #1
 800944c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800944e:	f000 ffdb 	bl	800a408 <vPortExitCritical>

	return xReturn;
 8009452:	69fb      	ldr	r3, [r7, #28]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3720      	adds	r7, #32
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20000d38 	.word	0x20000d38
 8009460:	20000d4c 	.word	0x20000d4c

08009464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009468:	4b03      	ldr	r3, [pc, #12]	; (8009478 <vTaskMissedYield+0x14>)
 800946a:	2201      	movs	r2, #1
 800946c:	601a      	str	r2, [r3, #0]
}
 800946e:	bf00      	nop
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	20000d48 	.word	0x20000d48

0800947c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009484:	f000 f852 	bl	800952c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009488:	4b06      	ldr	r3, [pc, #24]	; (80094a4 <prvIdleTask+0x28>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d9f9      	bls.n	8009484 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009490:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <prvIdleTask+0x2c>)
 8009492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094a0:	e7f0      	b.n	8009484 <prvIdleTask+0x8>
 80094a2:	bf00      	nop
 80094a4:	20000864 	.word	0x20000864
 80094a8:	e000ed04 	.word	0xe000ed04

080094ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094b2:	2300      	movs	r3, #0
 80094b4:	607b      	str	r3, [r7, #4]
 80094b6:	e00c      	b.n	80094d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4a12      	ldr	r2, [pc, #72]	; (800950c <prvInitialiseTaskLists+0x60>)
 80094c4:	4413      	add	r3, r2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fe fa3c 	bl	8007944 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3301      	adds	r3, #1
 80094d0:	607b      	str	r3, [r7, #4]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2b37      	cmp	r3, #55	; 0x37
 80094d6:	d9ef      	bls.n	80094b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094d8:	480d      	ldr	r0, [pc, #52]	; (8009510 <prvInitialiseTaskLists+0x64>)
 80094da:	f7fe fa33 	bl	8007944 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094de:	480d      	ldr	r0, [pc, #52]	; (8009514 <prvInitialiseTaskLists+0x68>)
 80094e0:	f7fe fa30 	bl	8007944 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094e4:	480c      	ldr	r0, [pc, #48]	; (8009518 <prvInitialiseTaskLists+0x6c>)
 80094e6:	f7fe fa2d 	bl	8007944 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094ea:	480c      	ldr	r0, [pc, #48]	; (800951c <prvInitialiseTaskLists+0x70>)
 80094ec:	f7fe fa2a 	bl	8007944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094f0:	480b      	ldr	r0, [pc, #44]	; (8009520 <prvInitialiseTaskLists+0x74>)
 80094f2:	f7fe fa27 	bl	8007944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094f6:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <prvInitialiseTaskLists+0x78>)
 80094f8:	4a05      	ldr	r2, [pc, #20]	; (8009510 <prvInitialiseTaskLists+0x64>)
 80094fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094fc:	4b0a      	ldr	r3, [pc, #40]	; (8009528 <prvInitialiseTaskLists+0x7c>)
 80094fe:	4a05      	ldr	r2, [pc, #20]	; (8009514 <prvInitialiseTaskLists+0x68>)
 8009500:	601a      	str	r2, [r3, #0]
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20000864 	.word	0x20000864
 8009510:	20000cc4 	.word	0x20000cc4
 8009514:	20000cd8 	.word	0x20000cd8
 8009518:	20000cf4 	.word	0x20000cf4
 800951c:	20000d08 	.word	0x20000d08
 8009520:	20000d20 	.word	0x20000d20
 8009524:	20000cec 	.word	0x20000cec
 8009528:	20000cf0 	.word	0x20000cf0

0800952c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009532:	e019      	b.n	8009568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009534:	f000 ff3a 	bl	800a3ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009538:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <prvCheckTasksWaitingTermination+0x4c>)
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	3304      	adds	r3, #4
 8009544:	4618      	mov	r0, r3
 8009546:	f7fe fa87 	bl	8007a58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800954a:	4b0c      	ldr	r3, [pc, #48]	; (800957c <prvCheckTasksWaitingTermination+0x50>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3b01      	subs	r3, #1
 8009550:	4a0a      	ldr	r2, [pc, #40]	; (800957c <prvCheckTasksWaitingTermination+0x50>)
 8009552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <prvCheckTasksWaitingTermination+0x54>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3b01      	subs	r3, #1
 800955a:	4a09      	ldr	r2, [pc, #36]	; (8009580 <prvCheckTasksWaitingTermination+0x54>)
 800955c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800955e:	f000 ff53 	bl	800a408 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f80e 	bl	8009584 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <prvCheckTasksWaitingTermination+0x54>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e1      	bne.n	8009534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	20000d08 	.word	0x20000d08
 800957c:	20000d34 	.word	0x20000d34
 8009580:	20000d1c 	.word	0x20000d1c

08009584 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009592:	2b00      	cmp	r3, #0
 8009594:	d108      	bne.n	80095a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959a:	4618      	mov	r0, r3
 800959c:	f001 f8e2 	bl	800a764 <vPortFree>
				vPortFree( pxTCB );
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 f8df 	bl	800a764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095a6:	e017      	b.n	80095d8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d103      	bne.n	80095ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 f8d6 	bl	800a764 <vPortFree>
	}
 80095b8:	e00e      	b.n	80095d8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d009      	beq.n	80095d8 <prvDeleteTCB+0x54>
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	e7fe      	b.n	80095d6 <prvDeleteTCB+0x52>
	}
 80095d8:	bf00      	nop
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095e6:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <prvResetNextTaskUnblockTime+0x44>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <prvResetNextTaskUnblockTime+0x14>
 80095f0:	2301      	movs	r3, #1
 80095f2:	e000      	b.n	80095f6 <prvResetNextTaskUnblockTime+0x16>
 80095f4:	2300      	movs	r3, #0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d004      	beq.n	8009604 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095fa:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <prvResetNextTaskUnblockTime+0x48>)
 80095fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009600:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009602:	e008      	b.n	8009616 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009604:	4b07      	ldr	r3, [pc, #28]	; (8009624 <prvResetNextTaskUnblockTime+0x44>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	4a05      	ldr	r2, [pc, #20]	; (8009628 <prvResetNextTaskUnblockTime+0x48>)
 8009614:	6013      	str	r3, [r2, #0]
}
 8009616:	bf00      	nop
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000cec 	.word	0x20000cec
 8009628:	20000d54 	.word	0x20000d54

0800962c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009632:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <xTaskGetSchedulerState+0x34>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800963a:	2301      	movs	r3, #1
 800963c:	607b      	str	r3, [r7, #4]
 800963e:	e008      	b.n	8009652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009640:	4b08      	ldr	r3, [pc, #32]	; (8009664 <xTaskGetSchedulerState+0x38>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d102      	bne.n	800964e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009648:	2302      	movs	r3, #2
 800964a:	607b      	str	r3, [r7, #4]
 800964c:	e001      	b.n	8009652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800964e:	2300      	movs	r3, #0
 8009650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009652:	687b      	ldr	r3, [r7, #4]
	}
 8009654:	4618      	mov	r0, r3
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000d40 	.word	0x20000d40
 8009664:	20000d5c 	.word	0x20000d5c

08009668 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009674:	2300      	movs	r3, #0
 8009676:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d056      	beq.n	800972c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	4b2d      	ldr	r3, [pc, #180]	; (8009738 <xTaskPriorityInherit+0xd0>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	429a      	cmp	r2, r3
 800968a:	d246      	bcs.n	800971a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	2b00      	cmp	r3, #0
 8009692:	db06      	blt.n	80096a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009694:	4b28      	ldr	r3, [pc, #160]	; (8009738 <xTaskPriorityInherit+0xd0>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6959      	ldr	r1, [r3, #20]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4a22      	ldr	r2, [pc, #136]	; (800973c <xTaskPriorityInherit+0xd4>)
 80096b4:	4413      	add	r3, r2
 80096b6:	4299      	cmp	r1, r3
 80096b8:	d101      	bne.n	80096be <xTaskPriorityInherit+0x56>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <xTaskPriorityInherit+0x58>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d022      	beq.n	800970a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe f9c5 	bl	8007a58 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096ce:	4b1a      	ldr	r3, [pc, #104]	; (8009738 <xTaskPriorityInherit+0xd0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096dc:	4b18      	ldr	r3, [pc, #96]	; (8009740 <xTaskPriorityInherit+0xd8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d903      	bls.n	80096ec <xTaskPriorityInherit+0x84>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	4a15      	ldr	r2, [pc, #84]	; (8009740 <xTaskPriorityInherit+0xd8>)
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f0:	4613      	mov	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4a10      	ldr	r2, [pc, #64]	; (800973c <xTaskPriorityInherit+0xd4>)
 80096fa:	441a      	add	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	3304      	adds	r3, #4
 8009700:	4619      	mov	r1, r3
 8009702:	4610      	mov	r0, r2
 8009704:	f7fe f94b 	bl	800799e <vListInsertEnd>
 8009708:	e004      	b.n	8009714 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800970a:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <xTaskPriorityInherit+0xd0>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009714:	2301      	movs	r3, #1
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	e008      	b.n	800972c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800971e:	4b06      	ldr	r3, [pc, #24]	; (8009738 <xTaskPriorityInherit+0xd0>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	429a      	cmp	r2, r3
 8009726:	d201      	bcs.n	800972c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800972c:	68fb      	ldr	r3, [r7, #12]
	}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20000860 	.word	0x20000860
 800973c:	20000864 	.word	0x20000864
 8009740:	20000d3c 	.word	0x20000d3c

08009744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009750:	2300      	movs	r3, #0
 8009752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d054      	beq.n	8009804 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800975a:	4b2d      	ldr	r3, [pc, #180]	; (8009810 <xTaskPriorityDisinherit+0xcc>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	429a      	cmp	r2, r3
 8009762:	d009      	beq.n	8009778 <xTaskPriorityDisinherit+0x34>
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	e7fe      	b.n	8009776 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <xTaskPriorityDisinherit+0x50>
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60bb      	str	r3, [r7, #8]
 8009792:	e7fe      	b.n	8009792 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009798:	1e5a      	subs	r2, r3, #1
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d02c      	beq.n	8009804 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d128      	bne.n	8009804 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	3304      	adds	r3, #4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe f94e 	bl	8007a58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d4:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <xTaskPriorityDisinherit+0xd0>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d903      	bls.n	80097e4 <xTaskPriorityDisinherit+0xa0>
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <xTaskPriorityDisinherit+0xd0>)
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4a09      	ldr	r2, [pc, #36]	; (8009818 <xTaskPriorityDisinherit+0xd4>)
 80097f2:	441a      	add	r2, r3
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fe f8cf 	bl	800799e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009804:	697b      	ldr	r3, [r7, #20]
	}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000860 	.word	0x20000860
 8009814:	20000d3c 	.word	0x20000d3c
 8009818:	20000864 	.word	0x20000864

0800981c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800982a:	2301      	movs	r3, #1
 800982c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d06d      	beq.n	8009910 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009838:	2b00      	cmp	r3, #0
 800983a:	d109      	bne.n	8009850 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	e7fe      	b.n	800984e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d902      	bls.n	8009860 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	61fb      	str	r3, [r7, #28]
 800985e:	e002      	b.n	8009866 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009864:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	429a      	cmp	r2, r3
 800986e:	d04f      	beq.n	8009910 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	429a      	cmp	r2, r3
 8009878:	d14a      	bne.n	8009910 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800987a:	4b27      	ldr	r3, [pc, #156]	; (8009918 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	429a      	cmp	r2, r3
 8009882:	d109      	bne.n	8009898 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	60bb      	str	r3, [r7, #8]
 8009896:	e7fe      	b.n	8009896 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	db04      	blt.n	80098b6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	6959      	ldr	r1, [r3, #20]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4a15      	ldr	r2, [pc, #84]	; (800991c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80098c6:	4413      	add	r3, r2
 80098c8:	4299      	cmp	r1, r3
 80098ca:	d101      	bne.n	80098d0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80098d0:	2300      	movs	r3, #0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d01c      	beq.n	8009910 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	3304      	adds	r3, #4
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe f8bc 	bl	8007a58 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d903      	bls.n	80098f4 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f0:	4a0b      	ldr	r2, [pc, #44]	; (8009920 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4a06      	ldr	r2, [pc, #24]	; (800991c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009902:	441a      	add	r2, r3
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	3304      	adds	r3, #4
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f7fe f847 	bl	800799e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009910:	bf00      	nop
 8009912:	3720      	adds	r7, #32
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	20000860 	.word	0x20000860
 800991c:	20000864 	.word	0x20000864
 8009920:	20000d3c 	.word	0x20000d3c

08009924 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009924:	b480      	push	{r7}
 8009926:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009928:	4b07      	ldr	r3, [pc, #28]	; (8009948 <pvTaskIncrementMutexHeldCount+0x24>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009930:	4b05      	ldr	r3, [pc, #20]	; (8009948 <pvTaskIncrementMutexHeldCount+0x24>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009936:	3201      	adds	r2, #1
 8009938:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800993a:	4b03      	ldr	r3, [pc, #12]	; (8009948 <pvTaskIncrementMutexHeldCount+0x24>)
 800993c:	681b      	ldr	r3, [r3, #0]
	}
 800993e:	4618      	mov	r0, r3
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20000860 	.word	0x20000860

0800994c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009956:	4b21      	ldr	r3, [pc, #132]	; (80099dc <prvAddCurrentTaskToDelayedList+0x90>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800995c:	4b20      	ldr	r3, [pc, #128]	; (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3304      	adds	r3, #4
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe f878 	bl	8007a58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996e:	d10a      	bne.n	8009986 <prvAddCurrentTaskToDelayedList+0x3a>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d007      	beq.n	8009986 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009976:	4b1a      	ldr	r3, [pc, #104]	; (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3304      	adds	r3, #4
 800997c:	4619      	mov	r1, r3
 800997e:	4819      	ldr	r0, [pc, #100]	; (80099e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009980:	f7fe f80d 	bl	800799e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009984:	e026      	b.n	80099d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4413      	add	r3, r2
 800998c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800998e:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	429a      	cmp	r2, r3
 800999c:	d209      	bcs.n	80099b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800999e:	4b12      	ldr	r3, [pc, #72]	; (80099e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	4b0f      	ldr	r3, [pc, #60]	; (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3304      	adds	r3, #4
 80099a8:	4619      	mov	r1, r3
 80099aa:	4610      	mov	r0, r2
 80099ac:	f7fe f81b 	bl	80079e6 <vListInsert>
}
 80099b0:	e010      	b.n	80099d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80099b2:	4b0e      	ldr	r3, [pc, #56]	; (80099ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3304      	adds	r3, #4
 80099bc:	4619      	mov	r1, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	f7fe f811 	bl	80079e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80099c4:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d202      	bcs.n	80099d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80099ce:	4a08      	ldr	r2, [pc, #32]	; (80099f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	6013      	str	r3, [r2, #0]
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000d38 	.word	0x20000d38
 80099e0:	20000860 	.word	0x20000860
 80099e4:	20000d20 	.word	0x20000d20
 80099e8:	20000cf0 	.word	0x20000cf0
 80099ec:	20000cec 	.word	0x20000cec
 80099f0:	20000d54 	.word	0x20000d54

080099f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08a      	sub	sp, #40	; 0x28
 80099f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099fe:	f000 fb51 	bl	800a0a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009a02:	4b1c      	ldr	r3, [pc, #112]	; (8009a74 <xTimerCreateTimerTask+0x80>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d021      	beq.n	8009a4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a12:	1d3a      	adds	r2, r7, #4
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	f107 030c 	add.w	r3, r7, #12
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fd ff77 	bl	8007910 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	9202      	str	r2, [sp, #8]
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	2300      	movs	r3, #0
 8009a32:	460a      	mov	r2, r1
 8009a34:	4910      	ldr	r1, [pc, #64]	; (8009a78 <xTimerCreateTimerTask+0x84>)
 8009a36:	4811      	ldr	r0, [pc, #68]	; (8009a7c <xTimerCreateTimerTask+0x88>)
 8009a38:	f7ff f822 	bl	8008a80 <xTaskCreateStatic>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <xTimerCreateTimerTask+0x8c>)
 8009a40:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a42:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <xTimerCreateTimerTask+0x8c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d109      	bne.n	8009a68 <xTimerCreateTimerTask+0x74>
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	e7fe      	b.n	8009a66 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009a68:	697b      	ldr	r3, [r7, #20]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	20000d90 	.word	0x20000d90
 8009a78:	0800c520 	.word	0x0800c520
 8009a7c:	08009cb9 	.word	0x08009cb9
 8009a80:	20000d94 	.word	0x20000d94

08009a84 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b088      	sub	sp, #32
 8009a88:	af02      	add	r7, sp, #8
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009a92:	2030      	movs	r0, #48	; 0x30
 8009a94:	f000 fda4 	bl	800a5e0 <pvPortMalloc>
 8009a98:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00d      	beq.n	8009abc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	68b9      	ldr	r1, [r7, #8]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f844 	bl	8009b3c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009abc:	697b      	ldr	r3, [r7, #20]
	}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b08a      	sub	sp, #40	; 0x28
 8009aca:	af02      	add	r7, sp, #8
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	607a      	str	r2, [r7, #4]
 8009ad2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009ad4:	2330      	movs	r3, #48	; 0x30
 8009ad6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2b30      	cmp	r3, #48	; 0x30
 8009adc:	d009      	beq.n	8009af2 <xTimerCreateStatic+0x2c>
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	61bb      	str	r3, [r7, #24]
 8009af0:	e7fe      	b.n	8009af0 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d109      	bne.n	8009b0c <xTimerCreateStatic+0x46>
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	e7fe      	b.n	8009b0a <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00d      	beq.n	8009b32 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f809 	bl	8009b3c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8009b32:	69fb      	ldr	r3, [r7, #28]
	}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3720      	adds	r7, #32
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
 8009b48:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d109      	bne.n	8009b64 <prvInitialiseNewTimer+0x28>
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	617b      	str	r3, [r7, #20]
 8009b62:	e7fe      	b.n	8009b62 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d015      	beq.n	8009b96 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009b6a:	f000 fa9b 	bl	800a0a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	6a3a      	ldr	r2, [r7, #32]
 8009b8a:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fd fef7 	bl	8007984 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009b96:	bf00      	nop
 8009b98:	3718      	adds	r7, #24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b08a      	sub	sp, #40	; 0x28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
 8009bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d109      	bne.n	8009bcc <xTimerGenericCommand+0x2c>
 8009bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbc:	f383 8811 	msr	BASEPRI, r3
 8009bc0:	f3bf 8f6f 	isb	sy
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	623b      	str	r3, [r7, #32]
 8009bca:	e7fe      	b.n	8009bca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bcc:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <xTimerGenericCommand+0x94>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d02a      	beq.n	8009c2a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	dc18      	bgt.n	8009c18 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009be6:	f7ff fd21 	bl	800962c <xTaskGetSchedulerState>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d109      	bne.n	8009c04 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bf0:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <xTimerGenericCommand+0x94>)
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	f107 0110 	add.w	r1, r7, #16
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bfc:	f7fe f8f6 	bl	8007dec <xQueueGenericSend>
 8009c00:	6278      	str	r0, [r7, #36]	; 0x24
 8009c02:	e012      	b.n	8009c2a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c04:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <xTimerGenericCommand+0x94>)
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	f107 0110 	add.w	r1, r7, #16
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f7fe f8ec 	bl	8007dec <xQueueGenericSend>
 8009c14:	6278      	str	r0, [r7, #36]	; 0x24
 8009c16:	e008      	b.n	8009c2a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c18:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <xTimerGenericCommand+0x94>)
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	f107 0110 	add.w	r1, r7, #16
 8009c20:	2300      	movs	r3, #0
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	f7fe f9dc 	bl	8007fe0 <xQueueGenericSendFromISR>
 8009c28:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3728      	adds	r7, #40	; 0x28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000d90 	.word	0x20000d90

08009c38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c42:	4b1c      	ldr	r3, [pc, #112]	; (8009cb4 <prvProcessExpiredTimer+0x7c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fd ff01 	bl	8007a58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d121      	bne.n	8009ca2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	18d1      	adds	r1, r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	6978      	ldr	r0, [r7, #20]
 8009c6c:	f000 f8c8 	bl	8009e00 <prvInsertTimerInActiveList>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d015      	beq.n	8009ca2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c76:	2300      	movs	r3, #0
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	2100      	movs	r1, #0
 8009c80:	6978      	ldr	r0, [r7, #20]
 8009c82:	f7ff ff8d 	bl	8009ba0 <xTimerGenericCommand>
 8009c86:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d109      	bne.n	8009ca2 <prvProcessExpiredTimer+0x6a>
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e7fe      	b.n	8009ca0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	6978      	ldr	r0, [r7, #20]
 8009ca8:	4798      	blx	r3
}
 8009caa:	bf00      	nop
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000d88 	.word	0x20000d88

08009cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cc0:	f107 0308 	add.w	r3, r7, #8
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 f857 	bl	8009d78 <prvGetNextExpireTime>
 8009cca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f803 	bl	8009cdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cd6:	f000 f8d5 	bl	8009e84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cda:	e7f1      	b.n	8009cc0 <prvTimerTask+0x8>

08009cdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ce6:	f7ff f8c3 	bl	8008e70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cea:	f107 0308 	add.w	r3, r7, #8
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 f866 	bl	8009dc0 <prvSampleTimeNow>
 8009cf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d130      	bne.n	8009d5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <prvProcessTimerOrBlockTask+0x3c>
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d806      	bhi.n	8009d18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d0a:	f7ff f8bf 	bl	8008e8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7ff ff91 	bl	8009c38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d16:	e024      	b.n	8009d62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d008      	beq.n	8009d30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d1e:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <prvProcessTimerOrBlockTask+0x90>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bf0c      	ite	eq
 8009d28:	2301      	moveq	r3, #1
 8009d2a:	2300      	movne	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d30:	4b0f      	ldr	r3, [pc, #60]	; (8009d70 <prvProcessTimerOrBlockTask+0x94>)
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	f7fe fe6b 	bl	8008a18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d42:	f7ff f8a3 	bl	8008e8c <xTaskResumeAll>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10a      	bne.n	8009d62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d4c:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <prvProcessTimerOrBlockTask+0x98>)
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	f3bf 8f6f 	isb	sy
}
 8009d5c:	e001      	b.n	8009d62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d5e:	f7ff f895 	bl	8008e8c <xTaskResumeAll>
}
 8009d62:	bf00      	nop
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000d8c 	.word	0x20000d8c
 8009d70:	20000d90 	.word	0x20000d90
 8009d74:	e000ed04 	.word	0xe000ed04

08009d78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d80:	4b0e      	ldr	r3, [pc, #56]	; (8009dbc <prvGetNextExpireTime+0x44>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bf0c      	ite	eq
 8009d8a:	2301      	moveq	r3, #1
 8009d8c:	2300      	movne	r3, #0
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d105      	bne.n	8009daa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d9e:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <prvGetNextExpireTime+0x44>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e001      	b.n	8009dae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009dae:	68fb      	ldr	r3, [r7, #12]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	20000d88 	.word	0x20000d88

08009dc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009dc8:	f7ff f8fc 	bl	8008fc4 <xTaskGetTickCount>
 8009dcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dce:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <prvSampleTimeNow+0x3c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d205      	bcs.n	8009de4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009dd8:	f000 f904 	bl	8009fe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	e002      	b.n	8009dea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009dea:	4a04      	ldr	r2, [pc, #16]	; (8009dfc <prvSampleTimeNow+0x3c>)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009df0:	68fb      	ldr	r3, [r7, #12]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000d98 	.word	0x20000d98

08009e00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d812      	bhi.n	8009e4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	1ad2      	subs	r2, r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d302      	bcc.n	8009e3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e34:	2301      	movs	r3, #1
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	e01b      	b.n	8009e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e3a:	4b10      	ldr	r3, [pc, #64]	; (8009e7c <prvInsertTimerInActiveList+0x7c>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	3304      	adds	r3, #4
 8009e42:	4619      	mov	r1, r3
 8009e44:	4610      	mov	r0, r2
 8009e46:	f7fd fdce 	bl	80079e6 <vListInsert>
 8009e4a:	e012      	b.n	8009e72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d206      	bcs.n	8009e62 <prvInsertTimerInActiveList+0x62>
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d302      	bcc.n	8009e62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	617b      	str	r3, [r7, #20]
 8009e60:	e007      	b.n	8009e72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e62:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <prvInsertTimerInActiveList+0x80>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f7fd fdba 	bl	80079e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e72:	697b      	ldr	r3, [r7, #20]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	20000d8c 	.word	0x20000d8c
 8009e80:	20000d88 	.word	0x20000d88

08009e84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b08e      	sub	sp, #56	; 0x38
 8009e88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e8a:	e099      	b.n	8009fc0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	da17      	bge.n	8009ec2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e92:	1d3b      	adds	r3, r7, #4
 8009e94:	3304      	adds	r3, #4
 8009e96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d109      	bne.n	8009eb2 <prvProcessReceivedCommands+0x2e>
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	e7fe      	b.n	8009eb0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009eb8:	6850      	ldr	r0, [r2, #4]
 8009eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ebc:	6892      	ldr	r2, [r2, #8]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	db7a      	blt.n	8009fbe <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	695b      	ldr	r3, [r3, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d004      	beq.n	8009ede <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fd fdbd 	bl	8007a58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ede:	463b      	mov	r3, r7
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff ff6d 	bl	8009dc0 <prvSampleTimeNow>
 8009ee6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b09      	cmp	r3, #9
 8009eec:	d868      	bhi.n	8009fc0 <prvProcessReceivedCommands+0x13c>
 8009eee:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <prvProcessReceivedCommands+0x70>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f1d 	.word	0x08009f1d
 8009ef8:	08009f1d 	.word	0x08009f1d
 8009efc:	08009f1d 	.word	0x08009f1d
 8009f00:	08009fc1 	.word	0x08009fc1
 8009f04:	08009f77 	.word	0x08009f77
 8009f08:	08009fad 	.word	0x08009fad
 8009f0c:	08009f1d 	.word	0x08009f1d
 8009f10:	08009f1d 	.word	0x08009f1d
 8009f14:	08009fc1 	.word	0x08009fc1
 8009f18:	08009f77 	.word	0x08009f77
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	18d1      	adds	r1, r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f2a:	f7ff ff69 	bl	8009e00 <prvInsertTimerInActiveList>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d045      	beq.n	8009fc0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d13d      	bne.n	8009fc0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	441a      	add	r2, r3
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	2300      	movs	r3, #0
 8009f52:	2100      	movs	r1, #0
 8009f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f56:	f7ff fe23 	bl	8009ba0 <xTimerGenericCommand>
 8009f5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d12e      	bne.n	8009fc0 <prvProcessReceivedCommands+0x13c>
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	61bb      	str	r3, [r7, #24]
 8009f74:	e7fe      	b.n	8009f74 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d109      	bne.n	8009f98 <prvProcessReceivedCommands+0x114>
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	617b      	str	r3, [r7, #20]
 8009f96:	e7fe      	b.n	8009f96 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9a:	699a      	ldr	r2, [r3, #24]
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9e:	18d1      	adds	r1, r2, r3
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fa6:	f7ff ff2b 	bl	8009e00 <prvInsertTimerInActiveList>
					break;
 8009faa:	e009      	b.n	8009fc0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d104      	bne.n	8009fc0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8009fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fb8:	f000 fbd4 	bl	800a764 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fbc:	e000      	b.n	8009fc0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009fbe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <prvProcessReceivedCommands+0x15c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	1d39      	adds	r1, r7, #4
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fe f927 	bl	800821c <xQueueReceive>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f47f af5b 	bne.w	8009e8c <prvProcessReceivedCommands+0x8>
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	3730      	adds	r7, #48	; 0x30
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20000d90 	.word	0x20000d90

08009fe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fea:	e044      	b.n	800a076 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fec:	4b2b      	ldr	r3, [pc, #172]	; (800a09c <prvSwitchTimerLists+0xb8>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ff6:	4b29      	ldr	r3, [pc, #164]	; (800a09c <prvSwitchTimerLists+0xb8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3304      	adds	r3, #4
 800a004:	4618      	mov	r0, r3
 800a006:	f7fd fd27 	bl	8007a58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	69db      	ldr	r3, [r3, #28]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d12d      	bne.n	800a076 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4413      	add	r3, r2
 800a022:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d90e      	bls.n	800a04a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a038:	4b18      	ldr	r3, [pc, #96]	; (800a09c <prvSwitchTimerLists+0xb8>)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3304      	adds	r3, #4
 800a040:	4619      	mov	r1, r3
 800a042:	4610      	mov	r0, r2
 800a044:	f7fd fccf 	bl	80079e6 <vListInsert>
 800a048:	e015      	b.n	800a076 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a04a:	2300      	movs	r3, #0
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	2300      	movs	r3, #0
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	2100      	movs	r1, #0
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7ff fda3 	bl	8009ba0 <xTimerGenericCommand>
 800a05a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d109      	bne.n	800a076 <prvSwitchTimerLists+0x92>
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	e7fe      	b.n	800a074 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a076:	4b09      	ldr	r3, [pc, #36]	; (800a09c <prvSwitchTimerLists+0xb8>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1b5      	bne.n	8009fec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a080:	4b06      	ldr	r3, [pc, #24]	; (800a09c <prvSwitchTimerLists+0xb8>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a086:	4b06      	ldr	r3, [pc, #24]	; (800a0a0 <prvSwitchTimerLists+0xbc>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a04      	ldr	r2, [pc, #16]	; (800a09c <prvSwitchTimerLists+0xb8>)
 800a08c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a08e:	4a04      	ldr	r2, [pc, #16]	; (800a0a0 <prvSwitchTimerLists+0xbc>)
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	6013      	str	r3, [r2, #0]
}
 800a094:	bf00      	nop
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20000d88 	.word	0x20000d88
 800a0a0:	20000d8c 	.word	0x20000d8c

0800a0a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0aa:	f000 f97f 	bl	800a3ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0ae:	4b15      	ldr	r3, [pc, #84]	; (800a104 <prvCheckForValidListAndQueue+0x60>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d120      	bne.n	800a0f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0b6:	4814      	ldr	r0, [pc, #80]	; (800a108 <prvCheckForValidListAndQueue+0x64>)
 800a0b8:	f7fd fc44 	bl	8007944 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0bc:	4813      	ldr	r0, [pc, #76]	; (800a10c <prvCheckForValidListAndQueue+0x68>)
 800a0be:	f7fd fc41 	bl	8007944 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0c2:	4b13      	ldr	r3, [pc, #76]	; (800a110 <prvCheckForValidListAndQueue+0x6c>)
 800a0c4:	4a10      	ldr	r2, [pc, #64]	; (800a108 <prvCheckForValidListAndQueue+0x64>)
 800a0c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0c8:	4b12      	ldr	r3, [pc, #72]	; (800a114 <prvCheckForValidListAndQueue+0x70>)
 800a0ca:	4a10      	ldr	r2, [pc, #64]	; (800a10c <prvCheckForValidListAndQueue+0x68>)
 800a0cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	4b11      	ldr	r3, [pc, #68]	; (800a118 <prvCheckForValidListAndQueue+0x74>)
 800a0d4:	4a11      	ldr	r2, [pc, #68]	; (800a11c <prvCheckForValidListAndQueue+0x78>)
 800a0d6:	2110      	movs	r1, #16
 800a0d8:	200a      	movs	r0, #10
 800a0da:	f7fd fd4f 	bl	8007b7c <xQueueGenericCreateStatic>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	4b08      	ldr	r3, [pc, #32]	; (800a104 <prvCheckForValidListAndQueue+0x60>)
 800a0e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a0e4:	4b07      	ldr	r3, [pc, #28]	; (800a104 <prvCheckForValidListAndQueue+0x60>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <prvCheckForValidListAndQueue+0x60>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	490b      	ldr	r1, [pc, #44]	; (800a120 <prvCheckForValidListAndQueue+0x7c>)
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fe fc3e 	bl	8008974 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0f8:	f000 f986 	bl	800a408 <vPortExitCritical>
}
 800a0fc:	bf00      	nop
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	20000d90 	.word	0x20000d90
 800a108:	20000d60 	.word	0x20000d60
 800a10c:	20000d74 	.word	0x20000d74
 800a110:	20000d88 	.word	0x20000d88
 800a114:	20000d8c 	.word	0x20000d8c
 800a118:	20000e3c 	.word	0x20000e3c
 800a11c:	20000d9c 	.word	0x20000d9c
 800a120:	0800c528 	.word	0x0800c528

0800a124 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d109      	bne.n	800a14a <pvTimerGetTimerID+0x26>
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	e7fe      	b.n	800a148 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 800a14a:	f000 f92f 	bl	800a3ac <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a154:	f000 f958 	bl	800a408 <vPortExitCritical>

	return pvReturn;
 800a158:	693b      	ldr	r3, [r7, #16]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
	...

0800a164 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	3b04      	subs	r3, #4
 800a174:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a17c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3b04      	subs	r3, #4
 800a182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f023 0201 	bic.w	r2, r3, #1
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3b04      	subs	r3, #4
 800a192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a194:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <pxPortInitialiseStack+0x64>)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3b14      	subs	r3, #20
 800a19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3b04      	subs	r3, #4
 800a1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f06f 0202 	mvn.w	r2, #2
 800a1b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	3b20      	subs	r3, #32
 800a1b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	0800a1cd 	.word	0x0800a1cd

0800a1cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1d6:	4b11      	ldr	r3, [pc, #68]	; (800a21c <prvTaskExitError+0x50>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d009      	beq.n	800a1f4 <prvTaskExitError+0x28>
 800a1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e4:	f383 8811 	msr	BASEPRI, r3
 800a1e8:	f3bf 8f6f 	isb	sy
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	e7fe      	b.n	800a1f2 <prvTaskExitError+0x26>
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a206:	bf00      	nop
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d0fc      	beq.n	800a208 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a20e:	bf00      	nop
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	200000e4 	.word	0x200000e4

0800a220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <pxCurrentTCBConst2>)
 800a222:	6819      	ldr	r1, [r3, #0]
 800a224:	6808      	ldr	r0, [r1, #0]
 800a226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22a:	f380 8809 	msr	PSP, r0
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f04f 0000 	mov.w	r0, #0
 800a236:	f380 8811 	msr	BASEPRI, r0
 800a23a:	4770      	bx	lr
 800a23c:	f3af 8000 	nop.w

0800a240 <pxCurrentTCBConst2>:
 800a240:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop

0800a248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a248:	4808      	ldr	r0, [pc, #32]	; (800a26c <prvPortStartFirstTask+0x24>)
 800a24a:	6800      	ldr	r0, [r0, #0]
 800a24c:	6800      	ldr	r0, [r0, #0]
 800a24e:	f380 8808 	msr	MSP, r0
 800a252:	f04f 0000 	mov.w	r0, #0
 800a256:	f380 8814 	msr	CONTROL, r0
 800a25a:	b662      	cpsie	i
 800a25c:	b661      	cpsie	f
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	df00      	svc	0
 800a268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a26a:	bf00      	nop
 800a26c:	e000ed08 	.word	0xe000ed08

0800a270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a276:	4b44      	ldr	r3, [pc, #272]	; (800a388 <xPortStartScheduler+0x118>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a44      	ldr	r2, [pc, #272]	; (800a38c <xPortStartScheduler+0x11c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d109      	bne.n	800a294 <xPortStartScheduler+0x24>
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	613b      	str	r3, [r7, #16]
 800a292:	e7fe      	b.n	800a292 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a294:	4b3c      	ldr	r3, [pc, #240]	; (800a388 <xPortStartScheduler+0x118>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a3d      	ldr	r2, [pc, #244]	; (800a390 <xPortStartScheduler+0x120>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d109      	bne.n	800a2b2 <xPortStartScheduler+0x42>
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e7fe      	b.n	800a2b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2b2:	4b38      	ldr	r3, [pc, #224]	; (800a394 <xPortStartScheduler+0x124>)
 800a2b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	22ff      	movs	r2, #255	; 0xff
 800a2c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	4b30      	ldr	r3, [pc, #192]	; (800a398 <xPortStartScheduler+0x128>)
 800a2d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a2da:	4b30      	ldr	r3, [pc, #192]	; (800a39c <xPortStartScheduler+0x12c>)
 800a2dc:	2207      	movs	r2, #7
 800a2de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2e0:	e009      	b.n	800a2f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a2e2:	4b2e      	ldr	r3, [pc, #184]	; (800a39c <xPortStartScheduler+0x12c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	4a2c      	ldr	r2, [pc, #176]	; (800a39c <xPortStartScheduler+0x12c>)
 800a2ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	005b      	lsls	r3, r3, #1
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fe:	2b80      	cmp	r3, #128	; 0x80
 800a300:	d0ef      	beq.n	800a2e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a302:	4b26      	ldr	r3, [pc, #152]	; (800a39c <xPortStartScheduler+0x12c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f1c3 0307 	rsb	r3, r3, #7
 800a30a:	2b04      	cmp	r3, #4
 800a30c:	d009      	beq.n	800a322 <xPortStartScheduler+0xb2>
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	60bb      	str	r3, [r7, #8]
 800a320:	e7fe      	b.n	800a320 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a322:	4b1e      	ldr	r3, [pc, #120]	; (800a39c <xPortStartScheduler+0x12c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	021b      	lsls	r3, r3, #8
 800a328:	4a1c      	ldr	r2, [pc, #112]	; (800a39c <xPortStartScheduler+0x12c>)
 800a32a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a32c:	4b1b      	ldr	r3, [pc, #108]	; (800a39c <xPortStartScheduler+0x12c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a334:	4a19      	ldr	r2, [pc, #100]	; (800a39c <xPortStartScheduler+0x12c>)
 800a336:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a340:	4b17      	ldr	r3, [pc, #92]	; (800a3a0 <xPortStartScheduler+0x130>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a16      	ldr	r2, [pc, #88]	; (800a3a0 <xPortStartScheduler+0x130>)
 800a346:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a34a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a34c:	4b14      	ldr	r3, [pc, #80]	; (800a3a0 <xPortStartScheduler+0x130>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a13      	ldr	r2, [pc, #76]	; (800a3a0 <xPortStartScheduler+0x130>)
 800a352:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a356:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a358:	f000 f8d6 	bl	800a508 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a35c:	4b11      	ldr	r3, [pc, #68]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a35e:	2200      	movs	r2, #0
 800a360:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a362:	f000 f8f5 	bl	800a550 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a366:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <xPortStartScheduler+0x138>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a0f      	ldr	r2, [pc, #60]	; (800a3a8 <xPortStartScheduler+0x138>)
 800a36c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a370:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a372:	f7ff ff69 	bl	800a248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a376:	f7fe fef3 	bl	8009160 <vTaskSwitchContext>
	prvTaskExitError();
 800a37a:	f7ff ff27 	bl	800a1cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	e000ed00 	.word	0xe000ed00
 800a38c:	410fc271 	.word	0x410fc271
 800a390:	410fc270 	.word	0x410fc270
 800a394:	e000e400 	.word	0xe000e400
 800a398:	20000e8c 	.word	0x20000e8c
 800a39c:	20000e90 	.word	0x20000e90
 800a3a0:	e000ed20 	.word	0xe000ed20
 800a3a4:	200000e4 	.word	0x200000e4
 800a3a8:	e000ef34 	.word	0xe000ef34

0800a3ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3c4:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <vPortEnterCritical+0x54>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	4a0d      	ldr	r2, [pc, #52]	; (800a400 <vPortEnterCritical+0x54>)
 800a3cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <vPortEnterCritical+0x54>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d10e      	bne.n	800a3f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <vPortEnterCritical+0x58>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d009      	beq.n	800a3f4 <vPortEnterCritical+0x48>
 800a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	603b      	str	r3, [r7, #0]
 800a3f2:	e7fe      	b.n	800a3f2 <vPortEnterCritical+0x46>
	}
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	200000e4 	.word	0x200000e4
 800a404:	e000ed04 	.word	0xe000ed04

0800a408 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a40e:	4b11      	ldr	r3, [pc, #68]	; (800a454 <vPortExitCritical+0x4c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d109      	bne.n	800a42a <vPortExitCritical+0x22>
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	607b      	str	r3, [r7, #4]
 800a428:	e7fe      	b.n	800a428 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a42a:	4b0a      	ldr	r3, [pc, #40]	; (800a454 <vPortExitCritical+0x4c>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3b01      	subs	r3, #1
 800a430:	4a08      	ldr	r2, [pc, #32]	; (800a454 <vPortExitCritical+0x4c>)
 800a432:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a434:	4b07      	ldr	r3, [pc, #28]	; (800a454 <vPortExitCritical+0x4c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d104      	bne.n	800a446 <vPortExitCritical+0x3e>
 800a43c:	2300      	movs	r3, #0
 800a43e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	200000e4 	.word	0x200000e4
	...

0800a460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a460:	f3ef 8009 	mrs	r0, PSP
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	4b15      	ldr	r3, [pc, #84]	; (800a4c0 <pxCurrentTCBConst>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	f01e 0f10 	tst.w	lr, #16
 800a470:	bf08      	it	eq
 800a472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47a:	6010      	str	r0, [r2, #0]
 800a47c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a480:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a484:	f380 8811 	msr	BASEPRI, r0
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f7fe fe66 	bl	8009160 <vTaskSwitchContext>
 800a494:	f04f 0000 	mov.w	r0, #0
 800a498:	f380 8811 	msr	BASEPRI, r0
 800a49c:	bc09      	pop	{r0, r3}
 800a49e:	6819      	ldr	r1, [r3, #0]
 800a4a0:	6808      	ldr	r0, [r1, #0]
 800a4a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a6:	f01e 0f10 	tst.w	lr, #16
 800a4aa:	bf08      	it	eq
 800a4ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4b0:	f380 8809 	msr	PSP, r0
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	f3af 8000 	nop.w

0800a4c0 <pxCurrentTCBConst>:
 800a4c0:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop

0800a4c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4e0:	f7fe fd80 	bl	8008fe4 <xTaskIncrementTick>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4ea:	4b06      	ldr	r3, [pc, #24]	; (800a504 <SysTick_Handler+0x3c>)
 800a4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4fc:	bf00      	nop
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a508:	b480      	push	{r7}
 800a50a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a50c:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <vPortSetupTimerInterrupt+0x34>)
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <vPortSetupTimerInterrupt+0x38>)
 800a514:	2200      	movs	r2, #0
 800a516:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <vPortSetupTimerInterrupt+0x3c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a0a      	ldr	r2, [pc, #40]	; (800a548 <vPortSetupTimerInterrupt+0x40>)
 800a51e:	fba2 2303 	umull	r2, r3, r2, r3
 800a522:	099b      	lsrs	r3, r3, #6
 800a524:	4a09      	ldr	r2, [pc, #36]	; (800a54c <vPortSetupTimerInterrupt+0x44>)
 800a526:	3b01      	subs	r3, #1
 800a528:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a52a:	4b04      	ldr	r3, [pc, #16]	; (800a53c <vPortSetupTimerInterrupt+0x34>)
 800a52c:	2207      	movs	r2, #7
 800a52e:	601a      	str	r2, [r3, #0]
}
 800a530:	bf00      	nop
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	e000e010 	.word	0xe000e010
 800a540:	e000e018 	.word	0xe000e018
 800a544:	200000bc 	.word	0x200000bc
 800a548:	10624dd3 	.word	0x10624dd3
 800a54c:	e000e014 	.word	0xe000e014

0800a550 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a550:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a560 <vPortEnableVFP+0x10>
 800a554:	6801      	ldr	r1, [r0, #0]
 800a556:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a55a:	6001      	str	r1, [r0, #0]
 800a55c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a55e:	bf00      	nop
 800a560:	e000ed88 	.word	0xe000ed88

0800a564 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a56a:	f3ef 8305 	mrs	r3, IPSR
 800a56e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2b0f      	cmp	r3, #15
 800a574:	d913      	bls.n	800a59e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a576:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <vPortValidateInterruptPriority+0x6c>)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4413      	add	r3, r2
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a580:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <vPortValidateInterruptPriority+0x70>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	7afa      	ldrb	r2, [r7, #11]
 800a586:	429a      	cmp	r2, r3
 800a588:	d209      	bcs.n	800a59e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	607b      	str	r3, [r7, #4]
 800a59c:	e7fe      	b.n	800a59c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a59e:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <vPortValidateInterruptPriority+0x74>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5a6:	4b0d      	ldr	r3, [pc, #52]	; (800a5dc <vPortValidateInterruptPriority+0x78>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d909      	bls.n	800a5c2 <vPortValidateInterruptPriority+0x5e>
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	e7fe      	b.n	800a5c0 <vPortValidateInterruptPriority+0x5c>
	}
 800a5c2:	bf00      	nop
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	e000e3f0 	.word	0xe000e3f0
 800a5d4:	20000e8c 	.word	0x20000e8c
 800a5d8:	e000ed0c 	.word	0xe000ed0c
 800a5dc:	20000e90 	.word	0x20000e90

0800a5e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08a      	sub	sp, #40	; 0x28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5ec:	f7fe fc40 	bl	8008e70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5f0:	4b57      	ldr	r3, [pc, #348]	; (800a750 <pvPortMalloc+0x170>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5f8:	f000 f90c 	bl	800a814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5fc:	4b55      	ldr	r3, [pc, #340]	; (800a754 <pvPortMalloc+0x174>)
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4013      	ands	r3, r2
 800a604:	2b00      	cmp	r3, #0
 800a606:	f040 808c 	bne.w	800a722 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d01c      	beq.n	800a64a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a610:	2208      	movs	r2, #8
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4413      	add	r3, r2
 800a616:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d013      	beq.n	800a64a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f023 0307 	bic.w	r3, r3, #7
 800a628:	3308      	adds	r3, #8
 800a62a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f003 0307 	and.w	r3, r3, #7
 800a632:	2b00      	cmp	r3, #0
 800a634:	d009      	beq.n	800a64a <pvPortMalloc+0x6a>
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	e7fe      	b.n	800a648 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d068      	beq.n	800a722 <pvPortMalloc+0x142>
 800a650:	4b41      	ldr	r3, [pc, #260]	; (800a758 <pvPortMalloc+0x178>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	429a      	cmp	r2, r3
 800a658:	d863      	bhi.n	800a722 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a65a:	4b40      	ldr	r3, [pc, #256]	; (800a75c <pvPortMalloc+0x17c>)
 800a65c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a65e:	4b3f      	ldr	r3, [pc, #252]	; (800a75c <pvPortMalloc+0x17c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a664:	e004      	b.n	800a670 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	429a      	cmp	r2, r3
 800a678:	d903      	bls.n	800a682 <pvPortMalloc+0xa2>
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1f1      	bne.n	800a666 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a682:	4b33      	ldr	r3, [pc, #204]	; (800a750 <pvPortMalloc+0x170>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a688:	429a      	cmp	r2, r3
 800a68a:	d04a      	beq.n	800a722 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2208      	movs	r2, #8
 800a692:	4413      	add	r3, r2
 800a694:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	1ad2      	subs	r2, r2, r3
 800a6a6:	2308      	movs	r3, #8
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d91e      	bls.n	800a6ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	f003 0307 	and.w	r3, r3, #7
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d009      	beq.n	800a6d4 <pvPortMalloc+0xf4>
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	613b      	str	r3, [r7, #16]
 800a6d2:	e7fe      	b.n	800a6d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	1ad2      	subs	r2, r2, r3
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6e6:	69b8      	ldr	r0, [r7, #24]
 800a6e8:	f000 f8f6 	bl	800a8d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6ec:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <pvPortMalloc+0x178>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	4a18      	ldr	r2, [pc, #96]	; (800a758 <pvPortMalloc+0x178>)
 800a6f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6fa:	4b17      	ldr	r3, [pc, #92]	; (800a758 <pvPortMalloc+0x178>)
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4b18      	ldr	r3, [pc, #96]	; (800a760 <pvPortMalloc+0x180>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d203      	bcs.n	800a70e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <pvPortMalloc+0x178>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a15      	ldr	r2, [pc, #84]	; (800a760 <pvPortMalloc+0x180>)
 800a70c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <pvPortMalloc+0x174>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	431a      	orrs	r2, r3
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a722:	f7fe fbb3 	bl	8008e8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	f003 0307 	and.w	r3, r3, #7
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d009      	beq.n	800a744 <pvPortMalloc+0x164>
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	60fb      	str	r3, [r7, #12]
 800a742:	e7fe      	b.n	800a742 <pvPortMalloc+0x162>
	return pvReturn;
 800a744:	69fb      	ldr	r3, [r7, #28]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3728      	adds	r7, #40	; 0x28
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	2000260c 	.word	0x2000260c
 800a754:	20002618 	.word	0x20002618
 800a758:	20002610 	.word	0x20002610
 800a75c:	20002604 	.word	0x20002604
 800a760:	20002614 	.word	0x20002614

0800a764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d046      	beq.n	800a804 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a776:	2308      	movs	r3, #8
 800a778:	425b      	negs	r3, r3
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	4413      	add	r3, r2
 800a77e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	4b20      	ldr	r3, [pc, #128]	; (800a80c <vPortFree+0xa8>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4013      	ands	r3, r2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d109      	bne.n	800a7a6 <vPortFree+0x42>
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	60fb      	str	r3, [r7, #12]
 800a7a4:	e7fe      	b.n	800a7a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d009      	beq.n	800a7c2 <vPortFree+0x5e>
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	60bb      	str	r3, [r7, #8]
 800a7c0:	e7fe      	b.n	800a7c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	4b11      	ldr	r3, [pc, #68]	; (800a80c <vPortFree+0xa8>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d019      	beq.n	800a804 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d115      	bne.n	800a804 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	685a      	ldr	r2, [r3, #4]
 800a7dc:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <vPortFree+0xa8>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	43db      	mvns	r3, r3
 800a7e2:	401a      	ands	r2, r3
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7e8:	f7fe fb42 	bl	8008e70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <vPortFree+0xac>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	4a06      	ldr	r2, [pc, #24]	; (800a810 <vPortFree+0xac>)
 800a7f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7fa:	6938      	ldr	r0, [r7, #16]
 800a7fc:	f000 f86c 	bl	800a8d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a800:	f7fe fb44 	bl	8008e8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a804:	bf00      	nop
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	20002618 	.word	0x20002618
 800a810:	20002610 	.word	0x20002610

0800a814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a81a:	f241 7370 	movw	r3, #6000	; 0x1770
 800a81e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a820:	4b27      	ldr	r3, [pc, #156]	; (800a8c0 <prvHeapInit+0xac>)
 800a822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00c      	beq.n	800a848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3307      	adds	r3, #7
 800a832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	4a1f      	ldr	r2, [pc, #124]	; (800a8c0 <prvHeapInit+0xac>)
 800a844:	4413      	add	r3, r2
 800a846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a84c:	4a1d      	ldr	r2, [pc, #116]	; (800a8c4 <prvHeapInit+0xb0>)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a852:	4b1c      	ldr	r3, [pc, #112]	; (800a8c4 <prvHeapInit+0xb0>)
 800a854:	2200      	movs	r2, #0
 800a856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	4413      	add	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a860:	2208      	movs	r2, #8
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1a9b      	subs	r3, r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0307 	bic.w	r3, r3, #7
 800a86e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <prvHeapInit+0xb4>)
 800a874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a876:	4b14      	ldr	r3, [pc, #80]	; (800a8c8 <prvHeapInit+0xb4>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2200      	movs	r2, #0
 800a87c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a87e:	4b12      	ldr	r3, [pc, #72]	; (800a8c8 <prvHeapInit+0xb4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a894:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <prvHeapInit+0xb4>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4a0a      	ldr	r2, [pc, #40]	; (800a8cc <prvHeapInit+0xb8>)
 800a8a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	4a09      	ldr	r2, [pc, #36]	; (800a8d0 <prvHeapInit+0xbc>)
 800a8aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8ac:	4b09      	ldr	r3, [pc, #36]	; (800a8d4 <prvHeapInit+0xc0>)
 800a8ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8b2:	601a      	str	r2, [r3, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	20000e94 	.word	0x20000e94
 800a8c4:	20002604 	.word	0x20002604
 800a8c8:	2000260c 	.word	0x2000260c
 800a8cc:	20002614 	.word	0x20002614
 800a8d0:	20002610 	.word	0x20002610
 800a8d4:	20002618 	.word	0x20002618

0800a8d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8e0:	4b28      	ldr	r3, [pc, #160]	; (800a984 <prvInsertBlockIntoFreeList+0xac>)
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	e002      	b.n	800a8ec <prvInsertBlockIntoFreeList+0x14>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d8f7      	bhi.n	800a8e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	4413      	add	r3, r2
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d108      	bne.n	800a91a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	441a      	add	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	441a      	add	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d118      	bne.n	800a960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4b15      	ldr	r3, [pc, #84]	; (800a988 <prvInsertBlockIntoFreeList+0xb0>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	429a      	cmp	r2, r3
 800a938:	d00d      	beq.n	800a956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	441a      	add	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e008      	b.n	800a968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a956:	4b0c      	ldr	r3, [pc, #48]	; (800a988 <prvInsertBlockIntoFreeList+0xb0>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	e003      	b.n	800a968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d002      	beq.n	800a976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a976:	bf00      	nop
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20002604 	.word	0x20002604
 800a988:	2000260c 	.word	0x2000260c

0800a98c <__errno>:
 800a98c:	4b01      	ldr	r3, [pc, #4]	; (800a994 <__errno+0x8>)
 800a98e:	6818      	ldr	r0, [r3, #0]
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	200000e8 	.word	0x200000e8

0800a998 <__libc_init_array>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	4e0d      	ldr	r6, [pc, #52]	; (800a9d0 <__libc_init_array+0x38>)
 800a99c:	4c0d      	ldr	r4, [pc, #52]	; (800a9d4 <__libc_init_array+0x3c>)
 800a99e:	1ba4      	subs	r4, r4, r6
 800a9a0:	10a4      	asrs	r4, r4, #2
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	42a5      	cmp	r5, r4
 800a9a6:	d109      	bne.n	800a9bc <__libc_init_array+0x24>
 800a9a8:	4e0b      	ldr	r6, [pc, #44]	; (800a9d8 <__libc_init_array+0x40>)
 800a9aa:	4c0c      	ldr	r4, [pc, #48]	; (800a9dc <__libc_init_array+0x44>)
 800a9ac:	f001 fcce 	bl	800c34c <_init>
 800a9b0:	1ba4      	subs	r4, r4, r6
 800a9b2:	10a4      	asrs	r4, r4, #2
 800a9b4:	2500      	movs	r5, #0
 800a9b6:	42a5      	cmp	r5, r4
 800a9b8:	d105      	bne.n	800a9c6 <__libc_init_array+0x2e>
 800a9ba:	bd70      	pop	{r4, r5, r6, pc}
 800a9bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9c0:	4798      	blx	r3
 800a9c2:	3501      	adds	r5, #1
 800a9c4:	e7ee      	b.n	800a9a4 <__libc_init_array+0xc>
 800a9c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9ca:	4798      	blx	r3
 800a9cc:	3501      	adds	r5, #1
 800a9ce:	e7f2      	b.n	800a9b6 <__libc_init_array+0x1e>
 800a9d0:	0800c678 	.word	0x0800c678
 800a9d4:	0800c678 	.word	0x0800c678
 800a9d8:	0800c678 	.word	0x0800c678
 800a9dc:	0800c67c 	.word	0x0800c67c

0800a9e0 <memcpy>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	1e43      	subs	r3, r0, #1
 800a9e4:	440a      	add	r2, r1
 800a9e6:	4291      	cmp	r1, r2
 800a9e8:	d100      	bne.n	800a9ec <memcpy+0xc>
 800a9ea:	bd10      	pop	{r4, pc}
 800a9ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9f4:	e7f7      	b.n	800a9e6 <memcpy+0x6>

0800a9f6 <memset>:
 800a9f6:	4402      	add	r2, r0
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d100      	bne.n	800aa00 <memset+0xa>
 800a9fe:	4770      	bx	lr
 800aa00:	f803 1b01 	strb.w	r1, [r3], #1
 800aa04:	e7f9      	b.n	800a9fa <memset+0x4>
	...

0800aa08 <sniprintf>:
 800aa08:	b40c      	push	{r2, r3}
 800aa0a:	b530      	push	{r4, r5, lr}
 800aa0c:	4b17      	ldr	r3, [pc, #92]	; (800aa6c <sniprintf+0x64>)
 800aa0e:	1e0c      	subs	r4, r1, #0
 800aa10:	b09d      	sub	sp, #116	; 0x74
 800aa12:	681d      	ldr	r5, [r3, #0]
 800aa14:	da08      	bge.n	800aa28 <sniprintf+0x20>
 800aa16:	238b      	movs	r3, #139	; 0x8b
 800aa18:	602b      	str	r3, [r5, #0]
 800aa1a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1e:	b01d      	add	sp, #116	; 0x74
 800aa20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa24:	b002      	add	sp, #8
 800aa26:	4770      	bx	lr
 800aa28:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aa30:	bf14      	ite	ne
 800aa32:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa36:	4623      	moveq	r3, r4
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	9307      	str	r3, [sp, #28]
 800aa3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa40:	9002      	str	r0, [sp, #8]
 800aa42:	9006      	str	r0, [sp, #24]
 800aa44:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aa48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aa4a:	ab21      	add	r3, sp, #132	; 0x84
 800aa4c:	a902      	add	r1, sp, #8
 800aa4e:	4628      	mov	r0, r5
 800aa50:	9301      	str	r3, [sp, #4]
 800aa52:	f000 f867 	bl	800ab24 <_svfiprintf_r>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	bfbc      	itt	lt
 800aa5a:	238b      	movlt	r3, #139	; 0x8b
 800aa5c:	602b      	strlt	r3, [r5, #0]
 800aa5e:	2c00      	cmp	r4, #0
 800aa60:	d0dd      	beq.n	800aa1e <sniprintf+0x16>
 800aa62:	9b02      	ldr	r3, [sp, #8]
 800aa64:	2200      	movs	r2, #0
 800aa66:	701a      	strb	r2, [r3, #0]
 800aa68:	e7d9      	b.n	800aa1e <sniprintf+0x16>
 800aa6a:	bf00      	nop
 800aa6c:	200000e8 	.word	0x200000e8

0800aa70 <__ssputs_r>:
 800aa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	688e      	ldr	r6, [r1, #8]
 800aa76:	429e      	cmp	r6, r3
 800aa78:	4682      	mov	sl, r0
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	4690      	mov	r8, r2
 800aa7e:	4699      	mov	r9, r3
 800aa80:	d837      	bhi.n	800aaf2 <__ssputs_r+0x82>
 800aa82:	898a      	ldrh	r2, [r1, #12]
 800aa84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa88:	d031      	beq.n	800aaee <__ssputs_r+0x7e>
 800aa8a:	6825      	ldr	r5, [r4, #0]
 800aa8c:	6909      	ldr	r1, [r1, #16]
 800aa8e:	1a6f      	subs	r7, r5, r1
 800aa90:	6965      	ldr	r5, [r4, #20]
 800aa92:	2302      	movs	r3, #2
 800aa94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa98:	fb95 f5f3 	sdiv	r5, r5, r3
 800aa9c:	f109 0301 	add.w	r3, r9, #1
 800aaa0:	443b      	add	r3, r7
 800aaa2:	429d      	cmp	r5, r3
 800aaa4:	bf38      	it	cc
 800aaa6:	461d      	movcc	r5, r3
 800aaa8:	0553      	lsls	r3, r2, #21
 800aaaa:	d530      	bpl.n	800ab0e <__ssputs_r+0x9e>
 800aaac:	4629      	mov	r1, r5
 800aaae:	f000 fb21 	bl	800b0f4 <_malloc_r>
 800aab2:	4606      	mov	r6, r0
 800aab4:	b950      	cbnz	r0, 800aacc <__ssputs_r+0x5c>
 800aab6:	230c      	movs	r3, #12
 800aab8:	f8ca 3000 	str.w	r3, [sl]
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac2:	81a3      	strh	r3, [r4, #12]
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	463a      	mov	r2, r7
 800aace:	6921      	ldr	r1, [r4, #16]
 800aad0:	f7ff ff86 	bl	800a9e0 <memcpy>
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aade:	81a3      	strh	r3, [r4, #12]
 800aae0:	6126      	str	r6, [r4, #16]
 800aae2:	6165      	str	r5, [r4, #20]
 800aae4:	443e      	add	r6, r7
 800aae6:	1bed      	subs	r5, r5, r7
 800aae8:	6026      	str	r6, [r4, #0]
 800aaea:	60a5      	str	r5, [r4, #8]
 800aaec:	464e      	mov	r6, r9
 800aaee:	454e      	cmp	r6, r9
 800aaf0:	d900      	bls.n	800aaf4 <__ssputs_r+0x84>
 800aaf2:	464e      	mov	r6, r9
 800aaf4:	4632      	mov	r2, r6
 800aaf6:	4641      	mov	r1, r8
 800aaf8:	6820      	ldr	r0, [r4, #0]
 800aafa:	f000 fa93 	bl	800b024 <memmove>
 800aafe:	68a3      	ldr	r3, [r4, #8]
 800ab00:	1b9b      	subs	r3, r3, r6
 800ab02:	60a3      	str	r3, [r4, #8]
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	441e      	add	r6, r3
 800ab08:	6026      	str	r6, [r4, #0]
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e7dc      	b.n	800aac8 <__ssputs_r+0x58>
 800ab0e:	462a      	mov	r2, r5
 800ab10:	f000 fb4a 	bl	800b1a8 <_realloc_r>
 800ab14:	4606      	mov	r6, r0
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d1e2      	bne.n	800aae0 <__ssputs_r+0x70>
 800ab1a:	6921      	ldr	r1, [r4, #16]
 800ab1c:	4650      	mov	r0, sl
 800ab1e:	f000 fa9b 	bl	800b058 <_free_r>
 800ab22:	e7c8      	b.n	800aab6 <__ssputs_r+0x46>

0800ab24 <_svfiprintf_r>:
 800ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab28:	461d      	mov	r5, r3
 800ab2a:	898b      	ldrh	r3, [r1, #12]
 800ab2c:	061f      	lsls	r7, r3, #24
 800ab2e:	b09d      	sub	sp, #116	; 0x74
 800ab30:	4680      	mov	r8, r0
 800ab32:	460c      	mov	r4, r1
 800ab34:	4616      	mov	r6, r2
 800ab36:	d50f      	bpl.n	800ab58 <_svfiprintf_r+0x34>
 800ab38:	690b      	ldr	r3, [r1, #16]
 800ab3a:	b96b      	cbnz	r3, 800ab58 <_svfiprintf_r+0x34>
 800ab3c:	2140      	movs	r1, #64	; 0x40
 800ab3e:	f000 fad9 	bl	800b0f4 <_malloc_r>
 800ab42:	6020      	str	r0, [r4, #0]
 800ab44:	6120      	str	r0, [r4, #16]
 800ab46:	b928      	cbnz	r0, 800ab54 <_svfiprintf_r+0x30>
 800ab48:	230c      	movs	r3, #12
 800ab4a:	f8c8 3000 	str.w	r3, [r8]
 800ab4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab52:	e0c8      	b.n	800ace6 <_svfiprintf_r+0x1c2>
 800ab54:	2340      	movs	r3, #64	; 0x40
 800ab56:	6163      	str	r3, [r4, #20]
 800ab58:	2300      	movs	r3, #0
 800ab5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab5c:	2320      	movs	r3, #32
 800ab5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab62:	2330      	movs	r3, #48	; 0x30
 800ab64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab68:	9503      	str	r5, [sp, #12]
 800ab6a:	f04f 0b01 	mov.w	fp, #1
 800ab6e:	4637      	mov	r7, r6
 800ab70:	463d      	mov	r5, r7
 800ab72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab76:	b10b      	cbz	r3, 800ab7c <_svfiprintf_r+0x58>
 800ab78:	2b25      	cmp	r3, #37	; 0x25
 800ab7a:	d13e      	bne.n	800abfa <_svfiprintf_r+0xd6>
 800ab7c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ab80:	d00b      	beq.n	800ab9a <_svfiprintf_r+0x76>
 800ab82:	4653      	mov	r3, sl
 800ab84:	4632      	mov	r2, r6
 800ab86:	4621      	mov	r1, r4
 800ab88:	4640      	mov	r0, r8
 800ab8a:	f7ff ff71 	bl	800aa70 <__ssputs_r>
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f000 80a4 	beq.w	800acdc <_svfiprintf_r+0x1b8>
 800ab94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab96:	4453      	add	r3, sl
 800ab98:	9309      	str	r3, [sp, #36]	; 0x24
 800ab9a:	783b      	ldrb	r3, [r7, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 809d 	beq.w	800acdc <_svfiprintf_r+0x1b8>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f04f 32ff 	mov.w	r2, #4294967295
 800aba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abac:	9304      	str	r3, [sp, #16]
 800abae:	9307      	str	r3, [sp, #28]
 800abb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abb4:	931a      	str	r3, [sp, #104]	; 0x68
 800abb6:	462f      	mov	r7, r5
 800abb8:	2205      	movs	r2, #5
 800abba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800abbe:	4850      	ldr	r0, [pc, #320]	; (800ad00 <_svfiprintf_r+0x1dc>)
 800abc0:	f7f5 fb06 	bl	80001d0 <memchr>
 800abc4:	9b04      	ldr	r3, [sp, #16]
 800abc6:	b9d0      	cbnz	r0, 800abfe <_svfiprintf_r+0xda>
 800abc8:	06d9      	lsls	r1, r3, #27
 800abca:	bf44      	itt	mi
 800abcc:	2220      	movmi	r2, #32
 800abce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abd2:	071a      	lsls	r2, r3, #28
 800abd4:	bf44      	itt	mi
 800abd6:	222b      	movmi	r2, #43	; 0x2b
 800abd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abdc:	782a      	ldrb	r2, [r5, #0]
 800abde:	2a2a      	cmp	r2, #42	; 0x2a
 800abe0:	d015      	beq.n	800ac0e <_svfiprintf_r+0xea>
 800abe2:	9a07      	ldr	r2, [sp, #28]
 800abe4:	462f      	mov	r7, r5
 800abe6:	2000      	movs	r0, #0
 800abe8:	250a      	movs	r5, #10
 800abea:	4639      	mov	r1, r7
 800abec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abf0:	3b30      	subs	r3, #48	; 0x30
 800abf2:	2b09      	cmp	r3, #9
 800abf4:	d94d      	bls.n	800ac92 <_svfiprintf_r+0x16e>
 800abf6:	b1b8      	cbz	r0, 800ac28 <_svfiprintf_r+0x104>
 800abf8:	e00f      	b.n	800ac1a <_svfiprintf_r+0xf6>
 800abfa:	462f      	mov	r7, r5
 800abfc:	e7b8      	b.n	800ab70 <_svfiprintf_r+0x4c>
 800abfe:	4a40      	ldr	r2, [pc, #256]	; (800ad00 <_svfiprintf_r+0x1dc>)
 800ac00:	1a80      	subs	r0, r0, r2
 800ac02:	fa0b f000 	lsl.w	r0, fp, r0
 800ac06:	4318      	orrs	r0, r3
 800ac08:	9004      	str	r0, [sp, #16]
 800ac0a:	463d      	mov	r5, r7
 800ac0c:	e7d3      	b.n	800abb6 <_svfiprintf_r+0x92>
 800ac0e:	9a03      	ldr	r2, [sp, #12]
 800ac10:	1d11      	adds	r1, r2, #4
 800ac12:	6812      	ldr	r2, [r2, #0]
 800ac14:	9103      	str	r1, [sp, #12]
 800ac16:	2a00      	cmp	r2, #0
 800ac18:	db01      	blt.n	800ac1e <_svfiprintf_r+0xfa>
 800ac1a:	9207      	str	r2, [sp, #28]
 800ac1c:	e004      	b.n	800ac28 <_svfiprintf_r+0x104>
 800ac1e:	4252      	negs	r2, r2
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	9207      	str	r2, [sp, #28]
 800ac26:	9304      	str	r3, [sp, #16]
 800ac28:	783b      	ldrb	r3, [r7, #0]
 800ac2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ac2c:	d10c      	bne.n	800ac48 <_svfiprintf_r+0x124>
 800ac2e:	787b      	ldrb	r3, [r7, #1]
 800ac30:	2b2a      	cmp	r3, #42	; 0x2a
 800ac32:	d133      	bne.n	800ac9c <_svfiprintf_r+0x178>
 800ac34:	9b03      	ldr	r3, [sp, #12]
 800ac36:	1d1a      	adds	r2, r3, #4
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	9203      	str	r2, [sp, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bfb8      	it	lt
 800ac40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac44:	3702      	adds	r7, #2
 800ac46:	9305      	str	r3, [sp, #20]
 800ac48:	4d2e      	ldr	r5, [pc, #184]	; (800ad04 <_svfiprintf_r+0x1e0>)
 800ac4a:	7839      	ldrb	r1, [r7, #0]
 800ac4c:	2203      	movs	r2, #3
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f7f5 fabe 	bl	80001d0 <memchr>
 800ac54:	b138      	cbz	r0, 800ac66 <_svfiprintf_r+0x142>
 800ac56:	2340      	movs	r3, #64	; 0x40
 800ac58:	1b40      	subs	r0, r0, r5
 800ac5a:	fa03 f000 	lsl.w	r0, r3, r0
 800ac5e:	9b04      	ldr	r3, [sp, #16]
 800ac60:	4303      	orrs	r3, r0
 800ac62:	3701      	adds	r7, #1
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	7839      	ldrb	r1, [r7, #0]
 800ac68:	4827      	ldr	r0, [pc, #156]	; (800ad08 <_svfiprintf_r+0x1e4>)
 800ac6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac6e:	2206      	movs	r2, #6
 800ac70:	1c7e      	adds	r6, r7, #1
 800ac72:	f7f5 faad 	bl	80001d0 <memchr>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d038      	beq.n	800acec <_svfiprintf_r+0x1c8>
 800ac7a:	4b24      	ldr	r3, [pc, #144]	; (800ad0c <_svfiprintf_r+0x1e8>)
 800ac7c:	bb13      	cbnz	r3, 800acc4 <_svfiprintf_r+0x1a0>
 800ac7e:	9b03      	ldr	r3, [sp, #12]
 800ac80:	3307      	adds	r3, #7
 800ac82:	f023 0307 	bic.w	r3, r3, #7
 800ac86:	3308      	adds	r3, #8
 800ac88:	9303      	str	r3, [sp, #12]
 800ac8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac8c:	444b      	add	r3, r9
 800ac8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ac90:	e76d      	b.n	800ab6e <_svfiprintf_r+0x4a>
 800ac92:	fb05 3202 	mla	r2, r5, r2, r3
 800ac96:	2001      	movs	r0, #1
 800ac98:	460f      	mov	r7, r1
 800ac9a:	e7a6      	b.n	800abea <_svfiprintf_r+0xc6>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	3701      	adds	r7, #1
 800aca0:	9305      	str	r3, [sp, #20]
 800aca2:	4619      	mov	r1, r3
 800aca4:	250a      	movs	r5, #10
 800aca6:	4638      	mov	r0, r7
 800aca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acac:	3a30      	subs	r2, #48	; 0x30
 800acae:	2a09      	cmp	r2, #9
 800acb0:	d903      	bls.n	800acba <_svfiprintf_r+0x196>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0c8      	beq.n	800ac48 <_svfiprintf_r+0x124>
 800acb6:	9105      	str	r1, [sp, #20]
 800acb8:	e7c6      	b.n	800ac48 <_svfiprintf_r+0x124>
 800acba:	fb05 2101 	mla	r1, r5, r1, r2
 800acbe:	2301      	movs	r3, #1
 800acc0:	4607      	mov	r7, r0
 800acc2:	e7f0      	b.n	800aca6 <_svfiprintf_r+0x182>
 800acc4:	ab03      	add	r3, sp, #12
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	4622      	mov	r2, r4
 800acca:	4b11      	ldr	r3, [pc, #68]	; (800ad10 <_svfiprintf_r+0x1ec>)
 800accc:	a904      	add	r1, sp, #16
 800acce:	4640      	mov	r0, r8
 800acd0:	f3af 8000 	nop.w
 800acd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800acd8:	4681      	mov	r9, r0
 800acda:	d1d6      	bne.n	800ac8a <_svfiprintf_r+0x166>
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	065b      	lsls	r3, r3, #25
 800ace0:	f53f af35 	bmi.w	800ab4e <_svfiprintf_r+0x2a>
 800ace4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ace6:	b01d      	add	sp, #116	; 0x74
 800ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acec:	ab03      	add	r3, sp, #12
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	4622      	mov	r2, r4
 800acf2:	4b07      	ldr	r3, [pc, #28]	; (800ad10 <_svfiprintf_r+0x1ec>)
 800acf4:	a904      	add	r1, sp, #16
 800acf6:	4640      	mov	r0, r8
 800acf8:	f000 f882 	bl	800ae00 <_printf_i>
 800acfc:	e7ea      	b.n	800acd4 <_svfiprintf_r+0x1b0>
 800acfe:	bf00      	nop
 800ad00:	0800c5f4 	.word	0x0800c5f4
 800ad04:	0800c5fa 	.word	0x0800c5fa
 800ad08:	0800c5fe 	.word	0x0800c5fe
 800ad0c:	00000000 	.word	0x00000000
 800ad10:	0800aa71 	.word	0x0800aa71

0800ad14 <_printf_common>:
 800ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad18:	4691      	mov	r9, r2
 800ad1a:	461f      	mov	r7, r3
 800ad1c:	688a      	ldr	r2, [r1, #8]
 800ad1e:	690b      	ldr	r3, [r1, #16]
 800ad20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad24:	4293      	cmp	r3, r2
 800ad26:	bfb8      	it	lt
 800ad28:	4613      	movlt	r3, r2
 800ad2a:	f8c9 3000 	str.w	r3, [r9]
 800ad2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad32:	4606      	mov	r6, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	b112      	cbz	r2, 800ad3e <_printf_common+0x2a>
 800ad38:	3301      	adds	r3, #1
 800ad3a:	f8c9 3000 	str.w	r3, [r9]
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	0699      	lsls	r1, r3, #26
 800ad42:	bf42      	ittt	mi
 800ad44:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ad48:	3302      	addmi	r3, #2
 800ad4a:	f8c9 3000 	strmi.w	r3, [r9]
 800ad4e:	6825      	ldr	r5, [r4, #0]
 800ad50:	f015 0506 	ands.w	r5, r5, #6
 800ad54:	d107      	bne.n	800ad66 <_printf_common+0x52>
 800ad56:	f104 0a19 	add.w	sl, r4, #25
 800ad5a:	68e3      	ldr	r3, [r4, #12]
 800ad5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ad60:	1a9b      	subs	r3, r3, r2
 800ad62:	42ab      	cmp	r3, r5
 800ad64:	dc28      	bgt.n	800adb8 <_printf_common+0xa4>
 800ad66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ad6a:	6822      	ldr	r2, [r4, #0]
 800ad6c:	3300      	adds	r3, #0
 800ad6e:	bf18      	it	ne
 800ad70:	2301      	movne	r3, #1
 800ad72:	0692      	lsls	r2, r2, #26
 800ad74:	d42d      	bmi.n	800add2 <_printf_common+0xbe>
 800ad76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	47c0      	blx	r8
 800ad80:	3001      	adds	r0, #1
 800ad82:	d020      	beq.n	800adc6 <_printf_common+0xb2>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	68e5      	ldr	r5, [r4, #12]
 800ad88:	f8d9 2000 	ldr.w	r2, [r9]
 800ad8c:	f003 0306 	and.w	r3, r3, #6
 800ad90:	2b04      	cmp	r3, #4
 800ad92:	bf08      	it	eq
 800ad94:	1aad      	subeq	r5, r5, r2
 800ad96:	68a3      	ldr	r3, [r4, #8]
 800ad98:	6922      	ldr	r2, [r4, #16]
 800ad9a:	bf0c      	ite	eq
 800ad9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ada0:	2500      	movne	r5, #0
 800ada2:	4293      	cmp	r3, r2
 800ada4:	bfc4      	itt	gt
 800ada6:	1a9b      	subgt	r3, r3, r2
 800ada8:	18ed      	addgt	r5, r5, r3
 800adaa:	f04f 0900 	mov.w	r9, #0
 800adae:	341a      	adds	r4, #26
 800adb0:	454d      	cmp	r5, r9
 800adb2:	d11a      	bne.n	800adea <_printf_common+0xd6>
 800adb4:	2000      	movs	r0, #0
 800adb6:	e008      	b.n	800adca <_printf_common+0xb6>
 800adb8:	2301      	movs	r3, #1
 800adba:	4652      	mov	r2, sl
 800adbc:	4639      	mov	r1, r7
 800adbe:	4630      	mov	r0, r6
 800adc0:	47c0      	blx	r8
 800adc2:	3001      	adds	r0, #1
 800adc4:	d103      	bne.n	800adce <_printf_common+0xba>
 800adc6:	f04f 30ff 	mov.w	r0, #4294967295
 800adca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adce:	3501      	adds	r5, #1
 800add0:	e7c3      	b.n	800ad5a <_printf_common+0x46>
 800add2:	18e1      	adds	r1, r4, r3
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	2030      	movs	r0, #48	; 0x30
 800add8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800addc:	4422      	add	r2, r4
 800adde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ade2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ade6:	3302      	adds	r3, #2
 800ade8:	e7c5      	b.n	800ad76 <_printf_common+0x62>
 800adea:	2301      	movs	r3, #1
 800adec:	4622      	mov	r2, r4
 800adee:	4639      	mov	r1, r7
 800adf0:	4630      	mov	r0, r6
 800adf2:	47c0      	blx	r8
 800adf4:	3001      	adds	r0, #1
 800adf6:	d0e6      	beq.n	800adc6 <_printf_common+0xb2>
 800adf8:	f109 0901 	add.w	r9, r9, #1
 800adfc:	e7d8      	b.n	800adb0 <_printf_common+0x9c>
	...

0800ae00 <_printf_i>:
 800ae00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ae08:	460c      	mov	r4, r1
 800ae0a:	7e09      	ldrb	r1, [r1, #24]
 800ae0c:	b085      	sub	sp, #20
 800ae0e:	296e      	cmp	r1, #110	; 0x6e
 800ae10:	4617      	mov	r7, r2
 800ae12:	4606      	mov	r6, r0
 800ae14:	4698      	mov	r8, r3
 800ae16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae18:	f000 80b3 	beq.w	800af82 <_printf_i+0x182>
 800ae1c:	d822      	bhi.n	800ae64 <_printf_i+0x64>
 800ae1e:	2963      	cmp	r1, #99	; 0x63
 800ae20:	d036      	beq.n	800ae90 <_printf_i+0x90>
 800ae22:	d80a      	bhi.n	800ae3a <_printf_i+0x3a>
 800ae24:	2900      	cmp	r1, #0
 800ae26:	f000 80b9 	beq.w	800af9c <_printf_i+0x19c>
 800ae2a:	2958      	cmp	r1, #88	; 0x58
 800ae2c:	f000 8083 	beq.w	800af36 <_printf_i+0x136>
 800ae30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ae38:	e032      	b.n	800aea0 <_printf_i+0xa0>
 800ae3a:	2964      	cmp	r1, #100	; 0x64
 800ae3c:	d001      	beq.n	800ae42 <_printf_i+0x42>
 800ae3e:	2969      	cmp	r1, #105	; 0x69
 800ae40:	d1f6      	bne.n	800ae30 <_printf_i+0x30>
 800ae42:	6820      	ldr	r0, [r4, #0]
 800ae44:	6813      	ldr	r3, [r2, #0]
 800ae46:	0605      	lsls	r5, r0, #24
 800ae48:	f103 0104 	add.w	r1, r3, #4
 800ae4c:	d52a      	bpl.n	800aea4 <_printf_i+0xa4>
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6011      	str	r1, [r2, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	da03      	bge.n	800ae5e <_printf_i+0x5e>
 800ae56:	222d      	movs	r2, #45	; 0x2d
 800ae58:	425b      	negs	r3, r3
 800ae5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ae5e:	486f      	ldr	r0, [pc, #444]	; (800b01c <_printf_i+0x21c>)
 800ae60:	220a      	movs	r2, #10
 800ae62:	e039      	b.n	800aed8 <_printf_i+0xd8>
 800ae64:	2973      	cmp	r1, #115	; 0x73
 800ae66:	f000 809d 	beq.w	800afa4 <_printf_i+0x1a4>
 800ae6a:	d808      	bhi.n	800ae7e <_printf_i+0x7e>
 800ae6c:	296f      	cmp	r1, #111	; 0x6f
 800ae6e:	d020      	beq.n	800aeb2 <_printf_i+0xb2>
 800ae70:	2970      	cmp	r1, #112	; 0x70
 800ae72:	d1dd      	bne.n	800ae30 <_printf_i+0x30>
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	f043 0320 	orr.w	r3, r3, #32
 800ae7a:	6023      	str	r3, [r4, #0]
 800ae7c:	e003      	b.n	800ae86 <_printf_i+0x86>
 800ae7e:	2975      	cmp	r1, #117	; 0x75
 800ae80:	d017      	beq.n	800aeb2 <_printf_i+0xb2>
 800ae82:	2978      	cmp	r1, #120	; 0x78
 800ae84:	d1d4      	bne.n	800ae30 <_printf_i+0x30>
 800ae86:	2378      	movs	r3, #120	; 0x78
 800ae88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae8c:	4864      	ldr	r0, [pc, #400]	; (800b020 <_printf_i+0x220>)
 800ae8e:	e055      	b.n	800af3c <_printf_i+0x13c>
 800ae90:	6813      	ldr	r3, [r2, #0]
 800ae92:	1d19      	adds	r1, r3, #4
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	6011      	str	r1, [r2, #0]
 800ae98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aea0:	2301      	movs	r3, #1
 800aea2:	e08c      	b.n	800afbe <_printf_i+0x1be>
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	6011      	str	r1, [r2, #0]
 800aea8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aeac:	bf18      	it	ne
 800aeae:	b21b      	sxthne	r3, r3
 800aeb0:	e7cf      	b.n	800ae52 <_printf_i+0x52>
 800aeb2:	6813      	ldr	r3, [r2, #0]
 800aeb4:	6825      	ldr	r5, [r4, #0]
 800aeb6:	1d18      	adds	r0, r3, #4
 800aeb8:	6010      	str	r0, [r2, #0]
 800aeba:	0628      	lsls	r0, r5, #24
 800aebc:	d501      	bpl.n	800aec2 <_printf_i+0xc2>
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	e002      	b.n	800aec8 <_printf_i+0xc8>
 800aec2:	0668      	lsls	r0, r5, #25
 800aec4:	d5fb      	bpl.n	800aebe <_printf_i+0xbe>
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	4854      	ldr	r0, [pc, #336]	; (800b01c <_printf_i+0x21c>)
 800aeca:	296f      	cmp	r1, #111	; 0x6f
 800aecc:	bf14      	ite	ne
 800aece:	220a      	movne	r2, #10
 800aed0:	2208      	moveq	r2, #8
 800aed2:	2100      	movs	r1, #0
 800aed4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aed8:	6865      	ldr	r5, [r4, #4]
 800aeda:	60a5      	str	r5, [r4, #8]
 800aedc:	2d00      	cmp	r5, #0
 800aede:	f2c0 8095 	blt.w	800b00c <_printf_i+0x20c>
 800aee2:	6821      	ldr	r1, [r4, #0]
 800aee4:	f021 0104 	bic.w	r1, r1, #4
 800aee8:	6021      	str	r1, [r4, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d13d      	bne.n	800af6a <_printf_i+0x16a>
 800aeee:	2d00      	cmp	r5, #0
 800aef0:	f040 808e 	bne.w	800b010 <_printf_i+0x210>
 800aef4:	4665      	mov	r5, ip
 800aef6:	2a08      	cmp	r2, #8
 800aef8:	d10b      	bne.n	800af12 <_printf_i+0x112>
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	07db      	lsls	r3, r3, #31
 800aefe:	d508      	bpl.n	800af12 <_printf_i+0x112>
 800af00:	6923      	ldr	r3, [r4, #16]
 800af02:	6862      	ldr	r2, [r4, #4]
 800af04:	429a      	cmp	r2, r3
 800af06:	bfde      	ittt	le
 800af08:	2330      	movle	r3, #48	; 0x30
 800af0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af12:	ebac 0305 	sub.w	r3, ip, r5
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	f8cd 8000 	str.w	r8, [sp]
 800af1c:	463b      	mov	r3, r7
 800af1e:	aa03      	add	r2, sp, #12
 800af20:	4621      	mov	r1, r4
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff fef6 	bl	800ad14 <_printf_common>
 800af28:	3001      	adds	r0, #1
 800af2a:	d14d      	bne.n	800afc8 <_printf_i+0x1c8>
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295
 800af30:	b005      	add	sp, #20
 800af32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af36:	4839      	ldr	r0, [pc, #228]	; (800b01c <_printf_i+0x21c>)
 800af38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800af3c:	6813      	ldr	r3, [r2, #0]
 800af3e:	6821      	ldr	r1, [r4, #0]
 800af40:	1d1d      	adds	r5, r3, #4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6015      	str	r5, [r2, #0]
 800af46:	060a      	lsls	r2, r1, #24
 800af48:	d50b      	bpl.n	800af62 <_printf_i+0x162>
 800af4a:	07ca      	lsls	r2, r1, #31
 800af4c:	bf44      	itt	mi
 800af4e:	f041 0120 	orrmi.w	r1, r1, #32
 800af52:	6021      	strmi	r1, [r4, #0]
 800af54:	b91b      	cbnz	r3, 800af5e <_printf_i+0x15e>
 800af56:	6822      	ldr	r2, [r4, #0]
 800af58:	f022 0220 	bic.w	r2, r2, #32
 800af5c:	6022      	str	r2, [r4, #0]
 800af5e:	2210      	movs	r2, #16
 800af60:	e7b7      	b.n	800aed2 <_printf_i+0xd2>
 800af62:	064d      	lsls	r5, r1, #25
 800af64:	bf48      	it	mi
 800af66:	b29b      	uxthmi	r3, r3
 800af68:	e7ef      	b.n	800af4a <_printf_i+0x14a>
 800af6a:	4665      	mov	r5, ip
 800af6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800af70:	fb02 3311 	mls	r3, r2, r1, r3
 800af74:	5cc3      	ldrb	r3, [r0, r3]
 800af76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800af7a:	460b      	mov	r3, r1
 800af7c:	2900      	cmp	r1, #0
 800af7e:	d1f5      	bne.n	800af6c <_printf_i+0x16c>
 800af80:	e7b9      	b.n	800aef6 <_printf_i+0xf6>
 800af82:	6813      	ldr	r3, [r2, #0]
 800af84:	6825      	ldr	r5, [r4, #0]
 800af86:	6961      	ldr	r1, [r4, #20]
 800af88:	1d18      	adds	r0, r3, #4
 800af8a:	6010      	str	r0, [r2, #0]
 800af8c:	0628      	lsls	r0, r5, #24
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	d501      	bpl.n	800af96 <_printf_i+0x196>
 800af92:	6019      	str	r1, [r3, #0]
 800af94:	e002      	b.n	800af9c <_printf_i+0x19c>
 800af96:	066a      	lsls	r2, r5, #25
 800af98:	d5fb      	bpl.n	800af92 <_printf_i+0x192>
 800af9a:	8019      	strh	r1, [r3, #0]
 800af9c:	2300      	movs	r3, #0
 800af9e:	6123      	str	r3, [r4, #16]
 800afa0:	4665      	mov	r5, ip
 800afa2:	e7b9      	b.n	800af18 <_printf_i+0x118>
 800afa4:	6813      	ldr	r3, [r2, #0]
 800afa6:	1d19      	adds	r1, r3, #4
 800afa8:	6011      	str	r1, [r2, #0]
 800afaa:	681d      	ldr	r5, [r3, #0]
 800afac:	6862      	ldr	r2, [r4, #4]
 800afae:	2100      	movs	r1, #0
 800afb0:	4628      	mov	r0, r5
 800afb2:	f7f5 f90d 	bl	80001d0 <memchr>
 800afb6:	b108      	cbz	r0, 800afbc <_printf_i+0x1bc>
 800afb8:	1b40      	subs	r0, r0, r5
 800afba:	6060      	str	r0, [r4, #4]
 800afbc:	6863      	ldr	r3, [r4, #4]
 800afbe:	6123      	str	r3, [r4, #16]
 800afc0:	2300      	movs	r3, #0
 800afc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afc6:	e7a7      	b.n	800af18 <_printf_i+0x118>
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	462a      	mov	r2, r5
 800afcc:	4639      	mov	r1, r7
 800afce:	4630      	mov	r0, r6
 800afd0:	47c0      	blx	r8
 800afd2:	3001      	adds	r0, #1
 800afd4:	d0aa      	beq.n	800af2c <_printf_i+0x12c>
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	079b      	lsls	r3, r3, #30
 800afda:	d413      	bmi.n	800b004 <_printf_i+0x204>
 800afdc:	68e0      	ldr	r0, [r4, #12]
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	4298      	cmp	r0, r3
 800afe2:	bfb8      	it	lt
 800afe4:	4618      	movlt	r0, r3
 800afe6:	e7a3      	b.n	800af30 <_printf_i+0x130>
 800afe8:	2301      	movs	r3, #1
 800afea:	464a      	mov	r2, r9
 800afec:	4639      	mov	r1, r7
 800afee:	4630      	mov	r0, r6
 800aff0:	47c0      	blx	r8
 800aff2:	3001      	adds	r0, #1
 800aff4:	d09a      	beq.n	800af2c <_printf_i+0x12c>
 800aff6:	3501      	adds	r5, #1
 800aff8:	68e3      	ldr	r3, [r4, #12]
 800affa:	9a03      	ldr	r2, [sp, #12]
 800affc:	1a9b      	subs	r3, r3, r2
 800affe:	42ab      	cmp	r3, r5
 800b000:	dcf2      	bgt.n	800afe8 <_printf_i+0x1e8>
 800b002:	e7eb      	b.n	800afdc <_printf_i+0x1dc>
 800b004:	2500      	movs	r5, #0
 800b006:	f104 0919 	add.w	r9, r4, #25
 800b00a:	e7f5      	b.n	800aff8 <_printf_i+0x1f8>
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1ac      	bne.n	800af6a <_printf_i+0x16a>
 800b010:	7803      	ldrb	r3, [r0, #0]
 800b012:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b016:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b01a:	e76c      	b.n	800aef6 <_printf_i+0xf6>
 800b01c:	0800c605 	.word	0x0800c605
 800b020:	0800c616 	.word	0x0800c616

0800b024 <memmove>:
 800b024:	4288      	cmp	r0, r1
 800b026:	b510      	push	{r4, lr}
 800b028:	eb01 0302 	add.w	r3, r1, r2
 800b02c:	d807      	bhi.n	800b03e <memmove+0x1a>
 800b02e:	1e42      	subs	r2, r0, #1
 800b030:	4299      	cmp	r1, r3
 800b032:	d00a      	beq.n	800b04a <memmove+0x26>
 800b034:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b038:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b03c:	e7f8      	b.n	800b030 <memmove+0xc>
 800b03e:	4283      	cmp	r3, r0
 800b040:	d9f5      	bls.n	800b02e <memmove+0xa>
 800b042:	1881      	adds	r1, r0, r2
 800b044:	1ad2      	subs	r2, r2, r3
 800b046:	42d3      	cmn	r3, r2
 800b048:	d100      	bne.n	800b04c <memmove+0x28>
 800b04a:	bd10      	pop	{r4, pc}
 800b04c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b050:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b054:	e7f7      	b.n	800b046 <memmove+0x22>
	...

0800b058 <_free_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4605      	mov	r5, r0
 800b05c:	2900      	cmp	r1, #0
 800b05e:	d045      	beq.n	800b0ec <_free_r+0x94>
 800b060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b064:	1f0c      	subs	r4, r1, #4
 800b066:	2b00      	cmp	r3, #0
 800b068:	bfb8      	it	lt
 800b06a:	18e4      	addlt	r4, r4, r3
 800b06c:	f000 f8d2 	bl	800b214 <__malloc_lock>
 800b070:	4a1f      	ldr	r2, [pc, #124]	; (800b0f0 <_free_r+0x98>)
 800b072:	6813      	ldr	r3, [r2, #0]
 800b074:	4610      	mov	r0, r2
 800b076:	b933      	cbnz	r3, 800b086 <_free_r+0x2e>
 800b078:	6063      	str	r3, [r4, #4]
 800b07a:	6014      	str	r4, [r2, #0]
 800b07c:	4628      	mov	r0, r5
 800b07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b082:	f000 b8c8 	b.w	800b216 <__malloc_unlock>
 800b086:	42a3      	cmp	r3, r4
 800b088:	d90c      	bls.n	800b0a4 <_free_r+0x4c>
 800b08a:	6821      	ldr	r1, [r4, #0]
 800b08c:	1862      	adds	r2, r4, r1
 800b08e:	4293      	cmp	r3, r2
 800b090:	bf04      	itt	eq
 800b092:	681a      	ldreq	r2, [r3, #0]
 800b094:	685b      	ldreq	r3, [r3, #4]
 800b096:	6063      	str	r3, [r4, #4]
 800b098:	bf04      	itt	eq
 800b09a:	1852      	addeq	r2, r2, r1
 800b09c:	6022      	streq	r2, [r4, #0]
 800b09e:	6004      	str	r4, [r0, #0]
 800b0a0:	e7ec      	b.n	800b07c <_free_r+0x24>
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	b10a      	cbz	r2, 800b0ac <_free_r+0x54>
 800b0a8:	42a2      	cmp	r2, r4
 800b0aa:	d9fa      	bls.n	800b0a2 <_free_r+0x4a>
 800b0ac:	6819      	ldr	r1, [r3, #0]
 800b0ae:	1858      	adds	r0, r3, r1
 800b0b0:	42a0      	cmp	r0, r4
 800b0b2:	d10b      	bne.n	800b0cc <_free_r+0x74>
 800b0b4:	6820      	ldr	r0, [r4, #0]
 800b0b6:	4401      	add	r1, r0
 800b0b8:	1858      	adds	r0, r3, r1
 800b0ba:	4282      	cmp	r2, r0
 800b0bc:	6019      	str	r1, [r3, #0]
 800b0be:	d1dd      	bne.n	800b07c <_free_r+0x24>
 800b0c0:	6810      	ldr	r0, [r2, #0]
 800b0c2:	6852      	ldr	r2, [r2, #4]
 800b0c4:	605a      	str	r2, [r3, #4]
 800b0c6:	4401      	add	r1, r0
 800b0c8:	6019      	str	r1, [r3, #0]
 800b0ca:	e7d7      	b.n	800b07c <_free_r+0x24>
 800b0cc:	d902      	bls.n	800b0d4 <_free_r+0x7c>
 800b0ce:	230c      	movs	r3, #12
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	e7d3      	b.n	800b07c <_free_r+0x24>
 800b0d4:	6820      	ldr	r0, [r4, #0]
 800b0d6:	1821      	adds	r1, r4, r0
 800b0d8:	428a      	cmp	r2, r1
 800b0da:	bf04      	itt	eq
 800b0dc:	6811      	ldreq	r1, [r2, #0]
 800b0de:	6852      	ldreq	r2, [r2, #4]
 800b0e0:	6062      	str	r2, [r4, #4]
 800b0e2:	bf04      	itt	eq
 800b0e4:	1809      	addeq	r1, r1, r0
 800b0e6:	6021      	streq	r1, [r4, #0]
 800b0e8:	605c      	str	r4, [r3, #4]
 800b0ea:	e7c7      	b.n	800b07c <_free_r+0x24>
 800b0ec:	bd38      	pop	{r3, r4, r5, pc}
 800b0ee:	bf00      	nop
 800b0f0:	2000261c 	.word	0x2000261c

0800b0f4 <_malloc_r>:
 800b0f4:	b570      	push	{r4, r5, r6, lr}
 800b0f6:	1ccd      	adds	r5, r1, #3
 800b0f8:	f025 0503 	bic.w	r5, r5, #3
 800b0fc:	3508      	adds	r5, #8
 800b0fe:	2d0c      	cmp	r5, #12
 800b100:	bf38      	it	cc
 800b102:	250c      	movcc	r5, #12
 800b104:	2d00      	cmp	r5, #0
 800b106:	4606      	mov	r6, r0
 800b108:	db01      	blt.n	800b10e <_malloc_r+0x1a>
 800b10a:	42a9      	cmp	r1, r5
 800b10c:	d903      	bls.n	800b116 <_malloc_r+0x22>
 800b10e:	230c      	movs	r3, #12
 800b110:	6033      	str	r3, [r6, #0]
 800b112:	2000      	movs	r0, #0
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	f000 f87d 	bl	800b214 <__malloc_lock>
 800b11a:	4a21      	ldr	r2, [pc, #132]	; (800b1a0 <_malloc_r+0xac>)
 800b11c:	6814      	ldr	r4, [r2, #0]
 800b11e:	4621      	mov	r1, r4
 800b120:	b991      	cbnz	r1, 800b148 <_malloc_r+0x54>
 800b122:	4c20      	ldr	r4, [pc, #128]	; (800b1a4 <_malloc_r+0xb0>)
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	b91b      	cbnz	r3, 800b130 <_malloc_r+0x3c>
 800b128:	4630      	mov	r0, r6
 800b12a:	f000 f863 	bl	800b1f4 <_sbrk_r>
 800b12e:	6020      	str	r0, [r4, #0]
 800b130:	4629      	mov	r1, r5
 800b132:	4630      	mov	r0, r6
 800b134:	f000 f85e 	bl	800b1f4 <_sbrk_r>
 800b138:	1c43      	adds	r3, r0, #1
 800b13a:	d124      	bne.n	800b186 <_malloc_r+0x92>
 800b13c:	230c      	movs	r3, #12
 800b13e:	6033      	str	r3, [r6, #0]
 800b140:	4630      	mov	r0, r6
 800b142:	f000 f868 	bl	800b216 <__malloc_unlock>
 800b146:	e7e4      	b.n	800b112 <_malloc_r+0x1e>
 800b148:	680b      	ldr	r3, [r1, #0]
 800b14a:	1b5b      	subs	r3, r3, r5
 800b14c:	d418      	bmi.n	800b180 <_malloc_r+0x8c>
 800b14e:	2b0b      	cmp	r3, #11
 800b150:	d90f      	bls.n	800b172 <_malloc_r+0x7e>
 800b152:	600b      	str	r3, [r1, #0]
 800b154:	50cd      	str	r5, [r1, r3]
 800b156:	18cc      	adds	r4, r1, r3
 800b158:	4630      	mov	r0, r6
 800b15a:	f000 f85c 	bl	800b216 <__malloc_unlock>
 800b15e:	f104 000b 	add.w	r0, r4, #11
 800b162:	1d23      	adds	r3, r4, #4
 800b164:	f020 0007 	bic.w	r0, r0, #7
 800b168:	1ac3      	subs	r3, r0, r3
 800b16a:	d0d3      	beq.n	800b114 <_malloc_r+0x20>
 800b16c:	425a      	negs	r2, r3
 800b16e:	50e2      	str	r2, [r4, r3]
 800b170:	e7d0      	b.n	800b114 <_malloc_r+0x20>
 800b172:	428c      	cmp	r4, r1
 800b174:	684b      	ldr	r3, [r1, #4]
 800b176:	bf16      	itet	ne
 800b178:	6063      	strne	r3, [r4, #4]
 800b17a:	6013      	streq	r3, [r2, #0]
 800b17c:	460c      	movne	r4, r1
 800b17e:	e7eb      	b.n	800b158 <_malloc_r+0x64>
 800b180:	460c      	mov	r4, r1
 800b182:	6849      	ldr	r1, [r1, #4]
 800b184:	e7cc      	b.n	800b120 <_malloc_r+0x2c>
 800b186:	1cc4      	adds	r4, r0, #3
 800b188:	f024 0403 	bic.w	r4, r4, #3
 800b18c:	42a0      	cmp	r0, r4
 800b18e:	d005      	beq.n	800b19c <_malloc_r+0xa8>
 800b190:	1a21      	subs	r1, r4, r0
 800b192:	4630      	mov	r0, r6
 800b194:	f000 f82e 	bl	800b1f4 <_sbrk_r>
 800b198:	3001      	adds	r0, #1
 800b19a:	d0cf      	beq.n	800b13c <_malloc_r+0x48>
 800b19c:	6025      	str	r5, [r4, #0]
 800b19e:	e7db      	b.n	800b158 <_malloc_r+0x64>
 800b1a0:	2000261c 	.word	0x2000261c
 800b1a4:	20002620 	.word	0x20002620

0800b1a8 <_realloc_r>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	4607      	mov	r7, r0
 800b1ac:	4614      	mov	r4, r2
 800b1ae:	460e      	mov	r6, r1
 800b1b0:	b921      	cbnz	r1, 800b1bc <_realloc_r+0x14>
 800b1b2:	4611      	mov	r1, r2
 800b1b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b1b8:	f7ff bf9c 	b.w	800b0f4 <_malloc_r>
 800b1bc:	b922      	cbnz	r2, 800b1c8 <_realloc_r+0x20>
 800b1be:	f7ff ff4b 	bl	800b058 <_free_r>
 800b1c2:	4625      	mov	r5, r4
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c8:	f000 f826 	bl	800b218 <_malloc_usable_size_r>
 800b1cc:	42a0      	cmp	r0, r4
 800b1ce:	d20f      	bcs.n	800b1f0 <_realloc_r+0x48>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f7ff ff8e 	bl	800b0f4 <_malloc_r>
 800b1d8:	4605      	mov	r5, r0
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d0f2      	beq.n	800b1c4 <_realloc_r+0x1c>
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	f7ff fbfd 	bl	800a9e0 <memcpy>
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	f7ff ff35 	bl	800b058 <_free_r>
 800b1ee:	e7e9      	b.n	800b1c4 <_realloc_r+0x1c>
 800b1f0:	4635      	mov	r5, r6
 800b1f2:	e7e7      	b.n	800b1c4 <_realloc_r+0x1c>

0800b1f4 <_sbrk_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4c06      	ldr	r4, [pc, #24]	; (800b210 <_sbrk_r+0x1c>)
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4605      	mov	r5, r0
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	6023      	str	r3, [r4, #0]
 800b200:	f7f7 f976 	bl	80024f0 <_sbrk>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_sbrk_r+0x1a>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_sbrk_r+0x1a>
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	20002de8 	.word	0x20002de8

0800b214 <__malloc_lock>:
 800b214:	4770      	bx	lr

0800b216 <__malloc_unlock>:
 800b216:	4770      	bx	lr

0800b218 <_malloc_usable_size_r>:
 800b218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21c:	1f18      	subs	r0, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfbc      	itt	lt
 800b222:	580b      	ldrlt	r3, [r1, r0]
 800b224:	18c0      	addlt	r0, r0, r3
 800b226:	4770      	bx	lr

0800b228 <trunc>:
 800b228:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b22c:	ec5c bb10 	vmov	fp, ip, d0
 800b230:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b234:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800b238:	2913      	cmp	r1, #19
 800b23a:	4664      	mov	r4, ip
 800b23c:	dc11      	bgt.n	800b262 <trunc+0x3a>
 800b23e:	2900      	cmp	r1, #0
 800b240:	bfa7      	ittee	ge
 800b242:	4b15      	ldrge	r3, [pc, #84]	; (800b298 <trunc+0x70>)
 800b244:	fa43 f101 	asrge.w	r1, r3, r1
 800b248:	2200      	movlt	r2, #0
 800b24a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800b24e:	bfa4      	itt	ge
 800b250:	2200      	movge	r2, #0
 800b252:	ea2c 0301 	bicge.w	r3, ip, r1
 800b256:	4693      	mov	fp, r2
 800b258:	469c      	mov	ip, r3
 800b25a:	ec4c bb10 	vmov	d0, fp, ip
 800b25e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b262:	2933      	cmp	r1, #51	; 0x33
 800b264:	dd0d      	ble.n	800b282 <trunc+0x5a>
 800b266:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b26a:	d1f6      	bne.n	800b25a <trunc+0x32>
 800b26c:	4663      	mov	r3, ip
 800b26e:	ee10 2a10 	vmov	r2, s0
 800b272:	ee10 0a10 	vmov	r0, s0
 800b276:	4621      	mov	r1, r4
 800b278:	f7f5 f800 	bl	800027c <__adddf3>
 800b27c:	4683      	mov	fp, r0
 800b27e:	468c      	mov	ip, r1
 800b280:	e7eb      	b.n	800b25a <trunc+0x32>
 800b282:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800b286:	f04f 33ff 	mov.w	r3, #4294967295
 800b28a:	fa23 f000 	lsr.w	r0, r3, r0
 800b28e:	ea2b 0600 	bic.w	r6, fp, r0
 800b292:	46b3      	mov	fp, r6
 800b294:	46a4      	mov	ip, r4
 800b296:	e7e0      	b.n	800b25a <trunc+0x32>
 800b298:	000fffff 	.word	0x000fffff

0800b29c <pow>:
 800b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a0:	ed2d 8b04 	vpush	{d8-d9}
 800b2a4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b578 <pow+0x2dc>
 800b2a8:	b08d      	sub	sp, #52	; 0x34
 800b2aa:	ec57 6b10 	vmov	r6, r7, d0
 800b2ae:	ec55 4b11 	vmov	r4, r5, d1
 800b2b2:	f000 f965 	bl	800b580 <__ieee754_pow>
 800b2b6:	f999 3000 	ldrsb.w	r3, [r9]
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	eeb0 8a40 	vmov.f32	s16, s0
 800b2c2:	eef0 8a60 	vmov.f32	s17, s1
 800b2c6:	46c8      	mov	r8, r9
 800b2c8:	d05f      	beq.n	800b38a <pow+0xee>
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	f7f5 fc23 	bl	8000b1c <__aeabi_dcmpun>
 800b2d6:	4683      	mov	fp, r0
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d156      	bne.n	800b38a <pow+0xee>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	463b      	mov	r3, r7
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f5 fc1a 	bl	8000b1c <__aeabi_dcmpun>
 800b2e8:	9001      	str	r0, [sp, #4]
 800b2ea:	b1e8      	cbz	r0, 800b328 <pow+0x8c>
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	4629      	mov	r1, r5
 800b2f4:	f7f5 fbe0 	bl	8000ab8 <__aeabi_dcmpeq>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d046      	beq.n	800b38a <pow+0xee>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	9302      	str	r3, [sp, #8]
 800b300:	4b96      	ldr	r3, [pc, #600]	; (800b55c <pow+0x2c0>)
 800b302:	9303      	str	r3, [sp, #12]
 800b304:	4b96      	ldr	r3, [pc, #600]	; (800b560 <pow+0x2c4>)
 800b306:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b30a:	2200      	movs	r2, #0
 800b30c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b310:	9b00      	ldr	r3, [sp, #0]
 800b312:	2b02      	cmp	r3, #2
 800b314:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b318:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b31c:	d033      	beq.n	800b386 <pow+0xea>
 800b31e:	a802      	add	r0, sp, #8
 800b320:	f000 fefd 	bl	800c11e <matherr>
 800b324:	bb48      	cbnz	r0, 800b37a <pow+0xde>
 800b326:	e05d      	b.n	800b3e4 <pow+0x148>
 800b328:	f04f 0a00 	mov.w	sl, #0
 800b32c:	f04f 0b00 	mov.w	fp, #0
 800b330:	4652      	mov	r2, sl
 800b332:	465b      	mov	r3, fp
 800b334:	4630      	mov	r0, r6
 800b336:	4639      	mov	r1, r7
 800b338:	f7f5 fbbe 	bl	8000ab8 <__aeabi_dcmpeq>
 800b33c:	ec4b ab19 	vmov	d9, sl, fp
 800b340:	2800      	cmp	r0, #0
 800b342:	d054      	beq.n	800b3ee <pow+0x152>
 800b344:	4652      	mov	r2, sl
 800b346:	465b      	mov	r3, fp
 800b348:	4620      	mov	r0, r4
 800b34a:	4629      	mov	r1, r5
 800b34c:	f7f5 fbb4 	bl	8000ab8 <__aeabi_dcmpeq>
 800b350:	4680      	mov	r8, r0
 800b352:	b318      	cbz	r0, 800b39c <pow+0x100>
 800b354:	2301      	movs	r3, #1
 800b356:	9302      	str	r3, [sp, #8]
 800b358:	4b80      	ldr	r3, [pc, #512]	; (800b55c <pow+0x2c0>)
 800b35a:	9303      	str	r3, [sp, #12]
 800b35c:	9b01      	ldr	r3, [sp, #4]
 800b35e:	930a      	str	r3, [sp, #40]	; 0x28
 800b360:	9b00      	ldr	r3, [sp, #0]
 800b362:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b366:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b36a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d0d5      	beq.n	800b31e <pow+0x82>
 800b372:	4b7b      	ldr	r3, [pc, #492]	; (800b560 <pow+0x2c4>)
 800b374:	2200      	movs	r2, #0
 800b376:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37c:	b11b      	cbz	r3, 800b386 <pow+0xea>
 800b37e:	f7ff fb05 	bl	800a98c <__errno>
 800b382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b384:	6003      	str	r3, [r0, #0]
 800b386:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b38a:	eeb0 0a48 	vmov.f32	s0, s16
 800b38e:	eef0 0a68 	vmov.f32	s1, s17
 800b392:	b00d      	add	sp, #52	; 0x34
 800b394:	ecbd 8b04 	vpop	{d8-d9}
 800b398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39c:	ec45 4b10 	vmov	d0, r4, r5
 800b3a0:	f000 feb5 	bl	800c10e <finite>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d0f0      	beq.n	800b38a <pow+0xee>
 800b3a8:	4652      	mov	r2, sl
 800b3aa:	465b      	mov	r3, fp
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	f7f5 fb8c 	bl	8000acc <__aeabi_dcmplt>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d0e8      	beq.n	800b38a <pow+0xee>
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	9302      	str	r3, [sp, #8]
 800b3bc:	4b67      	ldr	r3, [pc, #412]	; (800b55c <pow+0x2c0>)
 800b3be:	9303      	str	r3, [sp, #12]
 800b3c0:	f999 3000 	ldrsb.w	r3, [r9]
 800b3c4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b3c8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b3cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b3d0:	b913      	cbnz	r3, 800b3d8 <pow+0x13c>
 800b3d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b3d6:	e7a2      	b.n	800b31e <pow+0x82>
 800b3d8:	4962      	ldr	r1, [pc, #392]	; (800b564 <pow+0x2c8>)
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d19c      	bne.n	800b31e <pow+0x82>
 800b3e4:	f7ff fad2 	bl	800a98c <__errno>
 800b3e8:	2321      	movs	r3, #33	; 0x21
 800b3ea:	6003      	str	r3, [r0, #0]
 800b3ec:	e7c5      	b.n	800b37a <pow+0xde>
 800b3ee:	eeb0 0a48 	vmov.f32	s0, s16
 800b3f2:	eef0 0a68 	vmov.f32	s1, s17
 800b3f6:	f000 fe8a 	bl	800c10e <finite>
 800b3fa:	9000      	str	r0, [sp, #0]
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	f040 8081 	bne.w	800b504 <pow+0x268>
 800b402:	ec47 6b10 	vmov	d0, r6, r7
 800b406:	f000 fe82 	bl	800c10e <finite>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d07a      	beq.n	800b504 <pow+0x268>
 800b40e:	ec45 4b10 	vmov	d0, r4, r5
 800b412:	f000 fe7c 	bl	800c10e <finite>
 800b416:	2800      	cmp	r0, #0
 800b418:	d074      	beq.n	800b504 <pow+0x268>
 800b41a:	ec53 2b18 	vmov	r2, r3, d8
 800b41e:	ee18 0a10 	vmov	r0, s16
 800b422:	4619      	mov	r1, r3
 800b424:	f7f5 fb7a 	bl	8000b1c <__aeabi_dcmpun>
 800b428:	f999 9000 	ldrsb.w	r9, [r9]
 800b42c:	4b4b      	ldr	r3, [pc, #300]	; (800b55c <pow+0x2c0>)
 800b42e:	b1b0      	cbz	r0, 800b45e <pow+0x1c2>
 800b430:	2201      	movs	r2, #1
 800b432:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b436:	9b00      	ldr	r3, [sp, #0]
 800b438:	930a      	str	r3, [sp, #40]	; 0x28
 800b43a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b43e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b442:	f1b9 0f00 	cmp.w	r9, #0
 800b446:	d0c4      	beq.n	800b3d2 <pow+0x136>
 800b448:	4652      	mov	r2, sl
 800b44a:	465b      	mov	r3, fp
 800b44c:	4650      	mov	r0, sl
 800b44e:	4659      	mov	r1, fp
 800b450:	f7f5 f9f4 	bl	800083c <__aeabi_ddiv>
 800b454:	f1b9 0f02 	cmp.w	r9, #2
 800b458:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b45c:	e7c1      	b.n	800b3e2 <pow+0x146>
 800b45e:	2203      	movs	r2, #3
 800b460:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b464:	900a      	str	r0, [sp, #40]	; 0x28
 800b466:	4629      	mov	r1, r5
 800b468:	4620      	mov	r0, r4
 800b46a:	2200      	movs	r2, #0
 800b46c:	4b3e      	ldr	r3, [pc, #248]	; (800b568 <pow+0x2cc>)
 800b46e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b472:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b476:	f7f5 f8b7 	bl	80005e8 <__aeabi_dmul>
 800b47a:	4604      	mov	r4, r0
 800b47c:	460d      	mov	r5, r1
 800b47e:	f1b9 0f00 	cmp.w	r9, #0
 800b482:	d124      	bne.n	800b4ce <pow+0x232>
 800b484:	4b39      	ldr	r3, [pc, #228]	; (800b56c <pow+0x2d0>)
 800b486:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b48a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b48e:	4630      	mov	r0, r6
 800b490:	4652      	mov	r2, sl
 800b492:	465b      	mov	r3, fp
 800b494:	4639      	mov	r1, r7
 800b496:	f7f5 fb19 	bl	8000acc <__aeabi_dcmplt>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d056      	beq.n	800b54c <pow+0x2b0>
 800b49e:	ec45 4b10 	vmov	d0, r4, r5
 800b4a2:	f000 fe49 	bl	800c138 <rint>
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	ec51 0b10 	vmov	r0, r1, d0
 800b4ae:	f7f5 fb03 	bl	8000ab8 <__aeabi_dcmpeq>
 800b4b2:	b920      	cbnz	r0, 800b4be <pow+0x222>
 800b4b4:	4b2e      	ldr	r3, [pc, #184]	; (800b570 <pow+0x2d4>)
 800b4b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b4ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b4be:	f998 3000 	ldrsb.w	r3, [r8]
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d142      	bne.n	800b54c <pow+0x2b0>
 800b4c6:	f7ff fa61 	bl	800a98c <__errno>
 800b4ca:	2322      	movs	r3, #34	; 0x22
 800b4cc:	e78d      	b.n	800b3ea <pow+0x14e>
 800b4ce:	4b29      	ldr	r3, [pc, #164]	; (800b574 <pow+0x2d8>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	4652      	mov	r2, sl
 800b4da:	465b      	mov	r3, fp
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f5 faf5 	bl	8000acc <__aeabi_dcmplt>
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	d0eb      	beq.n	800b4be <pow+0x222>
 800b4e6:	ec45 4b10 	vmov	d0, r4, r5
 800b4ea:	f000 fe25 	bl	800c138 <rint>
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	ec51 0b10 	vmov	r0, r1, d0
 800b4f6:	f7f5 fadf 	bl	8000ab8 <__aeabi_dcmpeq>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d1df      	bne.n	800b4be <pow+0x222>
 800b4fe:	2200      	movs	r2, #0
 800b500:	4b18      	ldr	r3, [pc, #96]	; (800b564 <pow+0x2c8>)
 800b502:	e7da      	b.n	800b4ba <pow+0x21e>
 800b504:	2200      	movs	r2, #0
 800b506:	2300      	movs	r3, #0
 800b508:	ec51 0b18 	vmov	r0, r1, d8
 800b50c:	f7f5 fad4 	bl	8000ab8 <__aeabi_dcmpeq>
 800b510:	2800      	cmp	r0, #0
 800b512:	f43f af3a 	beq.w	800b38a <pow+0xee>
 800b516:	ec47 6b10 	vmov	d0, r6, r7
 800b51a:	f000 fdf8 	bl	800c10e <finite>
 800b51e:	2800      	cmp	r0, #0
 800b520:	f43f af33 	beq.w	800b38a <pow+0xee>
 800b524:	ec45 4b10 	vmov	d0, r4, r5
 800b528:	f000 fdf1 	bl	800c10e <finite>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	f43f af2c 	beq.w	800b38a <pow+0xee>
 800b532:	2304      	movs	r3, #4
 800b534:	9302      	str	r3, [sp, #8]
 800b536:	4b09      	ldr	r3, [pc, #36]	; (800b55c <pow+0x2c0>)
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	2300      	movs	r3, #0
 800b53c:	930a      	str	r3, [sp, #40]	; 0x28
 800b53e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b542:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b546:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b54a:	e7b8      	b.n	800b4be <pow+0x222>
 800b54c:	a802      	add	r0, sp, #8
 800b54e:	f000 fde6 	bl	800c11e <matherr>
 800b552:	2800      	cmp	r0, #0
 800b554:	f47f af11 	bne.w	800b37a <pow+0xde>
 800b558:	e7b5      	b.n	800b4c6 <pow+0x22a>
 800b55a:	bf00      	nop
 800b55c:	0800c627 	.word	0x0800c627
 800b560:	3ff00000 	.word	0x3ff00000
 800b564:	fff00000 	.word	0xfff00000
 800b568:	3fe00000 	.word	0x3fe00000
 800b56c:	47efffff 	.word	0x47efffff
 800b570:	c7efffff 	.word	0xc7efffff
 800b574:	7ff00000 	.word	0x7ff00000
 800b578:	2000014c 	.word	0x2000014c
 800b57c:	00000000 	.word	0x00000000

0800b580 <__ieee754_pow>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	b091      	sub	sp, #68	; 0x44
 800b586:	ed8d 1b00 	vstr	d1, [sp]
 800b58a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b58e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b592:	ea58 0302 	orrs.w	r3, r8, r2
 800b596:	ec57 6b10 	vmov	r6, r7, d0
 800b59a:	f000 84be 	beq.w	800bf1a <__ieee754_pow+0x99a>
 800b59e:	4b7a      	ldr	r3, [pc, #488]	; (800b788 <__ieee754_pow+0x208>)
 800b5a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b5a4:	429c      	cmp	r4, r3
 800b5a6:	463d      	mov	r5, r7
 800b5a8:	ee10 aa10 	vmov	sl, s0
 800b5ac:	dc09      	bgt.n	800b5c2 <__ieee754_pow+0x42>
 800b5ae:	d103      	bne.n	800b5b8 <__ieee754_pow+0x38>
 800b5b0:	b93e      	cbnz	r6, 800b5c2 <__ieee754_pow+0x42>
 800b5b2:	45a0      	cmp	r8, r4
 800b5b4:	dc0d      	bgt.n	800b5d2 <__ieee754_pow+0x52>
 800b5b6:	e001      	b.n	800b5bc <__ieee754_pow+0x3c>
 800b5b8:	4598      	cmp	r8, r3
 800b5ba:	dc02      	bgt.n	800b5c2 <__ieee754_pow+0x42>
 800b5bc:	4598      	cmp	r8, r3
 800b5be:	d10e      	bne.n	800b5de <__ieee754_pow+0x5e>
 800b5c0:	b16a      	cbz	r2, 800b5de <__ieee754_pow+0x5e>
 800b5c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b5c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b5ca:	ea54 030a 	orrs.w	r3, r4, sl
 800b5ce:	f000 84a4 	beq.w	800bf1a <__ieee754_pow+0x99a>
 800b5d2:	486e      	ldr	r0, [pc, #440]	; (800b78c <__ieee754_pow+0x20c>)
 800b5d4:	b011      	add	sp, #68	; 0x44
 800b5d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5da:	f000 bda5 	b.w	800c128 <nan>
 800b5de:	2d00      	cmp	r5, #0
 800b5e0:	da53      	bge.n	800b68a <__ieee754_pow+0x10a>
 800b5e2:	4b6b      	ldr	r3, [pc, #428]	; (800b790 <__ieee754_pow+0x210>)
 800b5e4:	4598      	cmp	r8, r3
 800b5e6:	dc4d      	bgt.n	800b684 <__ieee754_pow+0x104>
 800b5e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b5ec:	4598      	cmp	r8, r3
 800b5ee:	dd4c      	ble.n	800b68a <__ieee754_pow+0x10a>
 800b5f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b5f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b5f8:	2b14      	cmp	r3, #20
 800b5fa:	dd26      	ble.n	800b64a <__ieee754_pow+0xca>
 800b5fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b600:	fa22 f103 	lsr.w	r1, r2, r3
 800b604:	fa01 f303 	lsl.w	r3, r1, r3
 800b608:	4293      	cmp	r3, r2
 800b60a:	d13e      	bne.n	800b68a <__ieee754_pow+0x10a>
 800b60c:	f001 0101 	and.w	r1, r1, #1
 800b610:	f1c1 0b02 	rsb	fp, r1, #2
 800b614:	2a00      	cmp	r2, #0
 800b616:	d15b      	bne.n	800b6d0 <__ieee754_pow+0x150>
 800b618:	4b5b      	ldr	r3, [pc, #364]	; (800b788 <__ieee754_pow+0x208>)
 800b61a:	4598      	cmp	r8, r3
 800b61c:	d124      	bne.n	800b668 <__ieee754_pow+0xe8>
 800b61e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b622:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b626:	ea53 030a 	orrs.w	r3, r3, sl
 800b62a:	f000 8476 	beq.w	800bf1a <__ieee754_pow+0x99a>
 800b62e:	4b59      	ldr	r3, [pc, #356]	; (800b794 <__ieee754_pow+0x214>)
 800b630:	429c      	cmp	r4, r3
 800b632:	dd2d      	ble.n	800b690 <__ieee754_pow+0x110>
 800b634:	f1b9 0f00 	cmp.w	r9, #0
 800b638:	f280 8473 	bge.w	800bf22 <__ieee754_pow+0x9a2>
 800b63c:	2000      	movs	r0, #0
 800b63e:	2100      	movs	r1, #0
 800b640:	ec41 0b10 	vmov	d0, r0, r1
 800b644:	b011      	add	sp, #68	; 0x44
 800b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64a:	2a00      	cmp	r2, #0
 800b64c:	d13e      	bne.n	800b6cc <__ieee754_pow+0x14c>
 800b64e:	f1c3 0314 	rsb	r3, r3, #20
 800b652:	fa48 f103 	asr.w	r1, r8, r3
 800b656:	fa01 f303 	lsl.w	r3, r1, r3
 800b65a:	4543      	cmp	r3, r8
 800b65c:	f040 8469 	bne.w	800bf32 <__ieee754_pow+0x9b2>
 800b660:	f001 0101 	and.w	r1, r1, #1
 800b664:	f1c1 0b02 	rsb	fp, r1, #2
 800b668:	4b4b      	ldr	r3, [pc, #300]	; (800b798 <__ieee754_pow+0x218>)
 800b66a:	4598      	cmp	r8, r3
 800b66c:	d118      	bne.n	800b6a0 <__ieee754_pow+0x120>
 800b66e:	f1b9 0f00 	cmp.w	r9, #0
 800b672:	f280 845a 	bge.w	800bf2a <__ieee754_pow+0x9aa>
 800b676:	4948      	ldr	r1, [pc, #288]	; (800b798 <__ieee754_pow+0x218>)
 800b678:	4632      	mov	r2, r6
 800b67a:	463b      	mov	r3, r7
 800b67c:	2000      	movs	r0, #0
 800b67e:	f7f5 f8dd 	bl	800083c <__aeabi_ddiv>
 800b682:	e7dd      	b.n	800b640 <__ieee754_pow+0xc0>
 800b684:	f04f 0b02 	mov.w	fp, #2
 800b688:	e7c4      	b.n	800b614 <__ieee754_pow+0x94>
 800b68a:	f04f 0b00 	mov.w	fp, #0
 800b68e:	e7c1      	b.n	800b614 <__ieee754_pow+0x94>
 800b690:	f1b9 0f00 	cmp.w	r9, #0
 800b694:	dad2      	bge.n	800b63c <__ieee754_pow+0xbc>
 800b696:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b69a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b69e:	e7cf      	b.n	800b640 <__ieee754_pow+0xc0>
 800b6a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b6a4:	d106      	bne.n	800b6b4 <__ieee754_pow+0x134>
 800b6a6:	4632      	mov	r2, r6
 800b6a8:	463b      	mov	r3, r7
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f7f4 ff9b 	bl	80005e8 <__aeabi_dmul>
 800b6b2:	e7c5      	b.n	800b640 <__ieee754_pow+0xc0>
 800b6b4:	4b39      	ldr	r3, [pc, #228]	; (800b79c <__ieee754_pow+0x21c>)
 800b6b6:	4599      	cmp	r9, r3
 800b6b8:	d10a      	bne.n	800b6d0 <__ieee754_pow+0x150>
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	db08      	blt.n	800b6d0 <__ieee754_pow+0x150>
 800b6be:	ec47 6b10 	vmov	d0, r6, r7
 800b6c2:	b011      	add	sp, #68	; 0x44
 800b6c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	f000 bc68 	b.w	800bf9c <__ieee754_sqrt>
 800b6cc:	f04f 0b00 	mov.w	fp, #0
 800b6d0:	ec47 6b10 	vmov	d0, r6, r7
 800b6d4:	f000 fd12 	bl	800c0fc <fabs>
 800b6d8:	ec51 0b10 	vmov	r0, r1, d0
 800b6dc:	f1ba 0f00 	cmp.w	sl, #0
 800b6e0:	d127      	bne.n	800b732 <__ieee754_pow+0x1b2>
 800b6e2:	b124      	cbz	r4, 800b6ee <__ieee754_pow+0x16e>
 800b6e4:	4b2c      	ldr	r3, [pc, #176]	; (800b798 <__ieee754_pow+0x218>)
 800b6e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d121      	bne.n	800b732 <__ieee754_pow+0x1b2>
 800b6ee:	f1b9 0f00 	cmp.w	r9, #0
 800b6f2:	da05      	bge.n	800b700 <__ieee754_pow+0x180>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	4927      	ldr	r1, [pc, #156]	; (800b798 <__ieee754_pow+0x218>)
 800b6fc:	f7f5 f89e 	bl	800083c <__aeabi_ddiv>
 800b700:	2d00      	cmp	r5, #0
 800b702:	da9d      	bge.n	800b640 <__ieee754_pow+0xc0>
 800b704:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b708:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b70c:	ea54 030b 	orrs.w	r3, r4, fp
 800b710:	d108      	bne.n	800b724 <__ieee754_pow+0x1a4>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	4610      	mov	r0, r2
 800b718:	4619      	mov	r1, r3
 800b71a:	f7f4 fdad 	bl	8000278 <__aeabi_dsub>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	e7ac      	b.n	800b67e <__ieee754_pow+0xfe>
 800b724:	f1bb 0f01 	cmp.w	fp, #1
 800b728:	d18a      	bne.n	800b640 <__ieee754_pow+0xc0>
 800b72a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b72e:	4619      	mov	r1, r3
 800b730:	e786      	b.n	800b640 <__ieee754_pow+0xc0>
 800b732:	0fed      	lsrs	r5, r5, #31
 800b734:	1e6b      	subs	r3, r5, #1
 800b736:	930d      	str	r3, [sp, #52]	; 0x34
 800b738:	ea5b 0303 	orrs.w	r3, fp, r3
 800b73c:	d102      	bne.n	800b744 <__ieee754_pow+0x1c4>
 800b73e:	4632      	mov	r2, r6
 800b740:	463b      	mov	r3, r7
 800b742:	e7e8      	b.n	800b716 <__ieee754_pow+0x196>
 800b744:	4b16      	ldr	r3, [pc, #88]	; (800b7a0 <__ieee754_pow+0x220>)
 800b746:	4598      	cmp	r8, r3
 800b748:	f340 80fe 	ble.w	800b948 <__ieee754_pow+0x3c8>
 800b74c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b750:	4598      	cmp	r8, r3
 800b752:	dd0a      	ble.n	800b76a <__ieee754_pow+0x1ea>
 800b754:	4b0f      	ldr	r3, [pc, #60]	; (800b794 <__ieee754_pow+0x214>)
 800b756:	429c      	cmp	r4, r3
 800b758:	dc0d      	bgt.n	800b776 <__ieee754_pow+0x1f6>
 800b75a:	f1b9 0f00 	cmp.w	r9, #0
 800b75e:	f6bf af6d 	bge.w	800b63c <__ieee754_pow+0xbc>
 800b762:	a307      	add	r3, pc, #28	; (adr r3, 800b780 <__ieee754_pow+0x200>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	e79f      	b.n	800b6aa <__ieee754_pow+0x12a>
 800b76a:	4b0e      	ldr	r3, [pc, #56]	; (800b7a4 <__ieee754_pow+0x224>)
 800b76c:	429c      	cmp	r4, r3
 800b76e:	ddf4      	ble.n	800b75a <__ieee754_pow+0x1da>
 800b770:	4b09      	ldr	r3, [pc, #36]	; (800b798 <__ieee754_pow+0x218>)
 800b772:	429c      	cmp	r4, r3
 800b774:	dd18      	ble.n	800b7a8 <__ieee754_pow+0x228>
 800b776:	f1b9 0f00 	cmp.w	r9, #0
 800b77a:	dcf2      	bgt.n	800b762 <__ieee754_pow+0x1e2>
 800b77c:	e75e      	b.n	800b63c <__ieee754_pow+0xbc>
 800b77e:	bf00      	nop
 800b780:	8800759c 	.word	0x8800759c
 800b784:	7e37e43c 	.word	0x7e37e43c
 800b788:	7ff00000 	.word	0x7ff00000
 800b78c:	0800c5f9 	.word	0x0800c5f9
 800b790:	433fffff 	.word	0x433fffff
 800b794:	3fefffff 	.word	0x3fefffff
 800b798:	3ff00000 	.word	0x3ff00000
 800b79c:	3fe00000 	.word	0x3fe00000
 800b7a0:	41e00000 	.word	0x41e00000
 800b7a4:	3feffffe 	.word	0x3feffffe
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	4b63      	ldr	r3, [pc, #396]	; (800b938 <__ieee754_pow+0x3b8>)
 800b7ac:	f7f4 fd64 	bl	8000278 <__aeabi_dsub>
 800b7b0:	a355      	add	r3, pc, #340	; (adr r3, 800b908 <__ieee754_pow+0x388>)
 800b7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	460d      	mov	r5, r1
 800b7ba:	f7f4 ff15 	bl	80005e8 <__aeabi_dmul>
 800b7be:	a354      	add	r3, pc, #336	; (adr r3, 800b910 <__ieee754_pow+0x390>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	460f      	mov	r7, r1
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	f7f4 ff0c 	bl	80005e8 <__aeabi_dmul>
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7d6:	4b59      	ldr	r3, [pc, #356]	; (800b93c <__ieee754_pow+0x3bc>)
 800b7d8:	4620      	mov	r0, r4
 800b7da:	4629      	mov	r1, r5
 800b7dc:	f7f4 ff04 	bl	80005e8 <__aeabi_dmul>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	a14c      	add	r1, pc, #304	; (adr r1, 800b918 <__ieee754_pow+0x398>)
 800b7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7ea:	f7f4 fd45 	bl	8000278 <__aeabi_dsub>
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	462b      	mov	r3, r5
 800b7f2:	f7f4 fef9 	bl	80005e8 <__aeabi_dmul>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	4950      	ldr	r1, [pc, #320]	; (800b940 <__ieee754_pow+0x3c0>)
 800b7fe:	f7f4 fd3b 	bl	8000278 <__aeabi_dsub>
 800b802:	4622      	mov	r2, r4
 800b804:	462b      	mov	r3, r5
 800b806:	4680      	mov	r8, r0
 800b808:	4689      	mov	r9, r1
 800b80a:	4620      	mov	r0, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	f7f4 feeb 	bl	80005e8 <__aeabi_dmul>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4640      	mov	r0, r8
 800b818:	4649      	mov	r1, r9
 800b81a:	f7f4 fee5 	bl	80005e8 <__aeabi_dmul>
 800b81e:	a340      	add	r3, pc, #256	; (adr r3, 800b920 <__ieee754_pow+0x3a0>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f4 fee0 	bl	80005e8 <__aeabi_dmul>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b830:	f7f4 fd22 	bl	8000278 <__aeabi_dsub>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4604      	mov	r4, r0
 800b83a:	460d      	mov	r5, r1
 800b83c:	4630      	mov	r0, r6
 800b83e:	4639      	mov	r1, r7
 800b840:	f7f4 fd1c 	bl	800027c <__adddf3>
 800b844:	2000      	movs	r0, #0
 800b846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b84a:	4632      	mov	r2, r6
 800b84c:	463b      	mov	r3, r7
 800b84e:	f7f4 fd13 	bl	8000278 <__aeabi_dsub>
 800b852:	4602      	mov	r2, r0
 800b854:	460b      	mov	r3, r1
 800b856:	4620      	mov	r0, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f4 fd0d 	bl	8000278 <__aeabi_dsub>
 800b85e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b860:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b864:	4313      	orrs	r3, r2
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	f040 81eb 	bne.w	800bc44 <__ieee754_pow+0x6c4>
 800b86e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b928 <__ieee754_pow+0x3a8>
 800b872:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b876:	2400      	movs	r4, #0
 800b878:	4622      	mov	r2, r4
 800b87a:	462b      	mov	r3, r5
 800b87c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b880:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b884:	f7f4 fcf8 	bl	8000278 <__aeabi_dsub>
 800b888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b88c:	f7f4 feac 	bl	80005e8 <__aeabi_dmul>
 800b890:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b894:	4680      	mov	r8, r0
 800b896:	4689      	mov	r9, r1
 800b898:	4630      	mov	r0, r6
 800b89a:	4639      	mov	r1, r7
 800b89c:	f7f4 fea4 	bl	80005e8 <__aeabi_dmul>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	f7f4 fce8 	bl	800027c <__adddf3>
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	462b      	mov	r3, r5
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4689      	mov	r9, r1
 800b8b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8b8:	f7f4 fe96 	bl	80005e8 <__aeabi_dmul>
 800b8bc:	460b      	mov	r3, r1
 800b8be:	4604      	mov	r4, r0
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	e9cd 4500 	strd	r4, r5, [sp]
 800b8cc:	f7f4 fcd6 	bl	800027c <__adddf3>
 800b8d0:	4b1c      	ldr	r3, [pc, #112]	; (800b944 <__ieee754_pow+0x3c4>)
 800b8d2:	4299      	cmp	r1, r3
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	460f      	mov	r7, r1
 800b8d8:	468b      	mov	fp, r1
 800b8da:	f340 82f7 	ble.w	800becc <__ieee754_pow+0x94c>
 800b8de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b8e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b8e6:	4303      	orrs	r3, r0
 800b8e8:	f000 81ea 	beq.w	800bcc0 <__ieee754_pow+0x740>
 800b8ec:	a310      	add	r3, pc, #64	; (adr r3, 800b930 <__ieee754_pow+0x3b0>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f6:	f7f4 fe77 	bl	80005e8 <__aeabi_dmul>
 800b8fa:	a30d      	add	r3, pc, #52	; (adr r3, 800b930 <__ieee754_pow+0x3b0>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	e6d5      	b.n	800b6ae <__ieee754_pow+0x12e>
 800b902:	bf00      	nop
 800b904:	f3af 8000 	nop.w
 800b908:	60000000 	.word	0x60000000
 800b90c:	3ff71547 	.word	0x3ff71547
 800b910:	f85ddf44 	.word	0xf85ddf44
 800b914:	3e54ae0b 	.word	0x3e54ae0b
 800b918:	55555555 	.word	0x55555555
 800b91c:	3fd55555 	.word	0x3fd55555
 800b920:	652b82fe 	.word	0x652b82fe
 800b924:	3ff71547 	.word	0x3ff71547
 800b928:	00000000 	.word	0x00000000
 800b92c:	bff00000 	.word	0xbff00000
 800b930:	8800759c 	.word	0x8800759c
 800b934:	7e37e43c 	.word	0x7e37e43c
 800b938:	3ff00000 	.word	0x3ff00000
 800b93c:	3fd00000 	.word	0x3fd00000
 800b940:	3fe00000 	.word	0x3fe00000
 800b944:	408fffff 	.word	0x408fffff
 800b948:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b94c:	f04f 0200 	mov.w	r2, #0
 800b950:	da05      	bge.n	800b95e <__ieee754_pow+0x3de>
 800b952:	4bd3      	ldr	r3, [pc, #844]	; (800bca0 <__ieee754_pow+0x720>)
 800b954:	f7f4 fe48 	bl	80005e8 <__aeabi_dmul>
 800b958:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b95c:	460c      	mov	r4, r1
 800b95e:	1523      	asrs	r3, r4, #20
 800b960:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b964:	4413      	add	r3, r2
 800b966:	9309      	str	r3, [sp, #36]	; 0x24
 800b968:	4bce      	ldr	r3, [pc, #824]	; (800bca4 <__ieee754_pow+0x724>)
 800b96a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b96e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b972:	429c      	cmp	r4, r3
 800b974:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b978:	dd08      	ble.n	800b98c <__ieee754_pow+0x40c>
 800b97a:	4bcb      	ldr	r3, [pc, #812]	; (800bca8 <__ieee754_pow+0x728>)
 800b97c:	429c      	cmp	r4, r3
 800b97e:	f340 815e 	ble.w	800bc3e <__ieee754_pow+0x6be>
 800b982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b984:	3301      	adds	r3, #1
 800b986:	9309      	str	r3, [sp, #36]	; 0x24
 800b988:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b98c:	f04f 0a00 	mov.w	sl, #0
 800b990:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b994:	930c      	str	r3, [sp, #48]	; 0x30
 800b996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b998:	4bc4      	ldr	r3, [pc, #784]	; (800bcac <__ieee754_pow+0x72c>)
 800b99a:	4413      	add	r3, r2
 800b99c:	ed93 7b00 	vldr	d7, [r3]
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	ec53 2b17 	vmov	r2, r3, d7
 800b9a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b9aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b9ae:	f7f4 fc63 	bl	8000278 <__aeabi_dsub>
 800b9b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460f      	mov	r7, r1
 800b9ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9be:	f7f4 fc5d 	bl	800027c <__adddf3>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	49b9      	ldr	r1, [pc, #740]	; (800bcb0 <__ieee754_pow+0x730>)
 800b9ca:	f7f4 ff37 	bl	800083c <__aeabi_ddiv>
 800b9ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	4639      	mov	r1, r7
 800b9da:	f7f4 fe05 	bl	80005e8 <__aeabi_dmul>
 800b9de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b9e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	9302      	str	r3, [sp, #8]
 800b9ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b9f2:	106d      	asrs	r5, r5, #1
 800b9f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b9f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ba02:	4640      	mov	r0, r8
 800ba04:	4649      	mov	r1, r9
 800ba06:	4614      	mov	r4, r2
 800ba08:	461d      	mov	r5, r3
 800ba0a:	f7f4 fded 	bl	80005e8 <__aeabi_dmul>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f4 fc2f 	bl	8000278 <__aeabi_dsub>
 800ba1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba1e:	4606      	mov	r6, r0
 800ba20:	460f      	mov	r7, r1
 800ba22:	4620      	mov	r0, r4
 800ba24:	4629      	mov	r1, r5
 800ba26:	f7f4 fc27 	bl	8000278 <__aeabi_dsub>
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba32:	f7f4 fc21 	bl	8000278 <__aeabi_dsub>
 800ba36:	4642      	mov	r2, r8
 800ba38:	464b      	mov	r3, r9
 800ba3a:	f7f4 fdd5 	bl	80005e8 <__aeabi_dmul>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	f7f4 fc17 	bl	8000278 <__aeabi_dsub>
 800ba4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ba4e:	f7f4 fdcb 	bl	80005e8 <__aeabi_dmul>
 800ba52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	f7f4 fdc3 	bl	80005e8 <__aeabi_dmul>
 800ba62:	a37b      	add	r3, pc, #492	; (adr r3, 800bc50 <__ieee754_pow+0x6d0>)
 800ba64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba68:	4604      	mov	r4, r0
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	f7f4 fdbc 	bl	80005e8 <__aeabi_dmul>
 800ba70:	a379      	add	r3, pc, #484	; (adr r3, 800bc58 <__ieee754_pow+0x6d8>)
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f7f4 fc01 	bl	800027c <__adddf3>
 800ba7a:	4622      	mov	r2, r4
 800ba7c:	462b      	mov	r3, r5
 800ba7e:	f7f4 fdb3 	bl	80005e8 <__aeabi_dmul>
 800ba82:	a377      	add	r3, pc, #476	; (adr r3, 800bc60 <__ieee754_pow+0x6e0>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f7f4 fbf8 	bl	800027c <__adddf3>
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	462b      	mov	r3, r5
 800ba90:	f7f4 fdaa 	bl	80005e8 <__aeabi_dmul>
 800ba94:	a374      	add	r3, pc, #464	; (adr r3, 800bc68 <__ieee754_pow+0x6e8>)
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f7f4 fbef 	bl	800027c <__adddf3>
 800ba9e:	4622      	mov	r2, r4
 800baa0:	462b      	mov	r3, r5
 800baa2:	f7f4 fda1 	bl	80005e8 <__aeabi_dmul>
 800baa6:	a372      	add	r3, pc, #456	; (adr r3, 800bc70 <__ieee754_pow+0x6f0>)
 800baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baac:	f7f4 fbe6 	bl	800027c <__adddf3>
 800bab0:	4622      	mov	r2, r4
 800bab2:	462b      	mov	r3, r5
 800bab4:	f7f4 fd98 	bl	80005e8 <__aeabi_dmul>
 800bab8:	a36f      	add	r3, pc, #444	; (adr r3, 800bc78 <__ieee754_pow+0x6f8>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 fbdd 	bl	800027c <__adddf3>
 800bac2:	4622      	mov	r2, r4
 800bac4:	4606      	mov	r6, r0
 800bac6:	460f      	mov	r7, r1
 800bac8:	462b      	mov	r3, r5
 800baca:	4620      	mov	r0, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	f7f4 fd8b 	bl	80005e8 <__aeabi_dmul>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4630      	mov	r0, r6
 800bad8:	4639      	mov	r1, r7
 800bada:	f7f4 fd85 	bl	80005e8 <__aeabi_dmul>
 800bade:	4642      	mov	r2, r8
 800bae0:	4604      	mov	r4, r0
 800bae2:	460d      	mov	r5, r1
 800bae4:	464b      	mov	r3, r9
 800bae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baea:	f7f4 fbc7 	bl	800027c <__adddf3>
 800baee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800baf2:	f7f4 fd79 	bl	80005e8 <__aeabi_dmul>
 800baf6:	4622      	mov	r2, r4
 800baf8:	462b      	mov	r3, r5
 800bafa:	f7f4 fbbf 	bl	800027c <__adddf3>
 800bafe:	4642      	mov	r2, r8
 800bb00:	4606      	mov	r6, r0
 800bb02:	460f      	mov	r7, r1
 800bb04:	464b      	mov	r3, r9
 800bb06:	4640      	mov	r0, r8
 800bb08:	4649      	mov	r1, r9
 800bb0a:	f7f4 fd6d 	bl	80005e8 <__aeabi_dmul>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4b68      	ldr	r3, [pc, #416]	; (800bcb4 <__ieee754_pow+0x734>)
 800bb12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bb16:	f7f4 fbb1 	bl	800027c <__adddf3>
 800bb1a:	4632      	mov	r2, r6
 800bb1c:	463b      	mov	r3, r7
 800bb1e:	f7f4 fbad 	bl	800027c <__adddf3>
 800bb22:	9802      	ldr	r0, [sp, #8]
 800bb24:	460d      	mov	r5, r1
 800bb26:	4604      	mov	r4, r0
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f4 fd5a 	bl	80005e8 <__aeabi_dmul>
 800bb34:	2200      	movs	r2, #0
 800bb36:	4680      	mov	r8, r0
 800bb38:	4689      	mov	r9, r1
 800bb3a:	4b5e      	ldr	r3, [pc, #376]	; (800bcb4 <__ieee754_pow+0x734>)
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	4629      	mov	r1, r5
 800bb40:	f7f4 fb9a 	bl	8000278 <__aeabi_dsub>
 800bb44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb48:	f7f4 fb96 	bl	8000278 <__aeabi_dsub>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4630      	mov	r0, r6
 800bb52:	4639      	mov	r1, r7
 800bb54:	f7f4 fb90 	bl	8000278 <__aeabi_dsub>
 800bb58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb5c:	f7f4 fd44 	bl	80005e8 <__aeabi_dmul>
 800bb60:	4622      	mov	r2, r4
 800bb62:	4606      	mov	r6, r0
 800bb64:	460f      	mov	r7, r1
 800bb66:	462b      	mov	r3, r5
 800bb68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb6c:	f7f4 fd3c 	bl	80005e8 <__aeabi_dmul>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4630      	mov	r0, r6
 800bb76:	4639      	mov	r1, r7
 800bb78:	f7f4 fb80 	bl	800027c <__adddf3>
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4640      	mov	r0, r8
 800bb86:	4649      	mov	r1, r9
 800bb88:	f7f4 fb78 	bl	800027c <__adddf3>
 800bb8c:	9802      	ldr	r0, [sp, #8]
 800bb8e:	a33c      	add	r3, pc, #240	; (adr r3, 800bc80 <__ieee754_pow+0x700>)
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	4604      	mov	r4, r0
 800bb96:	460d      	mov	r5, r1
 800bb98:	f7f4 fd26 	bl	80005e8 <__aeabi_dmul>
 800bb9c:	4642      	mov	r2, r8
 800bb9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bba2:	464b      	mov	r3, r9
 800bba4:	4620      	mov	r0, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	f7f4 fb66 	bl	8000278 <__aeabi_dsub>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 fb60 	bl	8000278 <__aeabi_dsub>
 800bbb8:	a333      	add	r3, pc, #204	; (adr r3, 800bc88 <__ieee754_pow+0x708>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fd13 	bl	80005e8 <__aeabi_dmul>
 800bbc2:	a333      	add	r3, pc, #204	; (adr r3, 800bc90 <__ieee754_pow+0x710>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	4606      	mov	r6, r0
 800bbca:	460f      	mov	r7, r1
 800bbcc:	4620      	mov	r0, r4
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f7f4 fd0a 	bl	80005e8 <__aeabi_dmul>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4630      	mov	r0, r6
 800bbda:	4639      	mov	r1, r7
 800bbdc:	f7f4 fb4e 	bl	800027c <__adddf3>
 800bbe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbe2:	4b35      	ldr	r3, [pc, #212]	; (800bcb8 <__ieee754_pow+0x738>)
 800bbe4:	4413      	add	r3, r2
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	f7f4 fb47 	bl	800027c <__adddf3>
 800bbee:	4604      	mov	r4, r0
 800bbf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbf2:	460d      	mov	r5, r1
 800bbf4:	f7f4 fc8e 	bl	8000514 <__aeabi_i2d>
 800bbf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbfa:	4b30      	ldr	r3, [pc, #192]	; (800bcbc <__ieee754_pow+0x73c>)
 800bbfc:	4413      	add	r3, r2
 800bbfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc02:	4606      	mov	r6, r0
 800bc04:	460f      	mov	r7, r1
 800bc06:	4622      	mov	r2, r4
 800bc08:	462b      	mov	r3, r5
 800bc0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc0e:	f7f4 fb35 	bl	800027c <__adddf3>
 800bc12:	4642      	mov	r2, r8
 800bc14:	464b      	mov	r3, r9
 800bc16:	f7f4 fb31 	bl	800027c <__adddf3>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	f7f4 fb2d 	bl	800027c <__adddf3>
 800bc22:	9802      	ldr	r0, [sp, #8]
 800bc24:	4632      	mov	r2, r6
 800bc26:	463b      	mov	r3, r7
 800bc28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc2c:	f7f4 fb24 	bl	8000278 <__aeabi_dsub>
 800bc30:	4642      	mov	r2, r8
 800bc32:	464b      	mov	r3, r9
 800bc34:	f7f4 fb20 	bl	8000278 <__aeabi_dsub>
 800bc38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc3c:	e607      	b.n	800b84e <__ieee754_pow+0x2ce>
 800bc3e:	f04f 0a01 	mov.w	sl, #1
 800bc42:	e6a5      	b.n	800b990 <__ieee754_pow+0x410>
 800bc44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bc98 <__ieee754_pow+0x718>
 800bc48:	e613      	b.n	800b872 <__ieee754_pow+0x2f2>
 800bc4a:	bf00      	nop
 800bc4c:	f3af 8000 	nop.w
 800bc50:	4a454eef 	.word	0x4a454eef
 800bc54:	3fca7e28 	.word	0x3fca7e28
 800bc58:	93c9db65 	.word	0x93c9db65
 800bc5c:	3fcd864a 	.word	0x3fcd864a
 800bc60:	a91d4101 	.word	0xa91d4101
 800bc64:	3fd17460 	.word	0x3fd17460
 800bc68:	518f264d 	.word	0x518f264d
 800bc6c:	3fd55555 	.word	0x3fd55555
 800bc70:	db6fabff 	.word	0xdb6fabff
 800bc74:	3fdb6db6 	.word	0x3fdb6db6
 800bc78:	33333303 	.word	0x33333303
 800bc7c:	3fe33333 	.word	0x3fe33333
 800bc80:	e0000000 	.word	0xe0000000
 800bc84:	3feec709 	.word	0x3feec709
 800bc88:	dc3a03fd 	.word	0xdc3a03fd
 800bc8c:	3feec709 	.word	0x3feec709
 800bc90:	145b01f5 	.word	0x145b01f5
 800bc94:	be3e2fe0 	.word	0xbe3e2fe0
 800bc98:	00000000 	.word	0x00000000
 800bc9c:	3ff00000 	.word	0x3ff00000
 800bca0:	43400000 	.word	0x43400000
 800bca4:	0003988e 	.word	0x0003988e
 800bca8:	000bb679 	.word	0x000bb679
 800bcac:	0800c630 	.word	0x0800c630
 800bcb0:	3ff00000 	.word	0x3ff00000
 800bcb4:	40080000 	.word	0x40080000
 800bcb8:	0800c650 	.word	0x0800c650
 800bcbc:	0800c640 	.word	0x0800c640
 800bcc0:	a3b4      	add	r3, pc, #720	; (adr r3, 800bf94 <__ieee754_pow+0xa14>)
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	4640      	mov	r0, r8
 800bcc8:	4649      	mov	r1, r9
 800bcca:	f7f4 fad7 	bl	800027c <__adddf3>
 800bcce:	4622      	mov	r2, r4
 800bcd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcd4:	462b      	mov	r3, r5
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	4639      	mov	r1, r7
 800bcda:	f7f4 facd 	bl	8000278 <__aeabi_dsub>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bce6:	f7f4 ff0f 	bl	8000b08 <__aeabi_dcmpgt>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f47f adfe 	bne.w	800b8ec <__ieee754_pow+0x36c>
 800bcf0:	4aa3      	ldr	r2, [pc, #652]	; (800bf80 <__ieee754_pow+0xa00>)
 800bcf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	f340 810a 	ble.w	800bf10 <__ieee754_pow+0x990>
 800bcfc:	151b      	asrs	r3, r3, #20
 800bcfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bd02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bd06:	fa4a f303 	asr.w	r3, sl, r3
 800bd0a:	445b      	add	r3, fp
 800bd0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bd10:	4e9c      	ldr	r6, [pc, #624]	; (800bf84 <__ieee754_pow+0xa04>)
 800bd12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bd16:	4116      	asrs	r6, r2
 800bd18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	ea23 0106 	bic.w	r1, r3, r6
 800bd22:	f1c2 0214 	rsb	r2, r2, #20
 800bd26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd2a:	fa4a fa02 	asr.w	sl, sl, r2
 800bd2e:	f1bb 0f00 	cmp.w	fp, #0
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	bfb8      	it	lt
 800bd3c:	f1ca 0a00 	rsblt	sl, sl, #0
 800bd40:	f7f4 fa9a 	bl	8000278 <__aeabi_dsub>
 800bd44:	e9cd 0100 	strd	r0, r1, [sp]
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd50:	f7f4 fa94 	bl	800027c <__adddf3>
 800bd54:	2000      	movs	r0, #0
 800bd56:	a378      	add	r3, pc, #480	; (adr r3, 800bf38 <__ieee754_pow+0x9b8>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	460d      	mov	r5, r1
 800bd60:	f7f4 fc42 	bl	80005e8 <__aeabi_dmul>
 800bd64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd68:	4606      	mov	r6, r0
 800bd6a:	460f      	mov	r7, r1
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	4629      	mov	r1, r5
 800bd70:	f7f4 fa82 	bl	8000278 <__aeabi_dsub>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	4640      	mov	r0, r8
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	f7f4 fa7c 	bl	8000278 <__aeabi_dsub>
 800bd80:	a36f      	add	r3, pc, #444	; (adr r3, 800bf40 <__ieee754_pow+0x9c0>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fc2f 	bl	80005e8 <__aeabi_dmul>
 800bd8a:	a36f      	add	r3, pc, #444	; (adr r3, 800bf48 <__ieee754_pow+0x9c8>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	4680      	mov	r8, r0
 800bd92:	4689      	mov	r9, r1
 800bd94:	4620      	mov	r0, r4
 800bd96:	4629      	mov	r1, r5
 800bd98:	f7f4 fc26 	bl	80005e8 <__aeabi_dmul>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4640      	mov	r0, r8
 800bda2:	4649      	mov	r1, r9
 800bda4:	f7f4 fa6a 	bl	800027c <__adddf3>
 800bda8:	4604      	mov	r4, r0
 800bdaa:	460d      	mov	r5, r1
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	4639      	mov	r1, r7
 800bdb4:	f7f4 fa62 	bl	800027c <__adddf3>
 800bdb8:	4632      	mov	r2, r6
 800bdba:	463b      	mov	r3, r7
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4689      	mov	r9, r1
 800bdc0:	f7f4 fa5a 	bl	8000278 <__aeabi_dsub>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4620      	mov	r0, r4
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f7f4 fa54 	bl	8000278 <__aeabi_dsub>
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	460f      	mov	r7, r1
 800bdd6:	464b      	mov	r3, r9
 800bdd8:	4640      	mov	r0, r8
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7f4 fc04 	bl	80005e8 <__aeabi_dmul>
 800bde0:	a35b      	add	r3, pc, #364	; (adr r3, 800bf50 <__ieee754_pow+0x9d0>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	4604      	mov	r4, r0
 800bde8:	460d      	mov	r5, r1
 800bdea:	f7f4 fbfd 	bl	80005e8 <__aeabi_dmul>
 800bdee:	a35a      	add	r3, pc, #360	; (adr r3, 800bf58 <__ieee754_pow+0x9d8>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f7f4 fa40 	bl	8000278 <__aeabi_dsub>
 800bdf8:	4622      	mov	r2, r4
 800bdfa:	462b      	mov	r3, r5
 800bdfc:	f7f4 fbf4 	bl	80005e8 <__aeabi_dmul>
 800be00:	a357      	add	r3, pc, #348	; (adr r3, 800bf60 <__ieee754_pow+0x9e0>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 fa39 	bl	800027c <__adddf3>
 800be0a:	4622      	mov	r2, r4
 800be0c:	462b      	mov	r3, r5
 800be0e:	f7f4 fbeb 	bl	80005e8 <__aeabi_dmul>
 800be12:	a355      	add	r3, pc, #340	; (adr r3, 800bf68 <__ieee754_pow+0x9e8>)
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	f7f4 fa2e 	bl	8000278 <__aeabi_dsub>
 800be1c:	4622      	mov	r2, r4
 800be1e:	462b      	mov	r3, r5
 800be20:	f7f4 fbe2 	bl	80005e8 <__aeabi_dmul>
 800be24:	a352      	add	r3, pc, #328	; (adr r3, 800bf70 <__ieee754_pow+0x9f0>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	f7f4 fa27 	bl	800027c <__adddf3>
 800be2e:	4622      	mov	r2, r4
 800be30:	462b      	mov	r3, r5
 800be32:	f7f4 fbd9 	bl	80005e8 <__aeabi_dmul>
 800be36:	4602      	mov	r2, r0
 800be38:	460b      	mov	r3, r1
 800be3a:	4640      	mov	r0, r8
 800be3c:	4649      	mov	r1, r9
 800be3e:	f7f4 fa1b 	bl	8000278 <__aeabi_dsub>
 800be42:	4604      	mov	r4, r0
 800be44:	460d      	mov	r5, r1
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 fbcb 	bl	80005e8 <__aeabi_dmul>
 800be52:	2200      	movs	r2, #0
 800be54:	e9cd 0100 	strd	r0, r1, [sp]
 800be58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be5c:	4620      	mov	r0, r4
 800be5e:	4629      	mov	r1, r5
 800be60:	f7f4 fa0a 	bl	8000278 <__aeabi_dsub>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be6c:	f7f4 fce6 	bl	800083c <__aeabi_ddiv>
 800be70:	4632      	mov	r2, r6
 800be72:	4604      	mov	r4, r0
 800be74:	460d      	mov	r5, r1
 800be76:	463b      	mov	r3, r7
 800be78:	4640      	mov	r0, r8
 800be7a:	4649      	mov	r1, r9
 800be7c:	f7f4 fbb4 	bl	80005e8 <__aeabi_dmul>
 800be80:	4632      	mov	r2, r6
 800be82:	463b      	mov	r3, r7
 800be84:	f7f4 f9fa 	bl	800027c <__adddf3>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4620      	mov	r0, r4
 800be8e:	4629      	mov	r1, r5
 800be90:	f7f4 f9f2 	bl	8000278 <__aeabi_dsub>
 800be94:	4642      	mov	r2, r8
 800be96:	464b      	mov	r3, r9
 800be98:	f7f4 f9ee 	bl	8000278 <__aeabi_dsub>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	2000      	movs	r0, #0
 800bea2:	4939      	ldr	r1, [pc, #228]	; (800bf88 <__ieee754_pow+0xa08>)
 800bea4:	f7f4 f9e8 	bl	8000278 <__aeabi_dsub>
 800bea8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800beac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	da2f      	bge.n	800bf16 <__ieee754_pow+0x996>
 800beb6:	4650      	mov	r0, sl
 800beb8:	ec43 2b10 	vmov	d0, r2, r3
 800bebc:	f000 f9c0 	bl	800c240 <scalbn>
 800bec0:	ec51 0b10 	vmov	r0, r1, d0
 800bec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bec8:	f7ff bbf1 	b.w	800b6ae <__ieee754_pow+0x12e>
 800becc:	4b2f      	ldr	r3, [pc, #188]	; (800bf8c <__ieee754_pow+0xa0c>)
 800bece:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bed2:	429e      	cmp	r6, r3
 800bed4:	f77f af0c 	ble.w	800bcf0 <__ieee754_pow+0x770>
 800bed8:	4b2d      	ldr	r3, [pc, #180]	; (800bf90 <__ieee754_pow+0xa10>)
 800beda:	440b      	add	r3, r1
 800bedc:	4303      	orrs	r3, r0
 800bede:	d00b      	beq.n	800bef8 <__ieee754_pow+0x978>
 800bee0:	a325      	add	r3, pc, #148	; (adr r3, 800bf78 <__ieee754_pow+0x9f8>)
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beea:	f7f4 fb7d 	bl	80005e8 <__aeabi_dmul>
 800beee:	a322      	add	r3, pc, #136	; (adr r3, 800bf78 <__ieee754_pow+0x9f8>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	f7ff bbdb 	b.w	800b6ae <__ieee754_pow+0x12e>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	f7f4 f9bc 	bl	8000278 <__aeabi_dsub>
 800bf00:	4642      	mov	r2, r8
 800bf02:	464b      	mov	r3, r9
 800bf04:	f7f4 fdf6 	bl	8000af4 <__aeabi_dcmpge>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	f43f aef1 	beq.w	800bcf0 <__ieee754_pow+0x770>
 800bf0e:	e7e7      	b.n	800bee0 <__ieee754_pow+0x960>
 800bf10:	f04f 0a00 	mov.w	sl, #0
 800bf14:	e718      	b.n	800bd48 <__ieee754_pow+0x7c8>
 800bf16:	4621      	mov	r1, r4
 800bf18:	e7d4      	b.n	800bec4 <__ieee754_pow+0x944>
 800bf1a:	2000      	movs	r0, #0
 800bf1c:	491a      	ldr	r1, [pc, #104]	; (800bf88 <__ieee754_pow+0xa08>)
 800bf1e:	f7ff bb8f 	b.w	800b640 <__ieee754_pow+0xc0>
 800bf22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf26:	f7ff bb8b 	b.w	800b640 <__ieee754_pow+0xc0>
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	f7ff bb87 	b.w	800b640 <__ieee754_pow+0xc0>
 800bf32:	4693      	mov	fp, r2
 800bf34:	f7ff bb98 	b.w	800b668 <__ieee754_pow+0xe8>
 800bf38:	00000000 	.word	0x00000000
 800bf3c:	3fe62e43 	.word	0x3fe62e43
 800bf40:	fefa39ef 	.word	0xfefa39ef
 800bf44:	3fe62e42 	.word	0x3fe62e42
 800bf48:	0ca86c39 	.word	0x0ca86c39
 800bf4c:	be205c61 	.word	0xbe205c61
 800bf50:	72bea4d0 	.word	0x72bea4d0
 800bf54:	3e663769 	.word	0x3e663769
 800bf58:	c5d26bf1 	.word	0xc5d26bf1
 800bf5c:	3ebbbd41 	.word	0x3ebbbd41
 800bf60:	af25de2c 	.word	0xaf25de2c
 800bf64:	3f11566a 	.word	0x3f11566a
 800bf68:	16bebd93 	.word	0x16bebd93
 800bf6c:	3f66c16c 	.word	0x3f66c16c
 800bf70:	5555553e 	.word	0x5555553e
 800bf74:	3fc55555 	.word	0x3fc55555
 800bf78:	c2f8f359 	.word	0xc2f8f359
 800bf7c:	01a56e1f 	.word	0x01a56e1f
 800bf80:	3fe00000 	.word	0x3fe00000
 800bf84:	000fffff 	.word	0x000fffff
 800bf88:	3ff00000 	.word	0x3ff00000
 800bf8c:	4090cbff 	.word	0x4090cbff
 800bf90:	3f6f3400 	.word	0x3f6f3400
 800bf94:	652b82fe 	.word	0x652b82fe
 800bf98:	3c971547 	.word	0x3c971547

0800bf9c <__ieee754_sqrt>:
 800bf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa0:	4955      	ldr	r1, [pc, #340]	; (800c0f8 <__ieee754_sqrt+0x15c>)
 800bfa2:	ec55 4b10 	vmov	r4, r5, d0
 800bfa6:	43a9      	bics	r1, r5
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	462a      	mov	r2, r5
 800bfac:	d112      	bne.n	800bfd4 <__ieee754_sqrt+0x38>
 800bfae:	ee10 2a10 	vmov	r2, s0
 800bfb2:	ee10 0a10 	vmov	r0, s0
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7f4 fb16 	bl	80005e8 <__aeabi_dmul>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	f7f4 f95a 	bl	800027c <__adddf3>
 800bfc8:	4604      	mov	r4, r0
 800bfca:	460d      	mov	r5, r1
 800bfcc:	ec45 4b10 	vmov	d0, r4, r5
 800bfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	ee10 0a10 	vmov	r0, s0
 800bfda:	4621      	mov	r1, r4
 800bfdc:	dc0f      	bgt.n	800bffe <__ieee754_sqrt+0x62>
 800bfde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bfe2:	4330      	orrs	r0, r6
 800bfe4:	d0f2      	beq.n	800bfcc <__ieee754_sqrt+0x30>
 800bfe6:	b155      	cbz	r5, 800bffe <__ieee754_sqrt+0x62>
 800bfe8:	ee10 2a10 	vmov	r2, s0
 800bfec:	4620      	mov	r0, r4
 800bfee:	4629      	mov	r1, r5
 800bff0:	f7f4 f942 	bl	8000278 <__aeabi_dsub>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	f7f4 fc20 	bl	800083c <__aeabi_ddiv>
 800bffc:	e7e4      	b.n	800bfc8 <__ieee754_sqrt+0x2c>
 800bffe:	151b      	asrs	r3, r3, #20
 800c000:	d073      	beq.n	800c0ea <__ieee754_sqrt+0x14e>
 800c002:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c006:	07dd      	lsls	r5, r3, #31
 800c008:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c00c:	bf48      	it	mi
 800c00e:	0fc8      	lsrmi	r0, r1, #31
 800c010:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c014:	bf44      	itt	mi
 800c016:	0049      	lslmi	r1, r1, #1
 800c018:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c01c:	2500      	movs	r5, #0
 800c01e:	1058      	asrs	r0, r3, #1
 800c020:	0fcb      	lsrs	r3, r1, #31
 800c022:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c026:	0049      	lsls	r1, r1, #1
 800c028:	2316      	movs	r3, #22
 800c02a:	462c      	mov	r4, r5
 800c02c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c030:	19a7      	adds	r7, r4, r6
 800c032:	4297      	cmp	r7, r2
 800c034:	bfde      	ittt	le
 800c036:	19bc      	addle	r4, r7, r6
 800c038:	1bd2      	suble	r2, r2, r7
 800c03a:	19ad      	addle	r5, r5, r6
 800c03c:	0fcf      	lsrs	r7, r1, #31
 800c03e:	3b01      	subs	r3, #1
 800c040:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c044:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c048:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c04c:	d1f0      	bne.n	800c030 <__ieee754_sqrt+0x94>
 800c04e:	f04f 0c20 	mov.w	ip, #32
 800c052:	469e      	mov	lr, r3
 800c054:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c058:	42a2      	cmp	r2, r4
 800c05a:	eb06 070e 	add.w	r7, r6, lr
 800c05e:	dc02      	bgt.n	800c066 <__ieee754_sqrt+0xca>
 800c060:	d112      	bne.n	800c088 <__ieee754_sqrt+0xec>
 800c062:	428f      	cmp	r7, r1
 800c064:	d810      	bhi.n	800c088 <__ieee754_sqrt+0xec>
 800c066:	2f00      	cmp	r7, #0
 800c068:	eb07 0e06 	add.w	lr, r7, r6
 800c06c:	da42      	bge.n	800c0f4 <__ieee754_sqrt+0x158>
 800c06e:	f1be 0f00 	cmp.w	lr, #0
 800c072:	db3f      	blt.n	800c0f4 <__ieee754_sqrt+0x158>
 800c074:	f104 0801 	add.w	r8, r4, #1
 800c078:	1b12      	subs	r2, r2, r4
 800c07a:	428f      	cmp	r7, r1
 800c07c:	bf88      	it	hi
 800c07e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c082:	1bc9      	subs	r1, r1, r7
 800c084:	4433      	add	r3, r6
 800c086:	4644      	mov	r4, r8
 800c088:	0052      	lsls	r2, r2, #1
 800c08a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c08e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c092:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c096:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c09a:	d1dd      	bne.n	800c058 <__ieee754_sqrt+0xbc>
 800c09c:	430a      	orrs	r2, r1
 800c09e:	d006      	beq.n	800c0ae <__ieee754_sqrt+0x112>
 800c0a0:	1c5c      	adds	r4, r3, #1
 800c0a2:	bf13      	iteet	ne
 800c0a4:	3301      	addne	r3, #1
 800c0a6:	3501      	addeq	r5, #1
 800c0a8:	4663      	moveq	r3, ip
 800c0aa:	f023 0301 	bicne.w	r3, r3, #1
 800c0ae:	106a      	asrs	r2, r5, #1
 800c0b0:	085b      	lsrs	r3, r3, #1
 800c0b2:	07e9      	lsls	r1, r5, #31
 800c0b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c0b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c0bc:	bf48      	it	mi
 800c0be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c0c2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c0c6:	461c      	mov	r4, r3
 800c0c8:	e780      	b.n	800bfcc <__ieee754_sqrt+0x30>
 800c0ca:	0aca      	lsrs	r2, r1, #11
 800c0cc:	3815      	subs	r0, #21
 800c0ce:	0549      	lsls	r1, r1, #21
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	d0fa      	beq.n	800c0ca <__ieee754_sqrt+0x12e>
 800c0d4:	02d6      	lsls	r6, r2, #11
 800c0d6:	d50a      	bpl.n	800c0ee <__ieee754_sqrt+0x152>
 800c0d8:	f1c3 0420 	rsb	r4, r3, #32
 800c0dc:	fa21 f404 	lsr.w	r4, r1, r4
 800c0e0:	1e5d      	subs	r5, r3, #1
 800c0e2:	4099      	lsls	r1, r3
 800c0e4:	4322      	orrs	r2, r4
 800c0e6:	1b43      	subs	r3, r0, r5
 800c0e8:	e78b      	b.n	800c002 <__ieee754_sqrt+0x66>
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	e7f0      	b.n	800c0d0 <__ieee754_sqrt+0x134>
 800c0ee:	0052      	lsls	r2, r2, #1
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	e7ef      	b.n	800c0d4 <__ieee754_sqrt+0x138>
 800c0f4:	46a0      	mov	r8, r4
 800c0f6:	e7bf      	b.n	800c078 <__ieee754_sqrt+0xdc>
 800c0f8:	7ff00000 	.word	0x7ff00000

0800c0fc <fabs>:
 800c0fc:	ec51 0b10 	vmov	r0, r1, d0
 800c100:	ee10 2a10 	vmov	r2, s0
 800c104:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c108:	ec43 2b10 	vmov	d0, r2, r3
 800c10c:	4770      	bx	lr

0800c10e <finite>:
 800c10e:	ee10 3a90 	vmov	r3, s1
 800c112:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c116:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c11a:	0fc0      	lsrs	r0, r0, #31
 800c11c:	4770      	bx	lr

0800c11e <matherr>:
 800c11e:	2000      	movs	r0, #0
 800c120:	4770      	bx	lr
 800c122:	0000      	movs	r0, r0
 800c124:	0000      	movs	r0, r0
	...

0800c128 <nan>:
 800c128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c130 <nan+0x8>
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	00000000 	.word	0x00000000
 800c134:	7ff80000 	.word	0x7ff80000

0800c138 <rint>:
 800c138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c13a:	ec51 0b10 	vmov	r0, r1, d0
 800c13e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c142:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c146:	2e13      	cmp	r6, #19
 800c148:	460b      	mov	r3, r1
 800c14a:	ee10 4a10 	vmov	r4, s0
 800c14e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c152:	dc56      	bgt.n	800c202 <rint+0xca>
 800c154:	2e00      	cmp	r6, #0
 800c156:	da2b      	bge.n	800c1b0 <rint+0x78>
 800c158:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c15c:	4302      	orrs	r2, r0
 800c15e:	d023      	beq.n	800c1a8 <rint+0x70>
 800c160:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c164:	4302      	orrs	r2, r0
 800c166:	4254      	negs	r4, r2
 800c168:	4314      	orrs	r4, r2
 800c16a:	0c4b      	lsrs	r3, r1, #17
 800c16c:	0b24      	lsrs	r4, r4, #12
 800c16e:	045b      	lsls	r3, r3, #17
 800c170:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c174:	ea44 0103 	orr.w	r1, r4, r3
 800c178:	460b      	mov	r3, r1
 800c17a:	492f      	ldr	r1, [pc, #188]	; (800c238 <rint+0x100>)
 800c17c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c180:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c184:	4602      	mov	r2, r0
 800c186:	4639      	mov	r1, r7
 800c188:	4630      	mov	r0, r6
 800c18a:	f7f4 f877 	bl	800027c <__adddf3>
 800c18e:	e9cd 0100 	strd	r0, r1, [sp]
 800c192:	463b      	mov	r3, r7
 800c194:	4632      	mov	r2, r6
 800c196:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c19a:	f7f4 f86d 	bl	8000278 <__aeabi_dsub>
 800c19e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	ec41 0b10 	vmov	d0, r0, r1
 800c1ac:	b003      	add	sp, #12
 800c1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b0:	4a22      	ldr	r2, [pc, #136]	; (800c23c <rint+0x104>)
 800c1b2:	4132      	asrs	r2, r6
 800c1b4:	ea01 0702 	and.w	r7, r1, r2
 800c1b8:	4307      	orrs	r7, r0
 800c1ba:	d0f5      	beq.n	800c1a8 <rint+0x70>
 800c1bc:	0852      	lsrs	r2, r2, #1
 800c1be:	4011      	ands	r1, r2
 800c1c0:	430c      	orrs	r4, r1
 800c1c2:	d00b      	beq.n	800c1dc <rint+0xa4>
 800c1c4:	ea23 0202 	bic.w	r2, r3, r2
 800c1c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c1cc:	2e13      	cmp	r6, #19
 800c1ce:	fa43 f306 	asr.w	r3, r3, r6
 800c1d2:	bf0c      	ite	eq
 800c1d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c1d8:	2400      	movne	r4, #0
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	4916      	ldr	r1, [pc, #88]	; (800c238 <rint+0x100>)
 800c1de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c1e2:	4622      	mov	r2, r4
 800c1e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	f7f4 f846 	bl	800027c <__adddf3>
 800c1f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	462b      	mov	r3, r5
 800c1f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1fc:	f7f4 f83c 	bl	8000278 <__aeabi_dsub>
 800c200:	e7d2      	b.n	800c1a8 <rint+0x70>
 800c202:	2e33      	cmp	r6, #51	; 0x33
 800c204:	dd07      	ble.n	800c216 <rint+0xde>
 800c206:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c20a:	d1cd      	bne.n	800c1a8 <rint+0x70>
 800c20c:	ee10 2a10 	vmov	r2, s0
 800c210:	f7f4 f834 	bl	800027c <__adddf3>
 800c214:	e7c8      	b.n	800c1a8 <rint+0x70>
 800c216:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c21a:	f04f 32ff 	mov.w	r2, #4294967295
 800c21e:	40f2      	lsrs	r2, r6
 800c220:	4210      	tst	r0, r2
 800c222:	d0c1      	beq.n	800c1a8 <rint+0x70>
 800c224:	0852      	lsrs	r2, r2, #1
 800c226:	4210      	tst	r0, r2
 800c228:	bf1f      	itttt	ne
 800c22a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c22e:	ea20 0202 	bicne.w	r2, r0, r2
 800c232:	4134      	asrne	r4, r6
 800c234:	4314      	orrne	r4, r2
 800c236:	e7d1      	b.n	800c1dc <rint+0xa4>
 800c238:	0800c660 	.word	0x0800c660
 800c23c:	000fffff 	.word	0x000fffff

0800c240 <scalbn>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	ec55 4b10 	vmov	r4, r5, d0
 800c246:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c24a:	4606      	mov	r6, r0
 800c24c:	462b      	mov	r3, r5
 800c24e:	b9aa      	cbnz	r2, 800c27c <scalbn+0x3c>
 800c250:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c254:	4323      	orrs	r3, r4
 800c256:	d03b      	beq.n	800c2d0 <scalbn+0x90>
 800c258:	4b31      	ldr	r3, [pc, #196]	; (800c320 <scalbn+0xe0>)
 800c25a:	4629      	mov	r1, r5
 800c25c:	2200      	movs	r2, #0
 800c25e:	ee10 0a10 	vmov	r0, s0
 800c262:	f7f4 f9c1 	bl	80005e8 <__aeabi_dmul>
 800c266:	4b2f      	ldr	r3, [pc, #188]	; (800c324 <scalbn+0xe4>)
 800c268:	429e      	cmp	r6, r3
 800c26a:	4604      	mov	r4, r0
 800c26c:	460d      	mov	r5, r1
 800c26e:	da12      	bge.n	800c296 <scalbn+0x56>
 800c270:	a327      	add	r3, pc, #156	; (adr r3, 800c310 <scalbn+0xd0>)
 800c272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c276:	f7f4 f9b7 	bl	80005e8 <__aeabi_dmul>
 800c27a:	e009      	b.n	800c290 <scalbn+0x50>
 800c27c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c280:	428a      	cmp	r2, r1
 800c282:	d10c      	bne.n	800c29e <scalbn+0x5e>
 800c284:	ee10 2a10 	vmov	r2, s0
 800c288:	4620      	mov	r0, r4
 800c28a:	4629      	mov	r1, r5
 800c28c:	f7f3 fff6 	bl	800027c <__adddf3>
 800c290:	4604      	mov	r4, r0
 800c292:	460d      	mov	r5, r1
 800c294:	e01c      	b.n	800c2d0 <scalbn+0x90>
 800c296:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c29a:	460b      	mov	r3, r1
 800c29c:	3a36      	subs	r2, #54	; 0x36
 800c29e:	4432      	add	r2, r6
 800c2a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c2a4:	428a      	cmp	r2, r1
 800c2a6:	dd0b      	ble.n	800c2c0 <scalbn+0x80>
 800c2a8:	ec45 4b11 	vmov	d1, r4, r5
 800c2ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c318 <scalbn+0xd8>
 800c2b0:	f000 f83c 	bl	800c32c <copysign>
 800c2b4:	a318      	add	r3, pc, #96	; (adr r3, 800c318 <scalbn+0xd8>)
 800c2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ba:	ec51 0b10 	vmov	r0, r1, d0
 800c2be:	e7da      	b.n	800c276 <scalbn+0x36>
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	dd08      	ble.n	800c2d6 <scalbn+0x96>
 800c2c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c2cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c2d0:	ec45 4b10 	vmov	d0, r4, r5
 800c2d4:	bd70      	pop	{r4, r5, r6, pc}
 800c2d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c2da:	da0d      	bge.n	800c2f8 <scalbn+0xb8>
 800c2dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c2e0:	429e      	cmp	r6, r3
 800c2e2:	ec45 4b11 	vmov	d1, r4, r5
 800c2e6:	dce1      	bgt.n	800c2ac <scalbn+0x6c>
 800c2e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c310 <scalbn+0xd0>
 800c2ec:	f000 f81e 	bl	800c32c <copysign>
 800c2f0:	a307      	add	r3, pc, #28	; (adr r3, 800c310 <scalbn+0xd0>)
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	e7e0      	b.n	800c2ba <scalbn+0x7a>
 800c2f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2fc:	3236      	adds	r2, #54	; 0x36
 800c2fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c302:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c306:	4620      	mov	r0, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	2200      	movs	r2, #0
 800c30c:	4b06      	ldr	r3, [pc, #24]	; (800c328 <scalbn+0xe8>)
 800c30e:	e7b2      	b.n	800c276 <scalbn+0x36>
 800c310:	c2f8f359 	.word	0xc2f8f359
 800c314:	01a56e1f 	.word	0x01a56e1f
 800c318:	8800759c 	.word	0x8800759c
 800c31c:	7e37e43c 	.word	0x7e37e43c
 800c320:	43500000 	.word	0x43500000
 800c324:	ffff3cb0 	.word	0xffff3cb0
 800c328:	3c900000 	.word	0x3c900000

0800c32c <copysign>:
 800c32c:	ec51 0b10 	vmov	r0, r1, d0
 800c330:	ee11 0a90 	vmov	r0, s3
 800c334:	ee10 2a10 	vmov	r2, s0
 800c338:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c33c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c340:	ea41 0300 	orr.w	r3, r1, r0
 800c344:	ec43 2b10 	vmov	d0, r2, r3
 800c348:	4770      	bx	lr
	...

0800c34c <_init>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr

0800c358 <_fini>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	bf00      	nop
 800c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35e:	bc08      	pop	{r3}
 800c360:	469e      	mov	lr, r3
 800c362:	4770      	bx	lr
