
Progetto real time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800c178  0800c178  0001c178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c400  0800c400  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800c400  0800c400  0001c400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c408  0800c408  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c408  0800c408  0001c408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c40c  0800c40c  0001c40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800c410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20000150  0800c560  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002610  0800c560  00022610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af5d  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004abf  00000000  00000000  0004b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023b8  00000000  00000000  0004fba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002180  00000000  00000000  00051f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000067e4  00000000  00000000  000540d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bd6b  00000000  00000000  0005a8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001081ee  00000000  00000000  00076627  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fc8  00000000  00000000  0017e890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c15c 	.word	0x0800c15c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800c15c 	.word	0x0800c15c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f001 fe0a 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f8aa 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 fab6 	bl	80014b4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f48:	f000 f94a 	bl	80011e0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f4c:	f000 f980 	bl	8001250 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f50:	f000 f9be 	bl	80012d0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f54:	f000 f9e2 	bl	800131c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f58:	f000 fa1e 	bl	8001398 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f5c:	f000 fa4c 	bl	80013f8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f60:	f000 fa7a 	bl	8001458 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN 2 */
  /*Transmit the initialization messages and initialize the temperature sensor*/
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	222f      	movs	r2, #47	; 0x2f
 8000f6a:	4935      	ldr	r1, [pc, #212]	; (8001040 <main+0x108>)
 8000f6c:	4835      	ldr	r0, [pc, #212]	; (8001044 <main+0x10c>)
 8000f6e:	f005 f92b 	bl	80061c8 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 8000f72:	f001 fc33 	bl	80027dc <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	2230      	movs	r2, #48	; 0x30
 8000f7c:	4932      	ldr	r1, [pc, #200]	; (8001048 <main+0x110>)
 8000f7e:	4831      	ldr	r0, [pc, #196]	; (8001044 <main+0x10c>)
 8000f80:	f005 f922 	bl	80061c8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	222c      	movs	r2, #44	; 0x2c
 8000f8a:	4930      	ldr	r1, [pc, #192]	; (800104c <main+0x114>)
 8000f8c:	482d      	ldr	r0, [pc, #180]	; (8001044 <main+0x10c>)
 8000f8e:	f005 f91b 	bl	80061c8 <HAL_UART_Transmit>
  BSP_HSENSOR_Init();
 8000f92:	f001 fbf5 	bl	8002780 <BSP_HSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg4,sizeof(msg4),1000);
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	222d      	movs	r2, #45	; 0x2d
 8000f9c:	492c      	ldr	r1, [pc, #176]	; (8001050 <main+0x118>)
 8000f9e:	4829      	ldr	r0, [pc, #164]	; (8001044 <main+0x10c>)
 8000fa0:	f005 f912 	bl	80061c8 <HAL_UART_Transmit>

  /*Initialize the data structure*/
  struct_init(&ambient_conditions);
 8000fa4:	482b      	ldr	r0, [pc, #172]	; (8001054 <main+0x11c>)
 8000fa6:	f000 fc35 	bl	8001814 <struct_init>
  /* USER CODE END 2 */

  osKernelInitialize();
 8000faa:	f006 f895 	bl	80070d8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  mutex= osMutexNew(NULL);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f006 f9d2 	bl	8007358 <osMutexNew>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <main+0x120>)
 8000fb8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  temp_sem=osSemaphoreNew(1,1,NULL);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f006 fa64 	bl	800748c <osSemaphoreNew>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <main+0x124>)
 8000fc8:	601a      	str	r2, [r3, #0]
  humid_sem=osSemaphoreNew(1,0,NULL);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f006 fa5c 	bl	800748c <osSemaphoreNew>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <main+0x128>)
 8000fd8:	601a      	str	r2, [r3, #0]
  apparent_temp_sem=osSemaphoreNew(1,0,NULL);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f006 fa54 	bl	800748c <osSemaphoreNew>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <main+0x12c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  safety_sem=osSemaphoreNew(1,0,NULL);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f006 fa4c 	bl	800748c <osSemaphoreNew>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <main+0x130>)
 8000ff8:	601a      	str	r2, [r3, #0]

 /* defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes); */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  apparent_temp_task_handle=osThreadNew(apparent_temp_task,&ambient_conditions, &apparent_temp_task_attributes);
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <main+0x134>)
 8000ffc:	4915      	ldr	r1, [pc, #84]	; (8001054 <main+0x11c>)
 8000ffe:	481c      	ldr	r0, [pc, #112]	; (8001070 <main+0x138>)
 8001000:	f006 f8d2 	bl	80071a8 <osThreadNew>
 8001004:	4602      	mov	r2, r0
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <main+0x13c>)
 8001008:	601a      	str	r2, [r3, #0]
  temp_task_handle=osThreadNew(temp_task,&ambient_conditions, &sensors_tasks_attributes);
 800100a:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <main+0x140>)
 800100c:	4911      	ldr	r1, [pc, #68]	; (8001054 <main+0x11c>)
 800100e:	481b      	ldr	r0, [pc, #108]	; (800107c <main+0x144>)
 8001010:	f006 f8ca 	bl	80071a8 <osThreadNew>
 8001014:	4602      	mov	r2, r0
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <main+0x148>)
 8001018:	601a      	str	r2, [r3, #0]
  humid_task_handle=osThreadNew(humid_task,&ambient_conditions, &sensors_tasks_attributes);
 800101a:	4a17      	ldr	r2, [pc, #92]	; (8001078 <main+0x140>)
 800101c:	490d      	ldr	r1, [pc, #52]	; (8001054 <main+0x11c>)
 800101e:	4819      	ldr	r0, [pc, #100]	; (8001084 <main+0x14c>)
 8001020:	f006 f8c2 	bl	80071a8 <osThreadNew>
 8001024:	4602      	mov	r2, r0
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <main+0x150>)
 8001028:	601a      	str	r2, [r3, #0]
  safety_task_handle=osThreadNew(safety_task,&ambient_conditions,&safety_task_attributes);
 800102a:	4a18      	ldr	r2, [pc, #96]	; (800108c <main+0x154>)
 800102c:	4909      	ldr	r1, [pc, #36]	; (8001054 <main+0x11c>)
 800102e:	4818      	ldr	r0, [pc, #96]	; (8001090 <main+0x158>)
 8001030:	f006 f8ba 	bl	80071a8 <osThreadNew>
 8001034:	4602      	mov	r2, r0
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <main+0x15c>)
 8001038:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800103a:	f006 f881 	bl	8007140 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800103e:	e7fe      	b.n	800103e <main+0x106>
 8001040:	20000000 	.word	0x20000000
 8001044:	200023e4 	.word	0x200023e4
 8001048:	20000030 	.word	0x20000030
 800104c:	20000060 	.word	0x20000060
 8001050:	2000008c 	.word	0x2000008c
 8001054:	20001e8c 	.word	0x20001e8c
 8001058:	200023e0 	.word	0x200023e0
 800105c:	20002378 	.word	0x20002378
 8001060:	20002324 	.word	0x20002324
 8001064:	20002468 	.word	0x20002468
 8001068:	2000246c 	.word	0x2000246c
 800106c:	0800c2f4 	.word	0x0800c2f4
 8001070:	08001b45 	.word	0x08001b45
 8001074:	20002374 	.word	0x20002374
 8001078:	0800c2d0 	.word	0x0800c2d0
 800107c:	08001939 	.word	0x08001939
 8001080:	20002474 	.word	0x20002474
 8001084:	08001a45 	.word	0x08001a45
 8001088:	20002470 	.word	0x20002470
 800108c:	0800c318 	.word	0x0800c318
 8001090:	08001d15 	.word	0x08001d15
 8001094:	20002464 	.word	0x20002464

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0b8      	sub	sp, #224	; 0xe0
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a2:	2244      	movs	r2, #68	; 0x44
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f009 fbad 	bl	800a806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2288      	movs	r2, #136	; 0x88
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f009 fb9f 	bl	800a806 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80010c8:	f003 f954 	bl	8004374 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010cc:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <SystemClock_Config+0x140>)
 80010ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d2:	4a41      	ldr	r2, [pc, #260]	; (80011d8 <SystemClock_Config+0x140>)
 80010d4:	f023 0318 	bic.w	r3, r3, #24
 80010d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010dc:	2314      	movs	r3, #20
 80010de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010f4:	2360      	movs	r3, #96	; 0x60
 80010f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001100:	2301      	movs	r3, #1
 8001102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800110c:	2328      	movs	r3, #40	; 0x28
 800110e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001112:	2307      	movs	r3, #7
 8001114:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fa6f 	bl	800460c <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001134:	f000 fe64 	bl	8001e00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	230f      	movs	r3, #15
 800113a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113e:	2303      	movs	r3, #3
 8001140:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001156:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800115a:	2104      	movs	r1, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fe05 	bl	8004d6c <HAL_RCC_ClockConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001168:	f000 fe4a 	bl	8001e00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <SystemClock_Config+0x144>)
 800116e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001174:	2300      	movs	r3, #0
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001178:	2300      	movs	r3, #0
 800117a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001182:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001186:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800118c:	2301      	movs	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001190:	2318      	movs	r3, #24
 8001192:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001194:	2307      	movs	r3, #7
 8001196:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80011a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011a4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 f815 	bl	80051d8 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80011b4:	f000 fe24 	bl	8001e00 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011bc:	f003 f8f8 	bl	80043b0 <HAL_PWREx_ControlVoltageScaling>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x132>
  {
    Error_Handler();
 80011c6:	f000 fe1b 	bl	8001e00 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011ca:	f004 faeb 	bl	80057a4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011ce:	bf00      	nop
 80011d0:	37e0      	adds	r7, #224	; 0xe0
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	00012085 	.word	0x00012085

080011e0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_DFSDM1_Init+0x68>)
 80011e6:	4a19      	ldr	r2, [pc, #100]	; (800124c <MX_DFSDM1_Init+0x6c>)
 80011e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_DFSDM1_Init+0x68>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_DFSDM1_Init+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_DFSDM1_Init+0x68>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_DFSDM1_Init+0x68>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_DFSDM1_Init+0x68>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_DFSDM1_Init+0x68>)
 800120a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <MX_DFSDM1_Init+0x68>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_DFSDM1_Init+0x68>)
 8001218:	2204      	movs	r2, #4
 800121a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_DFSDM1_Init+0x68>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_DFSDM1_Init+0x68>)
 8001224:	2201      	movs	r2, #1
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_DFSDM1_Init+0x68>)
 800122a:	2200      	movs	r2, #0
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_DFSDM1_Init+0x68>)
 8001230:	2200      	movs	r2, #0
 8001232:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_DFSDM1_Init+0x68>)
 8001236:	f001 fdc7 	bl	8002dc8 <HAL_DFSDM_ChannelInit>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001240:	f000 fdde 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20001e50 	.word	0x20001e50
 800124c:	40016020 	.word	0x40016020

08001250 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <MX_I2C2_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_I2C2_Init+0x74>)
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <MX_I2C2_Init+0x7c>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001268:	2201      	movs	r2, #1
 800126a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_I2C2_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C2_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_I2C2_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <MX_I2C2_Init+0x74>)
 800128c:	f002 f989 	bl	80035a2 <HAL_I2C_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001296:	f000 fdb3 	bl	8001e00 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129a:	2100      	movs	r1, #0
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <MX_I2C2_Init+0x74>)
 800129e:	f002 fe89 	bl	8003fb4 <HAL_I2CEx_ConfigAnalogFilter>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012a8:	f000 fdaa 	bl	8001e00 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_I2C2_Init+0x74>)
 80012b0:	f002 fecb 	bl	800404a <HAL_I2CEx_ConfigDigitalFilter>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012ba:	f000 fda1 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20002328 	.word	0x20002328
 80012c8:	40005800 	.word	0x40005800
 80012cc:	10909cec 	.word	0x10909cec

080012d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_QUADSPI_Init+0x44>)
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <MX_QUADSPI_Init+0x48>)
 80012d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_QUADSPI_Init+0x44>)
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_QUADSPI_Init+0x44>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_QUADSPI_Init+0x44>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_QUADSPI_Init+0x44>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_QUADSPI_Init+0x44>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_QUADSPI_Init+0x44>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_QUADSPI_Init+0x44>)
 8001300:	f003 f8bc 	bl	800447c <HAL_QSPI_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800130a:	f000 fd79 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20002478 	.word	0x20002478
 8001318:	a0001000 	.word	0xa0001000

0800131c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_SPI3_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_SPI3_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_SPI3_Init+0x74>)
 8001328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800132c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_SPI3_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SPI3_Init+0x74>)
 8001336:	f44f 7240 	mov.w	r2, #768	; 0x300
 800133a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_SPI3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_SPI3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI3_Init+0x74>)
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_SPI3_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI3_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_SPI3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI3_Init+0x74>)
 800136a:	2207      	movs	r2, #7
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_SPI3_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI3_Init+0x74>)
 8001376:	2208      	movs	r2, #8
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_SPI3_Init+0x74>)
 800137c:	f004 fbec 	bl	8005b58 <HAL_SPI_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001386:	f000 fd3b 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000237c 	.word	0x2000237c
 8001394:	40003c00 	.word	0x40003c00

08001398 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <MX_USART1_UART_Init+0x5c>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USART1_UART_Init+0x58>)
 80013dc:	f004 fea6 	bl	800612c <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013e6:	f000 fd0b 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200023e4 	.word	0x200023e4
 80013f4:	40013800 	.word	0x40013800

080013f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_USART3_UART_Init+0x58>)
 80013fe:	4a15      	ldr	r2, [pc, #84]	; (8001454 <MX_USART3_UART_Init+0x5c>)
 8001400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_USART3_UART_Init+0x58>)
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <MX_USART3_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_USART3_UART_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <MX_USART3_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_USART3_UART_Init+0x58>)
 800141e:	220c      	movs	r2, #12
 8001420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_USART3_UART_Init+0x58>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_USART3_UART_Init+0x58>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_USART3_UART_Init+0x58>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_USART3_UART_Init+0x58>)
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_USART3_UART_Init+0x58>)
 800143c:	f004 fe76 	bl	800612c <HAL_UART_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001446:	f000 fcdb 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20001e9c 	.word	0x20001e9c
 8001454:	40004800 	.word	0x40004800

08001458 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001462:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001466:	2206      	movs	r2, #6
 8001468:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146c:	2202      	movs	r2, #2
 800146e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001472:	2202      	movs	r2, #2
 8001474:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149c:	f002 fe21 	bl	80040e2 <HAL_PCD_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014a6:	f000 fcab 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20001f1c 	.word	0x20001f1c

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ca:	4bba      	ldr	r3, [pc, #744]	; (80017b4 <MX_GPIO_Init+0x300>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4ab9      	ldr	r2, [pc, #740]	; (80017b4 <MX_GPIO_Init+0x300>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4bb7      	ldr	r3, [pc, #732]	; (80017b4 <MX_GPIO_Init+0x300>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4bb4      	ldr	r3, [pc, #720]	; (80017b4 <MX_GPIO_Init+0x300>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4ab3      	ldr	r2, [pc, #716]	; (80017b4 <MX_GPIO_Init+0x300>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4bb1      	ldr	r3, [pc, #708]	; (80017b4 <MX_GPIO_Init+0x300>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4bae      	ldr	r3, [pc, #696]	; (80017b4 <MX_GPIO_Init+0x300>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4aad      	ldr	r2, [pc, #692]	; (80017b4 <MX_GPIO_Init+0x300>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4bab      	ldr	r3, [pc, #684]	; (80017b4 <MX_GPIO_Init+0x300>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4ba8      	ldr	r3, [pc, #672]	; (80017b4 <MX_GPIO_Init+0x300>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4aa7      	ldr	r2, [pc, #668]	; (80017b4 <MX_GPIO_Init+0x300>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4ba5      	ldr	r3, [pc, #660]	; (80017b4 <MX_GPIO_Init+0x300>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152a:	4ba2      	ldr	r3, [pc, #648]	; (80017b4 <MX_GPIO_Init+0x300>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4aa1      	ldr	r2, [pc, #644]	; (80017b4 <MX_GPIO_Init+0x300>)
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b9f      	ldr	r3, [pc, #636]	; (80017b4 <MX_GPIO_Init+0x300>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001548:	489b      	ldr	r0, [pc, #620]	; (80017b8 <MX_GPIO_Init+0x304>)
 800154a:	f001 ffef 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f248 1104 	movw	r1, #33028	; 0x8104
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f001 ffe8 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800155c:	2200      	movs	r2, #0
 800155e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001562:	4896      	ldr	r0, [pc, #600]	; (80017bc <MX_GPIO_Init+0x308>)
 8001564:	f001 ffe2 	bl	800352c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f241 0181 	movw	r1, #4225	; 0x1081
 800156e:	4894      	ldr	r0, [pc, #592]	; (80017c0 <MX_GPIO_Init+0x30c>)
 8001570:	f001 ffdc 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157a:	4891      	ldr	r0, [pc, #580]	; (80017c0 <MX_GPIO_Init+0x30c>)
 800157c:	f001 ffd6 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001586:	488f      	ldr	r0, [pc, #572]	; (80017c4 <MX_GPIO_Init+0x310>)
 8001588:	f001 ffd0 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2120      	movs	r1, #32
 8001590:	488a      	ldr	r0, [pc, #552]	; (80017bc <MX_GPIO_Init+0x308>)
 8001592:	f001 ffcb 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2101      	movs	r1, #1
 800159a:	4887      	ldr	r0, [pc, #540]	; (80017b8 <MX_GPIO_Init+0x304>)
 800159c:	f001 ffc6 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80015a0:	f240 1315 	movw	r3, #277	; 0x115
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	487f      	ldr	r0, [pc, #508]	; (80017b8 <MX_GPIO_Init+0x304>)
 80015ba:	f001 fd1b 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015be:	236a      	movs	r3, #106	; 0x6a
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <MX_GPIO_Init+0x314>)
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4879      	ldr	r0, [pc, #484]	; (80017b8 <MX_GPIO_Init+0x304>)
 80015d2:	f001 fd0f 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015dc:	4b7b      	ldr	r3, [pc, #492]	; (80017cc <MX_GPIO_Init+0x318>)
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4876      	ldr	r0, [pc, #472]	; (80017c4 <MX_GPIO_Init+0x310>)
 80015ec:	f001 fd02 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 80015f0:	233f      	movs	r3, #63	; 0x3f
 80015f2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015f4:	230b      	movs	r3, #11
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4870      	ldr	r0, [pc, #448]	; (80017c4 <MX_GPIO_Init+0x310>)
 8001604:	f001 fcf6 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001608:	2303      	movs	r3, #3
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001618:	2308      	movs	r3, #8
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001626:	f001 fce5 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800162a:	f248 1304 	movw	r3, #33028	; 0x8104
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f001 fcd5 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800164a:	2308      	movs	r3, #8
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165a:	2301      	movs	r3, #1
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f001 fcc4 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800166c:	2310      	movs	r3, #16
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001670:	230b      	movs	r3, #11
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f001 fcb7 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001686:	23e0      	movs	r3, #224	; 0xe0
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001696:	2305      	movs	r3, #5
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f001 fca6 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80016a8:	2301      	movs	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <MX_GPIO_Init+0x314>)
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4840      	ldr	r0, [pc, #256]	; (80017bc <MX_GPIO_Init+0x308>)
 80016bc:	f001 fc9a 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016c0:	2302      	movs	r3, #2
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016c4:	230b      	movs	r3, #11
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	483a      	ldr	r0, [pc, #232]	; (80017bc <MX_GPIO_Init+0x308>)
 80016d4:	f001 fc8e 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80016d8:	f24f 0334 	movw	r3, #61492	; 0xf034
 80016dc:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4832      	ldr	r0, [pc, #200]	; (80017bc <MX_GPIO_Init+0x308>)
 80016f2:	f001 fc7f 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80016f6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80016fa:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <MX_GPIO_Init+0x314>)
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	482d      	ldr	r0, [pc, #180]	; (80017c0 <MX_GPIO_Init+0x30c>)
 800170c:	f001 fc72 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001710:	f243 0381 	movw	r3, #12417	; 0x3081
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4825      	ldr	r0, [pc, #148]	; (80017c0 <MX_GPIO_Init+0x30c>)
 800172a:	f001 fc63 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800172e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	481f      	ldr	r0, [pc, #124]	; (80017c4 <MX_GPIO_Init+0x310>)
 8001748:	f001 fc54 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800174c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_GPIO_Init+0x314>)
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4818      	ldr	r0, [pc, #96]	; (80017c4 <MX_GPIO_Init+0x310>)
 8001762:	f001 fc47 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001766:	2302      	movs	r3, #2
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001776:	2305      	movs	r3, #5
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	480f      	ldr	r0, [pc, #60]	; (80017c0 <MX_GPIO_Init+0x30c>)
 8001782:	f001 fc37 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001786:	2378      	movs	r3, #120	; 0x78
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001796:	2307      	movs	r3, #7
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	4807      	ldr	r0, [pc, #28]	; (80017c0 <MX_GPIO_Init+0x30c>)
 80017a2:	f001 fc27 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80017a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ac:	2312      	movs	r3, #18
 80017ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e00d      	b.n	80017d0 <MX_GPIO_Init+0x31c>
 80017b4:	40021000 	.word	0x40021000
 80017b8:	48001000 	.word	0x48001000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	48000800 	.word	0x48000800
 80017c8:	10110000 	.word	0x10110000
 80017cc:	10210000 	.word	0x10210000
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d6:	2304      	movs	r3, #4
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	480b      	ldr	r0, [pc, #44]	; (8001810 <MX_GPIO_Init+0x35c>)
 80017e2:	f001 fc07 	bl	8002ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2105      	movs	r1, #5
 80017ea:	2017      	movs	r0, #23
 80017ec:	f001 fac2 	bl	8002d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017f0:	2017      	movs	r0, #23
 80017f2:	f001 fadb 	bl	8002dac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2105      	movs	r1, #5
 80017fa:	2028      	movs	r0, #40	; 0x28
 80017fc:	f001 faba 	bl	8002d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001800:	2028      	movs	r0, #40	; 0x28
 8001802:	f001 fad3 	bl	8002dac <HAL_NVIC_EnableIRQ>

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	; 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	48000400 	.word	0x48000400

08001814 <struct_init>:

/* USER CODE BEGIN 4 */
/*Initialize the data structure*/
void struct_init(struct ambient_conditions* ac){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	ac->humid_value=0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
	ac->temp_value=0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	ac->humidex=0;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
	ac->set_temperature=25;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2219      	movs	r2, #25
 8001838:	60da      	str	r2, [r3, #12]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <calculate_h>:

/*Calculate humidex based on temperature and humidity*/
float calculate_h(struct ambient_conditions*ac){
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	float h=0;
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
	float e=0;
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]

	e=0.06*ac->humid_value*(pow(10,0.03*ac->temp_value));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe69 	bl	8000538 <__aeabi_f2d>
 8001866:	a32e      	add	r3, pc, #184	; (adr r3, 8001920 <calculate_h+0xd8>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe febc 	bl	80005e8 <__aeabi_dmul>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4625      	mov	r5, r4
 8001876:	461c      	mov	r4, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe5b 	bl	8000538 <__aeabi_f2d>
 8001882:	a329      	add	r3, pc, #164	; (adr r3, 8001928 <calculate_h+0xe0>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe feae 	bl	80005e8 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	ec43 2b17 	vmov	d7, r2, r3
 8001894:	eeb0 1a47 	vmov.f32	s2, s14
 8001898:	eef0 1a67 	vmov.f32	s3, s15
 800189c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8001918 <calculate_h+0xd0>
 80018a0:	f009 fc04 	bl	800b0ac <pow>
 80018a4:	ec53 2b10 	vmov	r2, r3, d0
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fe9c 	bl	80005e8 <__aeabi_dmul>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	4618      	mov	r0, r3
 80018b6:	4621      	mov	r1, r4
 80018b8:	f7ff f96e 	bl	8000b98 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60bb      	str	r3, [r7, #8]
	h=ac->temp_value+(0.55555*(e-10));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe37 	bl	8000538 <__aeabi_f2d>
 80018ca:	4604      	mov	r4, r0
 80018cc:	460d      	mov	r5, r1
 80018ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018da:	ee17 0a90 	vmov	r0, s15
 80018de:	f7fe fe2b 	bl	8000538 <__aeabi_f2d>
 80018e2:	a313      	add	r3, pc, #76	; (adr r3, 8001930 <calculate_h+0xe8>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe fe7e 	bl	80005e8 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7fe fcc2 	bl	800027c <__adddf3>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	4618      	mov	r0, r3
 80018fe:	4621      	mov	r1, r4
 8001900:	f7ff f94a 	bl	8000b98 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]

	return h;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	ee07 3a90 	vmov	s15, r3
}
 800190e:	eeb0 0a67 	vmov.f32	s0, s15
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bdb0      	pop	{r4, r5, r7, pc}
 8001918:	00000000 	.word	0x00000000
 800191c:	40240000 	.word	0x40240000
 8001920:	eb851eb8 	.word	0xeb851eb8
 8001924:	3faeb851 	.word	0x3faeb851
 8001928:	eb851eb8 	.word	0xeb851eb8
 800192c:	3f9eb851 	.word	0x3f9eb851
 8001930:	cb295e9e 	.word	0xcb295e9e
 8001934:	3fe1c710 	.word	0x3fe1c710

08001938 <temp_task>:

/*Read the temperature value from the sensor and split it in 2 integer (1 for integer part and 1 for fractional part).
Then the message is prepared and printed on serial. Float are not supported, so 2 integer are required*/
void temp_task(struct ambient_conditions*ac){
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b091      	sub	sp, #68	; 0x44
 800193c:	af02      	add	r7, sp, #8
 800193e:	6078      	str	r0, [r7, #4]
	int int1=0;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
	float frac=0;
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
	int int2=0;
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
	char msg[30] = "";
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	831a      	strh	r2, [r3, #24]
	uint32_t size=0;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28

  for(;;)
  {
	 osSemaphoreAcquire(temp_sem,portMAX_DELAY);
 800196a:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <temp_task+0xf4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f04f 31ff 	mov.w	r1, #4294967295
 8001972:	4618      	mov	r0, r3
 8001974:	f005 fe28 	bl	80075c8 <osSemaphoreAcquire>
	 osSemaphoreAcquire(mutex, portMAX_DELAY);
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <temp_task+0xf8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	4618      	mov	r0, r3
 8001982:	f005 fe21 	bl	80075c8 <osSemaphoreAcquire>
	 ac->temp_value = BSP_TSENSOR_ReadTemp();
 8001986:	f000 ff45 	bl	8002814 <BSP_TSENSOR_ReadTemp>
 800198a:	eef0 7a40 	vmov.f32	s15, s0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	edc3 7a00 	vstr	s15, [r3]
	 osSemaphoreRelease(mutex);
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <temp_task+0xf8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f005 fe7b 	bl	8007694 <osSemaphoreRelease>

	 int1 = ac->temp_value;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a8:	ee17 3a90 	vmov	r3, s15
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
	 frac = ac->temp_value - int1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	 int2 = trunc(frac * 100);
 80019c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80019ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001a34 <temp_task+0xfc>
 80019ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d2:	ee17 0a90 	vmov	r0, s15
 80019d6:	f7fe fdaf 	bl	8000538 <__aeabi_f2d>
 80019da:	4603      	mov	r3, r0
 80019dc:	460c      	mov	r4, r1
 80019de:	ec44 3b10 	vmov	d0, r3, r4
 80019e2:	f009 fb29 	bl	800b038 <trunc>
 80019e6:	ec54 3b10 	vmov	r3, r4, d0
 80019ea:	4618      	mov	r0, r3
 80019ec:	4621      	mov	r1, r4
 80019ee:	f7ff f8ab 	bl	8000b48 <__aeabi_d2iz>
 80019f2:	4603      	mov	r3, r0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	 snprintf(msg,30,"TEMPERATURE = %d.%02d %cC\r\n", int1,int2,'°');
 80019f6:	f107 0008 	add.w	r0, r7, #8
 80019fa:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a06:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <temp_task+0x100>)
 8001a08:	211e      	movs	r1, #30
 8001a0a:	f008 ff05 	bl	800a818 <sniprintf>
	 HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001a0e:	f107 0108 	add.w	r1, r7, #8
 8001a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a16:	221e      	movs	r2, #30
 8001a18:	4808      	ldr	r0, [pc, #32]	; (8001a3c <temp_task+0x104>)
 8001a1a:	f004 fbd5 	bl	80061c8 <HAL_UART_Transmit>
	 osSemaphoreRelease(humid_sem);
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <temp_task+0x108>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f005 fe36 	bl	8007694 <osSemaphoreRelease>
	 osSemaphoreAcquire(temp_sem,portMAX_DELAY);
 8001a28:	e79f      	b.n	800196a <temp_task+0x32>
 8001a2a:	bf00      	nop
 8001a2c:	20002378 	.word	0x20002378
 8001a30:	200023e0 	.word	0x200023e0
 8001a34:	42c80000 	.word	0x42c80000
 8001a38:	0800c1a4 	.word	0x0800c1a4
 8001a3c:	200023e4 	.word	0x200023e4
 8001a40:	20002324 	.word	0x20002324

08001a44 <humid_task>:
  }
}

/*Read the humidity value from the sensor and split it in 2 integer (1 for integer part and 1 for fractional part).
 *Then the message is prepared and printed on serial. Float are not supported, so 2 integer are required*/
void humid_task(struct ambient_conditions* ac){
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b091      	sub	sp, #68	; 0x44
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	6078      	str	r0, [r7, #4]
	int int1=0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
	float frac=0;
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
	int int2=0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
	char msg[30] = "";
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	f107 0310 	add.w	r3, r7, #16
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]
 8001a6e:	615a      	str	r2, [r3, #20]
 8001a70:	831a      	strh	r2, [r3, #24]

  for(;;)
  {
	 osSemaphoreAcquire(humid_sem, portMAX_DELAY);
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <humid_task+0xe8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fda4 	bl	80075c8 <osSemaphoreAcquire>
	 osSemaphoreAcquire(mutex, portMAX_DELAY);
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <humid_task+0xec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f005 fd9d 	bl	80075c8 <osSemaphoreAcquire>
	 ac->humid_value = BSP_HSENSOR_ReadHumidity();
 8001a8e:	f000 fe97 	bl	80027c0 <BSP_HSENSOR_ReadHumidity>
 8001a92:	eef0 7a40 	vmov.f32	s15, s0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	edc3 7a01 	vstr	s15, [r3, #4]
	 osSemaphoreRelease(mutex);
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <humid_task+0xec>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f005 fdf7 	bl	8007694 <osSemaphoreRelease>

	 int1 = ac->humid_value;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab0:	ee17 3a90 	vmov	r3, s15
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
	 frac = ac->humid_value - int1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	 int2 = trunc(frac * 100);
 8001ace:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ad2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001b34 <humid_task+0xf0>
 8001ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd2b 	bl	8000538 <__aeabi_f2d>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	ec44 3b10 	vmov	d0, r3, r4
 8001aea:	f009 faa5 	bl	800b038 <trunc>
 8001aee:	ec54 3b10 	vmov	r3, r4, d0
 8001af2:	4618      	mov	r0, r3
 8001af4:	4621      	mov	r1, r4
 8001af6:	f7ff f827 	bl	8000b48 <__aeabi_d2iz>
 8001afa:	4603      	mov	r3, r0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	 snprintf(msg,30,"HUMIDITY = %d.%02d %%\r\n", int1, int2);
 8001afe:	f107 000c 	add.w	r0, r7, #12
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <humid_task+0xf4>)
 8001b0a:	211e      	movs	r1, #30
 8001b0c:	f008 fe84 	bl	800a818 <sniprintf>
	 HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001b10:	f107 010c 	add.w	r1, r7, #12
 8001b14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b18:	221e      	movs	r2, #30
 8001b1a:	4808      	ldr	r0, [pc, #32]	; (8001b3c <humid_task+0xf8>)
 8001b1c:	f004 fb54 	bl	80061c8 <HAL_UART_Transmit>
	 osSemaphoreRelease(apparent_temp_sem);
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <humid_task+0xfc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f005 fdb5 	bl	8007694 <osSemaphoreRelease>
	 osSemaphoreAcquire(humid_sem, portMAX_DELAY);
 8001b2a:	e7a2      	b.n	8001a72 <humid_task+0x2e>
 8001b2c:	20002324 	.word	0x20002324
 8001b30:	200023e0 	.word	0x200023e0
 8001b34:	42c80000 	.word	0x42c80000
 8001b38:	0800c1c0 	.word	0x0800c1c0
 8001b3c:	200023e4 	.word	0x200023e4
 8001b40:	20002468 	.word	0x20002468

08001b44 <apparent_temp_task>:
  }
}

/*Compute the apparent temperature based on real temperature and humidity using the Humidex method (can only be used if the temperature is >=20)
 *Periodically, wake up the safety thread*/
void apparent_temp_task(struct ambient_conditions* ac){
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b0a8      	sub	sp, #160	; 0xa0
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
	int counter=600;
 8001b4c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int int1=0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float frac=0;
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int int2=0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char msg[80] = "";
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b70:	224c      	movs	r2, #76	; 0x4c
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f008 fe46 	bl	800a806 <memset>
	char line[]="--------------------------------------\n\r";
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <apparent_temp_task+0x1ac>)
 8001b7c:	f107 040c 	add.w	r4, r7, #12
 8001b80:	461d      	mov	r5, r3
 8001b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b8e:	c403      	stmia	r4!, {r0, r1}
 8001b90:	7022      	strb	r2, [r4, #0]

	for(;;)
	  {
		 osSemaphoreAcquire(apparent_temp_sem, portMAX_DELAY);
 8001b92:	4b58      	ldr	r3, [pc, #352]	; (8001cf4 <apparent_temp_task+0x1b0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 fd14 	bl	80075c8 <osSemaphoreAcquire>
		 osSemaphoreAcquire(mutex, portMAX_DELAY);
 8001ba0:	4b55      	ldr	r3, [pc, #340]	; (8001cf8 <apparent_temp_task+0x1b4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 fd0d 	bl	80075c8 <osSemaphoreAcquire>

		 /*Calculate humidex if the temperature>=20 or else set a value of 0, meaning the apparent temperature has no meaning */
		 if(ac->temp_value>=20){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	db08      	blt.n	8001bd4 <apparent_temp_task+0x90>
			ac->humidex = calculate_h(ac);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fe40 	bl	8001848 <calculate_h>
 8001bc8:	eef0 7a40 	vmov.f32	s15, s0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edc3 7a02 	vstr	s15, [r3, #8]
 8001bd2:	e003      	b.n	8001bdc <apparent_temp_task+0x98>
		 }
		 else{
			 ac->humidex = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
		 }
		 osSemaphoreRelease(mutex);
 8001bdc:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <apparent_temp_task+0x1b4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f005 fd57 	bl	8007694 <osSemaphoreRelease>

		 if(ac->humidex){
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d045      	beq.n	8001c82 <apparent_temp_task+0x13e>
			 int1 = ac->humidex;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c00:	ee17 3a90 	vmov	r3, s15
 8001c04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		 	 frac = ac->humidex - int1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		 	 int2 = trunc(frac * 100);
 8001c22:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001c26:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001cfc <apparent_temp_task+0x1b8>
 8001c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2e:	ee17 0a90 	vmov	r0, s15
 8001c32:	f7fe fc81 	bl	8000538 <__aeabi_f2d>
 8001c36:	4603      	mov	r3, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	ec44 3b10 	vmov	d0, r3, r4
 8001c3e:	f009 f9fb 	bl	800b038 <trunc>
 8001c42:	ec54 3b10 	vmov	r3, r4, d0
 8001c46:	4618      	mov	r0, r3
 8001c48:	4621      	mov	r1, r4
 8001c4a:	f7fe ff7d 	bl	8000b48 <__aeabi_d2iz>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		 	 snprintf(msg,80,"APPARENT TEMPERATURE = %d.%02d %cC\r\n", int1, int2,'°');
 8001c54:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001c58:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c68:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <apparent_temp_task+0x1bc>)
 8001c6a:	2150      	movs	r1, #80	; 0x50
 8001c6c:	f008 fdd4 	bl	800a818 <sniprintf>
		 	 HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001c70:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c78:	2250      	movs	r2, #80	; 0x50
 8001c7a:	4822      	ldr	r0, [pc, #136]	; (8001d04 <apparent_temp_task+0x1c0>)
 8001c7c:	f004 faa4 	bl	80061c8 <HAL_UART_Transmit>
 8001c80:	e010      	b.n	8001ca4 <apparent_temp_task+0x160>
		 }
		 else{
			 snprintf(msg,80,"THE TEMPERATURE IS TOO LOW IN ORDER TO CALCULATE THE APPARENT TEMPERATURE\r\n");
 8001c82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c86:	4a20      	ldr	r2, [pc, #128]	; (8001d08 <apparent_temp_task+0x1c4>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	234c      	movs	r3, #76	; 0x4c
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f008 fdae 	bl	800a7f0 <memcpy>
			 HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001c94:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9c:	2250      	movs	r2, #80	; 0x50
 8001c9e:	4819      	ldr	r0, [pc, #100]	; (8001d04 <apparent_temp_task+0x1c0>)
 8001ca0:	f004 fa92 	bl	80061c8 <HAL_UART_Transmit>
		 }
		 HAL_UART_Transmit(&huart1,( uint8_t * )line,sizeof(line),1000);
 8001ca4:	f107 010c 	add.w	r1, r7, #12
 8001ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cac:	2229      	movs	r2, #41	; 0x29
 8001cae:	4815      	ldr	r0, [pc, #84]	; (8001d04 <apparent_temp_task+0x1c0>)
 8001cb0:	f004 fa8a 	bl	80061c8 <HAL_UART_Transmit>

		 /*Wake up the safety thread every 10 minutes*/
		 if(!counter){
 8001cb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <apparent_temp_task+0x18c>
			 counter=600;
 8001cbc:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001cc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			 osSemaphoreRelease(safety_sem);
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <apparent_temp_task+0x1c8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f005 fce3 	bl	8007694 <osSemaphoreRelease>
 8001cce:	e004      	b.n	8001cda <apparent_temp_task+0x196>
		 }
		 else{
			 counter--;
 8001cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		 }

		 /*Wait before restarting the cycle, there is no need to update the data too frequently*/
		 osDelay(1000);
 8001cda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cde:	f005 fb0d 	bl	80072fc <osDelay>
		 osSemaphoreRelease(temp_sem);
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <apparent_temp_task+0x1cc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f005 fcd4 	bl	8007694 <osSemaphoreRelease>
		 osSemaphoreAcquire(apparent_temp_sem, portMAX_DELAY);
 8001cec:	e751      	b.n	8001b92 <apparent_temp_task+0x4e>
 8001cee:	bf00      	nop
 8001cf0:	0800c24c 	.word	0x0800c24c
 8001cf4:	20002468 	.word	0x20002468
 8001cf8:	200023e0 	.word	0x200023e0
 8001cfc:	42c80000 	.word	0x42c80000
 8001d00:	0800c1d8 	.word	0x0800c1d8
 8001d04:	200023e4 	.word	0x200023e4
 8001d08:	0800c200 	.word	0x0800c200
 8001d0c:	2000246c 	.word	0x2000246c
 8001d10:	20002378 	.word	0x20002378

08001d14 <safety_task>:
	  }
}

/*Check that the apparent temperature is not too high. If it is, lower the set temperature*/
void safety_task(struct ambient_conditions* ac){
 8001d14:	b5b0      	push	{r4, r5, r7, lr}
 8001d16:	b0a2      	sub	sp, #136	; 0x88
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	6078      	str	r0, [r7, #4]
	char msg[70] = "";
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d24:	2242      	movs	r2, #66	; 0x42
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f008 fd6c 	bl	800a806 <memset>
	char line[]="--------------------------------------\n\r";
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <safety_task+0xb0>)
 8001d30:	f107 040c 	add.w	r4, r7, #12
 8001d34:	461d      	mov	r5, r3
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d42:	c403      	stmia	r4!, {r0, r1}
 8001d44:	7022      	strb	r2, [r4, #0]

	for(;;)
	{
		osSemaphoreAcquire(safety_sem, portMAX_DELAY);
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <safety_task+0xb4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 fc3a 	bl	80075c8 <osSemaphoreAcquire>
		osSemaphoreAcquire(mutex, portMAX_DELAY);
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <safety_task+0xb8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f005 fc33 	bl	80075c8 <osSemaphoreAcquire>

		if(ac->humidex>=35){
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d68:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001dd0 <safety_task+0xbc>
 8001d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	db20      	blt.n	8001db8 <safety_task+0xa4>
			ac->set_temperature--;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	1e5a      	subs	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	60da      	str	r2, [r3, #12]
			snprintf(msg,70,"THE TEMPERATURE IS TOO HIGH! DECREASING TEMPERATURE TO %d %cC\r\n",ac->set_temperature,'°');
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001d88:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <safety_task+0xc0>)
 8001d92:	2146      	movs	r1, #70	; 0x46
 8001d94:	f008 fd40 	bl	800a818 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001d98:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da0:	2246      	movs	r2, #70	; 0x46
 8001da2:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <safety_task+0xc4>)
 8001da4:	f004 fa10 	bl	80061c8 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,( uint8_t * )line,sizeof(line),1000);
 8001da8:	f107 010c 	add.w	r1, r7, #12
 8001dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db0:	2229      	movs	r2, #41	; 0x29
 8001db2:	4809      	ldr	r0, [pc, #36]	; (8001dd8 <safety_task+0xc4>)
 8001db4:	f004 fa08 	bl	80061c8 <HAL_UART_Transmit>
		}
		osSemaphoreRelease(mutex);
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <safety_task+0xb8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f005 fc69 	bl	8007694 <osSemaphoreRelease>
		osSemaphoreAcquire(safety_sem, portMAX_DELAY);
 8001dc2:	e7c0      	b.n	8001d46 <safety_task+0x32>
 8001dc4:	0800c24c 	.word	0x0800c24c
 8001dc8:	2000246c 	.word	0x2000246c
 8001dcc:	200023e0 	.word	0x200023e0
 8001dd0:	420c0000 	.word	0x420c0000
 8001dd4:	0800c278 	.word	0x0800c278
 8001dd8:	200023e4 	.word	0x200023e4

08001ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dee:	f000 fec9 	bl	8002b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40012c00 	.word	0x40012c00

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6613      	str	r3, [r2, #96]	; 0x60
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_MspInit+0x4c>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	210f      	movs	r1, #15
 8001e4a:	f06f 0001 	mvn.w	r0, #1
 8001e4e:	f000 ff91 	bl	8002d74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000

08001e60 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	; 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d128      	bne.n	8001ed2 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e84:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001e9e:	f043 0310 	orr.w	r3, r3, #16
 8001ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001eb0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001ece:	f001 f891 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000016c 	.word	0x2000016c
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	48001000 	.word	0x48001000

08001ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_I2C_MspInit+0x7c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d128      	bne.n	8001f5c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_I2C_MspInit+0x80>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <HAL_I2C_MspInit+0x80>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_I2C_MspInit+0x80>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001f22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f34:	2304      	movs	r3, #4
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480b      	ldr	r0, [pc, #44]	; (8001f6c <HAL_I2C_MspInit+0x84>)
 8001f40:	f001 f858 	bl	8002ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_I2C_MspInit+0x80>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_I2C_MspInit+0x80>)
 8001f4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_I2C_MspInit+0x80>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40005800 	.word	0x40005800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	48000400 	.word	0x48000400

08001f70 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_I2C_MspDeInit+0x30>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10a      	bne.n	8001f98 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_I2C_MspDeInit+0x34>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_I2C_MspDeInit+0x34>)
 8001f88:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001f8e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_I2C_MspDeInit+0x38>)
 8001f94:	f001 f9d6 	bl	8003344 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40005800 	.word	0x40005800
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000400 	.word	0x48000400

08001fac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_QSPI_MspInit+0x7c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d128      	bne.n	8002020 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd2:	4a16      	ldr	r2, [pc, #88]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6513      	str	r3, [r2, #80]	; 0x50
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_QSPI_MspInit+0x80>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001ffe:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002002:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002010:	230a      	movs	r3, #10
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <HAL_QSPI_MspInit+0x84>)
 800201c:	f000 ffea 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	a0001000 	.word	0xa0001000
 800202c:	40021000 	.word	0x40021000
 8002030:	48001000 	.word	0x48001000

08002034 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_SPI_MspInit+0x7c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d128      	bne.n	80020a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_SPI_MspInit+0x80>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <HAL_SPI_MspInit+0x80>)
 800205c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_SPI_MspInit+0x80>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_SPI_MspInit+0x80>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_SPI_MspInit+0x80>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_SPI_MspInit+0x80>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002086:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800208a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002098:	2306      	movs	r3, #6
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <HAL_SPI_MspInit+0x84>)
 80020a4:	f000 ffa6 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40003c00 	.word	0x40003c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	48000800 	.word	0x48000800

080020bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2e      	ldr	r2, [pc, #184]	; (8002194 <HAL_UART_MspInit+0xd8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d128      	bne.n	8002130 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <HAL_UART_MspInit+0xdc>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	4a2d      	ldr	r2, [pc, #180]	; (8002198 <HAL_UART_MspInit+0xdc>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_UART_MspInit+0xdc>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_UART_MspInit+0xdc>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_UART_MspInit+0xdc>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b25      	ldr	r3, [pc, #148]	; (8002198 <HAL_UART_MspInit+0xdc>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800210e:	23c0      	movs	r3, #192	; 0xc0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800211e:	2307      	movs	r3, #7
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	4619      	mov	r1, r3
 8002128:	481c      	ldr	r0, [pc, #112]	; (800219c <HAL_UART_MspInit+0xe0>)
 800212a:	f000 ff63 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800212e:	e02d      	b.n	800218c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <HAL_UART_MspInit+0xe4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d128      	bne.n	800218c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_UART_MspInit+0xdc>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_UART_MspInit+0xdc>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002144:	6593      	str	r3, [r2, #88]	; 0x58
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <HAL_UART_MspInit+0xdc>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_UART_MspInit+0xdc>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_UART_MspInit+0xdc>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_UART_MspInit+0xdc>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800216a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800216e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800217c:	2307      	movs	r3, #7
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4619      	mov	r1, r3
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <HAL_UART_MspInit+0xe8>)
 8002188:	f000 ff34 	bl	8002ff4 <HAL_GPIO_Init>
}
 800218c:	bf00      	nop
 800218e:	3730      	adds	r7, #48	; 0x30
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40013800 	.word	0x40013800
 8002198:	40021000 	.word	0x40021000
 800219c:	48000400 	.word	0x48000400
 80021a0:	40004800 	.word	0x40004800
 80021a4:	48000c00 	.word	0x48000c00

080021a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c8:	d154      	bne.n	8002274 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_PCD_MspInit+0xd4>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	4a2b      	ldr	r2, [pc, #172]	; (800227c <HAL_PCD_MspInit+0xd4>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_PCD_MspInit+0xd4>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	4619      	mov	r1, r3
 80021f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fa:	f000 fefb 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80021fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002210:	230a      	movs	r3, #10
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221e:	f000 fee9 	bl	8002ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <HAL_PCD_MspInit+0xd4>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_PCD_MspInit+0xd4>)
 8002228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800222c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_PCD_MspInit+0xd4>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_PCD_MspInit+0xd4>)
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d114      	bne.n	8002270 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_PCD_MspInit+0xd4>)
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_PCD_MspInit+0xd4>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	6593      	str	r3, [r2, #88]	; 0x58
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_PCD_MspInit+0xd4>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800225e:	f002 f8fd 	bl	800445c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_PCD_MspInit+0xd4>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <HAL_PCD_MspInit+0xd4>)
 8002268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800226e:	e001      	b.n	8002274 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002270:	f002 f8f4 	bl	800445c <HAL_PWREx_EnableVddUSB>
}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08c      	sub	sp, #48	; 0x30
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	2019      	movs	r0, #25
 8002296:	f000 fd6d 	bl	8002d74 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800229a:	2019      	movs	r0, #25
 800229c:	f000 fd86 	bl	8002dac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_InitTick+0x9c>)
 80022a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_InitTick+0x9c>)
 80022a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022aa:	6613      	str	r3, [r2, #96]	; 0x60
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_InitTick+0x9c>)
 80022ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022b8:	f107 0210 	add.w	r2, r7, #16
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fef6 	bl	80050b4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022c8:	f002 fede 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 80022cc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_InitTick+0xa0>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0c9b      	lsrs	r3, r3, #18
 80022d8:	3b01      	subs	r3, #1
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_InitTick+0xa4>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_InitTick+0xa8>)
 80022e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_InitTick+0xa4>)
 80022e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_InitTick+0xa4>)
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_InitTick+0xa4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_InitTick+0xa4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <HAL_InitTick+0xa4>)
 80022fe:	f003 fcb5 	bl	8005c6c <HAL_TIM_Base_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d104      	bne.n	8002312 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002308:	4806      	ldr	r0, [pc, #24]	; (8002324 <HAL_InitTick+0xa4>)
 800230a:	f003 fce5 	bl	8005cd8 <HAL_TIM_Base_Start_IT>
 800230e:	4603      	mov	r3, r0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3730      	adds	r7, #48	; 0x30
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	431bde83 	.word	0x431bde83
 8002324:	200024bc 	.word	0x200024bc
 8002328:	40012c00 	.word	0x40012c00

0800232c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <MemManage_Handler+0x4>

08002346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <UsageFault_Handler+0x4>

08002352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002364:	2020      	movs	r0, #32
 8002366:	f001 f8f9 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800236a:	2040      	movs	r0, #64	; 0x40
 800236c:	f001 f8f6 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002370:	2080      	movs	r0, #128	; 0x80
 8002372:	f001 f8f3 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002376:	f44f 7080 	mov.w	r0, #256	; 0x100
 800237a:	f001 f8ef 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800238a:	f003 fccf 	bl	8005d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200024bc 	.word	0x200024bc

08002398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800239c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023a0:	f001 f8dc 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80023a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80023a8:	f001 f8d8 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023b0:	f001 f8d4 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80023b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023b8:	f001 f8d0 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80023bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023c0:	f001 f8cc 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <_sbrk+0x50>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x16>
		heap_end = &end;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <_sbrk+0x50>)
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <_sbrk+0x54>)
 80023dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <_sbrk+0x50>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <_sbrk+0x50>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	466a      	mov	r2, sp
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d907      	bls.n	8002402 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023f2:	f008 f9d3 	bl	800a79c <__errno>
 80023f6:	4602      	mov	r2, r0
 80023f8:	230c      	movs	r3, #12
 80023fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e006      	b.n	8002410 <_sbrk+0x48>
	}

	heap_end += incr;
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <_sbrk+0x50>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a03      	ldr	r2, [pc, #12]	; (8002418 <_sbrk+0x50>)
 800240c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000170 	.word	0x20000170
 800241c:	20002610 	.word	0x20002610

08002420 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <SystemInit+0x64>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <SystemInit+0x64>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <SystemInit+0x68>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a13      	ldr	r2, [pc, #76]	; (8002488 <SystemInit+0x68>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <SystemInit+0x68>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <SystemInit+0x68>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <SystemInit+0x68>)
 800244c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002450:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002454:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <SystemInit+0x68>)
 8002458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800245c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <SystemInit+0x68>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <SystemInit+0x68>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <SystemInit+0x68>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SystemInit+0x64>)
 8002472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002476:	609a      	str	r2, [r3, #8]
#endif
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	40021000 	.word	0x40021000

0800248c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800248c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002490:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002492:	e003      	b.n	800249c <LoopCopyDataInit>

08002494 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002496:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002498:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800249a:	3104      	adds	r1, #4

0800249c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800249c:	480b      	ldr	r0, [pc, #44]	; (80024cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024a4:	d3f6      	bcc.n	8002494 <CopyDataInit>
	ldr	r2, =_sbss
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024a8:	e002      	b.n	80024b0 <LoopFillZerobss>

080024aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024ac:	f842 3b04 	str.w	r3, [r2], #4

080024b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <LoopForever+0x16>)
	cmp	r2, r3
 80024b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024b4:	d3f9      	bcc.n	80024aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024b6:	f7ff ffb3 	bl	8002420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ba:	f008 f975 	bl	800a7a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024be:	f7fe fd3b 	bl	8000f38 <main>

080024c2 <LoopForever>:

LoopForever:
    b LoopForever
 80024c2:	e7fe      	b.n	80024c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80024c8:	0800c410 	.word	0x0800c410
	ldr	r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80024d0:	20000150 	.word	0x20000150
	ldr	r2, =_sbss
 80024d4:	20000150 	.word	0x20000150
	ldr	r3, = _ebss
 80024d8:	20002610 	.word	0x20002610

080024dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <ADC1_2_IRQHandler>
	...

080024e0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <I2Cx_MspInit+0xa8>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <I2Cx_MspInit+0xa8>)
 80024ee:	f043 0302 	orr.w	r3, r3, #2
 80024f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f4:	4b24      	ldr	r3, [pc, #144]	; (8002588 <I2Cx_MspInit+0xa8>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002500:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002504:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002506:	2312      	movs	r3, #18
 8002508:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002512:	2304      	movs	r3, #4
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	481b      	ldr	r0, [pc, #108]	; (800258c <I2Cx_MspInit+0xac>)
 800251e:	f000 fd69 	bl	8002ff4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4818      	ldr	r0, [pc, #96]	; (800258c <I2Cx_MspInit+0xac>)
 800252a:	f000 fd63 	bl	8002ff4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <I2Cx_MspInit+0xa8>)
 8002530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <I2Cx_MspInit+0xa8>)
 8002534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002538:	6593      	str	r3, [r2, #88]	; 0x58
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <I2Cx_MspInit+0xa8>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <I2Cx_MspInit+0xa8>)
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <I2Cx_MspInit+0xa8>)
 800254c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002550:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <I2Cx_MspInit+0xa8>)
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <I2Cx_MspInit+0xa8>)
 8002558:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800255c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	210f      	movs	r1, #15
 8002562:	2021      	movs	r0, #33	; 0x21
 8002564:	f000 fc06 	bl	8002d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002568:	2021      	movs	r0, #33	; 0x21
 800256a:	f000 fc1f 	bl	8002dac <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	210f      	movs	r1, #15
 8002572:	2022      	movs	r0, #34	; 0x22
 8002574:	f000 fbfe 	bl	8002d74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002578:	2022      	movs	r0, #34	; 0x22
 800257a:	f000 fc17 	bl	8002dac <HAL_NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3728      	adds	r7, #40	; 0x28
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	48000400 	.word	0x48000400

08002590 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <I2Cx_Init+0x54>)
 800259c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <I2Cx_Init+0x58>)
 80025a2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff89 	bl	80024e0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 ffe7 	bl	80035a2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80025d4:	2100      	movs	r1, #0
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f001 fcec 	bl	8003fb4 <HAL_I2CEx_ConfigAnalogFilter>
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40005800 	.word	0x40005800
 80025e8:	00702681 	.word	0x00702681

080025ec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af04      	add	r7, sp, #16
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	4608      	mov	r0, r1
 80025f6:	4611      	mov	r1, r2
 80025f8:	461a      	mov	r2, r3
 80025fa:	4603      	mov	r3, r0
 80025fc:	72fb      	strb	r3, [r7, #11]
 80025fe:	460b      	mov	r3, r1
 8002600:	813b      	strh	r3, [r7, #8]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	b299      	uxth	r1, r3
 800260e:	88f8      	ldrh	r0, [r7, #6]
 8002610:	893a      	ldrh	r2, [r7, #8]
 8002612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	4603      	mov	r3, r0
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f001 f990 	bl	8003948 <HAL_I2C_Mem_Read>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800262c:	7dfb      	ldrb	r3, [r7, #23]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002632:	7afb      	ldrb	r3, [r7, #11]
 8002634:	4619      	mov	r1, r3
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f832 	bl	80026a0 <I2Cx_Error>
  }
  return status;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b08a      	sub	sp, #40	; 0x28
 800264a:	af04      	add	r7, sp, #16
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	4608      	mov	r0, r1
 8002650:	4611      	mov	r1, r2
 8002652:	461a      	mov	r2, r3
 8002654:	4603      	mov	r3, r0
 8002656:	72fb      	strb	r3, [r7, #11]
 8002658:	460b      	mov	r3, r1
 800265a:	813b      	strh	r3, [r7, #8]
 800265c:	4613      	mov	r3, r2
 800265e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002664:	7afb      	ldrb	r3, [r7, #11]
 8002666:	b299      	uxth	r1, r3
 8002668:	88f8      	ldrh	r0, [r7, #6]
 800266a:	893a      	ldrh	r2, [r7, #8]
 800266c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002670:	9302      	str	r3, [sp, #8]
 8002672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4603      	mov	r3, r0
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f001 f84f 	bl	8003720 <HAL_I2C_Mem_Write>
 8002682:	4603      	mov	r3, r0
 8002684:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	4619      	mov	r1, r3
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f805 	bl	80026a0 <I2Cx_Error>
  }
  return status;
 8002696:	7dfb      	ldrb	r3, [r7, #23]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f001 f807 	bl	80036c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ff6c 	bl	8002590 <I2Cx_Init>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <SENSOR_IO_Init+0x10>)
 80026c6:	f7ff ff63 	bl	8002590 <I2Cx_Init>
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000257c 	.word	0x2000257c

080026d4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af02      	add	r7, sp, #8
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	460b      	mov	r3, r1
 80026e0:	71bb      	strb	r3, [r7, #6]
 80026e2:	4613      	mov	r3, r2
 80026e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80026e6:	79bb      	ldrb	r3, [r7, #6]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	79f9      	ldrb	r1, [r7, #7]
 80026ec:	2301      	movs	r3, #1
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	1d7b      	adds	r3, r7, #5
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2301      	movs	r3, #1
 80026f6:	4803      	ldr	r0, [pc, #12]	; (8002704 <SENSOR_IO_Write+0x30>)
 80026f8:	f7ff ffa5 	bl	8002646 <I2Cx_WriteMultiple>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000257c 	.word	0x2000257c

08002708 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af02      	add	r7, sp, #8
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800271c:	79bb      	ldrb	r3, [r7, #6]
 800271e:	b29a      	uxth	r2, r3
 8002720:	79f9      	ldrb	r1, [r7, #7]
 8002722:	2301      	movs	r3, #1
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	f107 030f 	add.w	r3, r7, #15
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2301      	movs	r3, #1
 800272e:	4804      	ldr	r0, [pc, #16]	; (8002740 <SENSOR_IO_Read+0x38>)
 8002730:	f7ff ff5c 	bl	80025ec <I2Cx_ReadMultiple>

  return read_value;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000257c 	.word	0x2000257c

08002744 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af02      	add	r7, sp, #8
 800274a:	603a      	str	r2, [r7, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
 8002752:	460b      	mov	r3, r1
 8002754:	71bb      	strb	r3, [r7, #6]
 8002756:	4613      	mov	r3, r2
 8002758:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800275a:	79bb      	ldrb	r3, [r7, #6]
 800275c:	b29a      	uxth	r2, r3
 800275e:	79f9      	ldrb	r1, [r7, #7]
 8002760:	88bb      	ldrh	r3, [r7, #4]
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2301      	movs	r3, #1
 800276a:	4804      	ldr	r0, [pc, #16]	; (800277c <SENSOR_IO_ReadMultiple+0x38>)
 800276c:	f7ff ff3e 	bl	80025ec <I2Cx_ReadMultiple>
 8002770:	4603      	mov	r3, r0
 8002772:	b29b      	uxth	r3, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	2000257c 	.word	0x2000257c

08002780 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <BSP_HSENSOR_Init+0x38>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	20be      	movs	r0, #190	; 0xbe
 800278c:	4798      	blx	r3
 800278e:	4603      	mov	r3, r0
 8002790:	2bbc      	cmp	r3, #188	; 0xbc
 8002792:	d002      	beq.n	800279a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	e009      	b.n	80027ae <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <BSP_HSENSOR_Init+0x3c>)
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <BSP_HSENSOR_Init+0x38>)
 800279e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <BSP_HSENSOR_Init+0x3c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	20be      	movs	r0, #190	; 0xbe
 80027a8:	4798      	blx	r3
    ret = HSENSOR_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80027ae:	687b      	ldr	r3, [r7, #4]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200000c0 	.word	0x200000c0
 80027bc:	20000174 	.word	0x20000174

080027c0 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <BSP_HSENSOR_ReadHumidity+0x18>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	20be      	movs	r0, #190	; 0xbe
 80027cc:	4798      	blx	r3
 80027ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80027d2:	eeb0 0a67 	vmov.f32	s0, s15
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000174 	.word	0x20000174

080027dc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <BSP_TSENSOR_Init+0x30>)
 80027e8:	4a09      	ldr	r2, [pc, #36]	; (8002810 <BSP_TSENSOR_Init+0x34>)
 80027ea:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80027ec:	f7ff ff68 	bl	80026c0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <BSP_TSENSOR_Init+0x30>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2100      	movs	r1, #0
 80027f8:	20be      	movs	r0, #190	; 0xbe
 80027fa:	4798      	blx	r3

  ret = TSENSOR_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002800:	79fb      	ldrb	r3, [r7, #7]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000178 	.word	0x20000178
 8002810:	200000cc 	.word	0x200000cc

08002814 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <BSP_TSENSOR_ReadTemp+0x18>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	20be      	movs	r0, #190	; 0xbe
 8002820:	4798      	blx	r3
 8002822:	eef0 7a40 	vmov.f32	s15, s0
}
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000178 	.word	0x20000178

08002830 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2120      	movs	r1, #32
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff61 	bl	8002708 <SENSOR_IO_Read>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	f023 0303 	bic.w	r3, r3, #3
 8002860:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002870:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	2120      	movs	r1, #32
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff2a 	bl	80026d4 <SENSOR_IO_Write>
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002896:	f7ff ff13 	bl	80026c0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	210f      	movs	r1, #15
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff31 	bl	8002708 <SENSOR_IO_Read>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	b2d8      	uxtb	r0, r3
 80028c2:	f107 020c 	add.w	r2, r7, #12
 80028c6:	2302      	movs	r3, #2
 80028c8:	21b0      	movs	r1, #176	; 0xb0
 80028ca:	f7ff ff3b 	bl	8002744 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80028ce:	7b3b      	ldrb	r3, [r7, #12]
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80028d6:	7b7b      	ldrb	r3, [r7, #13]
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	b2d8      	uxtb	r0, r3
 80028e2:	f107 020c 	add.w	r2, r7, #12
 80028e6:	2302      	movs	r3, #2
 80028e8:	21b6      	movs	r1, #182	; 0xb6
 80028ea:	f7ff ff2b 	bl	8002744 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80028ee:	7b7b      	ldrb	r3, [r7, #13]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	b21a      	sxth	r2, r3
 80028f4:	7b3b      	ldrb	r3, [r7, #12]
 80028f6:	b21b      	sxth	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	b2d8      	uxtb	r0, r3
 8002900:	f107 020c 	add.w	r2, r7, #12
 8002904:	2302      	movs	r3, #2
 8002906:	21ba      	movs	r1, #186	; 0xba
 8002908:	f7ff ff1c 	bl	8002744 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800290c:	7b7b      	ldrb	r3, [r7, #13]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	b21a      	sxth	r2, r3
 8002912:	7b3b      	ldrb	r3, [r7, #12]
 8002914:	b21b      	sxth	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	b2d8      	uxtb	r0, r3
 800291e:	f107 020c 	add.w	r2, r7, #12
 8002922:	2302      	movs	r3, #2
 8002924:	21a8      	movs	r1, #168	; 0xa8
 8002926:	f7ff ff0d 	bl	8002744 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	b21a      	sxth	r2, r3
 8002930:	7b3b      	ldrb	r3, [r7, #12]
 8002932:	b21b      	sxth	r3, r3
 8002934:	4313      	orrs	r3, r2
 8002936:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002938:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800293c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	ee07 3a90 	vmov	s15, r3
 8002946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800294a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800294e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800295c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002960:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002964:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002976:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002986:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800298a:	edd7 7a04 	vldr	s15, [r7, #16]
 800298e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002996:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800299a:	edd7 7a04 	vldr	s15, [r7, #16]
 800299e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80029e4 <HTS221_H_ReadHumidity+0x130>
 80029a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	dd01      	ble.n	80029b0 <HTS221_H_ReadHumidity+0xfc>
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HTS221_H_ReadHumidity+0x134>)
 80029ae:	e00a      	b.n	80029c6 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80029b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029bc:	d502      	bpl.n	80029c4 <HTS221_H_ReadHumidity+0x110>
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	e000      	b.n	80029c6 <HTS221_H_ReadHumidity+0x112>
 80029c4:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80029c6:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80029c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029d4:	eef0 7a66 	vmov.f32	s15, s13
}
 80029d8:	eeb0 0a67 	vmov.f32	s0, s15
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	447a0000 	.word	0x447a0000
 80029e8:	447a0000 	.word	0x447a0000

080029ec <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2120      	movs	r1, #32
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fe82 	bl	8002708 <SENSOR_IO_Read>
 8002a04:	4603      	mov	r3, r0
 8002a06:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	f023 0304 	bic.w	r3, r3, #4
 8002a0e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	f043 0304 	orr.w	r3, r3, #4
 8002a16:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	f023 0303 	bic.w	r3, r3, #3
 8002a1e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a2e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	2120      	movs	r1, #32
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fe4b 	bl	80026d4 <SENSOR_IO_Write>
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b088      	sub	sp, #32
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	b2d8      	uxtb	r0, r3
 8002a54:	f107 0208 	add.w	r2, r7, #8
 8002a58:	2302      	movs	r3, #2
 8002a5a:	21b2      	movs	r1, #178	; 0xb2
 8002a5c:	f7ff fe72 	bl	8002744 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2135      	movs	r1, #53	; 0x35
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fe4e 	bl	8002708 <SENSOR_IO_Read>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002a70:	7ffb      	ldrb	r3, [r7, #31]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	7a3b      	ldrb	r3, [r7, #8]
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	4313      	orrs	r3, r2
 8002a82:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002a84:	7ffb      	ldrb	r3, [r7, #31]
 8002a86:	019b      	lsls	r3, r3, #6
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	7a7b      	ldrb	r3, [r7, #9]
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	4313      	orrs	r3, r2
 8002a96:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002a98:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a9c:	10db      	asrs	r3, r3, #3
 8002a9e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002aa0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002aa4:	10db      	asrs	r3, r3, #3
 8002aa6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	b2d8      	uxtb	r0, r3
 8002aac:	f107 0208 	add.w	r2, r7, #8
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	21bc      	movs	r1, #188	; 0xbc
 8002ab4:	f7ff fe46 	bl	8002744 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ab8:	7a7b      	ldrb	r3, [r7, #9]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	b21a      	sxth	r2, r3
 8002abe:	7a3b      	ldrb	r3, [r7, #8]
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	7abb      	ldrb	r3, [r7, #10]
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	b2d8      	uxtb	r0, r3
 8002ad8:	f107 0208 	add.w	r2, r7, #8
 8002adc:	2302      	movs	r3, #2
 8002ade:	21aa      	movs	r1, #170	; 0xaa
 8002ae0:	f7ff fe30 	bl	8002744 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ae4:	7a7b      	ldrb	r3, [r7, #9]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	7a3b      	ldrb	r3, [r7, #8]
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	4313      	orrs	r3, r2
 8002af0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002af2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002af6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b1a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b1e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b30:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b40:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	ee07 3a90 	vmov	s15, r3
}
 8002b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f000 f8fd 	bl	8002d5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7ff fb8b 	bl	8002280 <HAL_InitTick>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	71fb      	strb	r3, [r7, #7]
 8002b74:	e001      	b.n	8002b7a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b76:	f7ff f94b 	bl	8001e10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_IncTick+0x1c>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_IncTick+0x20>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4413      	add	r3, r2
 8002b92:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <HAL_IncTick+0x1c>)
 8002b94:	6013      	str	r3, [r2, #0]
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	200025c8 	.word	0x200025c8
 8002ba4:	200000e0 	.word	0x200000e0

08002ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_GetTick+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	200025c8 	.word	0x200025c8

08002bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc8:	f7ff ffee 	bl	8002ba8 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d004      	beq.n	8002be4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_Delay+0x40>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4413      	add	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002be4:	bf00      	nop
 8002be6:	f7ff ffdf 	bl	8002ba8 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d8f7      	bhi.n	8002be6 <HAL_Delay+0x26>
  {
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200000e0 	.word	0x200000e0

08002c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	60d3      	str	r3, [r2, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <__NVIC_GetPriorityGrouping+0x18>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	f003 0307 	and.w	r3, r3, #7
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db0b      	blt.n	8002c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4907      	ldr	r1, [pc, #28]	; (8002ca0 <__NVIC_EnableIRQ+0x38>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	3b04      	subs	r3, #4
 8002cdc:	0112      	lsls	r2, r2, #4
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	bf28      	it	cs
 8002d16:	2304      	movcs	r3, #4
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b03      	subs	r3, #3
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d40:	f04f 31ff 	mov.w	r1, #4294967295
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	4313      	orrs	r3, r2
         );
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ff4c 	bl	8002c04 <__NVIC_SetPriorityGrouping>
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d86:	f7ff ff61 	bl	8002c4c <__NVIC_GetPriorityGrouping>
 8002d8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	6978      	ldr	r0, [r7, #20]
 8002d92:	f7ff ffb1 	bl	8002cf8 <NVIC_EncodePriority>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff80 	bl	8002ca4 <__NVIC_SetPriority>
}
 8002da4:	bf00      	nop
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff54 	bl	8002c68 <__NVIC_EnableIRQ>
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0ac      	b.n	8002f34 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f8b2 	bl	8002f48 <DFSDM_GetChannelFromInstance>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_DFSDM_ChannelInit+0x174>)
 8002de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e09f      	b.n	8002f34 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff f833 	bl	8001e60 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002dfa:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_DFSDM_ChannelInit+0x178>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_DFSDM_ChannelInit+0x178>)
 8002e02:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002e04:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_DFSDM_ChannelInit+0x178>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d125      	bne.n	8002e58 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a4c      	ldr	r2, [pc, #304]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e16:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002e18:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4948      	ldr	r1, [pc, #288]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e2c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002e30:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	791b      	ldrb	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d108      	bne.n	8002e4c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002e3a:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	493f      	ldr	r1, [pc, #252]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002e4c:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3c      	ldr	r2, [pc, #240]	; (8002f44 <HAL_DFSDM_ChannelInit+0x17c>)
 8002e52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e56:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002e66:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e76:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002e7c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 020f 	bic.w	r2, r2, #15
 8002e94:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6819      	ldr	r1, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002ebc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6899      	ldr	r1, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f002 0207 	and.w	r2, r2, #7
 8002ee8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f14:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f810 	bl	8002f48 <DFSDM_GetChannelFromInstance>
 8002f28:	4601      	mov	r1, r0
 8002f2a:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_DFSDM_ChannelInit+0x174>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000180 	.word	0x20000180
 8002f40:	2000017c 	.word	0x2000017c
 8002f44:	40016000 	.word	0x40016000

08002f48 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <DFSDM_GetChannelFromInstance+0x8c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d102      	bne.n	8002f5e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e032      	b.n	8002fc4 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <DFSDM_GetChannelFromInstance+0x90>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d102      	bne.n	8002f6c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002f66:	2301      	movs	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e02b      	b.n	8002fc4 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <DFSDM_GetChannelFromInstance+0x94>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d102      	bne.n	8002f7a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002f74:	2302      	movs	r3, #2
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e024      	b.n	8002fc4 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <DFSDM_GetChannelFromInstance+0x98>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d102      	bne.n	8002f88 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002f82:	2303      	movs	r3, #3
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e01d      	b.n	8002fc4 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <DFSDM_GetChannelFromInstance+0x9c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d102      	bne.n	8002f96 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002f90:	2304      	movs	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e016      	b.n	8002fc4 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <DFSDM_GetChannelFromInstance+0xa0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d102      	bne.n	8002fa4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002f9e:	2305      	movs	r3, #5
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	e00f      	b.n	8002fc4 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a11      	ldr	r2, [pc, #68]	; (8002fec <DFSDM_GetChannelFromInstance+0xa4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d102      	bne.n	8002fb2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002fac:	2306      	movs	r3, #6
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e008      	b.n	8002fc4 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <DFSDM_GetChannelFromInstance+0xa8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d102      	bne.n	8002fc0 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8002fba:	2307      	movs	r3, #7
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e001      	b.n	8002fc4 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40016000 	.word	0x40016000
 8002fd8:	40016020 	.word	0x40016020
 8002fdc:	40016040 	.word	0x40016040
 8002fe0:	40016060 	.word	0x40016060
 8002fe4:	40016080 	.word	0x40016080
 8002fe8:	400160a0 	.word	0x400160a0
 8002fec:	400160c0 	.word	0x400160c0
 8002ff0:	400160e0 	.word	0x400160e0

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003002:	e17f      	b.n	8003304 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	4013      	ands	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8171 	beq.w	80032fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x38>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b12      	cmp	r3, #18
 800302a:	d123      	bne.n	8003074 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	08da      	lsrs	r2, r3, #3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3208      	adds	r2, #8
 8003034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	6939      	ldr	r1, [r7, #16]
 8003070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0203 	and.w	r2, r3, #3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d00b      	beq.n	80030c8 <HAL_GPIO_Init+0xd4>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d007      	beq.n	80030c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030bc:	2b11      	cmp	r3, #17
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	2201      	movs	r2, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0201 	and.w	r2, r3, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d118      	bne.n	8003168 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800313c:	2201      	movs	r2, #1
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	08db      	lsrs	r3, r3, #3
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	2203      	movs	r2, #3
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80ac 	beq.w	80032fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a6:	4b5e      	ldr	r3, [pc, #376]	; (8003320 <HAL_GPIO_Init+0x32c>)
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	4a5d      	ldr	r2, [pc, #372]	; (8003320 <HAL_GPIO_Init+0x32c>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6613      	str	r3, [r2, #96]	; 0x60
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <HAL_GPIO_Init+0x32c>)
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031be:	4a59      	ldr	r2, [pc, #356]	; (8003324 <HAL_GPIO_Init+0x330>)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	220f      	movs	r2, #15
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x242>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4e      	ldr	r2, [pc, #312]	; (8003328 <HAL_GPIO_Init+0x334>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x23e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4d      	ldr	r2, [pc, #308]	; (800332c <HAL_GPIO_Init+0x338>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x23a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4c      	ldr	r2, [pc, #304]	; (8003330 <HAL_GPIO_Init+0x33c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x236>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_GPIO_Init+0x340>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x232>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4a      	ldr	r2, [pc, #296]	; (8003338 <HAL_GPIO_Init+0x344>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x22e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_GPIO_Init+0x348>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x22a>
 800321a:	2306      	movs	r3, #6
 800321c:	e00c      	b.n	8003238 <HAL_GPIO_Init+0x244>
 800321e:	2307      	movs	r3, #7
 8003220:	e00a      	b.n	8003238 <HAL_GPIO_Init+0x244>
 8003222:	2305      	movs	r3, #5
 8003224:	e008      	b.n	8003238 <HAL_GPIO_Init+0x244>
 8003226:	2304      	movs	r3, #4
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x244>
 800322a:	2303      	movs	r3, #3
 800322c:	e004      	b.n	8003238 <HAL_GPIO_Init+0x244>
 800322e:	2302      	movs	r3, #2
 8003230:	e002      	b.n	8003238 <HAL_GPIO_Init+0x244>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_GPIO_Init+0x244>
 8003236:	2300      	movs	r3, #0
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	f002 0203 	and.w	r2, r2, #3
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	4093      	lsls	r3, r2
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003248:	4936      	ldr	r1, [pc, #216]	; (8003324 <HAL_GPIO_Init+0x330>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3302      	adds	r3, #2
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_GPIO_Init+0x34c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800327a:	4a31      	ldr	r2, [pc, #196]	; (8003340 <HAL_GPIO_Init+0x34c>)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003280:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_GPIO_Init+0x34c>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <HAL_GPIO_Init+0x34c>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032aa:	4b25      	ldr	r3, [pc, #148]	; (8003340 <HAL_GPIO_Init+0x34c>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032ce:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <HAL_GPIO_Init+0x34c>)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_GPIO_Init+0x34c>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	43db      	mvns	r3, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032f8:	4a11      	ldr	r2, [pc, #68]	; (8003340 <HAL_GPIO_Init+0x34c>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	3301      	adds	r3, #1
 8003302:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	f47f ae78 	bne.w	8003004 <HAL_GPIO_Init+0x10>
  }
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	48000400 	.word	0x48000400
 800332c:	48000800 	.word	0x48000800
 8003330:	48000c00 	.word	0x48000c00
 8003334:	48001000 	.word	0x48001000
 8003338:	48001400 	.word	0x48001400
 800333c:	48001800 	.word	0x48001800
 8003340:	40010400 	.word	0x40010400

08003344 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003352:	e0cd      	b.n	80034f0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003354:	2201      	movs	r2, #1
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80c0 	beq.w	80034ea <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800336a:	4a68      	ldr	r2, [pc, #416]	; (800350c <HAL_GPIO_DeInit+0x1c8>)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3302      	adds	r3, #2
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	220f      	movs	r2, #15
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003392:	d025      	beq.n	80033e0 <HAL_GPIO_DeInit+0x9c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a5e      	ldr	r2, [pc, #376]	; (8003510 <HAL_GPIO_DeInit+0x1cc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d01f      	beq.n	80033dc <HAL_GPIO_DeInit+0x98>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a5d      	ldr	r2, [pc, #372]	; (8003514 <HAL_GPIO_DeInit+0x1d0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d019      	beq.n	80033d8 <HAL_GPIO_DeInit+0x94>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a5c      	ldr	r2, [pc, #368]	; (8003518 <HAL_GPIO_DeInit+0x1d4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d013      	beq.n	80033d4 <HAL_GPIO_DeInit+0x90>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a5b      	ldr	r2, [pc, #364]	; (800351c <HAL_GPIO_DeInit+0x1d8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00d      	beq.n	80033d0 <HAL_GPIO_DeInit+0x8c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a5a      	ldr	r2, [pc, #360]	; (8003520 <HAL_GPIO_DeInit+0x1dc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <HAL_GPIO_DeInit+0x88>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a59      	ldr	r2, [pc, #356]	; (8003524 <HAL_GPIO_DeInit+0x1e0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d101      	bne.n	80033c8 <HAL_GPIO_DeInit+0x84>
 80033c4:	2306      	movs	r3, #6
 80033c6:	e00c      	b.n	80033e2 <HAL_GPIO_DeInit+0x9e>
 80033c8:	2307      	movs	r3, #7
 80033ca:	e00a      	b.n	80033e2 <HAL_GPIO_DeInit+0x9e>
 80033cc:	2305      	movs	r3, #5
 80033ce:	e008      	b.n	80033e2 <HAL_GPIO_DeInit+0x9e>
 80033d0:	2304      	movs	r3, #4
 80033d2:	e006      	b.n	80033e2 <HAL_GPIO_DeInit+0x9e>
 80033d4:	2303      	movs	r3, #3
 80033d6:	e004      	b.n	80033e2 <HAL_GPIO_DeInit+0x9e>
 80033d8:	2302      	movs	r3, #2
 80033da:	e002      	b.n	80033e2 <HAL_GPIO_DeInit+0x9e>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_GPIO_DeInit+0x9e>
 80033e0:	2300      	movs	r3, #0
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	f002 0203 	and.w	r2, r2, #3
 80033e8:	0092      	lsls	r2, r2, #2
 80033ea:	4093      	lsls	r3, r2
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d132      	bne.n	8003458 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80033f2:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <HAL_GPIO_DeInit+0x1e4>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	494b      	ldr	r1, [pc, #300]	; (8003528 <HAL_GPIO_DeInit+0x1e4>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003400:	4b49      	ldr	r3, [pc, #292]	; (8003528 <HAL_GPIO_DeInit+0x1e4>)
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	43db      	mvns	r3, r3
 8003408:	4947      	ldr	r1, [pc, #284]	; (8003528 <HAL_GPIO_DeInit+0x1e4>)
 800340a:	4013      	ands	r3, r2
 800340c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800340e:	4b46      	ldr	r3, [pc, #280]	; (8003528 <HAL_GPIO_DeInit+0x1e4>)
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	43db      	mvns	r3, r3
 8003416:	4944      	ldr	r1, [pc, #272]	; (8003528 <HAL_GPIO_DeInit+0x1e4>)
 8003418:	4013      	ands	r3, r2
 800341a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800341c:	4b42      	ldr	r3, [pc, #264]	; (8003528 <HAL_GPIO_DeInit+0x1e4>)
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	4940      	ldr	r1, [pc, #256]	; (8003528 <HAL_GPIO_DeInit+0x1e4>)
 8003426:	4013      	ands	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800343a:	4a34      	ldr	r2, [pc, #208]	; (800350c <HAL_GPIO_DeInit+0x1c8>)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	3302      	adds	r3, #2
 8003442:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43da      	mvns	r2, r3
 800344a:	4830      	ldr	r0, [pc, #192]	; (800350c <HAL_GPIO_DeInit+0x1c8>)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	400a      	ands	r2, r1
 8003452:	3302      	adds	r3, #2
 8003454:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	2103      	movs	r1, #3
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	08da      	lsrs	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3208      	adds	r2, #8
 8003474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	220f      	movs	r2, #15
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	08d2      	lsrs	r2, r2, #3
 800348c:	4019      	ands	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2103      	movs	r1, #3
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	401a      	ands	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	2101      	movs	r1, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	401a      	ands	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	2103      	movs	r1, #3
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	401a      	ands	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	2101      	movs	r1, #1
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	401a      	ands	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f47f af2b 	bne.w	8003354 <HAL_GPIO_DeInit+0x10>
  }
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	48000400 	.word	0x48000400
 8003514:	48000800 	.word	0x48000800
 8003518:	48000c00 	.word	0x48000c00
 800351c:	48001000 	.word	0x48001000
 8003520:	48001400 	.word	0x48001400
 8003524:	48001800 	.word	0x48001800
 8003528:	40010400 	.word	0x40010400

0800352c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
 8003538:	4613      	mov	r3, r2
 800353a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800353c:	787b      	ldrb	r3, [r7, #1]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003548:	e002      	b.n	8003550 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	4013      	ands	r3, r2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003572:	4a05      	ldr	r2, [pc, #20]	; (8003588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f806 	bl	800358c <HAL_GPIO_EXTI_Callback>
  }
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40010400 	.word	0x40010400

0800358c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e081      	b.n	80036b8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fe fc8d 	bl	8001ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2224      	movs	r2, #36	; 0x24
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003602:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	e006      	b.n	800362a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003628:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d104      	bne.n	800363c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800363a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	ea42 0103 	orr.w	r1, r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	021a      	lsls	r2, r3, #8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69d9      	ldr	r1, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1a      	ldr	r2, [r3, #32]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e021      	b.n	8003716 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2224      	movs	r2, #36	; 0x24
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fe fc40 	bl	8001f70 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	4608      	mov	r0, r1
 800372a:	4611      	mov	r1, r2
 800372c:	461a      	mov	r2, r3
 800372e:	4603      	mov	r3, r0
 8003730:	817b      	strh	r3, [r7, #10]
 8003732:	460b      	mov	r3, r1
 8003734:	813b      	strh	r3, [r7, #8]
 8003736:	4613      	mov	r3, r2
 8003738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	f040 80f9 	bne.w	800393a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_I2C_Mem_Write+0x34>
 800374e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0ed      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_I2C_Mem_Write+0x4e>
 800376a:	2302      	movs	r3, #2
 800376c:	e0e6      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003776:	f7ff fa17 	bl	8002ba8 <HAL_GetTick>
 800377a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	2319      	movs	r3, #25
 8003782:	2201      	movs	r2, #1
 8003784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fac3 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0d1      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2221      	movs	r2, #33	; 0x21
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c0:	88f8      	ldrh	r0, [r7, #6]
 80037c2:	893a      	ldrh	r2, [r7, #8]
 80037c4:	8979      	ldrh	r1, [r7, #10]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	4603      	mov	r3, r0
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f9d3 	bl	8003b7c <I2C_RequestMemoryWrite>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0a9      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2bff      	cmp	r3, #255	; 0xff
 80037f0:	d90e      	bls.n	8003810 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	22ff      	movs	r2, #255	; 0xff
 80037f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	2300      	movs	r3, #0
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fba5 	bl	8003f58 <I2C_TransferConfig>
 800380e:	e00f      	b.n	8003830 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	b2da      	uxtb	r2, r3
 8003820:	8979      	ldrh	r1, [r7, #10]
 8003822:	2300      	movs	r3, #0
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fb94 	bl	8003f58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 faad 	bl	8003d94 <I2C_WaitOnTXISFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e07b      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d034      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x1c8>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d130      	bne.n	80038e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fa3f 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e04d      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2bff      	cmp	r3, #255	; 0xff
 80038a8:	d90e      	bls.n	80038c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	8979      	ldrh	r1, [r7, #10]
 80038b8:	2300      	movs	r3, #0
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 fb49 	bl	8003f58 <I2C_TransferConfig>
 80038c6:	e00f      	b.n	80038e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	8979      	ldrh	r1, [r7, #10]
 80038da:	2300      	movs	r3, #0
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fb38 	bl	8003f58 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d19e      	bne.n	8003830 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fa8c 	bl	8003e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e01a      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2220      	movs	r2, #32
 800390c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_I2C_Mem_Write+0x224>)
 800391a:	400b      	ands	r3, r1
 800391c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e000      	b.n	800393c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	fe00e800 	.word	0xfe00e800

08003948 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b20      	cmp	r3, #32
 800396c:	f040 80fd 	bne.w	8003b6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_I2C_Mem_Read+0x34>
 8003976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003982:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0f1      	b.n	8003b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_I2C_Mem_Read+0x4e>
 8003992:	2302      	movs	r3, #2
 8003994:	e0ea      	b.n	8003b6c <HAL_I2C_Mem_Read+0x224>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800399e:	f7ff f903 	bl	8002ba8 <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2319      	movs	r3, #25
 80039aa:	2201      	movs	r2, #1
 80039ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f9af 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0d5      	b.n	8003b6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2222      	movs	r2, #34	; 0x22
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039e8:	88f8      	ldrh	r0, [r7, #6]
 80039ea:	893a      	ldrh	r2, [r7, #8]
 80039ec:	8979      	ldrh	r1, [r7, #10]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4603      	mov	r3, r0
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f913 	bl	8003c24 <I2C_RequestMemoryRead>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0ad      	b.n	8003b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2bff      	cmp	r3, #255	; 0xff
 8003a18:	d90e      	bls.n	8003a38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	22ff      	movs	r2, #255	; 0xff
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	8979      	ldrh	r1, [r7, #10]
 8003a28:	4b52      	ldr	r3, [pc, #328]	; (8003b74 <HAL_I2C_Mem_Read+0x22c>)
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fa91 	bl	8003f58 <I2C_TransferConfig>
 8003a36:	e00f      	b.n	8003a58 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	8979      	ldrh	r1, [r7, #10]
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_I2C_Mem_Read+0x22c>)
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fa80 	bl	8003f58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2104      	movs	r1, #4
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f956 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e07c      	b.n	8003b6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d034      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x1d0>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d130      	bne.n	8003b18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	2200      	movs	r2, #0
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f927 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e04d      	b.n	8003b6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2bff      	cmp	r3, #255	; 0xff
 8003ad8:	d90e      	bls.n	8003af8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	22ff      	movs	r2, #255	; 0xff
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	8979      	ldrh	r1, [r7, #10]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fa31 	bl	8003f58 <I2C_TransferConfig>
 8003af6:	e00f      	b.n	8003b18 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	8979      	ldrh	r1, [r7, #10]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fa20 	bl	8003f58 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d19a      	bne.n	8003a58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f974 	bl	8003e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e01a      	b.n	8003b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_I2C_Mem_Read+0x230>)
 8003b4a:	400b      	ands	r3, r1
 8003b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	80002400 	.word	0x80002400
 8003b78:	fe00e800 	.word	0xfe00e800

08003b7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	817b      	strh	r3, [r7, #10]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	813b      	strh	r3, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	8979      	ldrh	r1, [r7, #10]
 8003b9c:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <I2C_RequestMemoryWrite+0xa4>)
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f9d7 	bl	8003f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	69b9      	ldr	r1, [r7, #24]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f8f0 	bl	8003d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e02c      	b.n	8003c18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d105      	bne.n	8003bd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bc4:	893b      	ldrh	r3, [r7, #8]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28
 8003bce:	e015      	b.n	8003bfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bd0:	893b      	ldrh	r3, [r7, #8]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	69b9      	ldr	r1, [r7, #24]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f8d6 	bl	8003d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e012      	b.n	8003c18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf2:	893b      	ldrh	r3, [r7, #8]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2200      	movs	r2, #0
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f884 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	80002000 	.word	0x80002000

08003c24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	4603      	mov	r3, r0
 8003c34:	817b      	strh	r3, [r7, #10]
 8003c36:	460b      	mov	r3, r1
 8003c38:	813b      	strh	r3, [r7, #8]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	8979      	ldrh	r1, [r7, #10]
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <I2C_RequestMemoryRead+0xa4>)
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f984 	bl	8003f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	69b9      	ldr	r1, [r7, #24]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f89d 	bl	8003d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e02c      	b.n	8003cbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d105      	bne.n	8003c76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c6a:	893b      	ldrh	r3, [r7, #8]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
 8003c74:	e015      	b.n	8003ca2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	69b9      	ldr	r1, [r7, #24]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f883 	bl	8003d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e012      	b.n	8003cbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c98:	893b      	ldrh	r3, [r7, #8]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2140      	movs	r1, #64	; 0x40
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f831 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	80002000 	.word	0x80002000

08003ccc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d103      	bne.n	8003cea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d007      	beq.n	8003d08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	619a      	str	r2, [r3, #24]
  }
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d24:	e022      	b.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d01e      	beq.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fe ff3b 	bl	8002ba8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d113      	bne.n	8003d6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e00f      	b.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d0cd      	beq.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003da0:	e02c      	b.n	8003dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f870 	bl	8003e8c <I2C_IsAcknowledgeFailed>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e02a      	b.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d01e      	beq.n	8003dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbe:	f7fe fef3 	bl	8002ba8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d113      	bne.n	8003dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e007      	b.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d1cb      	bne.n	8003da2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e20:	e028      	b.n	8003e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f830 	bl	8003e8c <I2C_IsAcknowledgeFailed>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e026      	b.n	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e36:	f7fe feb7 	bl	8002ba8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d113      	bne.n	8003e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e007      	b.n	8003e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d1cf      	bne.n	8003e22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d151      	bne.n	8003f4a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea6:	e022      	b.n	8003eee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d01e      	beq.n	8003eee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb0:	f7fe fe7a 	bl	8002ba8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d302      	bcc.n	8003ec6 <I2C_IsAcknowledgeFailed+0x3a>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d113      	bne.n	8003eee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02e      	b.n	8003f4c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d1d5      	bne.n	8003ea8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff fedd 	bl	8003ccc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <I2C_IsAcknowledgeFailed+0xc8>)
 8003f1e:	400b      	ands	r3, r1
 8003f20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f043 0204 	orr.w	r2, r3, #4
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	fe00e800 	.word	0xfe00e800

08003f58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	4613      	mov	r3, r2
 8003f68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	0d5b      	lsrs	r3, r3, #21
 8003f74:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <I2C_TransferConfig+0x58>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	ea02 0103 	and.w	r1, r2, r3
 8003f82:	897b      	ldrh	r3, [r7, #10]
 8003f84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f88:	7a7b      	ldrb	r3, [r7, #9]
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	03ff63ff 	.word	0x03ff63ff

08003fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d138      	bne.n	800403c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e032      	b.n	800403e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0201 	bic.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800403c:	2302      	movs	r3, #2
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	d139      	bne.n	80040d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800406a:	2302      	movs	r3, #2
 800406c:	e033      	b.n	80040d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2224      	movs	r2, #36	; 0x24
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800409c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	e000      	b.n	80040d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e4:	b08f      	sub	sp, #60	; 0x3c
 80040e6:	af0a      	add	r7, sp, #40	; 0x28
 80040e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e116      	b.n	8004322 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe f84a 	bl	80021a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2203      	movs	r2, #3
 8004118:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f002 fda5 	bl	8006c82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	687e      	ldr	r6, [r7, #4]
 8004140:	466d      	mov	r5, sp
 8004142:	f106 0410 	add.w	r4, r6, #16
 8004146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800414a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800414c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800414e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004152:	e885 0003 	stmia.w	r5, {r0, r1}
 8004156:	1d33      	adds	r3, r6, #4
 8004158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800415a:	6838      	ldr	r0, [r7, #0]
 800415c:	f002 fd3f 	bl	8006bde <USB_CoreInit>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e0d7      	b.n	8004322 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f002 fd93 	bl	8006ca4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	e04a      	b.n	800421a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004184:	7bfa      	ldrb	r2, [r7, #15]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	333d      	adds	r3, #61	; 0x3d
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004198:	7bfa      	ldrb	r2, [r7, #15]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	333c      	adds	r3, #60	; 0x3c
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041ac:	7bfa      	ldrb	r2, [r7, #15]
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	b298      	uxth	r0, r3
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	3342      	adds	r3, #66	; 0x42
 80041c0:	4602      	mov	r2, r0
 80041c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041c4:	7bfa      	ldrb	r2, [r7, #15]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	333f      	adds	r3, #63	; 0x3f
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041d8:	7bfa      	ldrb	r2, [r7, #15]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	3344      	adds	r3, #68	; 0x44
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3348      	adds	r3, #72	; 0x48
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	3350      	adds	r3, #80	; 0x50
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	3301      	adds	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d3af      	bcc.n	8004184 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e044      	b.n	80042b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800422a:	7bfa      	ldrb	r2, [r7, #15]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004282:	7bfa      	ldrb	r2, [r7, #15]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	3301      	adds	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d3b5      	bcc.n	800422a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	687e      	ldr	r6, [r7, #4]
 80042c6:	466d      	mov	r5, sp
 80042c8:	f106 0410 	add.w	r4, r6, #16
 80042cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80042dc:	1d33      	adds	r3, r6, #4
 80042de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e0:	6838      	ldr	r0, [r7, #0]
 80042e2:	f002 fd09 	bl	8006cf8 <USB_DevInit>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e014      	b.n	8004322 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b01      	cmp	r3, #1
 800430e:	d102      	bne.n	8004316 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f80a 	bl	800432a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f002 fe8f 	bl	800703e <USB_DevDisconnect>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800432a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435c:	f043 0303 	orr.w	r3, r3, #3
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a04      	ldr	r2, [pc, #16]	; (8004390 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40007000 	.word	0x40007000

08004394 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <HAL_PWREx_GetVoltageRange+0x18>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40007000 	.word	0x40007000

080043b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043be:	d130      	bne.n	8004422 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c0:	4b23      	ldr	r3, [pc, #140]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043cc:	d038      	beq.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2232      	movs	r2, #50	; 0x32
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f4:	e002      	b.n	80043fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004408:	d102      	bne.n	8004410 <HAL_PWREx_ControlVoltageScaling+0x60>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f2      	bne.n	80043f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441c:	d110      	bne.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e00f      	b.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004422:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442e:	d007      	beq.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004438:	4a05      	ldr	r2, [pc, #20]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800443e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40007000 	.word	0x40007000
 8004454:	200000bc 	.word	0x200000bc
 8004458:	431bde83 	.word	0x431bde83

0800445c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800446a:	6053      	str	r3, [r2, #4]
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40007000 	.word	0x40007000

0800447c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af02      	add	r7, sp, #8
 8004482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004484:	f7fe fb90 	bl	8002ba8 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e06f      	b.n	8004574 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_QSPI_Init+0x28>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e067      	b.n	8004574 <HAL_QSPI_Init+0xf8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fd fd73 	bl	8001fac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80044c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f858 	bl	8004580 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	3b01      	subs	r3, #1
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	2120      	movs	r1, #32
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f850 	bl	800459c <QSPI_WaitFlagStateUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004500:	7afb      	ldrb	r3, [r7, #11]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d131      	bne.n	800456a <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6852      	ldr	r2, [r2, #4]
 8004518:	0611      	lsls	r1, r2, #24
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68d2      	ldr	r2, [r2, #12]
 800451e:	4311      	orrs	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	430b      	orrs	r3, r1
 8004526:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_QSPI_Init+0x100>)
 8004530:	4013      	ands	r3, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6912      	ldr	r2, [r2, #16]
 8004536:	0411      	lsls	r1, r2, #16
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6952      	ldr	r2, [r2, #20]
 800453c:	4311      	orrs	r1, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6992      	ldr	r2, [r2, #24]
 8004542:	4311      	orrs	r1, r2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	430b      	orrs	r3, r1
 800454a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004572:	7afb      	ldrb	r3, [r7, #11]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	ffe0f8fe 	.word	0xffe0f8fe

08004580 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045ac:	e01a      	b.n	80045e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d016      	beq.n	80045e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b6:	f7fe faf7 	bl	8002ba8 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2204      	movs	r2, #4
 80045d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e00e      	b.n	8004602 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d1d6      	bne.n	80045ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e39d      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800461e:	4ba4      	ldr	r3, [pc, #656]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004628:	4ba1      	ldr	r3, [pc, #644]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 80e1 	beq.w	8004802 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_RCC_OscConfig+0x4a>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b0c      	cmp	r3, #12
 800464a:	f040 8088 	bne.w	800475e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b01      	cmp	r3, #1
 8004652:	f040 8084 	bne.w	800475e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004656:	4b96      	ldr	r3, [pc, #600]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_RCC_OscConfig+0x62>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e375      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1a      	ldr	r2, [r3, #32]
 8004672:	4b8f      	ldr	r3, [pc, #572]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d004      	beq.n	8004688 <HAL_RCC_OscConfig+0x7c>
 800467e:	4b8c      	ldr	r3, [pc, #560]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004686:	e005      	b.n	8004694 <HAL_RCC_OscConfig+0x88>
 8004688:	4b89      	ldr	r3, [pc, #548]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004694:	4293      	cmp	r3, r2
 8004696:	d223      	bcs.n	80046e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fd3b 	bl	8005118 <RCC_SetFlashLatencyFromMSIRange>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e356      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ac:	4b80      	ldr	r3, [pc, #512]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a7f      	ldr	r2, [pc, #508]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046b2:	f043 0308 	orr.w	r3, r3, #8
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4b7d      	ldr	r3, [pc, #500]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	497a      	ldr	r1, [pc, #488]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046ca:	4b79      	ldr	r3, [pc, #484]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	4975      	ldr	r1, [pc, #468]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
 80046de:	e022      	b.n	8004726 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046e0:	4b73      	ldr	r3, [pc, #460]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a72      	ldr	r2, [pc, #456]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046e6:	f043 0308 	orr.w	r3, r3, #8
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b70      	ldr	r3, [pc, #448]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	496d      	ldr	r1, [pc, #436]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046fe:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	4968      	ldr	r1, [pc, #416]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fcfe 	bl	8005118 <RCC_SetFlashLatencyFromMSIRange>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e319      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004726:	f000 fc03 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 800472a:	4601      	mov	r1, r0
 800472c:	4b60      	ldr	r3, [pc, #384]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	4a5f      	ldr	r2, [pc, #380]	; (80048b4 <HAL_RCC_OscConfig+0x2a8>)
 8004738:	5cd3      	ldrb	r3, [r2, r3]
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	fa21 f303 	lsr.w	r3, r1, r3
 8004742:	4a5d      	ldr	r2, [pc, #372]	; (80048b8 <HAL_RCC_OscConfig+0x2ac>)
 8004744:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004746:	4b5d      	ldr	r3, [pc, #372]	; (80048bc <HAL_RCC_OscConfig+0x2b0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fd98 	bl	8002280 <HAL_InitTick>
 8004750:	4603      	mov	r3, r0
 8004752:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d052      	beq.n	8004800 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	e2fd      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d032      	beq.n	80047cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004766:	4b52      	ldr	r3, [pc, #328]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a51      	ldr	r2, [pc, #324]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004772:	f7fe fa19 	bl	8002ba8 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800477a:	f7fe fa15 	bl	8002ba8 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e2e6      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800478c:	4b48      	ldr	r3, [pc, #288]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004798:	4b45      	ldr	r3, [pc, #276]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a44      	ldr	r2, [pc, #272]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b42      	ldr	r3, [pc, #264]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	493f      	ldr	r1, [pc, #252]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b6:	4b3e      	ldr	r3, [pc, #248]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	493a      	ldr	r1, [pc, #232]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	604b      	str	r3, [r1, #4]
 80047ca:	e01a      	b.n	8004802 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80047cc:	4b38      	ldr	r3, [pc, #224]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a37      	ldr	r2, [pc, #220]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047d8:	f7fe f9e6 	bl	8002ba8 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047e0:	f7fe f9e2 	bl	8002ba8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e2b3      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047f2:	4b2f      	ldr	r3, [pc, #188]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x1d4>
 80047fe:	e000      	b.n	8004802 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004800:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d074      	beq.n	80048f8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d005      	beq.n	8004820 <HAL_RCC_OscConfig+0x214>
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d10e      	bne.n	8004838 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d10b      	bne.n	8004838 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d064      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2ea>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d160      	bne.n	80048f6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e290      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d106      	bne.n	8004850 <HAL_RCC_OscConfig+0x244>
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e01d      	b.n	800488c <HAL_RCC_OscConfig+0x280>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0x268>
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a11      	ldr	r2, [pc, #68]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0x280>
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a0d      	ldr	r2, [pc, #52]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <HAL_RCC_OscConfig+0x2a4>)
 8004886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800488a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01c      	beq.n	80048ce <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fe f988 	bl	8002ba8 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489a:	e011      	b.n	80048c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7fe f984 	bl	8002ba8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d90a      	bls.n	80048c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e255      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	0800c33c 	.word	0x0800c33c
 80048b8:	200000bc 	.word	0x200000bc
 80048bc:	200000dc 	.word	0x200000dc
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048c0:	4bae      	ldr	r3, [pc, #696]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0e7      	beq.n	800489c <HAL_RCC_OscConfig+0x290>
 80048cc:	e014      	b.n	80048f8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fe f96b 	bl	8002ba8 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048d6:	f7fe f967 	bl	8002ba8 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b64      	cmp	r3, #100	; 0x64
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e238      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e8:	4ba4      	ldr	r3, [pc, #656]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <HAL_RCC_OscConfig+0x2ca>
 80048f4:	e000      	b.n	80048f8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d060      	beq.n	80049c6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b04      	cmp	r3, #4
 8004908:	d005      	beq.n	8004916 <HAL_RCC_OscConfig+0x30a>
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b0c      	cmp	r3, #12
 800490e:	d119      	bne.n	8004944 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d116      	bne.n	8004944 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004916:	4b99      	ldr	r3, [pc, #612]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_RCC_OscConfig+0x322>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e215      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492e:	4b93      	ldr	r3, [pc, #588]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	061b      	lsls	r3, r3, #24
 800493c:	498f      	ldr	r1, [pc, #572]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004942:	e040      	b.n	80049c6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d023      	beq.n	8004994 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800494c:	4b8b      	ldr	r3, [pc, #556]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a8a      	ldr	r2, [pc, #552]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fe f926 	bl	8002ba8 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004960:	f7fe f922 	bl	8002ba8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e1f3      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004972:	4b82      	ldr	r3, [pc, #520]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800497e:	4b7f      	ldr	r3, [pc, #508]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	497b      	ldr	r1, [pc, #492]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
 8004992:	e018      	b.n	80049c6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004994:	4b79      	ldr	r3, [pc, #484]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a78      	ldr	r2, [pc, #480]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 800499a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800499e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe f902 	bl	8002ba8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a8:	f7fe f8fe 	bl	8002ba8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1cf      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ba:	4b70      	ldr	r3, [pc, #448]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d03c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049da:	4b68      	ldr	r3, [pc, #416]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 80049dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e0:	4a66      	ldr	r2, [pc, #408]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fe f8dd 	bl	8002ba8 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f2:	f7fe f8d9 	bl	8002ba8 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e1aa      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a04:	4b5d      	ldr	r3, [pc, #372]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0ef      	beq.n	80049f2 <HAL_RCC_OscConfig+0x3e6>
 8004a12:	e01b      	b.n	8004a4c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a14:	4b59      	ldr	r3, [pc, #356]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1a:	4a58      	ldr	r2, [pc, #352]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fe f8c0 	bl	8002ba8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fe f8bc 	bl	8002ba8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e18d      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a3e:	4b4f      	ldr	r3, [pc, #316]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ef      	bne.n	8004a2c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80a5 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a5e:	4b47      	ldr	r3, [pc, #284]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	4b44      	ldr	r3, [pc, #272]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	4a43      	ldr	r2, [pc, #268]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6593      	str	r3, [r2, #88]	; 0x58
 8004a76:	4b41      	ldr	r3, [pc, #260]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a82:	2301      	movs	r3, #1
 8004a84:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a86:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <HAL_RCC_OscConfig+0x574>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d118      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <HAL_RCC_OscConfig+0x574>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a3a      	ldr	r2, [pc, #232]	; (8004b80 <HAL_RCC_OscConfig+0x574>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a9e:	f7fe f883 	bl	8002ba8 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa6:	f7fe f87f 	bl	8002ba8 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e150      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab8:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <HAL_RCC_OscConfig+0x574>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_RCC_OscConfig+0x4d2>
 8004acc:	4b2b      	ldr	r3, [pc, #172]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	4a2a      	ldr	r2, [pc, #168]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004adc:	e024      	b.n	8004b28 <HAL_RCC_OscConfig+0x51c>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d110      	bne.n	8004b08 <HAL_RCC_OscConfig+0x4fc>
 8004ae6:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004aee:	f043 0304 	orr.w	r3, r3, #4
 8004af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b06:	e00f      	b.n	8004b28 <HAL_RCC_OscConfig+0x51c>
 8004b08:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d016      	beq.n	8004b5e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b30:	f7fe f83a 	bl	8002ba8 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b38:	f7fe f836 	bl	8002ba8 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e105      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCC_OscConfig+0x570>)
 8004b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0ed      	beq.n	8004b38 <HAL_RCC_OscConfig+0x52c>
 8004b5c:	e019      	b.n	8004b92 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5e:	f7fe f823 	bl	8002ba8 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b64:	e00e      	b.n	8004b84 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fe f81f 	bl	8002ba8 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d905      	bls.n	8004b84 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e0ee      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b84:	4b77      	ldr	r3, [pc, #476]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e9      	bne.n	8004b66 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b92:	7ffb      	ldrb	r3, [r7, #31]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d105      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b98:	4b72      	ldr	r3, [pc, #456]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9c:	4a71      	ldr	r2, [pc, #452]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80d5 	beq.w	8004d58 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	f000 808e 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d15b      	bne.n	8004c76 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a68      	ldr	r2, [pc, #416]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fd ffed 	bl	8002ba8 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fd ffe9 	bl	8002ba8 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e0ba      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be4:	4b5f      	ldr	r3, [pc, #380]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf0:	4b5c      	ldr	r3, [pc, #368]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x75c>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c00:	3a01      	subs	r2, #1
 8004c02:	0112      	lsls	r2, r2, #4
 8004c04:	4311      	orrs	r1, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c0a:	0212      	lsls	r2, r2, #8
 8004c0c:	4311      	orrs	r1, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c12:	0852      	lsrs	r2, r2, #1
 8004c14:	3a01      	subs	r2, #1
 8004c16:	0552      	lsls	r2, r2, #21
 8004c18:	4311      	orrs	r1, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c1e:	0852      	lsrs	r2, r2, #1
 8004c20:	3a01      	subs	r2, #1
 8004c22:	0652      	lsls	r2, r2, #25
 8004c24:	4311      	orrs	r1, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c2a:	0912      	lsrs	r2, r2, #4
 8004c2c:	0452      	lsls	r2, r2, #17
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	494c      	ldr	r1, [pc, #304]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c36:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a4a      	ldr	r2, [pc, #296]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c40:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c42:	4b48      	ldr	r3, [pc, #288]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4a47      	ldr	r2, [pc, #284]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4e:	f7fd ffab 	bl	8002ba8 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c56:	f7fd ffa7 	bl	8002ba8 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e078      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c68:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x64a>
 8004c74:	e070      	b.n	8004d58 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c76:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c82:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d105      	bne.n	8004c9a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c8e:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4a34      	ldr	r2, [pc, #208]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c94:	f023 0303 	bic.w	r3, r3, #3
 8004c98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c9a:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4a31      	ldr	r2, [pc, #196]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004ca0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004caa:	f7fd ff7d 	bl	8002ba8 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb2:	f7fd ff79 	bl	8002ba8 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e04a      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f0      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x6a6>
 8004cd0:	e042      	b.n	8004d58 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e03d      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004cde:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_RCC_OscConfig+0x758>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f003 0203 	and.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d130      	bne.n	8004d54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d127      	bne.n	8004d54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d11f      	bne.n	8004d54 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d1e:	2a07      	cmp	r2, #7
 8004d20:	bf14      	ite	ne
 8004d22:	2201      	movne	r2, #1
 8004d24:	2200      	moveq	r2, #0
 8004d26:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d113      	bne.n	8004d54 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d109      	bne.n	8004d54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000
 8004d68:	f99d808c 	.word	0xf99d808c

08004d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0c8      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d80:	4b66      	ldr	r3, [pc, #408]	; (8004f1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d910      	bls.n	8004db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b63      	ldr	r3, [pc, #396]	; (8004f1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 0207 	bic.w	r2, r3, #7
 8004d96:	4961      	ldr	r1, [pc, #388]	; (8004f1c <HAL_RCC_ClockConfig+0x1b0>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b5f      	ldr	r3, [pc, #380]	; (8004f1c <HAL_RCC_ClockConfig+0x1b0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0b0      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d04c      	beq.n	8004e56 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc4:	4b56      	ldr	r3, [pc, #344]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d121      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e09e      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d107      	bne.n	8004dec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ddc:	4b50      	ldr	r3, [pc, #320]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d115      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e092      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004df4:	4b4a      	ldr	r3, [pc, #296]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e086      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e04:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e07e      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e14:	4b42      	ldr	r3, [pc, #264]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 0203 	bic.w	r2, r3, #3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	493f      	ldr	r1, [pc, #252]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e26:	f7fd febf 	bl	8002ba8 <HAL_GetTick>
 8004e2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2c:	e00a      	b.n	8004e44 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2e:	f7fd febb 	bl	8002ba8 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e066      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e44:	4b36      	ldr	r3, [pc, #216]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 020c 	and.w	r2, r3, #12
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d1eb      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e62:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	492c      	ldr	r1, [pc, #176]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e74:	4b29      	ldr	r3, [pc, #164]	; (8004f1c <HAL_RCC_ClockConfig+0x1b0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d210      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <HAL_RCC_ClockConfig+0x1b0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f023 0207 	bic.w	r2, r3, #7
 8004e8a:	4924      	ldr	r1, [pc, #144]	; (8004f1c <HAL_RCC_ClockConfig+0x1b0>)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e92:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <HAL_RCC_ClockConfig+0x1b0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e036      	b.n	8004f12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4918      	ldr	r1, [pc, #96]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4910      	ldr	r1, [pc, #64]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ee2:	f000 f825 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <HAL_RCC_ClockConfig+0x1b4>)
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	5cd3      	ldrb	r3, [r2, r3]
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	fa21 f303 	lsr.w	r3, r1, r3
 8004efe:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fd f9ba 	bl	8002280 <HAL_InitTick>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f10:	7afb      	ldrb	r3, [r7, #11]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40022000 	.word	0x40022000
 8004f20:	40021000 	.word	0x40021000
 8004f24:	0800c33c 	.word	0x0800c33c
 8004f28:	200000bc 	.word	0x200000bc
 8004f2c:	200000dc 	.word	0x200000dc

08004f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	; 0x24
 8004f34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3e:	4b3d      	ldr	r3, [pc, #244]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f48:	4b3a      	ldr	r3, [pc, #232]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0x34>
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b0c      	cmp	r3, #12
 8004f5c:	d121      	bne.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d11e      	bne.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f64:	4b33      	ldr	r3, [pc, #204]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d107      	bne.n	8004f80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f70:	4b30      	ldr	r3, [pc, #192]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	e005      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f80:	4b2c      	ldr	r3, [pc, #176]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	; (8005038 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa0:	e00a      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d102      	bne.n	8004fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fa8:	4b24      	ldr	r3, [pc, #144]	; (800503c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	e004      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fb4:	4b22      	ldr	r3, [pc, #136]	; (8005040 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d133      	bne.n	8005026 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fbe:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d002      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0xa4>
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d003      	beq.n	8004fda <HAL_RCC_GetSysClockFreq+0xaa>
 8004fd2:	e005      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004fd6:	617b      	str	r3, [r7, #20]
      break;
 8004fd8:	e005      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fda:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fdc:	617b      	str	r3, [r7, #20]
      break;
 8004fde:	e002      	b.n	8004fe6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	617b      	str	r3, [r7, #20]
      break;
 8004fe4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	0a1b      	lsrs	r3, r3, #8
 8004ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	fb02 f203 	mul.w	r2, r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <HAL_RCC_GetSysClockFreq+0x104>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	0e5b      	lsrs	r3, r3, #25
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	3301      	adds	r3, #1
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005026:	69bb      	ldr	r3, [r7, #24]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3724      	adds	r7, #36	; 0x24
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40021000 	.word	0x40021000
 8005038:	0800c354 	.word	0x0800c354
 800503c:	00f42400 	.word	0x00f42400
 8005040:	007a1200 	.word	0x007a1200

08005044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <HAL_RCC_GetHCLKFreq+0x14>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	200000bc 	.word	0x200000bc

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005060:	f7ff fff0 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005064:	4601      	mov	r1, r0
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4a04      	ldr	r2, [pc, #16]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	0800c34c 	.word	0x0800c34c

08005088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800508c:	f7ff ffda 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005090:	4601      	mov	r1, r0
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0adb      	lsrs	r3, r3, #11
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800509e:	5cd3      	ldrb	r3, [r2, r3]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	0800c34c 	.word	0x0800c34c

080050b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	220f      	movs	r2, #15
 80050c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0203 	and.w	r2, r3, #3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <HAL_RCC_GetClockConfig+0x5c>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050f6:	4b07      	ldr	r3, [pc, #28]	; (8005114 <HAL_RCC_GetClockConfig+0x60>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0207 	and.w	r2, r3, #7
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	601a      	str	r2, [r3, #0]
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40021000 	.word	0x40021000
 8005114:	40022000 	.word	0x40022000

08005118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005124:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005130:	f7ff f930 	bl	8004394 <HAL_PWREx_GetVoltageRange>
 8005134:	6178      	str	r0, [r7, #20]
 8005136:	e014      	b.n	8005162 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005138:	4b25      	ldr	r3, [pc, #148]	; (80051d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800513a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513c:	4a24      	ldr	r2, [pc, #144]	; (80051d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800513e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005142:	6593      	str	r3, [r2, #88]	; 0x58
 8005144:	4b22      	ldr	r3, [pc, #136]	; (80051d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005150:	f7ff f920 	bl	8004394 <HAL_PWREx_GetVoltageRange>
 8005154:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005156:	4b1e      	ldr	r3, [pc, #120]	; (80051d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005160:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005168:	d10b      	bne.n	8005182 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d919      	bls.n	80051a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2ba0      	cmp	r3, #160	; 0xa0
 8005174:	d902      	bls.n	800517c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005176:	2302      	movs	r3, #2
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	e013      	b.n	80051a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800517c:	2301      	movs	r3, #1
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	e010      	b.n	80051a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d902      	bls.n	800518e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005188:	2303      	movs	r3, #3
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	e00a      	b.n	80051a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b80      	cmp	r3, #128	; 0x80
 8005192:	d102      	bne.n	800519a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005194:	2302      	movs	r3, #2
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	e004      	b.n	80051a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b70      	cmp	r3, #112	; 0x70
 800519e:	d101      	bne.n	80051a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80051a0:	2301      	movs	r3, #1
 80051a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80051a4:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f023 0207 	bic.w	r2, r3, #7
 80051ac:	4909      	ldr	r1, [pc, #36]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d001      	beq.n	80051c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40022000 	.word	0x40022000

080051d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051e0:	2300      	movs	r3, #0
 80051e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051e4:	2300      	movs	r3, #0
 80051e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d03f      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051fc:	d01c      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80051fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005202:	d802      	bhi.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00e      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005208:	e01f      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800520a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800520e:	d003      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005210:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005214:	d01c      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005216:	e018      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005218:	4b85      	ldr	r3, [pc, #532]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4a84      	ldr	r2, [pc, #528]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005224:	e015      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	2100      	movs	r1, #0
 800522c:	4618      	mov	r0, r3
 800522e:	f000 fac9 	bl	80057c4 <RCCEx_PLLSAI1_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005236:	e00c      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3320      	adds	r3, #32
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fbb0 	bl	80059a4 <RCCEx_PLLSAI2_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005248:	e003      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	74fb      	strb	r3, [r7, #19]
      break;
 800524e:	e000      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005252:	7cfb      	ldrb	r3, [r7, #19]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10b      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005258:	4b75      	ldr	r3, [pc, #468]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005266:	4972      	ldr	r1, [pc, #456]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800526e:	e001      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d03f      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005288:	d01c      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800528a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800528e:	d802      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005294:	e01f      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800529a:	d003      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800529c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80052a0:	d01c      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80052a2:	e018      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052a4:	4b62      	ldr	r3, [pc, #392]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a61      	ldr	r2, [pc, #388]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052b0:	e015      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fa83 	bl	80057c4 <RCCEx_PLLSAI1_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052c2:	e00c      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3320      	adds	r3, #32
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fb6a 	bl	80059a4 <RCCEx_PLLSAI2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	74fb      	strb	r3, [r7, #19]
      break;
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80052dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052de:	7cfb      	ldrb	r3, [r7, #19]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052e4:	4b52      	ldr	r3, [pc, #328]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052f2:	494f      	ldr	r1, [pc, #316]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052fa:	e001      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80a0 	beq.w	800544e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005312:	4b47      	ldr	r3, [pc, #284]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00d      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005328:	4b41      	ldr	r3, [pc, #260]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	4a40      	ldr	r2, [pc, #256]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005332:	6593      	str	r3, [r2, #88]	; 0x58
 8005334:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005340:	2301      	movs	r3, #1
 8005342:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005344:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a3a      	ldr	r2, [pc, #232]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800534a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005350:	f7fd fc2a 	bl	8002ba8 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005356:	e009      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005358:	f7fd fc26 	bl	8002ba8 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d902      	bls.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	74fb      	strb	r3, [r7, #19]
        break;
 800536a:	e005      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800536c:	4b31      	ldr	r3, [pc, #196]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ef      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d15c      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800537e:	4b2c      	ldr	r3, [pc, #176]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005388:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01f      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	429a      	cmp	r2, r3
 800539a:	d019      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800539c:	4b24      	ldr	r3, [pc, #144]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053a8:	4b21      	ldr	r3, [pc, #132]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	4a20      	ldr	r2, [pc, #128]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053b8:	4b1d      	ldr	r3, [pc, #116]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fd fbe5 	bl	8002ba8 <HAL_GetTick>
 80053de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e0:	e00b      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fd fbe1 	bl	8002ba8 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d902      	bls.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	74fb      	strb	r3, [r7, #19]
            break;
 80053f8:	e006      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0ec      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005408:	7cfb      	ldrb	r3, [r7, #19]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10c      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800540e:	4b08      	ldr	r3, [pc, #32]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541e:	4904      	ldr	r1, [pc, #16]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005426:	e009      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	74bb      	strb	r3, [r7, #18]
 800542c:	e006      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800542e:	bf00      	nop
 8005430:	40021000 	.word	0x40021000
 8005434:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800543c:	7c7b      	ldrb	r3, [r7, #17]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d105      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005442:	4b9e      	ldr	r3, [pc, #632]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005446:	4a9d      	ldr	r2, [pc, #628]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800545a:	4b98      	ldr	r3, [pc, #608]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005460:	f023 0203 	bic.w	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	4994      	ldr	r1, [pc, #592]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800547c:	4b8f      	ldr	r3, [pc, #572]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005482:	f023 020c 	bic.w	r2, r3, #12
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548a:	498c      	ldr	r1, [pc, #560]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800549e:	4b87      	ldr	r3, [pc, #540]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	4983      	ldr	r1, [pc, #524]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054c0:	4b7e      	ldr	r3, [pc, #504]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	497b      	ldr	r1, [pc, #492]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0310 	and.w	r3, r3, #16
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054e2:	4b76      	ldr	r3, [pc, #472]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f0:	4972      	ldr	r1, [pc, #456]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005504:	4b6d      	ldr	r3, [pc, #436]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	496a      	ldr	r1, [pc, #424]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005526:	4b65      	ldr	r3, [pc, #404]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005534:	4961      	ldr	r1, [pc, #388]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005548:	4b5c      	ldr	r3, [pc, #368]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005556:	4959      	ldr	r1, [pc, #356]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800556a:	4b54      	ldr	r3, [pc, #336]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	4950      	ldr	r1, [pc, #320]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800558c:	4b4b      	ldr	r3, [pc, #300]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559a:	4948      	ldr	r1, [pc, #288]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055ae:	4b43      	ldr	r3, [pc, #268]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	493f      	ldr	r1, [pc, #252]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d028      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d0:	4b3a      	ldr	r3, [pc, #232]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055de:	4937      	ldr	r1, [pc, #220]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ee:	d106      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f0:	4b32      	ldr	r3, [pc, #200]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a31      	ldr	r2, [pc, #196]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055fa:	60d3      	str	r3, [r2, #12]
 80055fc:	e011      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005606:	d10c      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	2101      	movs	r1, #1
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f8d8 	bl	80057c4 <RCCEx_PLLSAI1_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800561e:	7cfb      	ldrb	r3, [r7, #19]
 8005620:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d028      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800562e:	4b23      	ldr	r3, [pc, #140]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	491f      	ldr	r1, [pc, #124]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800564c:	d106      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564e:	4b1b      	ldr	r3, [pc, #108]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4a1a      	ldr	r2, [pc, #104]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005658:	60d3      	str	r3, [r2, #12]
 800565a:	e011      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005664:	d10c      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3304      	adds	r3, #4
 800566a:	2101      	movs	r1, #1
 800566c:	4618      	mov	r0, r3
 800566e:	f000 f8a9 	bl	80057c4 <RCCEx_PLLSAI1_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005676:	7cfb      	ldrb	r3, [r7, #19]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800567c:	7cfb      	ldrb	r3, [r7, #19]
 800567e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02b      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800569a:	4908      	ldr	r1, [pc, #32]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800569c:	4313      	orrs	r3, r2
 800569e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056aa:	d109      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	4a02      	ldr	r2, [pc, #8]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056b6:	60d3      	str	r3, [r2, #12]
 80056b8:	e014      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	2101      	movs	r1, #1
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f877 	bl	80057c4 <RCCEx_PLLSAI1_Config>
 80056d6:	4603      	mov	r3, r0
 80056d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02f      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056f0:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fe:	4928      	ldr	r1, [pc, #160]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800570a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800570e:	d10d      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	2102      	movs	r1, #2
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f854 	bl	80057c4 <RCCEx_PLLSAI1_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d014      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005726:	7cfb      	ldrb	r3, [r7, #19]
 8005728:	74bb      	strb	r3, [r7, #18]
 800572a:	e011      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005734:	d10c      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3320      	adds	r3, #32
 800573a:	2102      	movs	r1, #2
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f931 	bl	80059a4 <RCCEx_PLLSAI2_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800574c:	7cfb      	ldrb	r3, [r7, #19]
 800574e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800576a:	490d      	ldr	r1, [pc, #52]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800577e:	4b08      	ldr	r3, [pc, #32]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005784:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800578e:	4904      	ldr	r1, [pc, #16]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005796:	7cbb      	ldrb	r3, [r7, #18]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	40021000 	.word	0x40021000

080057a4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80057ae:	f043 0304 	orr.w	r3, r3, #4
 80057b2:	6013      	str	r3, [r2, #0]
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000

080057c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057d2:	4b73      	ldr	r3, [pc, #460]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d018      	beq.n	8005810 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057de:	4b70      	ldr	r3, [pc, #448]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0203 	and.w	r2, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d10d      	bne.n	800580a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
       ||
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057f6:	4b6a      	ldr	r3, [pc, #424]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
       ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d044      	beq.n	8005894 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	73fb      	strb	r3, [r7, #15]
 800580e:	e041      	b.n	8005894 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d00c      	beq.n	8005832 <RCCEx_PLLSAI1_Config+0x6e>
 8005818:	2b03      	cmp	r3, #3
 800581a:	d013      	beq.n	8005844 <RCCEx_PLLSAI1_Config+0x80>
 800581c:	2b01      	cmp	r3, #1
 800581e:	d120      	bne.n	8005862 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005820:	4b5f      	ldr	r3, [pc, #380]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d11d      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005830:	e01a      	b.n	8005868 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005832:	4b5b      	ldr	r3, [pc, #364]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583a:	2b00      	cmp	r3, #0
 800583c:	d116      	bne.n	800586c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005842:	e013      	b.n	800586c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005844:	4b56      	ldr	r3, [pc, #344]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10f      	bne.n	8005870 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005850:	4b53      	ldr	r3, [pc, #332]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005860:	e006      	b.n	8005870 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
      break;
 8005866:	e004      	b.n	8005872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005868:	bf00      	nop
 800586a:	e002      	b.n	8005872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800586c:	bf00      	nop
 800586e:	e000      	b.n	8005872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005870:	bf00      	nop
    }

    if(status == HAL_OK)
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10d      	bne.n	8005894 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005878:	4b49      	ldr	r3, [pc, #292]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	3b01      	subs	r3, #1
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	430b      	orrs	r3, r1
 800588e:	4944      	ldr	r1, [pc, #272]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d17d      	bne.n	8005996 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800589a:	4b41      	ldr	r3, [pc, #260]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a40      	ldr	r2, [pc, #256]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a6:	f7fd f97f 	bl	8002ba8 <HAL_GetTick>
 80058aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058ac:	e009      	b.n	80058c2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ae:	f7fd f97b 	bl	8002ba8 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d902      	bls.n	80058c2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	73fb      	strb	r3, [r7, #15]
        break;
 80058c0:	e005      	b.n	80058ce <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058c2:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1ef      	bne.n	80058ae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d160      	bne.n	8005996 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d111      	bne.n	80058fe <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058da:	4b31      	ldr	r3, [pc, #196]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6892      	ldr	r2, [r2, #8]
 80058ea:	0211      	lsls	r1, r2, #8
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	68d2      	ldr	r2, [r2, #12]
 80058f0:	0912      	lsrs	r2, r2, #4
 80058f2:	0452      	lsls	r2, r2, #17
 80058f4:	430a      	orrs	r2, r1
 80058f6:	492a      	ldr	r1, [pc, #168]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	610b      	str	r3, [r1, #16]
 80058fc:	e027      	b.n	800594e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d112      	bne.n	800592a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005904:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800590c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6892      	ldr	r2, [r2, #8]
 8005914:	0211      	lsls	r1, r2, #8
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6912      	ldr	r2, [r2, #16]
 800591a:	0852      	lsrs	r2, r2, #1
 800591c:	3a01      	subs	r2, #1
 800591e:	0552      	lsls	r2, r2, #21
 8005920:	430a      	orrs	r2, r1
 8005922:	491f      	ldr	r1, [pc, #124]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005924:	4313      	orrs	r3, r2
 8005926:	610b      	str	r3, [r1, #16]
 8005928:	e011      	b.n	800594e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005932:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6892      	ldr	r2, [r2, #8]
 800593a:	0211      	lsls	r1, r2, #8
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6952      	ldr	r2, [r2, #20]
 8005940:	0852      	lsrs	r2, r2, #1
 8005942:	3a01      	subs	r2, #1
 8005944:	0652      	lsls	r2, r2, #25
 8005946:	430a      	orrs	r2, r1
 8005948:	4915      	ldr	r1, [pc, #84]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800594a:	4313      	orrs	r3, r2
 800594c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800594e:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005958:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595a:	f7fd f925 	bl	8002ba8 <HAL_GetTick>
 800595e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005960:	e009      	b.n	8005976 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005962:	f7fd f921 	bl	8002ba8 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b02      	cmp	r3, #2
 800596e:	d902      	bls.n	8005976 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	73fb      	strb	r3, [r7, #15]
          break;
 8005974:	e005      	b.n	8005982 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005976:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ef      	beq.n	8005962 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	4903      	ldr	r1, [pc, #12]	; (80059a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005996:	7bfb      	ldrb	r3, [r7, #15]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40021000 	.word	0x40021000

080059a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059b2:	4b68      	ldr	r3, [pc, #416]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059be:	4b65      	ldr	r3, [pc, #404]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0203 	and.w	r2, r3, #3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d10d      	bne.n	80059ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
       ||
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80059d6:	4b5f      	ldr	r3, [pc, #380]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	091b      	lsrs	r3, r3, #4
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
       ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d044      	beq.n	8005a74 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	73fb      	strb	r3, [r7, #15]
 80059ee:	e041      	b.n	8005a74 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d00c      	beq.n	8005a12 <RCCEx_PLLSAI2_Config+0x6e>
 80059f8:	2b03      	cmp	r3, #3
 80059fa:	d013      	beq.n	8005a24 <RCCEx_PLLSAI2_Config+0x80>
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d120      	bne.n	8005a42 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a00:	4b54      	ldr	r3, [pc, #336]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11d      	bne.n	8005a48 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a10:	e01a      	b.n	8005a48 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a12:	4b50      	ldr	r3, [pc, #320]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d116      	bne.n	8005a4c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a22:	e013      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a24:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10f      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a30:	4b48      	ldr	r3, [pc, #288]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a40:	e006      	b.n	8005a50 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
      break;
 8005a46:	e004      	b.n	8005a52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005a48:	bf00      	nop
 8005a4a:	e002      	b.n	8005a52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005a50:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10d      	bne.n	8005a74 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a58:	4b3e      	ldr	r3, [pc, #248]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6819      	ldr	r1, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	4939      	ldr	r1, [pc, #228]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d167      	bne.n	8005b4a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a7a:	4b36      	ldr	r3, [pc, #216]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a35      	ldr	r2, [pc, #212]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a86:	f7fd f88f 	bl	8002ba8 <HAL_GetTick>
 8005a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a8c:	e009      	b.n	8005aa2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a8e:	f7fd f88b 	bl	8002ba8 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d902      	bls.n	8005aa2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	73fb      	strb	r3, [r7, #15]
        break;
 8005aa0:	e005      	b.n	8005aae <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005aa2:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1ef      	bne.n	8005a8e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d14a      	bne.n	8005b4a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d111      	bne.n	8005ade <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aba:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6892      	ldr	r2, [r2, #8]
 8005aca:	0211      	lsls	r1, r2, #8
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68d2      	ldr	r2, [r2, #12]
 8005ad0:	0912      	lsrs	r2, r2, #4
 8005ad2:	0452      	lsls	r2, r2, #17
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	491f      	ldr	r1, [pc, #124]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	614b      	str	r3, [r1, #20]
 8005adc:	e011      	b.n	8005b02 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ade:	4b1d      	ldr	r3, [pc, #116]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ae6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6892      	ldr	r2, [r2, #8]
 8005aee:	0211      	lsls	r1, r2, #8
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6912      	ldr	r2, [r2, #16]
 8005af4:	0852      	lsrs	r2, r2, #1
 8005af6:	3a01      	subs	r2, #1
 8005af8:	0652      	lsls	r2, r2, #25
 8005afa:	430a      	orrs	r2, r1
 8005afc:	4915      	ldr	r1, [pc, #84]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7fd f84b 	bl	8002ba8 <HAL_GetTick>
 8005b12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b14:	e009      	b.n	8005b2a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b16:	f7fd f847 	bl	8002ba8 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d902      	bls.n	8005b2a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	73fb      	strb	r3, [r7, #15]
          break;
 8005b28:	e005      	b.n	8005b36 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ef      	beq.n	8005b16 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	4903      	ldr	r1, [pc, #12]	; (8005b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40021000 	.word	0x40021000

08005b58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e07c      	b.n	8005c64 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7fc fa55 	bl	8002034 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005baa:	d902      	bls.n	8005bb2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e002      	b.n	8005bb8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bc0:	d007      	beq.n	8005bd2 <HAL_SPI_Init+0x7a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bca:	d002      	beq.n	8005bd2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005be2:	d903      	bls.n	8005bec <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
 8005bea:	e002      	b.n	8005bf2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	ea42 0103 	orr.w	r1, r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	0c1b      	lsrs	r3, r3, #16
 8005c32:	f003 0204 	and.w	r2, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	ea42 0103 	orr.w	r1, r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e01d      	b.n	8005cba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f815 	bl	8005cc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f000 f986 	bl	8005fbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <HAL_TIM_Base_Start_IT+0x50>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b06      	cmp	r3, #6
 8005d00:	d00b      	beq.n	8005d1a <HAL_TIM_Base_Start_IT+0x42>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d08:	d007      	beq.n	8005d1a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	00010007 	.word	0x00010007

08005d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d122      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d11b      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0202 	mvn.w	r2, #2
 8005d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f905 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005d74:	e005      	b.n	8005d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f8f7 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f908 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d122      	bne.n	8005ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d11b      	bne.n	8005ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0204 	mvn.w	r2, #4
 8005dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f8db 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f8cd 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f8de 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d122      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d11b      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0208 	mvn.w	r2, #8
 8005e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2204      	movs	r2, #4
 8005e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f8b1 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005e1c:	e005      	b.n	8005e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8a3 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8b4 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0310 	and.w	r3, r3, #16
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	d122      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d11b      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0210 	mvn.w	r2, #16
 8005e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f887 	bl	8005f7e <HAL_TIM_IC_CaptureCallback>
 8005e70:	e005      	b.n	8005e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f879 	bl	8005f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f88a 	bl	8005f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d10e      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d107      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0201 	mvn.w	r2, #1
 8005ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fb ff96 	bl	8001ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eba:	2b80      	cmp	r3, #128	; 0x80
 8005ebc:	d10e      	bne.n	8005edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec8:	2b80      	cmp	r3, #128	; 0x80
 8005eca:	d107      	bne.n	8005edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f914 	bl	8006104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eea:	d10e      	bne.n	8005f0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b80      	cmp	r3, #128	; 0x80
 8005ef8:	d107      	bne.n	8005f0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f907 	bl	8006118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d10e      	bne.n	8005f36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b40      	cmp	r3, #64	; 0x40
 8005f24:	d107      	bne.n	8005f36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f838 	bl	8005fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d10e      	bne.n	8005f62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d107      	bne.n	8005f62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f06f 0220 	mvn.w	r2, #32
 8005f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f8c7 	bl	80060f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a40      	ldr	r2, [pc, #256]	; (80060d0 <TIM_Base_SetConfig+0x114>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d013      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fda:	d00f      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a3d      	ldr	r2, [pc, #244]	; (80060d4 <TIM_Base_SetConfig+0x118>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3c      	ldr	r2, [pc, #240]	; (80060d8 <TIM_Base_SetConfig+0x11c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d007      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3b      	ldr	r2, [pc, #236]	; (80060dc <TIM_Base_SetConfig+0x120>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3a      	ldr	r2, [pc, #232]	; (80060e0 <TIM_Base_SetConfig+0x124>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d108      	bne.n	800600e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2f      	ldr	r2, [pc, #188]	; (80060d0 <TIM_Base_SetConfig+0x114>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01f      	beq.n	8006056 <TIM_Base_SetConfig+0x9a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d01b      	beq.n	8006056 <TIM_Base_SetConfig+0x9a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2c      	ldr	r2, [pc, #176]	; (80060d4 <TIM_Base_SetConfig+0x118>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d017      	beq.n	8006056 <TIM_Base_SetConfig+0x9a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2b      	ldr	r2, [pc, #172]	; (80060d8 <TIM_Base_SetConfig+0x11c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <TIM_Base_SetConfig+0x9a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2a      	ldr	r2, [pc, #168]	; (80060dc <TIM_Base_SetConfig+0x120>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00f      	beq.n	8006056 <TIM_Base_SetConfig+0x9a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a29      	ldr	r2, [pc, #164]	; (80060e0 <TIM_Base_SetConfig+0x124>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00b      	beq.n	8006056 <TIM_Base_SetConfig+0x9a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a28      	ldr	r2, [pc, #160]	; (80060e4 <TIM_Base_SetConfig+0x128>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <TIM_Base_SetConfig+0x9a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a27      	ldr	r2, [pc, #156]	; (80060e8 <TIM_Base_SetConfig+0x12c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_Base_SetConfig+0x9a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a26      	ldr	r2, [pc, #152]	; (80060ec <TIM_Base_SetConfig+0x130>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a10      	ldr	r2, [pc, #64]	; (80060d0 <TIM_Base_SetConfig+0x114>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00f      	beq.n	80060b4 <TIM_Base_SetConfig+0xf8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a12      	ldr	r2, [pc, #72]	; (80060e0 <TIM_Base_SetConfig+0x124>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00b      	beq.n	80060b4 <TIM_Base_SetConfig+0xf8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a11      	ldr	r2, [pc, #68]	; (80060e4 <TIM_Base_SetConfig+0x128>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d007      	beq.n	80060b4 <TIM_Base_SetConfig+0xf8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <TIM_Base_SetConfig+0x12c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_Base_SetConfig+0xf8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a0f      	ldr	r2, [pc, #60]	; (80060ec <TIM_Base_SetConfig+0x130>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d103      	bne.n	80060bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	615a      	str	r2, [r3, #20]
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e040      	b.n	80061c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fb ffb4 	bl	80020bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2224      	movs	r2, #36	; 0x24
 8006158:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8c0 	bl	80062f0 <UART_SetConfig>
 8006170:	4603      	mov	r3, r0
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e022      	b.n	80061c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fbfc 	bl	8006980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fc83 	bl	8006ac4 <UART_CheckIdleState>
 80061be:	4603      	mov	r3, r0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061dc:	2b20      	cmp	r3, #32
 80061de:	f040 8081 	bne.w	80062e4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_UART_Transmit+0x26>
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e079      	b.n	80062e6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_UART_Transmit+0x38>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e072      	b.n	80062e6 <HAL_UART_Transmit+0x11e>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2221      	movs	r2, #33	; 0x21
 8006212:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006214:	f7fc fcc8 	bl	8002ba8 <HAL_GetTick>
 8006218:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	88fa      	ldrh	r2, [r7, #6]
 800621e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	88fa      	ldrh	r2, [r7, #6]
 8006226:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006232:	d108      	bne.n	8006246 <HAL_UART_Transmit+0x7e>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800623c:	2300      	movs	r3, #0
 800623e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e003      	b.n	800624e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800624e:	e02d      	b.n	80062ac <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2200      	movs	r2, #0
 8006258:	2180      	movs	r1, #128	; 0x80
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 fc77 	bl	8006b4e <UART_WaitOnFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e03d      	b.n	80062e6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	881a      	ldrh	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800627c:	b292      	uxth	r2, r2
 800627e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	3302      	adds	r3, #2
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	e008      	b.n	800629a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	781a      	ldrb	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	b292      	uxth	r2, r2
 8006292:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3301      	adds	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1cb      	bne.n	8006250 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2200      	movs	r2, #0
 80062c0:	2140      	movs	r1, #64	; 0x40
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 fc43 	bl	8006b4e <UART_WaitOnFlagUntilTimeout>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e009      	b.n	80062e6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2220      	movs	r2, #32
 80062d6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e000      	b.n	80062e6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80062e4:	2302      	movs	r3, #2
  }
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80062f4:	b088      	sub	sp, #32
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	4313      	orrs	r3, r2
 800631c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4bac      	ldr	r3, [pc, #688]	; (80065d8 <UART_SetConfig+0x2e8>)
 8006326:	4013      	ands	r3, r2
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	69f9      	ldr	r1, [r7, #28]
 800632e:	430b      	orrs	r3, r1
 8006330:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4aa2      	ldr	r2, [pc, #648]	; (80065dc <UART_SetConfig+0x2ec>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	4313      	orrs	r3, r2
 8006360:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69fa      	ldr	r2, [r7, #28]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a99      	ldr	r2, [pc, #612]	; (80065e0 <UART_SetConfig+0x2f0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d121      	bne.n	80063c4 <UART_SetConfig+0xd4>
 8006380:	4b98      	ldr	r3, [pc, #608]	; (80065e4 <UART_SetConfig+0x2f4>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b03      	cmp	r3, #3
 800638c:	d816      	bhi.n	80063bc <UART_SetConfig+0xcc>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0xa4>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063a5 	.word	0x080063a5
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063ab 	.word	0x080063ab
 80063a0:	080063b7 	.word	0x080063b7
 80063a4:	2301      	movs	r3, #1
 80063a6:	76fb      	strb	r3, [r7, #27]
 80063a8:	e0e8      	b.n	800657c <UART_SetConfig+0x28c>
 80063aa:	2302      	movs	r3, #2
 80063ac:	76fb      	strb	r3, [r7, #27]
 80063ae:	e0e5      	b.n	800657c <UART_SetConfig+0x28c>
 80063b0:	2304      	movs	r3, #4
 80063b2:	76fb      	strb	r3, [r7, #27]
 80063b4:	e0e2      	b.n	800657c <UART_SetConfig+0x28c>
 80063b6:	2308      	movs	r3, #8
 80063b8:	76fb      	strb	r3, [r7, #27]
 80063ba:	e0df      	b.n	800657c <UART_SetConfig+0x28c>
 80063bc:	2310      	movs	r3, #16
 80063be:	76fb      	strb	r3, [r7, #27]
 80063c0:	bf00      	nop
 80063c2:	e0db      	b.n	800657c <UART_SetConfig+0x28c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a87      	ldr	r2, [pc, #540]	; (80065e8 <UART_SetConfig+0x2f8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d134      	bne.n	8006438 <UART_SetConfig+0x148>
 80063ce:	4b85      	ldr	r3, [pc, #532]	; (80065e4 <UART_SetConfig+0x2f4>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d4:	f003 030c 	and.w	r3, r3, #12
 80063d8:	2b0c      	cmp	r3, #12
 80063da:	d829      	bhi.n	8006430 <UART_SetConfig+0x140>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <UART_SetConfig+0xf4>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	08006419 	.word	0x08006419
 80063e8:	08006431 	.word	0x08006431
 80063ec:	08006431 	.word	0x08006431
 80063f0:	08006431 	.word	0x08006431
 80063f4:	08006425 	.word	0x08006425
 80063f8:	08006431 	.word	0x08006431
 80063fc:	08006431 	.word	0x08006431
 8006400:	08006431 	.word	0x08006431
 8006404:	0800641f 	.word	0x0800641f
 8006408:	08006431 	.word	0x08006431
 800640c:	08006431 	.word	0x08006431
 8006410:	08006431 	.word	0x08006431
 8006414:	0800642b 	.word	0x0800642b
 8006418:	2300      	movs	r3, #0
 800641a:	76fb      	strb	r3, [r7, #27]
 800641c:	e0ae      	b.n	800657c <UART_SetConfig+0x28c>
 800641e:	2302      	movs	r3, #2
 8006420:	76fb      	strb	r3, [r7, #27]
 8006422:	e0ab      	b.n	800657c <UART_SetConfig+0x28c>
 8006424:	2304      	movs	r3, #4
 8006426:	76fb      	strb	r3, [r7, #27]
 8006428:	e0a8      	b.n	800657c <UART_SetConfig+0x28c>
 800642a:	2308      	movs	r3, #8
 800642c:	76fb      	strb	r3, [r7, #27]
 800642e:	e0a5      	b.n	800657c <UART_SetConfig+0x28c>
 8006430:	2310      	movs	r3, #16
 8006432:	76fb      	strb	r3, [r7, #27]
 8006434:	bf00      	nop
 8006436:	e0a1      	b.n	800657c <UART_SetConfig+0x28c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6b      	ldr	r2, [pc, #428]	; (80065ec <UART_SetConfig+0x2fc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d120      	bne.n	8006484 <UART_SetConfig+0x194>
 8006442:	4b68      	ldr	r3, [pc, #416]	; (80065e4 <UART_SetConfig+0x2f4>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800644c:	2b10      	cmp	r3, #16
 800644e:	d00f      	beq.n	8006470 <UART_SetConfig+0x180>
 8006450:	2b10      	cmp	r3, #16
 8006452:	d802      	bhi.n	800645a <UART_SetConfig+0x16a>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <UART_SetConfig+0x174>
 8006458:	e010      	b.n	800647c <UART_SetConfig+0x18c>
 800645a:	2b20      	cmp	r3, #32
 800645c:	d005      	beq.n	800646a <UART_SetConfig+0x17a>
 800645e:	2b30      	cmp	r3, #48	; 0x30
 8006460:	d009      	beq.n	8006476 <UART_SetConfig+0x186>
 8006462:	e00b      	b.n	800647c <UART_SetConfig+0x18c>
 8006464:	2300      	movs	r3, #0
 8006466:	76fb      	strb	r3, [r7, #27]
 8006468:	e088      	b.n	800657c <UART_SetConfig+0x28c>
 800646a:	2302      	movs	r3, #2
 800646c:	76fb      	strb	r3, [r7, #27]
 800646e:	e085      	b.n	800657c <UART_SetConfig+0x28c>
 8006470:	2304      	movs	r3, #4
 8006472:	76fb      	strb	r3, [r7, #27]
 8006474:	e082      	b.n	800657c <UART_SetConfig+0x28c>
 8006476:	2308      	movs	r3, #8
 8006478:	76fb      	strb	r3, [r7, #27]
 800647a:	e07f      	b.n	800657c <UART_SetConfig+0x28c>
 800647c:	2310      	movs	r3, #16
 800647e:	76fb      	strb	r3, [r7, #27]
 8006480:	bf00      	nop
 8006482:	e07b      	b.n	800657c <UART_SetConfig+0x28c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a59      	ldr	r2, [pc, #356]	; (80065f0 <UART_SetConfig+0x300>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d120      	bne.n	80064d0 <UART_SetConfig+0x1e0>
 800648e:	4b55      	ldr	r3, [pc, #340]	; (80065e4 <UART_SetConfig+0x2f4>)
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006494:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d00f      	beq.n	80064bc <UART_SetConfig+0x1cc>
 800649c:	2b40      	cmp	r3, #64	; 0x40
 800649e:	d802      	bhi.n	80064a6 <UART_SetConfig+0x1b6>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <UART_SetConfig+0x1c0>
 80064a4:	e010      	b.n	80064c8 <UART_SetConfig+0x1d8>
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	d005      	beq.n	80064b6 <UART_SetConfig+0x1c6>
 80064aa:	2bc0      	cmp	r3, #192	; 0xc0
 80064ac:	d009      	beq.n	80064c2 <UART_SetConfig+0x1d2>
 80064ae:	e00b      	b.n	80064c8 <UART_SetConfig+0x1d8>
 80064b0:	2300      	movs	r3, #0
 80064b2:	76fb      	strb	r3, [r7, #27]
 80064b4:	e062      	b.n	800657c <UART_SetConfig+0x28c>
 80064b6:	2302      	movs	r3, #2
 80064b8:	76fb      	strb	r3, [r7, #27]
 80064ba:	e05f      	b.n	800657c <UART_SetConfig+0x28c>
 80064bc:	2304      	movs	r3, #4
 80064be:	76fb      	strb	r3, [r7, #27]
 80064c0:	e05c      	b.n	800657c <UART_SetConfig+0x28c>
 80064c2:	2308      	movs	r3, #8
 80064c4:	76fb      	strb	r3, [r7, #27]
 80064c6:	e059      	b.n	800657c <UART_SetConfig+0x28c>
 80064c8:	2310      	movs	r3, #16
 80064ca:	76fb      	strb	r3, [r7, #27]
 80064cc:	bf00      	nop
 80064ce:	e055      	b.n	800657c <UART_SetConfig+0x28c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a47      	ldr	r2, [pc, #284]	; (80065f4 <UART_SetConfig+0x304>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d124      	bne.n	8006524 <UART_SetConfig+0x234>
 80064da:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <UART_SetConfig+0x2f4>)
 80064dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e8:	d012      	beq.n	8006510 <UART_SetConfig+0x220>
 80064ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ee:	d802      	bhi.n	80064f6 <UART_SetConfig+0x206>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d007      	beq.n	8006504 <UART_SetConfig+0x214>
 80064f4:	e012      	b.n	800651c <UART_SetConfig+0x22c>
 80064f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064fa:	d006      	beq.n	800650a <UART_SetConfig+0x21a>
 80064fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006500:	d009      	beq.n	8006516 <UART_SetConfig+0x226>
 8006502:	e00b      	b.n	800651c <UART_SetConfig+0x22c>
 8006504:	2300      	movs	r3, #0
 8006506:	76fb      	strb	r3, [r7, #27]
 8006508:	e038      	b.n	800657c <UART_SetConfig+0x28c>
 800650a:	2302      	movs	r3, #2
 800650c:	76fb      	strb	r3, [r7, #27]
 800650e:	e035      	b.n	800657c <UART_SetConfig+0x28c>
 8006510:	2304      	movs	r3, #4
 8006512:	76fb      	strb	r3, [r7, #27]
 8006514:	e032      	b.n	800657c <UART_SetConfig+0x28c>
 8006516:	2308      	movs	r3, #8
 8006518:	76fb      	strb	r3, [r7, #27]
 800651a:	e02f      	b.n	800657c <UART_SetConfig+0x28c>
 800651c:	2310      	movs	r3, #16
 800651e:	76fb      	strb	r3, [r7, #27]
 8006520:	bf00      	nop
 8006522:	e02b      	b.n	800657c <UART_SetConfig+0x28c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2c      	ldr	r2, [pc, #176]	; (80065dc <UART_SetConfig+0x2ec>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d124      	bne.n	8006578 <UART_SetConfig+0x288>
 800652e:	4b2d      	ldr	r3, [pc, #180]	; (80065e4 <UART_SetConfig+0x2f4>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653c:	d012      	beq.n	8006564 <UART_SetConfig+0x274>
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006542:	d802      	bhi.n	800654a <UART_SetConfig+0x25a>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d007      	beq.n	8006558 <UART_SetConfig+0x268>
 8006548:	e012      	b.n	8006570 <UART_SetConfig+0x280>
 800654a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800654e:	d006      	beq.n	800655e <UART_SetConfig+0x26e>
 8006550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006554:	d009      	beq.n	800656a <UART_SetConfig+0x27a>
 8006556:	e00b      	b.n	8006570 <UART_SetConfig+0x280>
 8006558:	2300      	movs	r3, #0
 800655a:	76fb      	strb	r3, [r7, #27]
 800655c:	e00e      	b.n	800657c <UART_SetConfig+0x28c>
 800655e:	2302      	movs	r3, #2
 8006560:	76fb      	strb	r3, [r7, #27]
 8006562:	e00b      	b.n	800657c <UART_SetConfig+0x28c>
 8006564:	2304      	movs	r3, #4
 8006566:	76fb      	strb	r3, [r7, #27]
 8006568:	e008      	b.n	800657c <UART_SetConfig+0x28c>
 800656a:	2308      	movs	r3, #8
 800656c:	76fb      	strb	r3, [r7, #27]
 800656e:	e005      	b.n	800657c <UART_SetConfig+0x28c>
 8006570:	2310      	movs	r3, #16
 8006572:	76fb      	strb	r3, [r7, #27]
 8006574:	bf00      	nop
 8006576:	e001      	b.n	800657c <UART_SetConfig+0x28c>
 8006578:	2310      	movs	r3, #16
 800657a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a16      	ldr	r2, [pc, #88]	; (80065dc <UART_SetConfig+0x2ec>)
 8006582:	4293      	cmp	r3, r2
 8006584:	f040 80fa 	bne.w	800677c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006588:	7efb      	ldrb	r3, [r7, #27]
 800658a:	2b08      	cmp	r3, #8
 800658c:	d836      	bhi.n	80065fc <UART_SetConfig+0x30c>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x2a4>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065fd 	.word	0x080065fd
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065fd 	.word	0x080065fd
 80065a4:	080065c7 	.word	0x080065c7
 80065a8:	080065fd 	.word	0x080065fd
 80065ac:	080065fd 	.word	0x080065fd
 80065b0:	080065fd 	.word	0x080065fd
 80065b4:	080065cf 	.word	0x080065cf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7fe fd50 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 80065bc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065be:	e020      	b.n	8006602 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <UART_SetConfig+0x308>)
 80065c2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065c4:	e01d      	b.n	8006602 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80065c6:	f7fe fcb3 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 80065ca:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065cc:	e019      	b.n	8006602 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80065ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065d4:	e015      	b.n	8006602 <UART_SetConfig+0x312>
 80065d6:	bf00      	nop
 80065d8:	efff69f3 	.word	0xefff69f3
 80065dc:	40008000 	.word	0x40008000
 80065e0:	40013800 	.word	0x40013800
 80065e4:	40021000 	.word	0x40021000
 80065e8:	40004400 	.word	0x40004400
 80065ec:	40004800 	.word	0x40004800
 80065f0:	40004c00 	.word	0x40004c00
 80065f4:	40005000 	.word	0x40005000
 80065f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	74fb      	strb	r3, [r7, #19]
        break;
 8006600:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 81ac 	beq.w	8006962 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4413      	add	r3, r2
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	429a      	cmp	r2, r3
 8006618:	d305      	bcc.n	8006626 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	429a      	cmp	r2, r3
 8006624:	d902      	bls.n	800662c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	74fb      	strb	r3, [r7, #19]
 800662a:	e19a      	b.n	8006962 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800662c:	7efb      	ldrb	r3, [r7, #27]
 800662e:	2b08      	cmp	r3, #8
 8006630:	f200 8091 	bhi.w	8006756 <UART_SetConfig+0x466>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0x34c>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006661 	.word	0x08006661
 8006640:	08006757 	.word	0x08006757
 8006644:	080066ad 	.word	0x080066ad
 8006648:	08006757 	.word	0x08006757
 800664c:	080066e1 	.word	0x080066e1
 8006650:	08006757 	.word	0x08006757
 8006654:	08006757 	.word	0x08006757
 8006658:	08006757 	.word	0x08006757
 800665c:	0800672d 	.word	0x0800672d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006660:	f7fe fcfc 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8006664:	4603      	mov	r3, r0
 8006666:	4619      	mov	r1, r3
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	f04f 0400 	mov.w	r4, #0
 8006674:	0214      	lsls	r4, r2, #8
 8006676:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800667a:	020b      	lsls	r3, r1, #8
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6852      	ldr	r2, [r2, #4]
 8006680:	0852      	lsrs	r2, r2, #1
 8006682:	4611      	mov	r1, r2
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	eb13 0b01 	adds.w	fp, r3, r1
 800668c:	eb44 0c02 	adc.w	ip, r4, r2
 8006690:	4658      	mov	r0, fp
 8006692:	4661      	mov	r1, ip
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f04f 0400 	mov.w	r4, #0
 800669c:	461a      	mov	r2, r3
 800669e:	4623      	mov	r3, r4
 80066a0:	f7fa faca 	bl	8000c38 <__aeabi_uldivmod>
 80066a4:	4603      	mov	r3, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80066aa:	e057      	b.n	800675c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	f04f 0400 	mov.w	r4, #0
 80066b6:	49b1      	ldr	r1, [pc, #708]	; (800697c <UART_SetConfig+0x68c>)
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	eb13 0b01 	adds.w	fp, r3, r1
 80066c0:	eb44 0c02 	adc.w	ip, r4, r2
 80066c4:	4658      	mov	r0, fp
 80066c6:	4661      	mov	r1, ip
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f04f 0400 	mov.w	r4, #0
 80066d0:	461a      	mov	r2, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	f7fa fab0 	bl	8000c38 <__aeabi_uldivmod>
 80066d8:	4603      	mov	r3, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80066de:	e03d      	b.n	800675c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80066e0:	f7fe fc26 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 80066e4:	4603      	mov	r3, r0
 80066e6:	4619      	mov	r1, r3
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	f04f 0400 	mov.w	r4, #0
 80066f4:	0214      	lsls	r4, r2, #8
 80066f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80066fa:	020b      	lsls	r3, r1, #8
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6852      	ldr	r2, [r2, #4]
 8006700:	0852      	lsrs	r2, r2, #1
 8006702:	4611      	mov	r1, r2
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	eb13 0b01 	adds.w	fp, r3, r1
 800670c:	eb44 0c02 	adc.w	ip, r4, r2
 8006710:	4658      	mov	r0, fp
 8006712:	4661      	mov	r1, ip
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f04f 0400 	mov.w	r4, #0
 800671c:	461a      	mov	r2, r3
 800671e:	4623      	mov	r3, r4
 8006720:	f7fa fa8a 	bl	8000c38 <__aeabi_uldivmod>
 8006724:	4603      	mov	r3, r0
 8006726:	460c      	mov	r4, r1
 8006728:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800672a:	e017      	b.n	800675c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	f04f 0400 	mov.w	r4, #0
 8006736:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800673a:	f144 0100 	adc.w	r1, r4, #0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f04f 0400 	mov.w	r4, #0
 8006746:	461a      	mov	r2, r3
 8006748:	4623      	mov	r3, r4
 800674a:	f7fa fa75 	bl	8000c38 <__aeabi_uldivmod>
 800674e:	4603      	mov	r3, r0
 8006750:	460c      	mov	r4, r1
 8006752:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006754:	e002      	b.n	800675c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	74fb      	strb	r3, [r7, #19]
            break;
 800675a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006762:	d308      	bcc.n	8006776 <UART_SetConfig+0x486>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676a:	d204      	bcs.n	8006776 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	60da      	str	r2, [r3, #12]
 8006774:	e0f5      	b.n	8006962 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	74fb      	strb	r3, [r7, #19]
 800677a:	e0f2      	b.n	8006962 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006784:	d17f      	bne.n	8006886 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8006786:	7efb      	ldrb	r3, [r7, #27]
 8006788:	2b08      	cmp	r3, #8
 800678a:	d85c      	bhi.n	8006846 <UART_SetConfig+0x556>
 800678c:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <UART_SetConfig+0x4a4>)
 800678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006792:	bf00      	nop
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067d7 	.word	0x080067d7
 800679c:	080067f5 	.word	0x080067f5
 80067a0:	08006847 	.word	0x08006847
 80067a4:	08006811 	.word	0x08006811
 80067a8:	08006847 	.word	0x08006847
 80067ac:	08006847 	.word	0x08006847
 80067b0:	08006847 	.word	0x08006847
 80067b4:	0800682f 	.word	0x0800682f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80067b8:	f7fe fc50 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 80067bc:	4603      	mov	r3, r0
 80067be:	005a      	lsls	r2, r3, #1
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	441a      	add	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067d4:	e03a      	b.n	800684c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80067d6:	f7fe fc57 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 80067da:	4603      	mov	r3, r0
 80067dc:	005a      	lsls	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067f2:	e02b      	b.n	800684c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80067fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6852      	ldr	r2, [r2, #4]
 8006806:	fbb3 f3f2 	udiv	r3, r3, r2
 800680a:	b29b      	uxth	r3, r3
 800680c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800680e:	e01d      	b.n	800684c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006810:	f7fe fb8e 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8006814:	4603      	mov	r3, r0
 8006816:	005a      	lsls	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	441a      	add	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	fbb2 f3f3 	udiv	r3, r2, r3
 8006828:	b29b      	uxth	r3, r3
 800682a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800682c:	e00e      	b.n	800684c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006840:	b29b      	uxth	r3, r3
 8006842:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006844:	e002      	b.n	800684c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	74fb      	strb	r3, [r7, #19]
        break;
 800684a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b0f      	cmp	r3, #15
 8006850:	d916      	bls.n	8006880 <UART_SetConfig+0x590>
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006858:	d212      	bcs.n	8006880 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f023 030f 	bic.w	r3, r3, #15
 8006862:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	085b      	lsrs	r3, r3, #1
 8006868:	b29b      	uxth	r3, r3
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	b29a      	uxth	r2, r3
 8006870:	897b      	ldrh	r3, [r7, #10]
 8006872:	4313      	orrs	r3, r2
 8006874:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	897a      	ldrh	r2, [r7, #10]
 800687c:	60da      	str	r2, [r3, #12]
 800687e:	e070      	b.n	8006962 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	74fb      	strb	r3, [r7, #19]
 8006884:	e06d      	b.n	8006962 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8006886:	7efb      	ldrb	r3, [r7, #27]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d859      	bhi.n	8006940 <UART_SetConfig+0x650>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <UART_SetConfig+0x5a4>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068d5 	.word	0x080068d5
 800689c:	080068f1 	.word	0x080068f1
 80068a0:	08006941 	.word	0x08006941
 80068a4:	0800690d 	.word	0x0800690d
 80068a8:	08006941 	.word	0x08006941
 80068ac:	08006941 	.word	0x08006941
 80068b0:	08006941 	.word	0x08006941
 80068b4:	08006929 	.word	0x08006929
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80068b8:	f7fe fbd0 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	085b      	lsrs	r3, r3, #1
 80068c4:	441a      	add	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068d2:	e038      	b.n	8006946 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80068d4:	f7fe fbd8 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 80068d8:	4602      	mov	r2, r0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	441a      	add	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068ee:	e02a      	b.n	8006946 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	085b      	lsrs	r3, r3, #1
 80068f6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80068fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6852      	ldr	r2, [r2, #4]
 8006902:	fbb3 f3f2 	udiv	r3, r3, r2
 8006906:	b29b      	uxth	r3, r3
 8006908:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800690a:	e01c      	b.n	8006946 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800690c:	f7fe fb10 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	441a      	add	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006922:	b29b      	uxth	r3, r3
 8006924:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006926:	e00e      	b.n	8006946 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	b29b      	uxth	r3, r3
 800693c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800693e:	e002      	b.n	8006946 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	74fb      	strb	r3, [r7, #19]
        break;
 8006944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b0f      	cmp	r3, #15
 800694a:	d908      	bls.n	800695e <UART_SetConfig+0x66e>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006952:	d204      	bcs.n	800695e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	60da      	str	r2, [r3, #12]
 800695c:	e001      	b.n	8006962 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800696e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800697a:	bf00      	nop
 800697c:	f4240000 	.word	0xf4240000

08006980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01a      	beq.n	8006a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7e:	d10a      	bne.n	8006a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006ad2:	f7fc f869 	bl	8002ba8 <HAL_GetTick>
 8006ad6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d10e      	bne.n	8006b04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f82a 	bl	8006b4e <UART_WaitOnFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e020      	b.n	8006b46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0304 	and.w	r3, r3, #4
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d10e      	bne.n	8006b30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f814 	bl	8006b4e <UART_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e00a      	b.n	8006b46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b5e:	e02a      	b.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b66:	d026      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b68:	f7fc f81e 	bl	8002ba8 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d11b      	bne.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0201 	bic.w	r2, r2, #1
 8006b9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e00f      	b.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69da      	ldr	r2, [r3, #28]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d0c5      	beq.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bde:	b084      	sub	sp, #16
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	f107 001c 	add.w	r0, r7, #28
 8006bec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d122      	bne.n	8006c3c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d105      	bne.n	8006c30 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa1d 	bl	8007070 <USB_CoreReset>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
 8006c3a:	e01a      	b.n	8006c72 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa11 	bl	8007070 <USB_CoreReset>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
 8006c64:	e005      	b.n	8006c72 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c7e:	b004      	add	sp, #16
 8006c80:	4770      	bx	lr

08006c82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f023 0201 	bic.w	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d106      	bne.n	8006cd0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60da      	str	r2, [r3, #12]
 8006cce:	e00b      	b.n	8006ce8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60da      	str	r2, [r3, #12]
 8006ce2:	e001      	b.n	8006ce8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e003      	b.n	8006cf0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ce8:	2032      	movs	r0, #50	; 0x32
 8006cea:	f7fb ff69 	bl	8002bc0 <HAL_Delay>

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b086      	sub	sp, #24
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	e009      	b.n	8006d2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3340      	adds	r3, #64	; 0x40
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	2200      	movs	r2, #0
 8006d24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b0e      	cmp	r3, #14
 8006d30:	d9f2      	bls.n	8006d18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d112      	bne.n	8006d5e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e005      	b.n	8006d6a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d70:	461a      	mov	r2, r3
 8006d72:	2300      	movs	r3, #0
 8006d74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d84:	461a      	mov	r2, r3
 8006d86:	680b      	ldr	r3, [r1, #0]
 8006d88:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d8a:	2103      	movs	r1, #3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f93d 	bl	800700c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d92:	2110      	movs	r1, #16
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f8f1 	bl	8006f7c <USB_FlushTxFifo>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f90f 	bl	8006fc8 <USB_FlushRxFifo>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	461a      	mov	r2, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	e043      	b.n	8006e66 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006df4:	d118      	bne.n	8006e28 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	e013      	b.n	8006e3a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e008      	b.n	8006e3a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e34:	461a      	mov	r2, r3
 8006e36:	2300      	movs	r3, #0
 8006e38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e46:	461a      	mov	r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	3301      	adds	r3, #1
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d3b7      	bcc.n	8006dde <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e6e:	2300      	movs	r3, #0
 8006e70:	613b      	str	r3, [r7, #16]
 8006e72:	e043      	b.n	8006efc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e8a:	d118      	bne.n	8006ebe <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e013      	b.n	8006ed0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	e008      	b.n	8006ed0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eca:	461a      	mov	r2, r3
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006edc:	461a      	mov	r2, r3
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ef4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d3b7      	bcc.n	8006e74 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006f24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f043 0210 	orr.w	r2, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699a      	ldr	r2, [r3, #24]
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <USB_DevInit+0x280>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	f043 0208 	orr.w	r2, r3, #8
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d107      	bne.n	8006f66 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	699b      	ldr	r3, [r3, #24]
 8006f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f5e:	f043 0304 	orr.w	r3, r3, #4
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f72:	b004      	add	sp, #16
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	803c3800 	.word	0x803c3800

08006f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	019b      	lsls	r3, r3, #6
 8006f8e:	f043 0220 	orr.w	r2, r3, #32
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a09      	ldr	r2, [pc, #36]	; (8006fc4 <USB_FlushTxFifo+0x48>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d901      	bls.n	8006fa8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e006      	b.n	8006fb6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d0f0      	beq.n	8006f96 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	00030d40 	.word	0x00030d40

08006fc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4a09      	ldr	r2, [pc, #36]	; (8007008 <USB_FlushRxFifo+0x40>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d901      	bls.n	8006fec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e006      	b.n	8006ffa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0310 	and.w	r3, r3, #16
 8006ff4:	2b10      	cmp	r3, #16
 8006ff6:	d0f0      	beq.n	8006fda <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	00030d40 	.word	0x00030d40

0800700c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800702c:	4313      	orrs	r3, r2
 800702e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007058:	f043 0302 	orr.w	r3, r3, #2
 800705c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800705e:	2003      	movs	r0, #3
 8007060:	f7fb fdae 	bl	8002bc0 <HAL_Delay>

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <USB_CoreReset+0x64>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e01b      	b.n	80070c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	daf2      	bge.n	800707c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f043 0201 	orr.w	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <USB_CoreReset+0x64>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d901      	bls.n	80070b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e006      	b.n	80070c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d0f0      	beq.n	80070a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	00030d40 	.word	0x00030d40

080070d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070de:	f3ef 8305 	mrs	r3, IPSR
 80070e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80070e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10f      	bne.n	800710a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ea:	f3ef 8310 	mrs	r3, PRIMASK
 80070ee:	607b      	str	r3, [r7, #4]
  return(result);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <osKernelInitialize+0x32>
 80070f6:	4b11      	ldr	r3, [pc, #68]	; (800713c <osKernelInitialize+0x64>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d109      	bne.n	8007112 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007102:	603b      	str	r3, [r7, #0]
  return(result);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800710a:	f06f 0305 	mvn.w	r3, #5
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e00c      	b.n	800712c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <osKernelInitialize+0x64>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800711a:	4b08      	ldr	r3, [pc, #32]	; (800713c <osKernelInitialize+0x64>)
 800711c:	2201      	movs	r2, #1
 800711e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e002      	b.n	800712c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007126:	f04f 33ff 	mov.w	r3, #4294967295
 800712a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800712c:	68fb      	ldr	r3, [r7, #12]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	200001a0 	.word	0x200001a0

08007140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007146:	f3ef 8305 	mrs	r3, IPSR
 800714a:	60bb      	str	r3, [r7, #8]
  return(result);
 800714c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10f      	bne.n	8007172 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007152:	f3ef 8310 	mrs	r3, PRIMASK
 8007156:	607b      	str	r3, [r7, #4]
  return(result);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d109      	bne.n	8007172 <osKernelStart+0x32>
 800715e:	4b11      	ldr	r3, [pc, #68]	; (80071a4 <osKernelStart+0x64>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d109      	bne.n	800717a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007166:	f3ef 8311 	mrs	r3, BASEPRI
 800716a:	603b      	str	r3, [r7, #0]
  return(result);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <osKernelStart+0x3a>
    stat = osErrorISR;
 8007172:	f06f 0305 	mvn.w	r3, #5
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e00e      	b.n	8007198 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800717a:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <osKernelStart+0x64>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d107      	bne.n	8007192 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007182:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <osKernelStart+0x64>)
 8007184:	2202      	movs	r2, #2
 8007186:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007188:	f001 fdc4 	bl	8008d14 <vTaskStartScheduler>
      stat = osOK;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	e002      	b.n	8007198 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007192:	f04f 33ff 	mov.w	r3, #4294967295
 8007196:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007198:	68fb      	ldr	r3, [r7, #12]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	200001a0 	.word	0x200001a0

080071a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b092      	sub	sp, #72	; 0x48
 80071ac:	af04      	add	r7, sp, #16
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071b8:	f3ef 8305 	mrs	r3, IPSR
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f040 8094 	bne.w	80072ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c6:	f3ef 8310 	mrs	r3, PRIMASK
 80071ca:	623b      	str	r3, [r7, #32]
  return(result);
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 808d 	bne.w	80072ee <osThreadNew+0x146>
 80071d4:	4b48      	ldr	r3, [pc, #288]	; (80072f8 <osThreadNew+0x150>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d106      	bne.n	80071ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071dc:	f3ef 8311 	mrs	r3, BASEPRI
 80071e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f040 8082 	bne.w	80072ee <osThreadNew+0x146>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d07e      	beq.n	80072ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80071f4:	2318      	movs	r3, #24
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80071f8:	2300      	movs	r3, #0
 80071fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80071fc:	f107 031b 	add.w	r3, r7, #27
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007202:	f04f 33ff 	mov.w	r3, #4294967295
 8007206:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d045      	beq.n	800729a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <osThreadNew+0x74>
        name = attr->name;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <osThreadNew+0x9a>
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	2b38      	cmp	r3, #56	; 0x38
 8007234:	d805      	bhi.n	8007242 <osThreadNew+0x9a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <osThreadNew+0x9e>
        return (NULL);
 8007242:	2300      	movs	r3, #0
 8007244:	e054      	b.n	80072f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	089b      	lsrs	r3, r3, #2
 8007254:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00e      	beq.n	800727c <osThreadNew+0xd4>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	2b5b      	cmp	r3, #91	; 0x5b
 8007264:	d90a      	bls.n	800727c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800726a:	2b00      	cmp	r3, #0
 800726c:	d006      	beq.n	800727c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <osThreadNew+0xd4>
        mem = 1;
 8007276:	2301      	movs	r3, #1
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
 800727a:	e010      	b.n	800729e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10c      	bne.n	800729e <osThreadNew+0xf6>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d108      	bne.n	800729e <osThreadNew+0xf6>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <osThreadNew+0xf6>
          mem = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
 8007298:	e001      	b.n	800729e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d110      	bne.n	80072c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072ac:	9202      	str	r2, [sp, #8]
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f001 fb62 	bl	8008984 <xTaskCreateStatic>
 80072c0:	4603      	mov	r3, r0
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	e013      	b.n	80072ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d110      	bne.n	80072ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	f107 0314 	add.w	r3, r7, #20
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f001 fba9 	bl	8008a36 <xTaskCreate>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d001      	beq.n	80072ee <osThreadNew+0x146>
          hTask = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80072ee:	697b      	ldr	r3, [r7, #20]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3738      	adds	r7, #56	; 0x38
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200001a0 	.word	0x200001a0

080072fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007304:	f3ef 8305 	mrs	r3, IPSR
 8007308:	613b      	str	r3, [r7, #16]
  return(result);
 800730a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10f      	bne.n	8007330 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007310:	f3ef 8310 	mrs	r3, PRIMASK
 8007314:	60fb      	str	r3, [r7, #12]
  return(result);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d109      	bne.n	8007330 <osDelay+0x34>
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <osDelay+0x58>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d109      	bne.n	8007338 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007324:	f3ef 8311 	mrs	r3, BASEPRI
 8007328:	60bb      	str	r3, [r7, #8]
  return(result);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <osDelay+0x3c>
    stat = osErrorISR;
 8007330:	f06f 0305 	mvn.w	r3, #5
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	e007      	b.n	8007348 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fcb2 	bl	8008cac <vTaskDelay>
    }
  }

  return (stat);
 8007348:	697b      	ldr	r3, [r7, #20]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	200001a0 	.word	0x200001a0

08007358 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007364:	f3ef 8305 	mrs	r3, IPSR
 8007368:	613b      	str	r3, [r7, #16]
  return(result);
 800736a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 8085 	bne.w	800747c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007372:	f3ef 8310 	mrs	r3, PRIMASK
 8007376:	60fb      	str	r3, [r7, #12]
  return(result);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d17e      	bne.n	800747c <osMutexNew+0x124>
 800737e:	4b42      	ldr	r3, [pc, #264]	; (8007488 <osMutexNew+0x130>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d105      	bne.n	8007392 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007386:	f3ef 8311 	mrs	r3, BASEPRI
 800738a:	60bb      	str	r3, [r7, #8]
  return(result);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d174      	bne.n	800747c <osMutexNew+0x124>
    if (attr != NULL) {
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d003      	beq.n	80073a0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	623b      	str	r3, [r7, #32]
 800739e:	e001      	b.n	80073a4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <osMutexNew+0x5c>
      rmtx = 1U;
 80073ae:	2301      	movs	r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	e001      	b.n	80073b8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d15c      	bne.n	800747c <osMutexNew+0x124>
      mem = -1;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d015      	beq.n	80073fa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d006      	beq.n	80073e4 <osMutexNew+0x8c>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	2b4f      	cmp	r3, #79	; 0x4f
 80073dc:	d902      	bls.n	80073e4 <osMutexNew+0x8c>
          mem = 1;
 80073de:	2301      	movs	r3, #1
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	e00c      	b.n	80073fe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <osMutexNew+0xa6>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <osMutexNew+0xa6>
            mem = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	e001      	b.n	80073fe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d112      	bne.n	800742a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	4619      	mov	r1, r3
 8007410:	2004      	movs	r0, #4
 8007412:	f000 fbeb 	bl	8007bec <xQueueCreateMutexStatic>
 8007416:	6278      	str	r0, [r7, #36]	; 0x24
 8007418:	e016      	b.n	8007448 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	4619      	mov	r1, r3
 8007420:	2001      	movs	r0, #1
 8007422:	f000 fbe3 	bl	8007bec <xQueueCreateMutexStatic>
 8007426:	6278      	str	r0, [r7, #36]	; 0x24
 8007428:	e00e      	b.n	8007448 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007436:	2004      	movs	r0, #4
 8007438:	f000 fbc0 	bl	8007bbc <xQueueCreateMutex>
 800743c:	6278      	str	r0, [r7, #36]	; 0x24
 800743e:	e003      	b.n	8007448 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007440:	2001      	movs	r0, #1
 8007442:	f000 fbbb 	bl	8007bbc <xQueueCreateMutex>
 8007446:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00c      	beq.n	8007468 <osMutexNew+0x110>
        if (attr != NULL) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <osMutexNew+0x104>
          name = attr->name;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	617b      	str	r3, [r7, #20]
 800745a:	e001      	b.n	8007460 <osMutexNew+0x108>
        } else {
          name = NULL;
 800745c:	2300      	movs	r3, #0
 800745e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007460:	6979      	ldr	r1, [r7, #20]
 8007462:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007464:	f001 fa08 	bl	8008878 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d006      	beq.n	800747c <osMutexNew+0x124>
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800747e:	4618      	mov	r0, r3
 8007480:	3728      	adds	r7, #40	; 0x28
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	200001a0 	.word	0x200001a0

0800748c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800748c:	b580      	push	{r7, lr}
 800748e:	b08c      	sub	sp, #48	; 0x30
 8007490:	af02      	add	r7, sp, #8
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007498:	2300      	movs	r3, #0
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800749c:	f3ef 8305 	mrs	r3, IPSR
 80074a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80074a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f040 8088 	bne.w	80075ba <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074aa:	f3ef 8310 	mrs	r3, PRIMASK
 80074ae:	617b      	str	r3, [r7, #20]
  return(result);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 8081 	bne.w	80075ba <osSemaphoreNew+0x12e>
 80074b8:	4b42      	ldr	r3, [pc, #264]	; (80075c4 <osSemaphoreNew+0x138>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d105      	bne.n	80074cc <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074c0:	f3ef 8311 	mrs	r3, BASEPRI
 80074c4:	613b      	str	r3, [r7, #16]
  return(result);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d176      	bne.n	80075ba <osSemaphoreNew+0x12e>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d073      	beq.n	80075ba <osSemaphoreNew+0x12e>
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d86f      	bhi.n	80075ba <osSemaphoreNew+0x12e>
    mem = -1;
 80074da:	f04f 33ff 	mov.w	r3, #4294967295
 80074de:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d015      	beq.n	8007512 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <osSemaphoreNew+0x70>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	2b4f      	cmp	r3, #79	; 0x4f
 80074f4:	d902      	bls.n	80074fc <osSemaphoreNew+0x70>
        mem = 1;
 80074f6:	2301      	movs	r3, #1
 80074f8:	623b      	str	r3, [r7, #32]
 80074fa:	e00c      	b.n	8007516 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d108      	bne.n	8007516 <osSemaphoreNew+0x8a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <osSemaphoreNew+0x8a>
          mem = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	623b      	str	r3, [r7, #32]
 8007510:	e001      	b.n	8007516 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d04d      	beq.n	80075ba <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d129      	bne.n	8007578 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d10b      	bne.n	8007542 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	2303      	movs	r3, #3
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	4613      	mov	r3, r2
 8007534:	2200      	movs	r2, #0
 8007536:	2100      	movs	r1, #0
 8007538:	2001      	movs	r0, #1
 800753a:	f000 fa53 	bl	80079e4 <xQueueGenericCreateStatic>
 800753e:	6278      	str	r0, [r7, #36]	; 0x24
 8007540:	e005      	b.n	800754e <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007542:	2203      	movs	r2, #3
 8007544:	2100      	movs	r1, #0
 8007546:	2001      	movs	r0, #1
 8007548:	f000 fabe 	bl	8007ac8 <xQueueGenericCreate>
 800754c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	d022      	beq.n	800759a <osSemaphoreNew+0x10e>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01f      	beq.n	800759a <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800755a:	2300      	movs	r3, #0
 800755c:	2200      	movs	r2, #0
 800755e:	2100      	movs	r1, #0
 8007560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007562:	f000 fbc5 	bl	8007cf0 <xQueueGenericSend>
 8007566:	4603      	mov	r3, r0
 8007568:	2b01      	cmp	r3, #1
 800756a:	d016      	beq.n	800759a <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800756c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800756e:	f001 f838 	bl	80085e2 <vQueueDelete>
            hSemaphore = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
 8007576:	e010      	b.n	800759a <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d108      	bne.n	8007590 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	461a      	mov	r2, r3
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fb4b 	bl	8007c22 <xQueueCreateCountingSemaphoreStatic>
 800758c:	6278      	str	r0, [r7, #36]	; 0x24
 800758e:	e004      	b.n	800759a <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007590:	68b9      	ldr	r1, [r7, #8]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fb7a 	bl	8007c8c <xQueueCreateCountingSemaphore>
 8007598:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00c      	beq.n	80075ba <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <osSemaphoreNew+0x122>
          name = attr->name;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	61fb      	str	r3, [r7, #28]
 80075ac:	e001      	b.n	80075b2 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80075b2:	69f9      	ldr	r1, [r7, #28]
 80075b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075b6:	f001 f95f 	bl	8008878 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3728      	adds	r7, #40	; 0x28
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	200001a0 	.word	0x200001a0

080075c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b088      	sub	sp, #32
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80075e0:	f06f 0303 	mvn.w	r3, #3
 80075e4:	61fb      	str	r3, [r7, #28]
 80075e6:	e04b      	b.n	8007680 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075e8:	f3ef 8305 	mrs	r3, IPSR
 80075ec:	617b      	str	r3, [r7, #20]
  return(result);
 80075ee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10f      	bne.n	8007614 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075f4:	f3ef 8310 	mrs	r3, PRIMASK
 80075f8:	613b      	str	r3, [r7, #16]
  return(result);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d109      	bne.n	8007614 <osSemaphoreAcquire+0x4c>
 8007600:	4b22      	ldr	r3, [pc, #136]	; (800768c <osSemaphoreAcquire+0xc4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d128      	bne.n	800765a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007608:	f3ef 8311 	mrs	r3, BASEPRI
 800760c:	60fb      	str	r3, [r7, #12]
  return(result);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d022      	beq.n	800765a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800761a:	f06f 0303 	mvn.w	r3, #3
 800761e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007620:	e02d      	b.n	800767e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007626:	f107 0308 	add.w	r3, r7, #8
 800762a:	461a      	mov	r2, r3
 800762c:	2100      	movs	r1, #0
 800762e:	69b8      	ldr	r0, [r7, #24]
 8007630:	f000 ff5a 	bl	80084e8 <xQueueReceiveFromISR>
 8007634:	4603      	mov	r3, r0
 8007636:	2b01      	cmp	r3, #1
 8007638:	d003      	beq.n	8007642 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800763a:	f06f 0302 	mvn.w	r3, #2
 800763e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007640:	e01d      	b.n	800767e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01a      	beq.n	800767e <osSemaphoreAcquire+0xb6>
 8007648:	4b11      	ldr	r3, [pc, #68]	; (8007690 <osSemaphoreAcquire+0xc8>)
 800764a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007658:	e011      	b.n	800767e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	69b8      	ldr	r0, [r7, #24]
 800765e:	f000 fe3b 	bl	80082d8 <xQueueSemaphoreTake>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d00b      	beq.n	8007680 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800766e:	f06f 0301 	mvn.w	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e004      	b.n	8007680 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007676:	f06f 0302 	mvn.w	r3, #2
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	e000      	b.n	8007680 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800767e:	bf00      	nop
      }
    }
  }

  return (stat);
 8007680:	69fb      	ldr	r3, [r7, #28]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	200001a0 	.word	0x200001a0
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d103      	bne.n	80076b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80076aa:	f06f 0303 	mvn.w	r3, #3
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	e03e      	b.n	8007730 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b2:	f3ef 8305 	mrs	r3, IPSR
 80076b6:	617b      	str	r3, [r7, #20]
  return(result);
 80076b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10f      	bne.n	80076de <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076be:	f3ef 8310 	mrs	r3, PRIMASK
 80076c2:	613b      	str	r3, [r7, #16]
  return(result);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <osSemaphoreRelease+0x4a>
 80076ca:	4b1c      	ldr	r3, [pc, #112]	; (800773c <osSemaphoreRelease+0xa8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d120      	bne.n	8007714 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076d2:	f3ef 8311 	mrs	r3, BASEPRI
 80076d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01a      	beq.n	8007714 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076e2:	f107 0308 	add.w	r3, r7, #8
 80076e6:	4619      	mov	r1, r3
 80076e8:	69b8      	ldr	r0, [r7, #24]
 80076ea:	f000 fc8f 	bl	800800c <xQueueGiveFromISR>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d003      	beq.n	80076fc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80076f4:	f06f 0302 	mvn.w	r3, #2
 80076f8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076fa:	e018      	b.n	800772e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d015      	beq.n	800772e <osSemaphoreRelease+0x9a>
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <osSemaphoreRelease+0xac>)
 8007704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007712:	e00c      	b.n	800772e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007714:	2300      	movs	r3, #0
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	69b8      	ldr	r0, [r7, #24]
 800771c:	f000 fae8 	bl	8007cf0 <xQueueGenericSend>
 8007720:	4603      	mov	r3, r0
 8007722:	2b01      	cmp	r3, #1
 8007724:	d004      	beq.n	8007730 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007726:	f06f 0302 	mvn.w	r3, #2
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e000      	b.n	8007730 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800772e:	bf00      	nop
    }
  }

  return (stat);
 8007730:	69fb      	ldr	r3, [r7, #28]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3720      	adds	r7, #32
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	200001a0 	.word	0x200001a0
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <vApplicationGetIdleTaskMemory+0x2c>)
 8007754:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4a06      	ldr	r2, [pc, #24]	; (8007774 <vApplicationGetIdleTaskMemory+0x30>)
 800775a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2280      	movs	r2, #128	; 0x80
 8007760:	601a      	str	r2, [r3, #0]
}
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	200001a4 	.word	0x200001a4
 8007774:	20000200 	.word	0x20000200

08007778 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a07      	ldr	r2, [pc, #28]	; (80077a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007788:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4a06      	ldr	r2, [pc, #24]	; (80077a8 <vApplicationGetTimerTaskMemory+0x30>)
 800778e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007796:	601a      	str	r2, [r3, #0]
}
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	20000400 	.word	0x20000400
 80077a8:	2000045c 	.word	0x2000045c

080077ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f103 0208 	add.w	r2, r3, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295
 80077c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f103 0208 	add.w	r2, r3, #8
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f103 0208 	add.w	r2, r3, #8
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	601a      	str	r2, [r3, #0]
}
 8007842:	bf00      	nop
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d103      	bne.n	800786e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e00c      	b.n	8007888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3308      	adds	r3, #8
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e002      	b.n	800787c <vListInsert+0x2e>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	429a      	cmp	r2, r3
 8007886:	d2f6      	bcs.n	8007876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	601a      	str	r2, [r3, #0]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6892      	ldr	r2, [r2, #8]
 80078d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6852      	ldr	r2, [r2, #4]
 80078e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d103      	bne.n	80078f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	1e5a      	subs	r2, r3, #1
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d109      	bne.n	800793c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	e7fe      	b.n	800793a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800793c:	f002 fc3e 	bl	800a1bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007948:	68f9      	ldr	r1, [r7, #12]
 800794a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796c:	3b01      	subs	r3, #1
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007972:	fb01 f303 	mul.w	r3, r1, r3
 8007976:	441a      	add	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	22ff      	movs	r2, #255	; 0xff
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	22ff      	movs	r2, #255	; 0xff
 8007988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d114      	bne.n	80079bc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d01a      	beq.n	80079d0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3310      	adds	r3, #16
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fc3e 	bl	8009220 <xTaskRemoveFromEventList>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d012      	beq.n	80079d0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079aa:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <xQueueGenericReset+0xcc>)
 80079ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	e009      	b.n	80079d0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3310      	adds	r3, #16
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff fef3 	bl	80077ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3324      	adds	r3, #36	; 0x24
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff feee 	bl	80077ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079d0:	f002 fc22 	bl	800a218 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079d4:	2301      	movs	r3, #1
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	e000ed04 	.word	0xe000ed04

080079e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08e      	sub	sp, #56	; 0x38
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d109      	bne.n	8007a0c <xQueueGenericCreateStatic+0x28>
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a0a:	e7fe      	b.n	8007a0a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <xQueueGenericCreateStatic+0x42>
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
 8007a24:	e7fe      	b.n	8007a24 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <xQueueGenericCreateStatic+0x4e>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <xQueueGenericCreateStatic+0x52>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <xQueueGenericCreateStatic+0x54>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d109      	bne.n	8007a50 <xQueueGenericCreateStatic+0x6c>
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	623b      	str	r3, [r7, #32]
 8007a4e:	e7fe      	b.n	8007a4e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <xQueueGenericCreateStatic+0x78>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <xQueueGenericCreateStatic+0x7c>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <xQueueGenericCreateStatic+0x7e>
 8007a60:	2300      	movs	r3, #0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <xQueueGenericCreateStatic+0x96>
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	61fb      	str	r3, [r7, #28]
 8007a78:	e7fe      	b.n	8007a78 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a7a:	2350      	movs	r3, #80	; 0x50
 8007a7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b50      	cmp	r3, #80	; 0x50
 8007a82:	d009      	beq.n	8007a98 <xQueueGenericCreateStatic+0xb4>
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	e7fe      	b.n	8007a96 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00d      	beq.n	8007abe <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aaa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 f842 	bl	8007b42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3730      	adds	r7, #48	; 0x30
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d109      	bne.n	8007af0 <xQueueGenericCreate+0x28>
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	e7fe      	b.n	8007aee <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d102      	bne.n	8007afc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	e004      	b.n	8007b06 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	3350      	adds	r3, #80	; 0x50
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f002 fc70 	bl	800a3f0 <pvPortMalloc>
 8007b10:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00f      	beq.n	8007b38 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	3350      	adds	r3, #80	; 0x50
 8007b1c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b26:	79fa      	ldrb	r2, [r7, #7]
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f805 	bl	8007b42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b38:	69bb      	ldr	r3, [r7, #24]
	}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3720      	adds	r7, #32
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	e002      	b.n	8007b64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b70:	2101      	movs	r1, #1
 8007b72:	69b8      	ldr	r0, [r7, #24]
 8007b74:	f7ff fece 	bl	8007914 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	78fa      	ldrb	r2, [r7, #3]
 8007b7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b80:	bf00      	nop
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00e      	beq.n	8007bb4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2200      	movs	r2, #0
 8007bac:	2100      	movs	r1, #0
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f89e 	bl	8007cf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007bb4:	bf00      	nop
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6939      	ldr	r1, [r7, #16]
 8007bd4:	6978      	ldr	r0, [r7, #20]
 8007bd6:	f7ff ff77 	bl	8007ac8 <xQueueGenericCreate>
 8007bda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7ff ffd3 	bl	8007b88 <prvInitialiseMutex>

		return pxNewQueue;
 8007be2:	68fb      	ldr	r3, [r7, #12]
	}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	6939      	ldr	r1, [r7, #16]
 8007c0a:	6978      	ldr	r0, [r7, #20]
 8007c0c:	f7ff feea 	bl	80079e4 <xQueueGenericCreateStatic>
 8007c10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff ffb8 	bl	8007b88 <prvInitialiseMutex>

		return pxNewQueue;
 8007c18:	68fb      	ldr	r3, [r7, #12]
	}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b08a      	sub	sp, #40	; 0x28
 8007c26:	af02      	add	r7, sp, #8
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <xQueueCreateCountingSemaphoreStatic+0x26>
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	61bb      	str	r3, [r7, #24]
 8007c46:	e7fe      	b.n	8007c46 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d909      	bls.n	8007c64 <xQueueCreateCountingSemaphoreStatic+0x42>
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e7fe      	b.n	8007c62 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007c64:	2302      	movs	r3, #2
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f7ff feb8 	bl	80079e4 <xQueueGenericCreateStatic>
 8007c74:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c82:	69fb      	ldr	r3, [r7, #28]
	}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d109      	bne.n	8007cb0 <xQueueCreateCountingSemaphore+0x24>
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	e7fe      	b.n	8007cae <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d909      	bls.n	8007ccc <xQueueCreateCountingSemaphore+0x40>
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e7fe      	b.n	8007cca <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ccc:	2202      	movs	r2, #2
 8007cce:	2100      	movs	r1, #0
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff fef9 	bl	8007ac8 <xQueueGenericCreate>
 8007cd6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007ce4:	697b      	ldr	r3, [r7, #20]
	}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08e      	sub	sp, #56	; 0x38
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d109      	bne.n	8007d20 <xQueueGenericSend+0x30>
 8007d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d1e:	e7fe      	b.n	8007d1e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d103      	bne.n	8007d2e <xQueueGenericSend+0x3e>
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <xQueueGenericSend+0x42>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <xQueueGenericSend+0x44>
 8007d32:	2300      	movs	r3, #0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d109      	bne.n	8007d4c <xQueueGenericSend+0x5c>
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4a:	e7fe      	b.n	8007d4a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d103      	bne.n	8007d5a <xQueueGenericSend+0x6a>
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <xQueueGenericSend+0x6e>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <xQueueGenericSend+0x70>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <xQueueGenericSend+0x88>
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	623b      	str	r3, [r7, #32]
 8007d76:	e7fe      	b.n	8007d76 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d78:	f001 fc0e 	bl	8009598 <xTaskGetSchedulerState>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <xQueueGenericSend+0x98>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <xQueueGenericSend+0x9c>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e000      	b.n	8007d8e <xQueueGenericSend+0x9e>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <xQueueGenericSend+0xb6>
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	e7fe      	b.n	8007da4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007da6:	f002 fa09 	bl	800a1bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d302      	bcc.n	8007dbc <xQueueGenericSend+0xcc>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d129      	bne.n	8007e10 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	68b9      	ldr	r1, [r7, #8]
 8007dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dc2:	f000 fc48 	bl	8008656 <prvCopyDataToQueue>
 8007dc6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d010      	beq.n	8007df2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f001 fa23 	bl	8009220 <xTaskRemoveFromEventList>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d013      	beq.n	8007e08 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007de0:	4b3f      	ldr	r3, [pc, #252]	; (8007ee0 <xQueueGenericSend+0x1f0>)
 8007de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	e00a      	b.n	8007e08 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007df8:	4b39      	ldr	r3, [pc, #228]	; (8007ee0 <xQueueGenericSend+0x1f0>)
 8007dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e08:	f002 fa06 	bl	800a218 <vPortExitCritical>
				return pdPASS;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e063      	b.n	8007ed8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d103      	bne.n	8007e1e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e16:	f002 f9ff 	bl	800a218 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e05c      	b.n	8007ed8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 fa5b 	bl	80092e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e32:	f002 f9f1 	bl	800a218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e36:	f000 ffd1 	bl	8008ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e3a:	f002 f9bf 	bl	800a1bc <vPortEnterCritical>
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e44:	b25b      	sxtb	r3, r3
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4a:	d103      	bne.n	8007e54 <xQueueGenericSend+0x164>
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e5a:	b25b      	sxtb	r3, r3
 8007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e60:	d103      	bne.n	8007e6a <xQueueGenericSend+0x17a>
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e6a:	f002 f9d5 	bl	800a218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e6e:	1d3a      	adds	r2, r7, #4
 8007e70:	f107 0314 	add.w	r3, r7, #20
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f001 fa4a 	bl	8009310 <xTaskCheckForTimeOut>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d124      	bne.n	8007ecc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e84:	f000 fcdf 	bl	8008846 <prvIsQueueFull>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d018      	beq.n	8007ec0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	3310      	adds	r3, #16
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	4611      	mov	r1, r2
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 f974 	bl	8009184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e9e:	f000 fc6a 	bl	8008776 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ea2:	f000 ffa9 	bl	8008df8 <xTaskResumeAll>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f af7c 	bne.w	8007da6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007eae:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <xQueueGenericSend+0x1f0>)
 8007eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	e772      	b.n	8007da6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec2:	f000 fc58 	bl	8008776 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ec6:	f000 ff97 	bl	8008df8 <xTaskResumeAll>
 8007eca:	e76c      	b.n	8007da6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ece:	f000 fc52 	bl	8008776 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ed2:	f000 ff91 	bl	8008df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007ed6:	2300      	movs	r3, #0
		}
	}
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3738      	adds	r7, #56	; 0x38
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	e000ed04 	.word	0xe000ed04

08007ee4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08e      	sub	sp, #56	; 0x38
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <xQueueGenericSendFromISR+0x2c>
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f0e:	e7fe      	b.n	8007f0e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d103      	bne.n	8007f1e <xQueueGenericSendFromISR+0x3a>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <xQueueGenericSendFromISR+0x3e>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <xQueueGenericSendFromISR+0x40>
 8007f22:	2300      	movs	r3, #0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d109      	bne.n	8007f3c <xQueueGenericSendFromISR+0x58>
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	e7fe      	b.n	8007f3a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d103      	bne.n	8007f4a <xQueueGenericSendFromISR+0x66>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <xQueueGenericSendFromISR+0x6a>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <xQueueGenericSendFromISR+0x6c>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d109      	bne.n	8007f68 <xQueueGenericSendFromISR+0x84>
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	e7fe      	b.n	8007f66 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f68:	f002 fa04 	bl	800a374 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f6c:	f3ef 8211 	mrs	r2, BASEPRI
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	61ba      	str	r2, [r7, #24]
 8007f82:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f84:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f86:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d302      	bcc.n	8007f9a <xQueueGenericSendFromISR+0xb6>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d12c      	bne.n	8007ff4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007faa:	f000 fb54 	bl	8008656 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb6:	d112      	bne.n	8007fde <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d016      	beq.n	8007fee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	3324      	adds	r3, #36	; 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 f92b 	bl	8009220 <xTaskRemoveFromEventList>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00e      	beq.n	8007fee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e007      	b.n	8007fee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	b25a      	sxtb	r2, r3
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ff2:	e001      	b.n	8007ff8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008004:	4618      	mov	r0, r3
 8008006:	3738      	adds	r7, #56	; 0x38
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08e      	sub	sp, #56	; 0x38
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	623b      	str	r3, [r7, #32]
 8008032:	e7fe      	b.n	8008032 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <xQueueGiveFromISR+0x44>
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	61fb      	str	r3, [r7, #28]
 800804e:	e7fe      	b.n	800804e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <xQueueGiveFromISR+0x54>
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <xQueueGiveFromISR+0x58>
 8008060:	2301      	movs	r3, #1
 8008062:	e000      	b.n	8008066 <xQueueGiveFromISR+0x5a>
 8008064:	2300      	movs	r3, #0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <xQueueGiveFromISR+0x72>
 800806a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	61bb      	str	r3, [r7, #24]
 800807c:	e7fe      	b.n	800807c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800807e:	f002 f979 	bl	800a374 <vPortValidateInterruptPriority>
	__asm volatile
 8008082:	f3ef 8211 	mrs	r2, BASEPRI
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	617a      	str	r2, [r7, #20]
 8008098:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800809a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800809c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d22b      	bcs.n	8008106 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80080c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d112      	bne.n	80080f0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d016      	beq.n	8008100 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	3324      	adds	r3, #36	; 0x24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 f8a2 	bl	8009220 <xTaskRemoveFromEventList>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00e      	beq.n	8008100 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2201      	movs	r2, #1
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	e007      	b.n	8008100 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080f4:	3301      	adds	r3, #1
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	b25a      	sxtb	r2, r3
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008100:	2301      	movs	r3, #1
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
 8008104:	e001      	b.n	800810a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008106:	2300      	movs	r3, #0
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
 800810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008116:	4618      	mov	r0, r3
 8008118:	3738      	adds	r7, #56	; 0x38
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08c      	sub	sp, #48	; 0x30
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d109      	bne.n	800814e <xQueueReceive+0x2e>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	623b      	str	r3, [r7, #32]
 800814c:	e7fe      	b.n	800814c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d103      	bne.n	800815c <xQueueReceive+0x3c>
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <xQueueReceive+0x40>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <xQueueReceive+0x42>
 8008160:	2300      	movs	r3, #0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <xQueueReceive+0x5a>
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e7fe      	b.n	8008178 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800817a:	f001 fa0d 	bl	8009598 <xTaskGetSchedulerState>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d102      	bne.n	800818a <xQueueReceive+0x6a>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <xQueueReceive+0x6e>
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <xQueueReceive+0x70>
 800818e:	2300      	movs	r3, #0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <xQueueReceive+0x88>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	e7fe      	b.n	80081a6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80081a8:	f002 f808 	bl	800a1bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01f      	beq.n	80081f8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081bc:	f000 fab5 	bl	800872a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	1e5a      	subs	r2, r3, #1
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00f      	beq.n	80081f0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	3310      	adds	r3, #16
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 f823 	bl	8009220 <xTaskRemoveFromEventList>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d007      	beq.n	80081f0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081e0:	4b3c      	ldr	r3, [pc, #240]	; (80082d4 <xQueueReceive+0x1b4>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081f0:	f002 f812 	bl	800a218 <vPortExitCritical>
				return pdPASS;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e069      	b.n	80082cc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081fe:	f002 f80b 	bl	800a218 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008202:	2300      	movs	r3, #0
 8008204:	e062      	b.n	80082cc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800820c:	f107 0310 	add.w	r3, r7, #16
 8008210:	4618      	mov	r0, r3
 8008212:	f001 f867 	bl	80092e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008216:	2301      	movs	r3, #1
 8008218:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800821a:	f001 fffd 	bl	800a218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800821e:	f000 fddd 	bl	8008ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008222:	f001 ffcb 	bl	800a1bc <vPortEnterCritical>
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800822c:	b25b      	sxtb	r3, r3
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d103      	bne.n	800823c <xQueueReceive+0x11c>
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008242:	b25b      	sxtb	r3, r3
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d103      	bne.n	8008252 <xQueueReceive+0x132>
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008252:	f001 ffe1 	bl	800a218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008256:	1d3a      	adds	r2, r7, #4
 8008258:	f107 0310 	add.w	r3, r7, #16
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f001 f856 	bl	8009310 <xTaskCheckForTimeOut>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d123      	bne.n	80082b2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800826a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800826c:	f000 fad5 	bl	800881a <prvIsQueueEmpty>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d017      	beq.n	80082a6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	3324      	adds	r3, #36	; 0x24
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f000 ff80 	bl	8009184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008286:	f000 fa76 	bl	8008776 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800828a:	f000 fdb5 	bl	8008df8 <xTaskResumeAll>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d189      	bne.n	80081a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008294:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <xQueueReceive+0x1b4>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy
 80082a4:	e780      	b.n	80081a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80082a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082a8:	f000 fa65 	bl	8008776 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082ac:	f000 fda4 	bl	8008df8 <xTaskResumeAll>
 80082b0:	e77a      	b.n	80081a8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80082b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082b4:	f000 fa5f 	bl	8008776 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082b8:	f000 fd9e 	bl	8008df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082be:	f000 faac 	bl	800881a <prvIsQueueEmpty>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f43f af6f 	beq.w	80081a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3730      	adds	r7, #48	; 0x30
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	e000ed04 	.word	0xe000ed04

080082d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08e      	sub	sp, #56	; 0x38
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80082e2:	2300      	movs	r3, #0
 80082e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d109      	bne.n	8008308 <xQueueSemaphoreTake+0x30>
 80082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f8:	f383 8811 	msr	BASEPRI, r3
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	623b      	str	r3, [r7, #32]
 8008306:	e7fe      	b.n	8008306 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d009      	beq.n	8008324 <xQueueSemaphoreTake+0x4c>
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	61fb      	str	r3, [r7, #28]
 8008322:	e7fe      	b.n	8008322 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008324:	f001 f938 	bl	8009598 <xTaskGetSchedulerState>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <xQueueSemaphoreTake+0x5c>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <xQueueSemaphoreTake+0x60>
 8008334:	2301      	movs	r3, #1
 8008336:	e000      	b.n	800833a <xQueueSemaphoreTake+0x62>
 8008338:	2300      	movs	r3, #0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <xQueueSemaphoreTake+0x7a>
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	61bb      	str	r3, [r7, #24]
 8008350:	e7fe      	b.n	8008350 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008352:	f001 ff33 	bl	800a1bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d024      	beq.n	80083ac <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	1e5a      	subs	r2, r3, #1
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d104      	bne.n	800837c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008372:	f001 fa8d 	bl	8009890 <pvTaskIncrementMutexHeldCount>
 8008376:	4602      	mov	r2, r0
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00f      	beq.n	80083a4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	3310      	adds	r3, #16
 8008388:	4618      	mov	r0, r3
 800838a:	f000 ff49 	bl	8009220 <xTaskRemoveFromEventList>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008394:	4b53      	ldr	r3, [pc, #332]	; (80084e4 <xQueueSemaphoreTake+0x20c>)
 8008396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80083a4:	f001 ff38 	bl	800a218 <vPortExitCritical>
				return pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e096      	b.n	80084da <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d110      	bne.n	80083d4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d009      	beq.n	80083cc <xQueueSemaphoreTake+0xf4>
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	e7fe      	b.n	80083ca <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80083cc:	f001 ff24 	bl	800a218 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e082      	b.n	80084da <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083da:	f107 030c 	add.w	r3, r7, #12
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 ff80 	bl	80092e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083e8:	f001 ff16 	bl	800a218 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083ec:	f000 fcf6 	bl	8008ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083f0:	f001 fee4 	bl	800a1bc <vPortEnterCritical>
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083fa:	b25b      	sxtb	r3, r3
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d103      	bne.n	800840a <xQueueSemaphoreTake+0x132>
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008410:	b25b      	sxtb	r3, r3
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d103      	bne.n	8008420 <xQueueSemaphoreTake+0x148>
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008420:	f001 fefa 	bl	800a218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008424:	463a      	mov	r2, r7
 8008426:	f107 030c 	add.w	r3, r7, #12
 800842a:	4611      	mov	r1, r2
 800842c:	4618      	mov	r0, r3
 800842e:	f000 ff6f 	bl	8009310 <xTaskCheckForTimeOut>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d132      	bne.n	800849e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800843a:	f000 f9ee 	bl	800881a <prvIsQueueEmpty>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d026      	beq.n	8008492 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800844c:	f001 feb6 	bl	800a1bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	4618      	mov	r0, r3
 8008456:	f001 f8bd 	bl	80095d4 <xTaskPriorityInherit>
 800845a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800845c:	f001 fedc 	bl	800a218 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	3324      	adds	r3, #36	; 0x24
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	4611      	mov	r1, r2
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fe8b 	bl	8009184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800846e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008470:	f000 f981 	bl	8008776 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008474:	f000 fcc0 	bl	8008df8 <xTaskResumeAll>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	f47f af69 	bne.w	8008352 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008480:	4b18      	ldr	r3, [pc, #96]	; (80084e4 <xQueueSemaphoreTake+0x20c>)
 8008482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	e75f      	b.n	8008352 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008494:	f000 f96f 	bl	8008776 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008498:	f000 fcae 	bl	8008df8 <xTaskResumeAll>
 800849c:	e759      	b.n	8008352 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800849e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084a0:	f000 f969 	bl	8008776 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084a4:	f000 fca8 	bl	8008df8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084aa:	f000 f9b6 	bl	800881a <prvIsQueueEmpty>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f43f af4e 	beq.w	8008352 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00d      	beq.n	80084d8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80084bc:	f001 fe7e 	bl	800a1bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80084c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084c2:	f000 f8b0 	bl	8008626 <prvGetDisinheritPriorityAfterTimeout>
 80084c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 f95a 	bl	8009788 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80084d4:	f001 fea0 	bl	800a218 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3738      	adds	r7, #56	; 0x38
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	e000ed04 	.word	0xe000ed04

080084e8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08e      	sub	sp, #56	; 0x38
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <xQueueReceiveFromISR+0x2a>
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	623b      	str	r3, [r7, #32]
 8008510:	e7fe      	b.n	8008510 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <xQueueReceiveFromISR+0x38>
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <xQueueReceiveFromISR+0x3c>
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <xQueueReceiveFromISR+0x3e>
 8008524:	2300      	movs	r3, #0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d109      	bne.n	800853e <xQueueReceiveFromISR+0x56>
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	61fb      	str	r3, [r7, #28]
 800853c:	e7fe      	b.n	800853c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800853e:	f001 ff19 	bl	800a374 <vPortValidateInterruptPriority>
	__asm volatile
 8008542:	f3ef 8211 	mrs	r2, BASEPRI
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	61ba      	str	r2, [r7, #24]
 8008558:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800855a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	2b00      	cmp	r3, #0
 8008568:	d02f      	beq.n	80085ca <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008578:	f000 f8d7 	bl	800872a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	1e5a      	subs	r2, r3, #1
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008584:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858c:	d112      	bne.n	80085b4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d016      	beq.n	80085c4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	3310      	adds	r3, #16
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fe40 	bl	8009220 <xTaskRemoveFromEventList>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00e      	beq.n	80085c4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	e007      	b.n	80085c4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085b8:	3301      	adds	r3, #1
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	b25a      	sxtb	r2, r3
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80085c4:	2301      	movs	r3, #1
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34
 80085c8:	e001      	b.n	80085ce <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	637b      	str	r3, [r7, #52]	; 0x34
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3738      	adds	r7, #56	; 0x38
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b084      	sub	sp, #16
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d109      	bne.n	8008608 <vQueueDelete+0x26>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60bb      	str	r3, [r7, #8]
 8008606:	e7fe      	b.n	8008606 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f95d 	bl	80088c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f001 ffab 	bl	800a574 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800861e:	bf00      	nop
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d006      	beq.n	8008644 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e001      	b.n	8008648 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008644:	2300      	movs	r3, #0
 8008646:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008648:	68fb      	ldr	r3, [r7, #12]
	}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b086      	sub	sp, #24
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10d      	bne.n	8008690 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d14d      	bne.n	8008718 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	4618      	mov	r0, r3
 8008682:	f001 f815 	bl	80096b0 <xTaskPriorityDisinherit>
 8008686:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	605a      	str	r2, [r3, #4]
 800868e:	e043      	b.n	8008718 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d119      	bne.n	80086ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6898      	ldr	r0, [r3, #8]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869e:	461a      	mov	r2, r3
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	f002 f8a5 	bl	800a7f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	441a      	add	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	689a      	ldr	r2, [r3, #8]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d32b      	bcc.n	8008718 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	609a      	str	r2, [r3, #8]
 80086c8:	e026      	b.n	8008718 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68d8      	ldr	r0, [r3, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	461a      	mov	r2, r3
 80086d4:	68b9      	ldr	r1, [r7, #8]
 80086d6:	f002 f88b 	bl	800a7f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	425b      	negs	r3, r3
 80086e4:	441a      	add	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d207      	bcs.n	8008706 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	425b      	negs	r3, r3
 8008700:	441a      	add	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d105      	bne.n	8008718 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3b01      	subs	r3, #1
 8008716:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008720:	697b      	ldr	r3, [r7, #20]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d018      	beq.n	800876e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68da      	ldr	r2, [r3, #12]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008744:	441a      	add	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	429a      	cmp	r2, r3
 8008754:	d303      	bcc.n	800875e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68d9      	ldr	r1, [r3, #12]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	461a      	mov	r2, r3
 8008768:	6838      	ldr	r0, [r7, #0]
 800876a:	f002 f841 	bl	800a7f0 <memcpy>
	}
}
 800876e:	bf00      	nop
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800877e:	f001 fd1d 	bl	800a1bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008788:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800878a:	e011      	b.n	80087b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d012      	beq.n	80087ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3324      	adds	r3, #36	; 0x24
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fd41 	bl	8009220 <xTaskRemoveFromEventList>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d001      	beq.n	80087a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087a4:	f000 fe14 	bl	80093d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dce9      	bgt.n	800878c <prvUnlockQueue+0x16>
 80087b8:	e000      	b.n	80087bc <prvUnlockQueue+0x46>
					break;
 80087ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	22ff      	movs	r2, #255	; 0xff
 80087c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087c4:	f001 fd28 	bl	800a218 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087c8:	f001 fcf8 	bl	800a1bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087d4:	e011      	b.n	80087fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d012      	beq.n	8008804 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3310      	adds	r3, #16
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fd1c 	bl	8009220 <xTaskRemoveFromEventList>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087ee:	f000 fdef 	bl	80093d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	3b01      	subs	r3, #1
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dce9      	bgt.n	80087d6 <prvUnlockQueue+0x60>
 8008802:	e000      	b.n	8008806 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008804:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	22ff      	movs	r2, #255	; 0xff
 800880a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800880e:	f001 fd03 	bl	800a218 <vPortExitCritical>
}
 8008812:	bf00      	nop
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008822:	f001 fccb 	bl	800a1bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882a:	2b00      	cmp	r3, #0
 800882c:	d102      	bne.n	8008834 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800882e:	2301      	movs	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	e001      	b.n	8008838 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008838:	f001 fcee 	bl	800a218 <vPortExitCritical>

	return xReturn;
 800883c:	68fb      	ldr	r3, [r7, #12]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b084      	sub	sp, #16
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800884e:	f001 fcb5 	bl	800a1bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885a:	429a      	cmp	r2, r3
 800885c:	d102      	bne.n	8008864 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800885e:	2301      	movs	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	e001      	b.n	8008868 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008868:	f001 fcd6 	bl	800a218 <vPortExitCritical>

	return xReturn;
 800886c:	68fb      	ldr	r3, [r7, #12]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	e014      	b.n	80088b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008888:	4a0e      	ldr	r2, [pc, #56]	; (80088c4 <vQueueAddToRegistry+0x4c>)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008894:	490b      	ldr	r1, [pc, #44]	; (80088c4 <vQueueAddToRegistry+0x4c>)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800889e:	4a09      	ldr	r2, [pc, #36]	; (80088c4 <vQueueAddToRegistry+0x4c>)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4413      	add	r3, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80088aa:	e005      	b.n	80088b8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b07      	cmp	r3, #7
 80088b6:	d9e7      	bls.n	8008888 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	200025cc 	.word	0x200025cc

080088c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	e016      	b.n	8008904 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088d6:	4a10      	ldr	r2, [pc, #64]	; (8008918 <vQueueUnregisterQueue+0x50>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	4413      	add	r3, r2
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d10b      	bne.n	80088fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80088e6:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <vQueueUnregisterQueue+0x50>)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2100      	movs	r1, #0
 80088ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088f0:	4a09      	ldr	r2, [pc, #36]	; (8008918 <vQueueUnregisterQueue+0x50>)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	00db      	lsls	r3, r3, #3
 80088f6:	4413      	add	r3, r2
 80088f8:	2200      	movs	r2, #0
 80088fa:	605a      	str	r2, [r3, #4]
				break;
 80088fc:	e005      	b.n	800890a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b07      	cmp	r3, #7
 8008908:	d9e5      	bls.n	80088d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	200025cc 	.word	0x200025cc

0800891c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800892c:	f001 fc46 	bl	800a1bc <vPortEnterCritical>
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008936:	b25b      	sxtb	r3, r3
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d103      	bne.n	8008946 <vQueueWaitForMessageRestricted+0x2a>
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800894c:	b25b      	sxtb	r3, r3
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d103      	bne.n	800895c <vQueueWaitForMessageRestricted+0x40>
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800895c:	f001 fc5c 	bl	800a218 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	3324      	adds	r3, #36	; 0x24
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	68b9      	ldr	r1, [r7, #8]
 8008970:	4618      	mov	r0, r3
 8008972:	f000 fc2b 	bl	80091cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008976:	6978      	ldr	r0, [r7, #20]
 8008978:	f7ff fefd 	bl	8008776 <prvUnlockQueue>
	}
 800897c:	bf00      	nop
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08e      	sub	sp, #56	; 0x38
 8008988:	af04      	add	r7, sp, #16
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <xTaskCreateStatic+0x28>
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	623b      	str	r3, [r7, #32]
 80089aa:	e7fe      	b.n	80089aa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <xTaskCreateStatic+0x42>
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	e7fe      	b.n	80089c4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089c6:	235c      	movs	r3, #92	; 0x5c
 80089c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b5c      	cmp	r3, #92	; 0x5c
 80089ce:	d009      	beq.n	80089e4 <xTaskCreateStatic+0x60>
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	e7fe      	b.n	80089e2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d01e      	beq.n	8008a28 <xTaskCreateStatic+0xa4>
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01b      	beq.n	8008a28 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	2202      	movs	r2, #2
 80089fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a02:	2300      	movs	r3, #0
 8008a04:	9303      	str	r3, [sp, #12]
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	f107 0314 	add.w	r3, r7, #20
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f850 	bl	8008ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a22:	f000 f8d3 	bl	8008bcc <prvAddNewTaskToReadyList>
 8008a26:	e001      	b.n	8008a2c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a2c:	697b      	ldr	r3, [r7, #20]
	}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3728      	adds	r7, #40	; 0x28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b08c      	sub	sp, #48	; 0x30
 8008a3a:	af04      	add	r7, sp, #16
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	603b      	str	r3, [r7, #0]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a46:	88fb      	ldrh	r3, [r7, #6]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 fcd0 	bl	800a3f0 <pvPortMalloc>
 8008a50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00e      	beq.n	8008a76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008a58:	205c      	movs	r0, #92	; 0x5c
 8008a5a:	f001 fcc9 	bl	800a3f0 <pvPortMalloc>
 8008a5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a6c:	e005      	b.n	8008a7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	f001 fd80 	bl	800a574 <vPortFree>
 8008a74:	e001      	b.n	8008a7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d017      	beq.n	8008ab0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a88:	88fa      	ldrh	r2, [r7, #6]
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9303      	str	r3, [sp, #12]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	9302      	str	r3, [sp, #8]
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f80e 	bl	8008ac0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aa4:	69f8      	ldr	r0, [r7, #28]
 8008aa6:	f000 f891 	bl	8008bcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	61bb      	str	r3, [r7, #24]
 8008aae:	e002      	b.n	8008ab6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
	}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3720      	adds	r7, #32
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	21a5      	movs	r1, #165	; 0xa5
 8008ada:	f001 fe94 	bl	800a806 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	f023 0307 	bic.w	r3, r3, #7
 8008af6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d009      	beq.n	8008b16 <prvInitialiseNewTask+0x56>
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	e7fe      	b.n	8008b14 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b16:	2300      	movs	r3, #0
 8008b18:	61fb      	str	r3, [r7, #28]
 8008b1a:	e012      	b.n	8008b42 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	7819      	ldrb	r1, [r3, #0]
 8008b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	4413      	add	r3, r2
 8008b2a:	3334      	adds	r3, #52	; 0x34
 8008b2c:	460a      	mov	r2, r1
 8008b2e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	4413      	add	r3, r2
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d006      	beq.n	8008b4a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	61fb      	str	r3, [r7, #28]
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	2b0f      	cmp	r3, #15
 8008b46:	d9e9      	bls.n	8008b1c <prvInitialiseNewTask+0x5c>
 8008b48:	e000      	b.n	8008b4c <prvInitialiseNewTask+0x8c>
		{
			break;
 8008b4a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	2b37      	cmp	r3, #55	; 0x37
 8008b58:	d901      	bls.n	8008b5e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b5a:	2337      	movs	r3, #55	; 0x37
 8008b5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b68:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	3304      	adds	r3, #4
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fe39 	bl	80077ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	3318      	adds	r3, #24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fe34 	bl	80077ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	69b8      	ldr	r0, [r7, #24]
 8008bae:	f001 f9e1 	bl	8009f74 <pxPortInitialiseStack>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bc4:	bf00      	nop
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bd4:	f001 faf2 	bl	800a1bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bd8:	4b2d      	ldr	r3, [pc, #180]	; (8008c90 <prvAddNewTaskToReadyList+0xc4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	4a2c      	ldr	r2, [pc, #176]	; (8008c90 <prvAddNewTaskToReadyList+0xc4>)
 8008be0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008be2:	4b2c      	ldr	r3, [pc, #176]	; (8008c94 <prvAddNewTaskToReadyList+0xc8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d109      	bne.n	8008bfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bea:	4a2a      	ldr	r2, [pc, #168]	; (8008c94 <prvAddNewTaskToReadyList+0xc8>)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bf0:	4b27      	ldr	r3, [pc, #156]	; (8008c90 <prvAddNewTaskToReadyList+0xc4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d110      	bne.n	8008c1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bf8:	f000 fc0e 	bl	8009418 <prvInitialiseTaskLists>
 8008bfc:	e00d      	b.n	8008c1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bfe:	4b26      	ldr	r3, [pc, #152]	; (8008c98 <prvAddNewTaskToReadyList+0xcc>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d109      	bne.n	8008c1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c06:	4b23      	ldr	r3, [pc, #140]	; (8008c94 <prvAddNewTaskToReadyList+0xc8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d802      	bhi.n	8008c1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c14:	4a1f      	ldr	r2, [pc, #124]	; (8008c94 <prvAddNewTaskToReadyList+0xc8>)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c1a:	4b20      	ldr	r3, [pc, #128]	; (8008c9c <prvAddNewTaskToReadyList+0xd0>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4a1e      	ldr	r2, [pc, #120]	; (8008c9c <prvAddNewTaskToReadyList+0xd0>)
 8008c22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <prvAddNewTaskToReadyList+0xd0>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c30:	4b1b      	ldr	r3, [pc, #108]	; (8008ca0 <prvAddNewTaskToReadyList+0xd4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d903      	bls.n	8008c40 <prvAddNewTaskToReadyList+0x74>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3c:	4a18      	ldr	r2, [pc, #96]	; (8008ca0 <prvAddNewTaskToReadyList+0xd4>)
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4a15      	ldr	r2, [pc, #84]	; (8008ca4 <prvAddNewTaskToReadyList+0xd8>)
 8008c4e:	441a      	add	r2, r3
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3304      	adds	r3, #4
 8008c54:	4619      	mov	r1, r3
 8008c56:	4610      	mov	r0, r2
 8008c58:	f7fe fdd5 	bl	8007806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c5c:	f001 fadc 	bl	800a218 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c60:	4b0d      	ldr	r3, [pc, #52]	; (8008c98 <prvAddNewTaskToReadyList+0xcc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00e      	beq.n	8008c86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c68:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <prvAddNewTaskToReadyList+0xc8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d207      	bcs.n	8008c86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c76:	4b0c      	ldr	r3, [pc, #48]	; (8008ca8 <prvAddNewTaskToReadyList+0xdc>)
 8008c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000d30 	.word	0x20000d30
 8008c94:	2000085c 	.word	0x2000085c
 8008c98:	20000d3c 	.word	0x20000d3c
 8008c9c:	20000d4c 	.word	0x20000d4c
 8008ca0:	20000d38 	.word	0x20000d38
 8008ca4:	20000860 	.word	0x20000860
 8008ca8:	e000ed04 	.word	0xe000ed04

08008cac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d016      	beq.n	8008cec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <vTaskDelay+0x60>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d009      	beq.n	8008cda <vTaskDelay+0x2e>
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	60bb      	str	r3, [r7, #8]
 8008cd8:	e7fe      	b.n	8008cd8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008cda:	f000 f87f 	bl	8008ddc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cde:	2100      	movs	r1, #0
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fde9 	bl	80098b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ce6:	f000 f887 	bl	8008df8 <xTaskResumeAll>
 8008cea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d107      	bne.n	8008d02 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008cf2:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <vTaskDelay+0x64>)
 8008cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf8:	601a      	str	r2, [r3, #0]
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d02:	bf00      	nop
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20000d58 	.word	0x20000d58
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	; 0x28
 8008d18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d22:	463a      	mov	r2, r7
 8008d24:	1d39      	adds	r1, r7, #4
 8008d26:	f107 0308 	add.w	r3, r7, #8
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fd0a 	bl	8007744 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	9202      	str	r2, [sp, #8]
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	460a      	mov	r2, r1
 8008d42:	4920      	ldr	r1, [pc, #128]	; (8008dc4 <vTaskStartScheduler+0xb0>)
 8008d44:	4820      	ldr	r0, [pc, #128]	; (8008dc8 <vTaskStartScheduler+0xb4>)
 8008d46:	f7ff fe1d 	bl	8008984 <xTaskCreateStatic>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	4b1f      	ldr	r3, [pc, #124]	; (8008dcc <vTaskStartScheduler+0xb8>)
 8008d4e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d50:	4b1e      	ldr	r3, [pc, #120]	; (8008dcc <vTaskStartScheduler+0xb8>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	e001      	b.n	8008d62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d102      	bne.n	8008d6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d68:	f000 fdfa 	bl	8009960 <xTimerCreateTimerTask>
 8008d6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d115      	bne.n	8008da0 <vTaskStartScheduler+0x8c>
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d86:	4b12      	ldr	r3, [pc, #72]	; (8008dd0 <vTaskStartScheduler+0xbc>)
 8008d88:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <vTaskStartScheduler+0xc0>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008d94:	4b10      	ldr	r3, [pc, #64]	; (8008dd8 <vTaskStartScheduler+0xc4>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d9a:	f001 f971 	bl	800a080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d9e:	e00d      	b.n	8008dbc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d109      	bne.n	8008dbc <vTaskStartScheduler+0xa8>
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	e7fe      	b.n	8008dba <vTaskStartScheduler+0xa6>
}
 8008dbc:	bf00      	nop
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	0800c2b8 	.word	0x0800c2b8
 8008dc8:	080093e9 	.word	0x080093e9
 8008dcc:	20000d54 	.word	0x20000d54
 8008dd0:	20000d50 	.word	0x20000d50
 8008dd4:	20000d3c 	.word	0x20000d3c
 8008dd8:	20000d34 	.word	0x20000d34

08008ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008de0:	4b04      	ldr	r3, [pc, #16]	; (8008df4 <vTaskSuspendAll+0x18>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3301      	adds	r3, #1
 8008de6:	4a03      	ldr	r2, [pc, #12]	; (8008df4 <vTaskSuspendAll+0x18>)
 8008de8:	6013      	str	r3, [r2, #0]
}
 8008dea:	bf00      	nop
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	20000d58 	.word	0x20000d58

08008df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e06:	4b41      	ldr	r3, [pc, #260]	; (8008f0c <xTaskResumeAll+0x114>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <xTaskResumeAll+0x2a>
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	e7fe      	b.n	8008e20 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e22:	f001 f9cb 	bl	800a1bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e26:	4b39      	ldr	r3, [pc, #228]	; (8008f0c <xTaskResumeAll+0x114>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	4a37      	ldr	r2, [pc, #220]	; (8008f0c <xTaskResumeAll+0x114>)
 8008e2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e30:	4b36      	ldr	r3, [pc, #216]	; (8008f0c <xTaskResumeAll+0x114>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d162      	bne.n	8008efe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e38:	4b35      	ldr	r3, [pc, #212]	; (8008f10 <xTaskResumeAll+0x118>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d05e      	beq.n	8008efe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e40:	e02f      	b.n	8008ea2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008e42:	4b34      	ldr	r3, [pc, #208]	; (8008f14 <xTaskResumeAll+0x11c>)
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fd36 	bl	80078c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fe fd31 	bl	80078c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	4b2d      	ldr	r3, [pc, #180]	; (8008f18 <xTaskResumeAll+0x120>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d903      	bls.n	8008e72 <xTaskResumeAll+0x7a>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a2a      	ldr	r2, [pc, #168]	; (8008f18 <xTaskResumeAll+0x120>)
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4a27      	ldr	r2, [pc, #156]	; (8008f1c <xTaskResumeAll+0x124>)
 8008e80:	441a      	add	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3304      	adds	r3, #4
 8008e86:	4619      	mov	r1, r3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f7fe fcbc 	bl	8007806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e92:	4b23      	ldr	r3, [pc, #140]	; (8008f20 <xTaskResumeAll+0x128>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d302      	bcc.n	8008ea2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e9c:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <xTaskResumeAll+0x12c>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <xTaskResumeAll+0x11c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1cb      	bne.n	8008e42 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008eb0:	f000 fb4c 	bl	800954c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008eb4:	4b1c      	ldr	r3, [pc, #112]	; (8008f28 <xTaskResumeAll+0x130>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d010      	beq.n	8008ee2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ec0:	f000 f846 	bl	8008f50 <xTaskIncrementTick>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d002      	beq.n	8008ed0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008eca:	4b16      	ldr	r3, [pc, #88]	; (8008f24 <xTaskResumeAll+0x12c>)
 8008ecc:	2201      	movs	r2, #1
 8008ece:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1f1      	bne.n	8008ec0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008edc:	4b12      	ldr	r3, [pc, #72]	; (8008f28 <xTaskResumeAll+0x130>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <xTaskResumeAll+0x12c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d009      	beq.n	8008efe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008eea:	2301      	movs	r3, #1
 8008eec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008eee:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <xTaskResumeAll+0x134>)
 8008ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ef4:	601a      	str	r2, [r3, #0]
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008efe:	f001 f98b 	bl	800a218 <vPortExitCritical>

	return xAlreadyYielded;
 8008f02:	68bb      	ldr	r3, [r7, #8]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20000d58 	.word	0x20000d58
 8008f10:	20000d30 	.word	0x20000d30
 8008f14:	20000cf0 	.word	0x20000cf0
 8008f18:	20000d38 	.word	0x20000d38
 8008f1c:	20000860 	.word	0x20000860
 8008f20:	2000085c 	.word	0x2000085c
 8008f24:	20000d44 	.word	0x20000d44
 8008f28:	20000d40 	.word	0x20000d40
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <xTaskGetTickCount+0x1c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f3c:	687b      	ldr	r3, [r7, #4]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	20000d34 	.word	0x20000d34

08008f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f5a:	4b51      	ldr	r3, [pc, #324]	; (80090a0 <xTaskIncrementTick+0x150>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f040 808d 	bne.w	800907e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f64:	4b4f      	ldr	r3, [pc, #316]	; (80090a4 <xTaskIncrementTick+0x154>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f6c:	4a4d      	ldr	r2, [pc, #308]	; (80090a4 <xTaskIncrementTick+0x154>)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d11f      	bne.n	8008fb8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f78:	4b4b      	ldr	r3, [pc, #300]	; (80090a8 <xTaskIncrementTick+0x158>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d009      	beq.n	8008f96 <xTaskIncrementTick+0x46>
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	e7fe      	b.n	8008f94 <xTaskIncrementTick+0x44>
 8008f96:	4b44      	ldr	r3, [pc, #272]	; (80090a8 <xTaskIncrementTick+0x158>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	4b43      	ldr	r3, [pc, #268]	; (80090ac <xTaskIncrementTick+0x15c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a41      	ldr	r2, [pc, #260]	; (80090a8 <xTaskIncrementTick+0x158>)
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	4a41      	ldr	r2, [pc, #260]	; (80090ac <xTaskIncrementTick+0x15c>)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6013      	str	r3, [r2, #0]
 8008faa:	4b41      	ldr	r3, [pc, #260]	; (80090b0 <xTaskIncrementTick+0x160>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	4a3f      	ldr	r2, [pc, #252]	; (80090b0 <xTaskIncrementTick+0x160>)
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	f000 faca 	bl	800954c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fb8:	4b3e      	ldr	r3, [pc, #248]	; (80090b4 <xTaskIncrementTick+0x164>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d34e      	bcc.n	8009060 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fc2:	4b39      	ldr	r3, [pc, #228]	; (80090a8 <xTaskIncrementTick+0x158>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <xTaskIncrementTick+0x80>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <xTaskIncrementTick+0x82>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d004      	beq.n	8008fe0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd6:	4b37      	ldr	r3, [pc, #220]	; (80090b4 <xTaskIncrementTick+0x164>)
 8008fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fdc:	601a      	str	r2, [r3, #0]
					break;
 8008fde:	e03f      	b.n	8009060 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fe0:	4b31      	ldr	r3, [pc, #196]	; (80090a8 <xTaskIncrementTick+0x158>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d203      	bcs.n	8009000 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ff8:	4a2e      	ldr	r2, [pc, #184]	; (80090b4 <xTaskIncrementTick+0x164>)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6013      	str	r3, [r2, #0]
						break;
 8008ffe:	e02f      	b.n	8009060 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	3304      	adds	r3, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fc5b 	bl	80078c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900e:	2b00      	cmp	r3, #0
 8009010:	d004      	beq.n	800901c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	3318      	adds	r3, #24
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe fc52 	bl	80078c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4b25      	ldr	r3, [pc, #148]	; (80090b8 <xTaskIncrementTick+0x168>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	429a      	cmp	r2, r3
 8009026:	d903      	bls.n	8009030 <xTaskIncrementTick+0xe0>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	4a22      	ldr	r2, [pc, #136]	; (80090b8 <xTaskIncrementTick+0x168>)
 800902e:	6013      	str	r3, [r2, #0]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009034:	4613      	mov	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4a1f      	ldr	r2, [pc, #124]	; (80090bc <xTaskIncrementTick+0x16c>)
 800903e:	441a      	add	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	3304      	adds	r3, #4
 8009044:	4619      	mov	r1, r3
 8009046:	4610      	mov	r0, r2
 8009048:	f7fe fbdd 	bl	8007806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009050:	4b1b      	ldr	r3, [pc, #108]	; (80090c0 <xTaskIncrementTick+0x170>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	429a      	cmp	r2, r3
 8009058:	d3b3      	bcc.n	8008fc2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800905a:	2301      	movs	r3, #1
 800905c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800905e:	e7b0      	b.n	8008fc2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009060:	4b17      	ldr	r3, [pc, #92]	; (80090c0 <xTaskIncrementTick+0x170>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009066:	4915      	ldr	r1, [pc, #84]	; (80090bc <xTaskIncrementTick+0x16c>)
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	440b      	add	r3, r1
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d907      	bls.n	8009088 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009078:	2301      	movs	r3, #1
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	e004      	b.n	8009088 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800907e:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <xTaskIncrementTick+0x174>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	4a0f      	ldr	r2, [pc, #60]	; (80090c4 <xTaskIncrementTick+0x174>)
 8009086:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009088:	4b0f      	ldr	r3, [pc, #60]	; (80090c8 <xTaskIncrementTick+0x178>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009090:	2301      	movs	r3, #1
 8009092:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009094:	697b      	ldr	r3, [r7, #20]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20000d58 	.word	0x20000d58
 80090a4:	20000d34 	.word	0x20000d34
 80090a8:	20000ce8 	.word	0x20000ce8
 80090ac:	20000cec 	.word	0x20000cec
 80090b0:	20000d48 	.word	0x20000d48
 80090b4:	20000d50 	.word	0x20000d50
 80090b8:	20000d38 	.word	0x20000d38
 80090bc:	20000860 	.word	0x20000860
 80090c0:	2000085c 	.word	0x2000085c
 80090c4:	20000d40 	.word	0x20000d40
 80090c8:	20000d44 	.word	0x20000d44

080090cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090d2:	4b27      	ldr	r3, [pc, #156]	; (8009170 <vTaskSwitchContext+0xa4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090da:	4b26      	ldr	r3, [pc, #152]	; (8009174 <vTaskSwitchContext+0xa8>)
 80090dc:	2201      	movs	r2, #1
 80090de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090e0:	e040      	b.n	8009164 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80090e2:	4b24      	ldr	r3, [pc, #144]	; (8009174 <vTaskSwitchContext+0xa8>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80090e8:	4b23      	ldr	r3, [pc, #140]	; (8009178 <vTaskSwitchContext+0xac>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	e00f      	b.n	8009110 <vTaskSwitchContext+0x44>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <vTaskSwitchContext+0x3e>
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	607b      	str	r3, [r7, #4]
 8009108:	e7fe      	b.n	8009108 <vTaskSwitchContext+0x3c>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3b01      	subs	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	491a      	ldr	r1, [pc, #104]	; (800917c <vTaskSwitchContext+0xb0>)
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	440b      	add	r3, r1
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0e5      	beq.n	80090f0 <vTaskSwitchContext+0x24>
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	4613      	mov	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4a13      	ldr	r2, [pc, #76]	; (800917c <vTaskSwitchContext+0xb0>)
 8009130:	4413      	add	r3, r2
 8009132:	60bb      	str	r3, [r7, #8]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	605a      	str	r2, [r3, #4]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	3308      	adds	r3, #8
 8009146:	429a      	cmp	r2, r3
 8009148:	d104      	bne.n	8009154 <vTaskSwitchContext+0x88>
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	605a      	str	r2, [r3, #4]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	4a09      	ldr	r2, [pc, #36]	; (8009180 <vTaskSwitchContext+0xb4>)
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	4a06      	ldr	r2, [pc, #24]	; (8009178 <vTaskSwitchContext+0xac>)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6013      	str	r3, [r2, #0]
}
 8009164:	bf00      	nop
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	20000d58 	.word	0x20000d58
 8009174:	20000d44 	.word	0x20000d44
 8009178:	20000d38 	.word	0x20000d38
 800917c:	20000860 	.word	0x20000860
 8009180:	2000085c 	.word	0x2000085c

08009184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d109      	bne.n	80091a8 <vTaskPlaceOnEventList+0x24>
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	60fb      	str	r3, [r7, #12]
 80091a6:	e7fe      	b.n	80091a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091a8:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <vTaskPlaceOnEventList+0x44>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3318      	adds	r3, #24
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7fe fb4c 	bl	800784e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091b6:	2101      	movs	r1, #1
 80091b8:	6838      	ldr	r0, [r7, #0]
 80091ba:	f000 fb7d 	bl	80098b8 <prvAddCurrentTaskToDelayedList>
}
 80091be:	bf00      	nop
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	2000085c 	.word	0x2000085c

080091cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b086      	sub	sp, #24
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d109      	bne.n	80091f2 <vTaskPlaceOnEventListRestricted+0x26>
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	e7fe      	b.n	80091f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091f2:	4b0a      	ldr	r3, [pc, #40]	; (800921c <vTaskPlaceOnEventListRestricted+0x50>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3318      	adds	r3, #24
 80091f8:	4619      	mov	r1, r3
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7fe fb03 	bl	8007806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009206:	f04f 33ff 	mov.w	r3, #4294967295
 800920a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	68b8      	ldr	r0, [r7, #8]
 8009210:	f000 fb52 	bl	80098b8 <prvAddCurrentTaskToDelayedList>
	}
 8009214:	bf00      	nop
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	2000085c 	.word	0x2000085c

08009220 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d109      	bne.n	800924a <xTaskRemoveFromEventList+0x2a>
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e7fe      	b.n	8009248 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	3318      	adds	r3, #24
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fb36 	bl	80078c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009254:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <xTaskRemoveFromEventList+0xac>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d11d      	bne.n	8009298 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	3304      	adds	r3, #4
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fb2d 	bl	80078c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926a:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <xTaskRemoveFromEventList+0xb0>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d903      	bls.n	800927a <xTaskRemoveFromEventList+0x5a>
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	4a16      	ldr	r2, [pc, #88]	; (80092d0 <xTaskRemoveFromEventList+0xb0>)
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4a13      	ldr	r2, [pc, #76]	; (80092d4 <xTaskRemoveFromEventList+0xb4>)
 8009288:	441a      	add	r2, r3
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	3304      	adds	r3, #4
 800928e:	4619      	mov	r1, r3
 8009290:	4610      	mov	r0, r2
 8009292:	f7fe fab8 	bl	8007806 <vListInsertEnd>
 8009296:	e005      	b.n	80092a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	3318      	adds	r3, #24
 800929c:	4619      	mov	r1, r3
 800929e:	480e      	ldr	r0, [pc, #56]	; (80092d8 <xTaskRemoveFromEventList+0xb8>)
 80092a0:	f7fe fab1 	bl	8007806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <xTaskRemoveFromEventList+0xbc>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d905      	bls.n	80092be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80092b2:	2301      	movs	r3, #1
 80092b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80092b6:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <xTaskRemoveFromEventList+0xc0>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	e001      	b.n	80092c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80092c2:	697b      	ldr	r3, [r7, #20]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000d58 	.word	0x20000d58
 80092d0:	20000d38 	.word	0x20000d38
 80092d4:	20000860 	.word	0x20000860
 80092d8:	20000cf0 	.word	0x20000cf0
 80092dc:	2000085c 	.word	0x2000085c
 80092e0:	20000d44 	.word	0x20000d44

080092e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092ec:	4b06      	ldr	r3, [pc, #24]	; (8009308 <vTaskInternalSetTimeOutState+0x24>)
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <vTaskInternalSetTimeOutState+0x28>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	605a      	str	r2, [r3, #4]
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	20000d48 	.word	0x20000d48
 800930c:	20000d34 	.word	0x20000d34

08009310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d109      	bne.n	8009334 <xTaskCheckForTimeOut+0x24>
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	613b      	str	r3, [r7, #16]
 8009332:	e7fe      	b.n	8009332 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <xTaskCheckForTimeOut+0x3e>
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	e7fe      	b.n	800934c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800934e:	f000 ff35 	bl	800a1bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009352:	4b1d      	ldr	r3, [pc, #116]	; (80093c8 <xTaskCheckForTimeOut+0xb8>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936a:	d102      	bne.n	8009372 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800936c:	2300      	movs	r3, #0
 800936e:	61fb      	str	r3, [r7, #28]
 8009370:	e023      	b.n	80093ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	4b15      	ldr	r3, [pc, #84]	; (80093cc <xTaskCheckForTimeOut+0xbc>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d007      	beq.n	800938e <xTaskCheckForTimeOut+0x7e>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	429a      	cmp	r2, r3
 8009386:	d302      	bcc.n	800938e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009388:	2301      	movs	r3, #1
 800938a:	61fb      	str	r3, [r7, #28]
 800938c:	e015      	b.n	80093ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	429a      	cmp	r2, r3
 8009396:	d20b      	bcs.n	80093b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f7ff ff9d 	bl	80092e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093aa:	2300      	movs	r3, #0
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	e004      	b.n	80093ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093b6:	2301      	movs	r3, #1
 80093b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093ba:	f000 ff2d 	bl	800a218 <vPortExitCritical>

	return xReturn;
 80093be:	69fb      	ldr	r3, [r7, #28]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3720      	adds	r7, #32
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000d34 	.word	0x20000d34
 80093cc:	20000d48 	.word	0x20000d48

080093d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093d4:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <vTaskMissedYield+0x14>)
 80093d6:	2201      	movs	r2, #1
 80093d8:	601a      	str	r2, [r3, #0]
}
 80093da:	bf00      	nop
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	20000d44 	.word	0x20000d44

080093e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093f0:	f000 f852 	bl	8009498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093f4:	4b06      	ldr	r3, [pc, #24]	; (8009410 <prvIdleTask+0x28>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d9f9      	bls.n	80093f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <prvIdleTask+0x2c>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800940c:	e7f0      	b.n	80093f0 <prvIdleTask+0x8>
 800940e:	bf00      	nop
 8009410:	20000860 	.word	0x20000860
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	e00c      	b.n	800943e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a12      	ldr	r2, [pc, #72]	; (8009478 <prvInitialiseTaskLists+0x60>)
 8009430:	4413      	add	r3, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe f9ba 	bl	80077ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3301      	adds	r3, #1
 800943c:	607b      	str	r3, [r7, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b37      	cmp	r3, #55	; 0x37
 8009442:	d9ef      	bls.n	8009424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009444:	480d      	ldr	r0, [pc, #52]	; (800947c <prvInitialiseTaskLists+0x64>)
 8009446:	f7fe f9b1 	bl	80077ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800944a:	480d      	ldr	r0, [pc, #52]	; (8009480 <prvInitialiseTaskLists+0x68>)
 800944c:	f7fe f9ae 	bl	80077ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009450:	480c      	ldr	r0, [pc, #48]	; (8009484 <prvInitialiseTaskLists+0x6c>)
 8009452:	f7fe f9ab 	bl	80077ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009456:	480c      	ldr	r0, [pc, #48]	; (8009488 <prvInitialiseTaskLists+0x70>)
 8009458:	f7fe f9a8 	bl	80077ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800945c:	480b      	ldr	r0, [pc, #44]	; (800948c <prvInitialiseTaskLists+0x74>)
 800945e:	f7fe f9a5 	bl	80077ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009462:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <prvInitialiseTaskLists+0x78>)
 8009464:	4a05      	ldr	r2, [pc, #20]	; (800947c <prvInitialiseTaskLists+0x64>)
 8009466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <prvInitialiseTaskLists+0x7c>)
 800946a:	4a05      	ldr	r2, [pc, #20]	; (8009480 <prvInitialiseTaskLists+0x68>)
 800946c:	601a      	str	r2, [r3, #0]
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000860 	.word	0x20000860
 800947c:	20000cc0 	.word	0x20000cc0
 8009480:	20000cd4 	.word	0x20000cd4
 8009484:	20000cf0 	.word	0x20000cf0
 8009488:	20000d04 	.word	0x20000d04
 800948c:	20000d1c 	.word	0x20000d1c
 8009490:	20000ce8 	.word	0x20000ce8
 8009494:	20000cec 	.word	0x20000cec

08009498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800949e:	e019      	b.n	80094d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094a0:	f000 fe8c 	bl	800a1bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80094a4:	4b0f      	ldr	r3, [pc, #60]	; (80094e4 <prvCheckTasksWaitingTermination+0x4c>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fe fa05 	bl	80078c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094b6:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <prvCheckTasksWaitingTermination+0x50>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	4a0a      	ldr	r2, [pc, #40]	; (80094e8 <prvCheckTasksWaitingTermination+0x50>)
 80094be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094c0:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <prvCheckTasksWaitingTermination+0x54>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	4a09      	ldr	r2, [pc, #36]	; (80094ec <prvCheckTasksWaitingTermination+0x54>)
 80094c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094ca:	f000 fea5 	bl	800a218 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f80e 	bl	80094f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094d4:	4b05      	ldr	r3, [pc, #20]	; (80094ec <prvCheckTasksWaitingTermination+0x54>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e1      	bne.n	80094a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	20000d04 	.word	0x20000d04
 80094e8:	20000d30 	.word	0x20000d30
 80094ec:	20000d18 	.word	0x20000d18

080094f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d108      	bne.n	8009514 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	4618      	mov	r0, r3
 8009508:	f001 f834 	bl	800a574 <vPortFree>
				vPortFree( pxTCB );
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 f831 	bl	800a574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009512:	e017      	b.n	8009544 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800951a:	2b01      	cmp	r3, #1
 800951c:	d103      	bne.n	8009526 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 f828 	bl	800a574 <vPortFree>
	}
 8009524:	e00e      	b.n	8009544 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800952c:	2b02      	cmp	r3, #2
 800952e:	d009      	beq.n	8009544 <prvDeleteTCB+0x54>
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	60fb      	str	r3, [r7, #12]
 8009542:	e7fe      	b.n	8009542 <prvDeleteTCB+0x52>
	}
 8009544:	bf00      	nop
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009552:	4b0f      	ldr	r3, [pc, #60]	; (8009590 <prvResetNextTaskUnblockTime+0x44>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <prvResetNextTaskUnblockTime+0x14>
 800955c:	2301      	movs	r3, #1
 800955e:	e000      	b.n	8009562 <prvResetNextTaskUnblockTime+0x16>
 8009560:	2300      	movs	r3, #0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009566:	4b0b      	ldr	r3, [pc, #44]	; (8009594 <prvResetNextTaskUnblockTime+0x48>)
 8009568:	f04f 32ff 	mov.w	r2, #4294967295
 800956c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800956e:	e008      	b.n	8009582 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <prvResetNextTaskUnblockTime+0x44>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	4a05      	ldr	r2, [pc, #20]	; (8009594 <prvResetNextTaskUnblockTime+0x48>)
 8009580:	6013      	str	r3, [r2, #0]
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	20000ce8 	.word	0x20000ce8
 8009594:	20000d50 	.word	0x20000d50

08009598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800959e:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <xTaskGetSchedulerState+0x34>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d102      	bne.n	80095ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095a6:	2301      	movs	r3, #1
 80095a8:	607b      	str	r3, [r7, #4]
 80095aa:	e008      	b.n	80095be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ac:	4b08      	ldr	r3, [pc, #32]	; (80095d0 <xTaskGetSchedulerState+0x38>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d102      	bne.n	80095ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095b4:	2302      	movs	r3, #2
 80095b6:	607b      	str	r3, [r7, #4]
 80095b8:	e001      	b.n	80095be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095ba:	2300      	movs	r3, #0
 80095bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095be:	687b      	ldr	r3, [r7, #4]
	}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	20000d3c 	.word	0x20000d3c
 80095d0:	20000d58 	.word	0x20000d58

080095d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d056      	beq.n	8009698 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ee:	4b2d      	ldr	r3, [pc, #180]	; (80096a4 <xTaskPriorityInherit+0xd0>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d246      	bcs.n	8009686 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	db06      	blt.n	800960e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009600:	4b28      	ldr	r3, [pc, #160]	; (80096a4 <xTaskPriorityInherit+0xd0>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009606:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6959      	ldr	r1, [r3, #20]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4a22      	ldr	r2, [pc, #136]	; (80096a8 <xTaskPriorityInherit+0xd4>)
 8009620:	4413      	add	r3, r2
 8009622:	4299      	cmp	r1, r3
 8009624:	d101      	bne.n	800962a <xTaskPriorityInherit+0x56>
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <xTaskPriorityInherit+0x58>
 800962a:	2300      	movs	r3, #0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d022      	beq.n	8009676 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3304      	adds	r3, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe f943 	bl	80078c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800963a:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <xTaskPriorityInherit+0xd0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009648:	4b18      	ldr	r3, [pc, #96]	; (80096ac <xTaskPriorityInherit+0xd8>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	429a      	cmp	r2, r3
 800964e:	d903      	bls.n	8009658 <xTaskPriorityInherit+0x84>
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	4a15      	ldr	r2, [pc, #84]	; (80096ac <xTaskPriorityInherit+0xd8>)
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4a10      	ldr	r2, [pc, #64]	; (80096a8 <xTaskPriorityInherit+0xd4>)
 8009666:	441a      	add	r2, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f7fe f8c9 	bl	8007806 <vListInsertEnd>
 8009674:	e004      	b.n	8009680 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009676:	4b0b      	ldr	r3, [pc, #44]	; (80096a4 <xTaskPriorityInherit+0xd0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e008      	b.n	8009698 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800968a:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <xTaskPriorityInherit+0xd0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	429a      	cmp	r2, r3
 8009692:	d201      	bcs.n	8009698 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009694:	2301      	movs	r3, #1
 8009696:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009698:	68fb      	ldr	r3, [r7, #12]
	}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	2000085c 	.word	0x2000085c
 80096a8:	20000860 	.word	0x20000860
 80096ac:	20000d38 	.word	0x20000d38

080096b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b086      	sub	sp, #24
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096bc:	2300      	movs	r3, #0
 80096be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d054      	beq.n	8009770 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096c6:	4b2d      	ldr	r3, [pc, #180]	; (800977c <xTaskPriorityDisinherit+0xcc>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d009      	beq.n	80096e4 <xTaskPriorityDisinherit+0x34>
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e7fe      	b.n	80096e2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d109      	bne.n	8009700 <xTaskPriorityDisinherit+0x50>
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	60bb      	str	r3, [r7, #8]
 80096fe:	e7fe      	b.n	80096fe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009704:	1e5a      	subs	r2, r3, #1
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009712:	429a      	cmp	r2, r3
 8009714:	d02c      	beq.n	8009770 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971a:	2b00      	cmp	r3, #0
 800971c:	d128      	bne.n	8009770 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3304      	adds	r3, #4
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe f8cc 	bl	80078c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009734:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009740:	4b0f      	ldr	r3, [pc, #60]	; (8009780 <xTaskPriorityDisinherit+0xd0>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d903      	bls.n	8009750 <xTaskPriorityDisinherit+0xa0>
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974c:	4a0c      	ldr	r2, [pc, #48]	; (8009780 <xTaskPriorityDisinherit+0xd0>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4a09      	ldr	r2, [pc, #36]	; (8009784 <xTaskPriorityDisinherit+0xd4>)
 800975e:	441a      	add	r2, r3
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3304      	adds	r3, #4
 8009764:	4619      	mov	r1, r3
 8009766:	4610      	mov	r0, r2
 8009768:	f7fe f84d 	bl	8007806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800976c:	2301      	movs	r3, #1
 800976e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009770:	697b      	ldr	r3, [r7, #20]
	}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	2000085c 	.word	0x2000085c
 8009780:	20000d38 	.word	0x20000d38
 8009784:	20000860 	.word	0x20000860

08009788 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009796:	2301      	movs	r3, #1
 8009798:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d06d      	beq.n	800987c <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <vTaskPriorityDisinheritAfterTimeout+0x34>
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	60fb      	str	r3, [r7, #12]
 80097ba:	e7fe      	b.n	80097ba <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d902      	bls.n	80097cc <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	61fb      	str	r3, [r7, #28]
 80097ca:	e002      	b.n	80097d2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d04f      	beq.n	800987c <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d14a      	bne.n	800987c <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80097e6:	4b27      	ldr	r3, [pc, #156]	; (8009884 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d109      	bne.n	8009804 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	60bb      	str	r3, [r7, #8]
 8009802:	e7fe      	b.n	8009802 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	db04      	blt.n	8009822 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	6959      	ldr	r1, [r3, #20]
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4a15      	ldr	r2, [pc, #84]	; (8009888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009832:	4413      	add	r3, r2
 8009834:	4299      	cmp	r1, r3
 8009836:	d101      	bne.n	800983c <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800983c:	2300      	movs	r3, #0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d01c      	beq.n	800987c <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	3304      	adds	r3, #4
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe f83a 	bl	80078c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	4b0e      	ldr	r3, [pc, #56]	; (800988c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	429a      	cmp	r2, r3
 8009856:	d903      	bls.n	8009860 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a0b      	ldr	r2, [pc, #44]	; (800988c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800985e:	6013      	str	r3, [r2, #0]
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4a06      	ldr	r2, [pc, #24]	; (8009888 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800986e:	441a      	add	r2, r3
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	3304      	adds	r3, #4
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f7fd ffc5 	bl	8007806 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800987c:	bf00      	nop
 800987e:	3720      	adds	r7, #32
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	2000085c 	.word	0x2000085c
 8009888:	20000860 	.word	0x20000860
 800988c:	20000d38 	.word	0x20000d38

08009890 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009894:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d004      	beq.n	80098a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800989c:	4b05      	ldr	r3, [pc, #20]	; (80098b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098a2:	3201      	adds	r2, #1
 80098a4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80098a6:	4b03      	ldr	r3, [pc, #12]	; (80098b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80098a8:	681b      	ldr	r3, [r3, #0]
	}
 80098aa:	4618      	mov	r0, r3
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	2000085c 	.word	0x2000085c

080098b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098c2:	4b21      	ldr	r3, [pc, #132]	; (8009948 <prvAddCurrentTaskToDelayedList+0x90>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098c8:	4b20      	ldr	r3, [pc, #128]	; (800994c <prvAddCurrentTaskToDelayedList+0x94>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd fff6 	bl	80078c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098da:	d10a      	bne.n	80098f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098e2:	4b1a      	ldr	r3, [pc, #104]	; (800994c <prvAddCurrentTaskToDelayedList+0x94>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4619      	mov	r1, r3
 80098ea:	4819      	ldr	r0, [pc, #100]	; (8009950 <prvAddCurrentTaskToDelayedList+0x98>)
 80098ec:	f7fd ff8b 	bl	8007806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098f0:	e026      	b.n	8009940 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4413      	add	r3, r2
 80098f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098fa:	4b14      	ldr	r3, [pc, #80]	; (800994c <prvAddCurrentTaskToDelayedList+0x94>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	429a      	cmp	r2, r3
 8009908:	d209      	bcs.n	800991e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800990a:	4b12      	ldr	r3, [pc, #72]	; (8009954 <prvAddCurrentTaskToDelayedList+0x9c>)
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	4b0f      	ldr	r3, [pc, #60]	; (800994c <prvAddCurrentTaskToDelayedList+0x94>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3304      	adds	r3, #4
 8009914:	4619      	mov	r1, r3
 8009916:	4610      	mov	r0, r2
 8009918:	f7fd ff99 	bl	800784e <vListInsert>
}
 800991c:	e010      	b.n	8009940 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800991e:	4b0e      	ldr	r3, [pc, #56]	; (8009958 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	4b0a      	ldr	r3, [pc, #40]	; (800994c <prvAddCurrentTaskToDelayedList+0x94>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3304      	adds	r3, #4
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f7fd ff8f 	bl	800784e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	429a      	cmp	r2, r3
 8009938:	d202      	bcs.n	8009940 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800993a:	4a08      	ldr	r2, [pc, #32]	; (800995c <prvAddCurrentTaskToDelayedList+0xa4>)
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	6013      	str	r3, [r2, #0]
}
 8009940:	bf00      	nop
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20000d34 	.word	0x20000d34
 800994c:	2000085c 	.word	0x2000085c
 8009950:	20000d1c 	.word	0x20000d1c
 8009954:	20000cec 	.word	0x20000cec
 8009958:	20000ce8 	.word	0x20000ce8
 800995c:	20000d50 	.word	0x20000d50

08009960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009966:	2300      	movs	r3, #0
 8009968:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800996a:	f000 fac3 	bl	8009ef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800996e:	4b1c      	ldr	r3, [pc, #112]	; (80099e0 <xTimerCreateTimerTask+0x80>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d021      	beq.n	80099ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800997e:	1d3a      	adds	r2, r7, #4
 8009980:	f107 0108 	add.w	r1, r7, #8
 8009984:	f107 030c 	add.w	r3, r7, #12
 8009988:	4618      	mov	r0, r3
 800998a:	f7fd fef5 	bl	8007778 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	9202      	str	r2, [sp, #8]
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	2302      	movs	r3, #2
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	2300      	movs	r3, #0
 800999e:	460a      	mov	r2, r1
 80099a0:	4910      	ldr	r1, [pc, #64]	; (80099e4 <xTimerCreateTimerTask+0x84>)
 80099a2:	4811      	ldr	r0, [pc, #68]	; (80099e8 <xTimerCreateTimerTask+0x88>)
 80099a4:	f7fe ffee 	bl	8008984 <xTaskCreateStatic>
 80099a8:	4602      	mov	r2, r0
 80099aa:	4b10      	ldr	r3, [pc, #64]	; (80099ec <xTimerCreateTimerTask+0x8c>)
 80099ac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099ae:	4b0f      	ldr	r3, [pc, #60]	; (80099ec <xTimerCreateTimerTask+0x8c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099b6:	2301      	movs	r3, #1
 80099b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <xTimerCreateTimerTask+0x74>
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
 80099d2:	e7fe      	b.n	80099d2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80099d4:	697b      	ldr	r3, [r7, #20]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000d8c 	.word	0x20000d8c
 80099e4:	0800c2c0 	.word	0x0800c2c0
 80099e8:	08009b09 	.word	0x08009b09
 80099ec:	20000d90 	.word	0x20000d90

080099f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08a      	sub	sp, #40	; 0x28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d109      	bne.n	8009a1c <xTimerGenericCommand+0x2c>
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	623b      	str	r3, [r7, #32]
 8009a1a:	e7fe      	b.n	8009a1a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a1c:	4b19      	ldr	r3, [pc, #100]	; (8009a84 <xTimerGenericCommand+0x94>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d02a      	beq.n	8009a7a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2b05      	cmp	r3, #5
 8009a34:	dc18      	bgt.n	8009a68 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a36:	f7ff fdaf 	bl	8009598 <xTaskGetSchedulerState>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d109      	bne.n	8009a54 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a40:	4b10      	ldr	r3, [pc, #64]	; (8009a84 <xTimerGenericCommand+0x94>)
 8009a42:	6818      	ldr	r0, [r3, #0]
 8009a44:	f107 0110 	add.w	r1, r7, #16
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a4c:	f7fe f950 	bl	8007cf0 <xQueueGenericSend>
 8009a50:	6278      	str	r0, [r7, #36]	; 0x24
 8009a52:	e012      	b.n	8009a7a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a54:	4b0b      	ldr	r3, [pc, #44]	; (8009a84 <xTimerGenericCommand+0x94>)
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	f107 0110 	add.w	r1, r7, #16
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f7fe f946 	bl	8007cf0 <xQueueGenericSend>
 8009a64:	6278      	str	r0, [r7, #36]	; 0x24
 8009a66:	e008      	b.n	8009a7a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a68:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <xTimerGenericCommand+0x94>)
 8009a6a:	6818      	ldr	r0, [r3, #0]
 8009a6c:	f107 0110 	add.w	r1, r7, #16
 8009a70:	2300      	movs	r3, #0
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	f7fe fa36 	bl	8007ee4 <xQueueGenericSendFromISR>
 8009a78:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3728      	adds	r7, #40	; 0x28
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	20000d8c 	.word	0x20000d8c

08009a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af02      	add	r7, sp, #8
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a92:	4b1c      	ldr	r3, [pc, #112]	; (8009b04 <prvProcessExpiredTimer+0x7c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fd ff0d 	bl	80078c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d121      	bne.n	8009af2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	699a      	ldr	r2, [r3, #24]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	18d1      	adds	r1, r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	6978      	ldr	r0, [r7, #20]
 8009abc:	f000 f8c8 	bl	8009c50 <prvInsertTimerInActiveList>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d015      	beq.n	8009af2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	2300      	movs	r3, #0
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	2100      	movs	r1, #0
 8009ad0:	6978      	ldr	r0, [r7, #20]
 8009ad2:	f7ff ff8d 	bl	80099f0 <xTimerGenericCommand>
 8009ad6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <prvProcessExpiredTimer+0x6a>
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	e7fe      	b.n	8009af0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	6978      	ldr	r0, [r7, #20]
 8009af8:	4798      	blx	r3
}
 8009afa:	bf00      	nop
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000d84 	.word	0x20000d84

08009b08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b10:	f107 0308 	add.w	r3, r7, #8
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 f857 	bl	8009bc8 <prvGetNextExpireTime>
 8009b1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f803 	bl	8009b2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b26:	f000 f8d5 	bl	8009cd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b2a:	e7f1      	b.n	8009b10 <prvTimerTask+0x8>

08009b2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b36:	f7ff f951 	bl	8008ddc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b3a:	f107 0308 	add.w	r3, r7, #8
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f866 	bl	8009c10 <prvSampleTimeNow>
 8009b44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d130      	bne.n	8009bae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <prvProcessTimerOrBlockTask+0x3c>
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d806      	bhi.n	8009b68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b5a:	f7ff f94d 	bl	8008df8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b5e:	68f9      	ldr	r1, [r7, #12]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff ff91 	bl	8009a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b66:	e024      	b.n	8009bb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d008      	beq.n	8009b80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b6e:	4b13      	ldr	r3, [pc, #76]	; (8009bbc <prvProcessTimerOrBlockTask+0x90>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bf0c      	ite	eq
 8009b78:	2301      	moveq	r3, #1
 8009b7a:	2300      	movne	r3, #0
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b80:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <prvProcessTimerOrBlockTask+0x94>)
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	f7fe fec5 	bl	800891c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b92:	f7ff f931 	bl	8008df8 <xTaskResumeAll>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b9c:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <prvProcessTimerOrBlockTask+0x98>)
 8009b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	f3bf 8f6f 	isb	sy
}
 8009bac:	e001      	b.n	8009bb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009bae:	f7ff f923 	bl	8008df8 <xTaskResumeAll>
}
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000d88 	.word	0x20000d88
 8009bc0:	20000d8c 	.word	0x20000d8c
 8009bc4:	e000ed04 	.word	0xe000ed04

08009bc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bd0:	4b0e      	ldr	r3, [pc, #56]	; (8009c0c <prvGetNextExpireTime+0x44>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bf0c      	ite	eq
 8009bda:	2301      	moveq	r3, #1
 8009bdc:	2300      	movne	r3, #0
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	461a      	mov	r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d105      	bne.n	8009bfa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bee:	4b07      	ldr	r3, [pc, #28]	; (8009c0c <prvGetNextExpireTime+0x44>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	e001      	b.n	8009bfe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	20000d84 	.word	0x20000d84

08009c10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c18:	f7ff f98a 	bl	8008f30 <xTaskGetTickCount>
 8009c1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	; (8009c4c <prvSampleTimeNow+0x3c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d205      	bcs.n	8009c34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c28:	f000 f904 	bl	8009e34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	e002      	b.n	8009c3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c3a:	4a04      	ldr	r2, [pc, #16]	; (8009c4c <prvSampleTimeNow+0x3c>)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c40:	68fb      	ldr	r3, [r7, #12]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000d94 	.word	0x20000d94

08009c50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d812      	bhi.n	8009c9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	1ad2      	subs	r2, r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d302      	bcc.n	8009c8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c84:	2301      	movs	r3, #1
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	e01b      	b.n	8009cc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c8a:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <prvInsertTimerInActiveList+0x7c>)
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	3304      	adds	r3, #4
 8009c92:	4619      	mov	r1, r3
 8009c94:	4610      	mov	r0, r2
 8009c96:	f7fd fdda 	bl	800784e <vListInsert>
 8009c9a:	e012      	b.n	8009cc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d206      	bcs.n	8009cb2 <prvInsertTimerInActiveList+0x62>
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d302      	bcc.n	8009cb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009cac:	2301      	movs	r3, #1
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	e007      	b.n	8009cc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cb2:	4b07      	ldr	r3, [pc, #28]	; (8009cd0 <prvInsertTimerInActiveList+0x80>)
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	f7fd fdc6 	bl	800784e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cc2:	697b      	ldr	r3, [r7, #20]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	20000d88 	.word	0x20000d88
 8009cd0:	20000d84 	.word	0x20000d84

08009cd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08e      	sub	sp, #56	; 0x38
 8009cd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cda:	e099      	b.n	8009e10 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	da17      	bge.n	8009d12 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ce2:	1d3b      	adds	r3, r7, #4
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d109      	bne.n	8009d02 <prvProcessReceivedCommands+0x2e>
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e7fe      	b.n	8009d00 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d08:	6850      	ldr	r0, [r2, #4]
 8009d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d0c:	6892      	ldr	r2, [r2, #8]
 8009d0e:	4611      	mov	r1, r2
 8009d10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	db7a      	blt.n	8009e0e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d004      	beq.n	8009d2e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	3304      	adds	r3, #4
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fd fdc9 	bl	80078c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d2e:	463b      	mov	r3, r7
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff ff6d 	bl	8009c10 <prvSampleTimeNow>
 8009d36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b09      	cmp	r3, #9
 8009d3c:	d868      	bhi.n	8009e10 <prvProcessReceivedCommands+0x13c>
 8009d3e:	a201      	add	r2, pc, #4	; (adr r2, 8009d44 <prvProcessReceivedCommands+0x70>)
 8009d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d44:	08009d6d 	.word	0x08009d6d
 8009d48:	08009d6d 	.word	0x08009d6d
 8009d4c:	08009d6d 	.word	0x08009d6d
 8009d50:	08009e11 	.word	0x08009e11
 8009d54:	08009dc7 	.word	0x08009dc7
 8009d58:	08009dfd 	.word	0x08009dfd
 8009d5c:	08009d6d 	.word	0x08009d6d
 8009d60:	08009d6d 	.word	0x08009d6d
 8009d64:	08009e11 	.word	0x08009e11
 8009d68:	08009dc7 	.word	0x08009dc7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	18d1      	adds	r1, r2, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d7a:	f7ff ff69 	bl	8009c50 <prvInsertTimerInActiveList>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d045      	beq.n	8009e10 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d8a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d13d      	bne.n	8009e10 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d94:	68ba      	ldr	r2, [r7, #8]
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	441a      	add	r2, r3
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	2300      	movs	r3, #0
 8009da2:	2100      	movs	r1, #0
 8009da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da6:	f7ff fe23 	bl	80099f0 <xTimerGenericCommand>
 8009daa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d12e      	bne.n	8009e10 <prvProcessReceivedCommands+0x13c>
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	61bb      	str	r3, [r7, #24]
 8009dc4:	e7fe      	b.n	8009dc4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d109      	bne.n	8009de8 <prvProcessReceivedCommands+0x114>
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	617b      	str	r3, [r7, #20]
 8009de6:	e7fe      	b.n	8009de6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	699a      	ldr	r2, [r3, #24]
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	18d1      	adds	r1, r2, r3
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009df6:	f7ff ff2b 	bl	8009c50 <prvInsertTimerInActiveList>
					break;
 8009dfa:	e009      	b.n	8009e10 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d104      	bne.n	8009e10 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8009e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e08:	f000 fbb4 	bl	800a574 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e0c:	e000      	b.n	8009e10 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e0e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e10:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <prvProcessReceivedCommands+0x15c>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	1d39      	adds	r1, r7, #4
 8009e16:	2200      	movs	r2, #0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe f981 	bl	8008120 <xQueueReceive>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f47f af5b 	bne.w	8009cdc <prvProcessReceivedCommands+0x8>
	}
}
 8009e26:	bf00      	nop
 8009e28:	3730      	adds	r7, #48	; 0x30
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000d8c 	.word	0x20000d8c

08009e34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e3a:	e044      	b.n	8009ec6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e3c:	4b2b      	ldr	r3, [pc, #172]	; (8009eec <prvSwitchTimerLists+0xb8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e46:	4b29      	ldr	r3, [pc, #164]	; (8009eec <prvSwitchTimerLists+0xb8>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3304      	adds	r3, #4
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7fd fd33 	bl	80078c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d12d      	bne.n	8009ec6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	4413      	add	r3, r2
 8009e72:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d90e      	bls.n	8009e9a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e88:	4b18      	ldr	r3, [pc, #96]	; (8009eec <prvSwitchTimerLists+0xb8>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3304      	adds	r3, #4
 8009e90:	4619      	mov	r1, r3
 8009e92:	4610      	mov	r0, r2
 8009e94:	f7fd fcdb 	bl	800784e <vListInsert>
 8009e98:	e015      	b.n	8009ec6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff fda3 	bl	80099f0 <xTimerGenericCommand>
 8009eaa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d109      	bne.n	8009ec6 <prvSwitchTimerLists+0x92>
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	e7fe      	b.n	8009ec4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ec6:	4b09      	ldr	r3, [pc, #36]	; (8009eec <prvSwitchTimerLists+0xb8>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1b5      	bne.n	8009e3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <prvSwitchTimerLists+0xb8>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ed6:	4b06      	ldr	r3, [pc, #24]	; (8009ef0 <prvSwitchTimerLists+0xbc>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a04      	ldr	r2, [pc, #16]	; (8009eec <prvSwitchTimerLists+0xb8>)
 8009edc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ede:	4a04      	ldr	r2, [pc, #16]	; (8009ef0 <prvSwitchTimerLists+0xbc>)
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	6013      	str	r3, [r2, #0]
}
 8009ee4:	bf00      	nop
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000d84 	.word	0x20000d84
 8009ef0:	20000d88 	.word	0x20000d88

08009ef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009efa:	f000 f95f 	bl	800a1bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009efe:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <prvCheckForValidListAndQueue+0x60>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d120      	bne.n	8009f48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f06:	4814      	ldr	r0, [pc, #80]	; (8009f58 <prvCheckForValidListAndQueue+0x64>)
 8009f08:	f7fd fc50 	bl	80077ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f0c:	4813      	ldr	r0, [pc, #76]	; (8009f5c <prvCheckForValidListAndQueue+0x68>)
 8009f0e:	f7fd fc4d 	bl	80077ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f12:	4b13      	ldr	r3, [pc, #76]	; (8009f60 <prvCheckForValidListAndQueue+0x6c>)
 8009f14:	4a10      	ldr	r2, [pc, #64]	; (8009f58 <prvCheckForValidListAndQueue+0x64>)
 8009f16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f18:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <prvCheckForValidListAndQueue+0x70>)
 8009f1a:	4a10      	ldr	r2, [pc, #64]	; (8009f5c <prvCheckForValidListAndQueue+0x68>)
 8009f1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	4b11      	ldr	r3, [pc, #68]	; (8009f68 <prvCheckForValidListAndQueue+0x74>)
 8009f24:	4a11      	ldr	r2, [pc, #68]	; (8009f6c <prvCheckForValidListAndQueue+0x78>)
 8009f26:	2110      	movs	r1, #16
 8009f28:	200a      	movs	r0, #10
 8009f2a:	f7fd fd5b 	bl	80079e4 <xQueueGenericCreateStatic>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	4b08      	ldr	r3, [pc, #32]	; (8009f54 <prvCheckForValidListAndQueue+0x60>)
 8009f32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f34:	4b07      	ldr	r3, [pc, #28]	; (8009f54 <prvCheckForValidListAndQueue+0x60>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d005      	beq.n	8009f48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f3c:	4b05      	ldr	r3, [pc, #20]	; (8009f54 <prvCheckForValidListAndQueue+0x60>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	490b      	ldr	r1, [pc, #44]	; (8009f70 <prvCheckForValidListAndQueue+0x7c>)
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fc98 	bl	8008878 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f48:	f000 f966 	bl	800a218 <vPortExitCritical>
}
 8009f4c:	bf00      	nop
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20000d8c 	.word	0x20000d8c
 8009f58:	20000d5c 	.word	0x20000d5c
 8009f5c:	20000d70 	.word	0x20000d70
 8009f60:	20000d84 	.word	0x20000d84
 8009f64:	20000d88 	.word	0x20000d88
 8009f68:	20000e38 	.word	0x20000e38
 8009f6c:	20000d98 	.word	0x20000d98
 8009f70:	0800c2c8 	.word	0x0800c2c8

08009f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3b04      	subs	r3, #4
 8009f84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3b04      	subs	r3, #4
 8009f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f023 0201 	bic.w	r2, r3, #1
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3b04      	subs	r3, #4
 8009fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fa4:	4a0c      	ldr	r2, [pc, #48]	; (8009fd8 <pxPortInitialiseStack+0x64>)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3b14      	subs	r3, #20
 8009fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3b04      	subs	r3, #4
 8009fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f06f 0202 	mvn.w	r2, #2
 8009fc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3b20      	subs	r3, #32
 8009fc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fca:	68fb      	ldr	r3, [r7, #12]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	08009fdd 	.word	0x08009fdd

08009fdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009fe6:	4b11      	ldr	r3, [pc, #68]	; (800a02c <prvTaskExitError+0x50>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fee:	d009      	beq.n	800a004 <prvTaskExitError+0x28>
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	e7fe      	b.n	800a002 <prvTaskExitError+0x26>
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a016:	bf00      	nop
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0fc      	beq.n	800a018 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	200000e4 	.word	0x200000e4

0800a030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a030:	4b07      	ldr	r3, [pc, #28]	; (800a050 <pxCurrentTCBConst2>)
 800a032:	6819      	ldr	r1, [r3, #0]
 800a034:	6808      	ldr	r0, [r1, #0]
 800a036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03a:	f380 8809 	msr	PSP, r0
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f04f 0000 	mov.w	r0, #0
 800a046:	f380 8811 	msr	BASEPRI, r0
 800a04a:	4770      	bx	lr
 800a04c:	f3af 8000 	nop.w

0800a050 <pxCurrentTCBConst2>:
 800a050:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop

0800a058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a058:	4808      	ldr	r0, [pc, #32]	; (800a07c <prvPortStartFirstTask+0x24>)
 800a05a:	6800      	ldr	r0, [r0, #0]
 800a05c:	6800      	ldr	r0, [r0, #0]
 800a05e:	f380 8808 	msr	MSP, r0
 800a062:	f04f 0000 	mov.w	r0, #0
 800a066:	f380 8814 	msr	CONTROL, r0
 800a06a:	b662      	cpsie	i
 800a06c:	b661      	cpsie	f
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	df00      	svc	0
 800a078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a07a:	bf00      	nop
 800a07c:	e000ed08 	.word	0xe000ed08

0800a080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a086:	4b44      	ldr	r3, [pc, #272]	; (800a198 <xPortStartScheduler+0x118>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a44      	ldr	r2, [pc, #272]	; (800a19c <xPortStartScheduler+0x11c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d109      	bne.n	800a0a4 <xPortStartScheduler+0x24>
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	e7fe      	b.n	800a0a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0a4:	4b3c      	ldr	r3, [pc, #240]	; (800a198 <xPortStartScheduler+0x118>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a3d      	ldr	r2, [pc, #244]	; (800a1a0 <xPortStartScheduler+0x120>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d109      	bne.n	800a0c2 <xPortStartScheduler+0x42>
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e7fe      	b.n	800a0c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0c2:	4b38      	ldr	r3, [pc, #224]	; (800a1a4 <xPortStartScheduler+0x124>)
 800a0c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	22ff      	movs	r2, #255	; 0xff
 800a0d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0dc:	78fb      	ldrb	r3, [r7, #3]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	4b30      	ldr	r3, [pc, #192]	; (800a1a8 <xPortStartScheduler+0x128>)
 800a0e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0ea:	4b30      	ldr	r3, [pc, #192]	; (800a1ac <xPortStartScheduler+0x12c>)
 800a0ec:	2207      	movs	r2, #7
 800a0ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0f0:	e009      	b.n	800a106 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a0f2:	4b2e      	ldr	r3, [pc, #184]	; (800a1ac <xPortStartScheduler+0x12c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	4a2c      	ldr	r2, [pc, #176]	; (800a1ac <xPortStartScheduler+0x12c>)
 800a0fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	b2db      	uxtb	r3, r3
 800a104:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a10e:	2b80      	cmp	r3, #128	; 0x80
 800a110:	d0ef      	beq.n	800a0f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a112:	4b26      	ldr	r3, [pc, #152]	; (800a1ac <xPortStartScheduler+0x12c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f1c3 0307 	rsb	r3, r3, #7
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d009      	beq.n	800a132 <xPortStartScheduler+0xb2>
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	60bb      	str	r3, [r7, #8]
 800a130:	e7fe      	b.n	800a130 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a132:	4b1e      	ldr	r3, [pc, #120]	; (800a1ac <xPortStartScheduler+0x12c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	021b      	lsls	r3, r3, #8
 800a138:	4a1c      	ldr	r2, [pc, #112]	; (800a1ac <xPortStartScheduler+0x12c>)
 800a13a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a13c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ac <xPortStartScheduler+0x12c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a144:	4a19      	ldr	r2, [pc, #100]	; (800a1ac <xPortStartScheduler+0x12c>)
 800a146:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a150:	4b17      	ldr	r3, [pc, #92]	; (800a1b0 <xPortStartScheduler+0x130>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a16      	ldr	r2, [pc, #88]	; (800a1b0 <xPortStartScheduler+0x130>)
 800a156:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a15a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a15c:	4b14      	ldr	r3, [pc, #80]	; (800a1b0 <xPortStartScheduler+0x130>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a13      	ldr	r2, [pc, #76]	; (800a1b0 <xPortStartScheduler+0x130>)
 800a162:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a166:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a168:	f000 f8d6 	bl	800a318 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a16c:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <xPortStartScheduler+0x134>)
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a172:	f000 f8f5 	bl	800a360 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <xPortStartScheduler+0x138>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a0f      	ldr	r2, [pc, #60]	; (800a1b8 <xPortStartScheduler+0x138>)
 800a17c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a180:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a182:	f7ff ff69 	bl	800a058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a186:	f7fe ffa1 	bl	80090cc <vTaskSwitchContext>
	prvTaskExitError();
 800a18a:	f7ff ff27 	bl	8009fdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	e000ed00 	.word	0xe000ed00
 800a19c:	410fc271 	.word	0x410fc271
 800a1a0:	410fc270 	.word	0x410fc270
 800a1a4:	e000e400 	.word	0xe000e400
 800a1a8:	20000e88 	.word	0x20000e88
 800a1ac:	20000e8c 	.word	0x20000e8c
 800a1b0:	e000ed20 	.word	0xe000ed20
 800a1b4:	200000e4 	.word	0x200000e4
 800a1b8:	e000ef34 	.word	0xe000ef34

0800a1bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1d4:	4b0e      	ldr	r3, [pc, #56]	; (800a210 <vPortEnterCritical+0x54>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	4a0d      	ldr	r2, [pc, #52]	; (800a210 <vPortEnterCritical+0x54>)
 800a1dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1de:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <vPortEnterCritical+0x54>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d10e      	bne.n	800a204 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <vPortEnterCritical+0x58>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d009      	beq.n	800a204 <vPortEnterCritical+0x48>
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	603b      	str	r3, [r7, #0]
 800a202:	e7fe      	b.n	800a202 <vPortEnterCritical+0x46>
	}
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	200000e4 	.word	0x200000e4
 800a214:	e000ed04 	.word	0xe000ed04

0800a218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a21e:	4b11      	ldr	r3, [pc, #68]	; (800a264 <vPortExitCritical+0x4c>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <vPortExitCritical+0x22>
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	607b      	str	r3, [r7, #4]
 800a238:	e7fe      	b.n	800a238 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a23a:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <vPortExitCritical+0x4c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	3b01      	subs	r3, #1
 800a240:	4a08      	ldr	r2, [pc, #32]	; (800a264 <vPortExitCritical+0x4c>)
 800a242:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a244:	4b07      	ldr	r3, [pc, #28]	; (800a264 <vPortExitCritical+0x4c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d104      	bne.n	800a256 <vPortExitCritical+0x3e>
 800a24c:	2300      	movs	r3, #0
 800a24e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a256:	bf00      	nop
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	200000e4 	.word	0x200000e4
	...

0800a270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a270:	f3ef 8009 	mrs	r0, PSP
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	4b15      	ldr	r3, [pc, #84]	; (800a2d0 <pxCurrentTCBConst>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	f01e 0f10 	tst.w	lr, #16
 800a280:	bf08      	it	eq
 800a282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	6010      	str	r0, [r2, #0]
 800a28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a290:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a294:	f380 8811 	msr	BASEPRI, r0
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f7fe ff14 	bl	80090cc <vTaskSwitchContext>
 800a2a4:	f04f 0000 	mov.w	r0, #0
 800a2a8:	f380 8811 	msr	BASEPRI, r0
 800a2ac:	bc09      	pop	{r0, r3}
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	6808      	ldr	r0, [r1, #0]
 800a2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b6:	f01e 0f10 	tst.w	lr, #16
 800a2ba:	bf08      	it	eq
 800a2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2c0:	f380 8809 	msr	PSP, r0
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst>:
 800a2d0:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2f0:	f7fe fe2e 	bl	8008f50 <xTaskIncrementTick>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2fa:	4b06      	ldr	r3, [pc, #24]	; (800a314 <SysTick_Handler+0x3c>)
 800a2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	2300      	movs	r3, #0
 800a304:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	e000ed04 	.word	0xe000ed04

0800a318 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a31c:	4b0b      	ldr	r3, [pc, #44]	; (800a34c <vPortSetupTimerInterrupt+0x34>)
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a322:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <vPortSetupTimerInterrupt+0x38>)
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a328:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <vPortSetupTimerInterrupt+0x3c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a0a      	ldr	r2, [pc, #40]	; (800a358 <vPortSetupTimerInterrupt+0x40>)
 800a32e:	fba2 2303 	umull	r2, r3, r2, r3
 800a332:	099b      	lsrs	r3, r3, #6
 800a334:	4a09      	ldr	r2, [pc, #36]	; (800a35c <vPortSetupTimerInterrupt+0x44>)
 800a336:	3b01      	subs	r3, #1
 800a338:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a33a:	4b04      	ldr	r3, [pc, #16]	; (800a34c <vPortSetupTimerInterrupt+0x34>)
 800a33c:	2207      	movs	r2, #7
 800a33e:	601a      	str	r2, [r3, #0]
}
 800a340:	bf00      	nop
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	e000e010 	.word	0xe000e010
 800a350:	e000e018 	.word	0xe000e018
 800a354:	200000bc 	.word	0x200000bc
 800a358:	10624dd3 	.word	0x10624dd3
 800a35c:	e000e014 	.word	0xe000e014

0800a360 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a360:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a370 <vPortEnableVFP+0x10>
 800a364:	6801      	ldr	r1, [r0, #0]
 800a366:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a36a:	6001      	str	r1, [r0, #0]
 800a36c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a36e:	bf00      	nop
 800a370:	e000ed88 	.word	0xe000ed88

0800a374 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a37a:	f3ef 8305 	mrs	r3, IPSR
 800a37e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b0f      	cmp	r3, #15
 800a384:	d913      	bls.n	800a3ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a386:	4a16      	ldr	r2, [pc, #88]	; (800a3e0 <vPortValidateInterruptPriority+0x6c>)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4413      	add	r3, r2
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a390:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <vPortValidateInterruptPriority+0x70>)
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	7afa      	ldrb	r2, [r7, #11]
 800a396:	429a      	cmp	r2, r3
 800a398:	d209      	bcs.n	800a3ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	607b      	str	r3, [r7, #4]
 800a3ac:	e7fe      	b.n	800a3ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a3ae:	4b0e      	ldr	r3, [pc, #56]	; (800a3e8 <vPortValidateInterruptPriority+0x74>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	; (800a3ec <vPortValidateInterruptPriority+0x78>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d909      	bls.n	800a3d2 <vPortValidateInterruptPriority+0x5e>
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	603b      	str	r3, [r7, #0]
 800a3d0:	e7fe      	b.n	800a3d0 <vPortValidateInterruptPriority+0x5c>
	}
 800a3d2:	bf00      	nop
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	e000e3f0 	.word	0xe000e3f0
 800a3e4:	20000e88 	.word	0x20000e88
 800a3e8:	e000ed0c 	.word	0xe000ed0c
 800a3ec:	20000e8c 	.word	0x20000e8c

0800a3f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08a      	sub	sp, #40	; 0x28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3fc:	f7fe fcee 	bl	8008ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a400:	4b57      	ldr	r3, [pc, #348]	; (800a560 <pvPortMalloc+0x170>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a408:	f000 f90c 	bl	800a624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a40c:	4b55      	ldr	r3, [pc, #340]	; (800a564 <pvPortMalloc+0x174>)
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4013      	ands	r3, r2
 800a414:	2b00      	cmp	r3, #0
 800a416:	f040 808c 	bne.w	800a532 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d01c      	beq.n	800a45a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a420:	2208      	movs	r2, #8
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4413      	add	r3, r2
 800a426:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d013      	beq.n	800a45a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f023 0307 	bic.w	r3, r3, #7
 800a438:	3308      	adds	r3, #8
 800a43a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	2b00      	cmp	r3, #0
 800a444:	d009      	beq.n	800a45a <pvPortMalloc+0x6a>
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	e7fe      	b.n	800a458 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d068      	beq.n	800a532 <pvPortMalloc+0x142>
 800a460:	4b41      	ldr	r3, [pc, #260]	; (800a568 <pvPortMalloc+0x178>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	429a      	cmp	r2, r3
 800a468:	d863      	bhi.n	800a532 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a46a:	4b40      	ldr	r3, [pc, #256]	; (800a56c <pvPortMalloc+0x17c>)
 800a46c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a46e:	4b3f      	ldr	r3, [pc, #252]	; (800a56c <pvPortMalloc+0x17c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a474:	e004      	b.n	800a480 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	429a      	cmp	r2, r3
 800a488:	d903      	bls.n	800a492 <pvPortMalloc+0xa2>
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1f1      	bne.n	800a476 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a492:	4b33      	ldr	r3, [pc, #204]	; (800a560 <pvPortMalloc+0x170>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a498:	429a      	cmp	r2, r3
 800a49a:	d04a      	beq.n	800a532 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2208      	movs	r2, #8
 800a4a2:	4413      	add	r3, r2
 800a4a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	1ad2      	subs	r2, r2, r3
 800a4b6:	2308      	movs	r3, #8
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d91e      	bls.n	800a4fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	f003 0307 	and.w	r3, r3, #7
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <pvPortMalloc+0xf4>
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	613b      	str	r3, [r7, #16]
 800a4e2:	e7fe      	b.n	800a4e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	1ad2      	subs	r2, r2, r3
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4f6:	69b8      	ldr	r0, [r7, #24]
 800a4f8:	f000 f8f6 	bl	800a6e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4fc:	4b1a      	ldr	r3, [pc, #104]	; (800a568 <pvPortMalloc+0x178>)
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	4a18      	ldr	r2, [pc, #96]	; (800a568 <pvPortMalloc+0x178>)
 800a508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a50a:	4b17      	ldr	r3, [pc, #92]	; (800a568 <pvPortMalloc+0x178>)
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	4b18      	ldr	r3, [pc, #96]	; (800a570 <pvPortMalloc+0x180>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d203      	bcs.n	800a51e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a516:	4b14      	ldr	r3, [pc, #80]	; (800a568 <pvPortMalloc+0x178>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a15      	ldr	r2, [pc, #84]	; (800a570 <pvPortMalloc+0x180>)
 800a51c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	4b10      	ldr	r3, [pc, #64]	; (800a564 <pvPortMalloc+0x174>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	431a      	orrs	r2, r3
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a532:	f7fe fc61 	bl	8008df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	f003 0307 	and.w	r3, r3, #7
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d009      	beq.n	800a554 <pvPortMalloc+0x164>
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	e7fe      	b.n	800a552 <pvPortMalloc+0x162>
	return pvReturn;
 800a554:	69fb      	ldr	r3, [r7, #28]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3728      	adds	r7, #40	; 0x28
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20001e38 	.word	0x20001e38
 800a564:	20001e44 	.word	0x20001e44
 800a568:	20001e3c 	.word	0x20001e3c
 800a56c:	20001e30 	.word	0x20001e30
 800a570:	20001e40 	.word	0x20001e40

0800a574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d046      	beq.n	800a614 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a586:	2308      	movs	r3, #8
 800a588:	425b      	negs	r3, r3
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	4413      	add	r3, r2
 800a58e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	4b20      	ldr	r3, [pc, #128]	; (800a61c <vPortFree+0xa8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4013      	ands	r3, r2
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d109      	bne.n	800a5b6 <vPortFree+0x42>
 800a5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	e7fe      	b.n	800a5b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d009      	beq.n	800a5d2 <vPortFree+0x5e>
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60bb      	str	r3, [r7, #8]
 800a5d0:	e7fe      	b.n	800a5d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	685a      	ldr	r2, [r3, #4]
 800a5d6:	4b11      	ldr	r3, [pc, #68]	; (800a61c <vPortFree+0xa8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4013      	ands	r3, r2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d019      	beq.n	800a614 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d115      	bne.n	800a614 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	4b0b      	ldr	r3, [pc, #44]	; (800a61c <vPortFree+0xa8>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	43db      	mvns	r3, r3
 800a5f2:	401a      	ands	r2, r3
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5f8:	f7fe fbf0 	bl	8008ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	4b07      	ldr	r3, [pc, #28]	; (800a620 <vPortFree+0xac>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4413      	add	r3, r2
 800a606:	4a06      	ldr	r2, [pc, #24]	; (800a620 <vPortFree+0xac>)
 800a608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a60a:	6938      	ldr	r0, [r7, #16]
 800a60c:	f000 f86c 	bl	800a6e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a610:	f7fe fbf2 	bl	8008df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a614:	bf00      	nop
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	20001e44 	.word	0x20001e44
 800a620:	20001e3c 	.word	0x20001e3c

0800a624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a62a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a62e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a630:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <prvHeapInit+0xac>)
 800a632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f003 0307 	and.w	r3, r3, #7
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00c      	beq.n	800a658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3307      	adds	r3, #7
 800a642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f023 0307 	bic.w	r3, r3, #7
 800a64a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	4a1f      	ldr	r2, [pc, #124]	; (800a6d0 <prvHeapInit+0xac>)
 800a654:	4413      	add	r3, r2
 800a656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a65c:	4a1d      	ldr	r2, [pc, #116]	; (800a6d4 <prvHeapInit+0xb0>)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a662:	4b1c      	ldr	r3, [pc, #112]	; (800a6d4 <prvHeapInit+0xb0>)
 800a664:	2200      	movs	r2, #0
 800a666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	4413      	add	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a670:	2208      	movs	r2, #8
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	1a9b      	subs	r3, r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 0307 	bic.w	r3, r3, #7
 800a67e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <prvHeapInit+0xb4>)
 800a684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a686:	4b14      	ldr	r3, [pc, #80]	; (800a6d8 <prvHeapInit+0xb4>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2200      	movs	r2, #0
 800a68c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a68e:	4b12      	ldr	r3, [pc, #72]	; (800a6d8 <prvHeapInit+0xb4>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a6a4:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <prvHeapInit+0xb4>)
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <prvHeapInit+0xb8>)
 800a6b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <prvHeapInit+0xbc>)
 800a6ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6bc:	4b09      	ldr	r3, [pc, #36]	; (800a6e4 <prvHeapInit+0xc0>)
 800a6be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	20000e90 	.word	0x20000e90
 800a6d4:	20001e30 	.word	0x20001e30
 800a6d8:	20001e38 	.word	0x20001e38
 800a6dc:	20001e40 	.word	0x20001e40
 800a6e0:	20001e3c 	.word	0x20001e3c
 800a6e4:	20001e44 	.word	0x20001e44

0800a6e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6f0:	4b28      	ldr	r3, [pc, #160]	; (800a794 <prvInsertBlockIntoFreeList+0xac>)
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	e002      	b.n	800a6fc <prvInsertBlockIntoFreeList+0x14>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	429a      	cmp	r2, r3
 800a704:	d8f7      	bhi.n	800a6f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	4413      	add	r3, r2
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	429a      	cmp	r2, r3
 800a716:	d108      	bne.n	800a72a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	441a      	add	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	68ba      	ldr	r2, [r7, #8]
 800a734:	441a      	add	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d118      	bne.n	800a770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	4b15      	ldr	r3, [pc, #84]	; (800a798 <prvInsertBlockIntoFreeList+0xb0>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d00d      	beq.n	800a766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	441a      	add	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	e008      	b.n	800a778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a766:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <prvInsertBlockIntoFreeList+0xb0>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	e003      	b.n	800a778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d002      	beq.n	800a786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	20001e30 	.word	0x20001e30
 800a798:	20001e38 	.word	0x20001e38

0800a79c <__errno>:
 800a79c:	4b01      	ldr	r3, [pc, #4]	; (800a7a4 <__errno+0x8>)
 800a79e:	6818      	ldr	r0, [r3, #0]
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	200000e8 	.word	0x200000e8

0800a7a8 <__libc_init_array>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	4e0d      	ldr	r6, [pc, #52]	; (800a7e0 <__libc_init_array+0x38>)
 800a7ac:	4c0d      	ldr	r4, [pc, #52]	; (800a7e4 <__libc_init_array+0x3c>)
 800a7ae:	1ba4      	subs	r4, r4, r6
 800a7b0:	10a4      	asrs	r4, r4, #2
 800a7b2:	2500      	movs	r5, #0
 800a7b4:	42a5      	cmp	r5, r4
 800a7b6:	d109      	bne.n	800a7cc <__libc_init_array+0x24>
 800a7b8:	4e0b      	ldr	r6, [pc, #44]	; (800a7e8 <__libc_init_array+0x40>)
 800a7ba:	4c0c      	ldr	r4, [pc, #48]	; (800a7ec <__libc_init_array+0x44>)
 800a7bc:	f001 fcce 	bl	800c15c <_init>
 800a7c0:	1ba4      	subs	r4, r4, r6
 800a7c2:	10a4      	asrs	r4, r4, #2
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	42a5      	cmp	r5, r4
 800a7c8:	d105      	bne.n	800a7d6 <__libc_init_array+0x2e>
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7d0:	4798      	blx	r3
 800a7d2:	3501      	adds	r5, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__libc_init_array+0xc>
 800a7d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a7da:	4798      	blx	r3
 800a7dc:	3501      	adds	r5, #1
 800a7de:	e7f2      	b.n	800a7c6 <__libc_init_array+0x1e>
 800a7e0:	0800c408 	.word	0x0800c408
 800a7e4:	0800c408 	.word	0x0800c408
 800a7e8:	0800c408 	.word	0x0800c408
 800a7ec:	0800c40c 	.word	0x0800c40c

0800a7f0 <memcpy>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	1e43      	subs	r3, r0, #1
 800a7f4:	440a      	add	r2, r1
 800a7f6:	4291      	cmp	r1, r2
 800a7f8:	d100      	bne.n	800a7fc <memcpy+0xc>
 800a7fa:	bd10      	pop	{r4, pc}
 800a7fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a800:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a804:	e7f7      	b.n	800a7f6 <memcpy+0x6>

0800a806 <memset>:
 800a806:	4402      	add	r2, r0
 800a808:	4603      	mov	r3, r0
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d100      	bne.n	800a810 <memset+0xa>
 800a80e:	4770      	bx	lr
 800a810:	f803 1b01 	strb.w	r1, [r3], #1
 800a814:	e7f9      	b.n	800a80a <memset+0x4>
	...

0800a818 <sniprintf>:
 800a818:	b40c      	push	{r2, r3}
 800a81a:	b530      	push	{r4, r5, lr}
 800a81c:	4b17      	ldr	r3, [pc, #92]	; (800a87c <sniprintf+0x64>)
 800a81e:	1e0c      	subs	r4, r1, #0
 800a820:	b09d      	sub	sp, #116	; 0x74
 800a822:	681d      	ldr	r5, [r3, #0]
 800a824:	da08      	bge.n	800a838 <sniprintf+0x20>
 800a826:	238b      	movs	r3, #139	; 0x8b
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	f04f 30ff 	mov.w	r0, #4294967295
 800a82e:	b01d      	add	sp, #116	; 0x74
 800a830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a834:	b002      	add	sp, #8
 800a836:	4770      	bx	lr
 800a838:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a83c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a840:	bf14      	ite	ne
 800a842:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a846:	4623      	moveq	r3, r4
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9307      	str	r3, [sp, #28]
 800a84c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a850:	9002      	str	r0, [sp, #8]
 800a852:	9006      	str	r0, [sp, #24]
 800a854:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a858:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a85a:	ab21      	add	r3, sp, #132	; 0x84
 800a85c:	a902      	add	r1, sp, #8
 800a85e:	4628      	mov	r0, r5
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	f000 f867 	bl	800a934 <_svfiprintf_r>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	bfbc      	itt	lt
 800a86a:	238b      	movlt	r3, #139	; 0x8b
 800a86c:	602b      	strlt	r3, [r5, #0]
 800a86e:	2c00      	cmp	r4, #0
 800a870:	d0dd      	beq.n	800a82e <sniprintf+0x16>
 800a872:	9b02      	ldr	r3, [sp, #8]
 800a874:	2200      	movs	r2, #0
 800a876:	701a      	strb	r2, [r3, #0]
 800a878:	e7d9      	b.n	800a82e <sniprintf+0x16>
 800a87a:	bf00      	nop
 800a87c:	200000e8 	.word	0x200000e8

0800a880 <__ssputs_r>:
 800a880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a884:	688e      	ldr	r6, [r1, #8]
 800a886:	429e      	cmp	r6, r3
 800a888:	4682      	mov	sl, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	4690      	mov	r8, r2
 800a88e:	4699      	mov	r9, r3
 800a890:	d837      	bhi.n	800a902 <__ssputs_r+0x82>
 800a892:	898a      	ldrh	r2, [r1, #12]
 800a894:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a898:	d031      	beq.n	800a8fe <__ssputs_r+0x7e>
 800a89a:	6825      	ldr	r5, [r4, #0]
 800a89c:	6909      	ldr	r1, [r1, #16]
 800a89e:	1a6f      	subs	r7, r5, r1
 800a8a0:	6965      	ldr	r5, [r4, #20]
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8a8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a8ac:	f109 0301 	add.w	r3, r9, #1
 800a8b0:	443b      	add	r3, r7
 800a8b2:	429d      	cmp	r5, r3
 800a8b4:	bf38      	it	cc
 800a8b6:	461d      	movcc	r5, r3
 800a8b8:	0553      	lsls	r3, r2, #21
 800a8ba:	d530      	bpl.n	800a91e <__ssputs_r+0x9e>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f000 fb21 	bl	800af04 <_malloc_r>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	b950      	cbnz	r0, 800a8dc <__ssputs_r+0x5c>
 800a8c6:	230c      	movs	r3, #12
 800a8c8:	f8ca 3000 	str.w	r3, [sl]
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8dc:	463a      	mov	r2, r7
 800a8de:	6921      	ldr	r1, [r4, #16]
 800a8e0:	f7ff ff86 	bl	800a7f0 <memcpy>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8ee:	81a3      	strh	r3, [r4, #12]
 800a8f0:	6126      	str	r6, [r4, #16]
 800a8f2:	6165      	str	r5, [r4, #20]
 800a8f4:	443e      	add	r6, r7
 800a8f6:	1bed      	subs	r5, r5, r7
 800a8f8:	6026      	str	r6, [r4, #0]
 800a8fa:	60a5      	str	r5, [r4, #8]
 800a8fc:	464e      	mov	r6, r9
 800a8fe:	454e      	cmp	r6, r9
 800a900:	d900      	bls.n	800a904 <__ssputs_r+0x84>
 800a902:	464e      	mov	r6, r9
 800a904:	4632      	mov	r2, r6
 800a906:	4641      	mov	r1, r8
 800a908:	6820      	ldr	r0, [r4, #0]
 800a90a:	f000 fa93 	bl	800ae34 <memmove>
 800a90e:	68a3      	ldr	r3, [r4, #8]
 800a910:	1b9b      	subs	r3, r3, r6
 800a912:	60a3      	str	r3, [r4, #8]
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	441e      	add	r6, r3
 800a918:	6026      	str	r6, [r4, #0]
 800a91a:	2000      	movs	r0, #0
 800a91c:	e7dc      	b.n	800a8d8 <__ssputs_r+0x58>
 800a91e:	462a      	mov	r2, r5
 800a920:	f000 fb4a 	bl	800afb8 <_realloc_r>
 800a924:	4606      	mov	r6, r0
 800a926:	2800      	cmp	r0, #0
 800a928:	d1e2      	bne.n	800a8f0 <__ssputs_r+0x70>
 800a92a:	6921      	ldr	r1, [r4, #16]
 800a92c:	4650      	mov	r0, sl
 800a92e:	f000 fa9b 	bl	800ae68 <_free_r>
 800a932:	e7c8      	b.n	800a8c6 <__ssputs_r+0x46>

0800a934 <_svfiprintf_r>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	461d      	mov	r5, r3
 800a93a:	898b      	ldrh	r3, [r1, #12]
 800a93c:	061f      	lsls	r7, r3, #24
 800a93e:	b09d      	sub	sp, #116	; 0x74
 800a940:	4680      	mov	r8, r0
 800a942:	460c      	mov	r4, r1
 800a944:	4616      	mov	r6, r2
 800a946:	d50f      	bpl.n	800a968 <_svfiprintf_r+0x34>
 800a948:	690b      	ldr	r3, [r1, #16]
 800a94a:	b96b      	cbnz	r3, 800a968 <_svfiprintf_r+0x34>
 800a94c:	2140      	movs	r1, #64	; 0x40
 800a94e:	f000 fad9 	bl	800af04 <_malloc_r>
 800a952:	6020      	str	r0, [r4, #0]
 800a954:	6120      	str	r0, [r4, #16]
 800a956:	b928      	cbnz	r0, 800a964 <_svfiprintf_r+0x30>
 800a958:	230c      	movs	r3, #12
 800a95a:	f8c8 3000 	str.w	r3, [r8]
 800a95e:	f04f 30ff 	mov.w	r0, #4294967295
 800a962:	e0c8      	b.n	800aaf6 <_svfiprintf_r+0x1c2>
 800a964:	2340      	movs	r3, #64	; 0x40
 800a966:	6163      	str	r3, [r4, #20]
 800a968:	2300      	movs	r3, #0
 800a96a:	9309      	str	r3, [sp, #36]	; 0x24
 800a96c:	2320      	movs	r3, #32
 800a96e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a972:	2330      	movs	r3, #48	; 0x30
 800a974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a978:	9503      	str	r5, [sp, #12]
 800a97a:	f04f 0b01 	mov.w	fp, #1
 800a97e:	4637      	mov	r7, r6
 800a980:	463d      	mov	r5, r7
 800a982:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a986:	b10b      	cbz	r3, 800a98c <_svfiprintf_r+0x58>
 800a988:	2b25      	cmp	r3, #37	; 0x25
 800a98a:	d13e      	bne.n	800aa0a <_svfiprintf_r+0xd6>
 800a98c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a990:	d00b      	beq.n	800a9aa <_svfiprintf_r+0x76>
 800a992:	4653      	mov	r3, sl
 800a994:	4632      	mov	r2, r6
 800a996:	4621      	mov	r1, r4
 800a998:	4640      	mov	r0, r8
 800a99a:	f7ff ff71 	bl	800a880 <__ssputs_r>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	f000 80a4 	beq.w	800aaec <_svfiprintf_r+0x1b8>
 800a9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a6:	4453      	add	r3, sl
 800a9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9aa:	783b      	ldrb	r3, [r7, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 809d 	beq.w	800aaec <_svfiprintf_r+0x1b8>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	9307      	str	r3, [sp, #28]
 800a9c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a9c6:	462f      	mov	r7, r5
 800a9c8:	2205      	movs	r2, #5
 800a9ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a9ce:	4850      	ldr	r0, [pc, #320]	; (800ab10 <_svfiprintf_r+0x1dc>)
 800a9d0:	f7f5 fbfe 	bl	80001d0 <memchr>
 800a9d4:	9b04      	ldr	r3, [sp, #16]
 800a9d6:	b9d0      	cbnz	r0, 800aa0e <_svfiprintf_r+0xda>
 800a9d8:	06d9      	lsls	r1, r3, #27
 800a9da:	bf44      	itt	mi
 800a9dc:	2220      	movmi	r2, #32
 800a9de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9e2:	071a      	lsls	r2, r3, #28
 800a9e4:	bf44      	itt	mi
 800a9e6:	222b      	movmi	r2, #43	; 0x2b
 800a9e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9ec:	782a      	ldrb	r2, [r5, #0]
 800a9ee:	2a2a      	cmp	r2, #42	; 0x2a
 800a9f0:	d015      	beq.n	800aa1e <_svfiprintf_r+0xea>
 800a9f2:	9a07      	ldr	r2, [sp, #28]
 800a9f4:	462f      	mov	r7, r5
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	250a      	movs	r5, #10
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa00:	3b30      	subs	r3, #48	; 0x30
 800aa02:	2b09      	cmp	r3, #9
 800aa04:	d94d      	bls.n	800aaa2 <_svfiprintf_r+0x16e>
 800aa06:	b1b8      	cbz	r0, 800aa38 <_svfiprintf_r+0x104>
 800aa08:	e00f      	b.n	800aa2a <_svfiprintf_r+0xf6>
 800aa0a:	462f      	mov	r7, r5
 800aa0c:	e7b8      	b.n	800a980 <_svfiprintf_r+0x4c>
 800aa0e:	4a40      	ldr	r2, [pc, #256]	; (800ab10 <_svfiprintf_r+0x1dc>)
 800aa10:	1a80      	subs	r0, r0, r2
 800aa12:	fa0b f000 	lsl.w	r0, fp, r0
 800aa16:	4318      	orrs	r0, r3
 800aa18:	9004      	str	r0, [sp, #16]
 800aa1a:	463d      	mov	r5, r7
 800aa1c:	e7d3      	b.n	800a9c6 <_svfiprintf_r+0x92>
 800aa1e:	9a03      	ldr	r2, [sp, #12]
 800aa20:	1d11      	adds	r1, r2, #4
 800aa22:	6812      	ldr	r2, [r2, #0]
 800aa24:	9103      	str	r1, [sp, #12]
 800aa26:	2a00      	cmp	r2, #0
 800aa28:	db01      	blt.n	800aa2e <_svfiprintf_r+0xfa>
 800aa2a:	9207      	str	r2, [sp, #28]
 800aa2c:	e004      	b.n	800aa38 <_svfiprintf_r+0x104>
 800aa2e:	4252      	negs	r2, r2
 800aa30:	f043 0302 	orr.w	r3, r3, #2
 800aa34:	9207      	str	r2, [sp, #28]
 800aa36:	9304      	str	r3, [sp, #16]
 800aa38:	783b      	ldrb	r3, [r7, #0]
 800aa3a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa3c:	d10c      	bne.n	800aa58 <_svfiprintf_r+0x124>
 800aa3e:	787b      	ldrb	r3, [r7, #1]
 800aa40:	2b2a      	cmp	r3, #42	; 0x2a
 800aa42:	d133      	bne.n	800aaac <_svfiprintf_r+0x178>
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	1d1a      	adds	r2, r3, #4
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	9203      	str	r2, [sp, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	bfb8      	it	lt
 800aa50:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa54:	3702      	adds	r7, #2
 800aa56:	9305      	str	r3, [sp, #20]
 800aa58:	4d2e      	ldr	r5, [pc, #184]	; (800ab14 <_svfiprintf_r+0x1e0>)
 800aa5a:	7839      	ldrb	r1, [r7, #0]
 800aa5c:	2203      	movs	r2, #3
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f7f5 fbb6 	bl	80001d0 <memchr>
 800aa64:	b138      	cbz	r0, 800aa76 <_svfiprintf_r+0x142>
 800aa66:	2340      	movs	r3, #64	; 0x40
 800aa68:	1b40      	subs	r0, r0, r5
 800aa6a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa6e:	9b04      	ldr	r3, [sp, #16]
 800aa70:	4303      	orrs	r3, r0
 800aa72:	3701      	adds	r7, #1
 800aa74:	9304      	str	r3, [sp, #16]
 800aa76:	7839      	ldrb	r1, [r7, #0]
 800aa78:	4827      	ldr	r0, [pc, #156]	; (800ab18 <_svfiprintf_r+0x1e4>)
 800aa7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa7e:	2206      	movs	r2, #6
 800aa80:	1c7e      	adds	r6, r7, #1
 800aa82:	f7f5 fba5 	bl	80001d0 <memchr>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d038      	beq.n	800aafc <_svfiprintf_r+0x1c8>
 800aa8a:	4b24      	ldr	r3, [pc, #144]	; (800ab1c <_svfiprintf_r+0x1e8>)
 800aa8c:	bb13      	cbnz	r3, 800aad4 <_svfiprintf_r+0x1a0>
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	3307      	adds	r3, #7
 800aa92:	f023 0307 	bic.w	r3, r3, #7
 800aa96:	3308      	adds	r3, #8
 800aa98:	9303      	str	r3, [sp, #12]
 800aa9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa9c:	444b      	add	r3, r9
 800aa9e:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa0:	e76d      	b.n	800a97e <_svfiprintf_r+0x4a>
 800aaa2:	fb05 3202 	mla	r2, r5, r2, r3
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	460f      	mov	r7, r1
 800aaaa:	e7a6      	b.n	800a9fa <_svfiprintf_r+0xc6>
 800aaac:	2300      	movs	r3, #0
 800aaae:	3701      	adds	r7, #1
 800aab0:	9305      	str	r3, [sp, #20]
 800aab2:	4619      	mov	r1, r3
 800aab4:	250a      	movs	r5, #10
 800aab6:	4638      	mov	r0, r7
 800aab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aabc:	3a30      	subs	r2, #48	; 0x30
 800aabe:	2a09      	cmp	r2, #9
 800aac0:	d903      	bls.n	800aaca <_svfiprintf_r+0x196>
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0c8      	beq.n	800aa58 <_svfiprintf_r+0x124>
 800aac6:	9105      	str	r1, [sp, #20]
 800aac8:	e7c6      	b.n	800aa58 <_svfiprintf_r+0x124>
 800aaca:	fb05 2101 	mla	r1, r5, r1, r2
 800aace:	2301      	movs	r3, #1
 800aad0:	4607      	mov	r7, r0
 800aad2:	e7f0      	b.n	800aab6 <_svfiprintf_r+0x182>
 800aad4:	ab03      	add	r3, sp, #12
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	4622      	mov	r2, r4
 800aada:	4b11      	ldr	r3, [pc, #68]	; (800ab20 <_svfiprintf_r+0x1ec>)
 800aadc:	a904      	add	r1, sp, #16
 800aade:	4640      	mov	r0, r8
 800aae0:	f3af 8000 	nop.w
 800aae4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aae8:	4681      	mov	r9, r0
 800aaea:	d1d6      	bne.n	800aa9a <_svfiprintf_r+0x166>
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	065b      	lsls	r3, r3, #25
 800aaf0:	f53f af35 	bmi.w	800a95e <_svfiprintf_r+0x2a>
 800aaf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaf6:	b01d      	add	sp, #116	; 0x74
 800aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafc:	ab03      	add	r3, sp, #12
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	4622      	mov	r2, r4
 800ab02:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <_svfiprintf_r+0x1ec>)
 800ab04:	a904      	add	r1, sp, #16
 800ab06:	4640      	mov	r0, r8
 800ab08:	f000 f882 	bl	800ac10 <_printf_i>
 800ab0c:	e7ea      	b.n	800aae4 <_svfiprintf_r+0x1b0>
 800ab0e:	bf00      	nop
 800ab10:	0800c384 	.word	0x0800c384
 800ab14:	0800c38a 	.word	0x0800c38a
 800ab18:	0800c38e 	.word	0x0800c38e
 800ab1c:	00000000 	.word	0x00000000
 800ab20:	0800a881 	.word	0x0800a881

0800ab24 <_printf_common>:
 800ab24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab28:	4691      	mov	r9, r2
 800ab2a:	461f      	mov	r7, r3
 800ab2c:	688a      	ldr	r2, [r1, #8]
 800ab2e:	690b      	ldr	r3, [r1, #16]
 800ab30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab34:	4293      	cmp	r3, r2
 800ab36:	bfb8      	it	lt
 800ab38:	4613      	movlt	r3, r2
 800ab3a:	f8c9 3000 	str.w	r3, [r9]
 800ab3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab42:	4606      	mov	r6, r0
 800ab44:	460c      	mov	r4, r1
 800ab46:	b112      	cbz	r2, 800ab4e <_printf_common+0x2a>
 800ab48:	3301      	adds	r3, #1
 800ab4a:	f8c9 3000 	str.w	r3, [r9]
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	0699      	lsls	r1, r3, #26
 800ab52:	bf42      	ittt	mi
 800ab54:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ab58:	3302      	addmi	r3, #2
 800ab5a:	f8c9 3000 	strmi.w	r3, [r9]
 800ab5e:	6825      	ldr	r5, [r4, #0]
 800ab60:	f015 0506 	ands.w	r5, r5, #6
 800ab64:	d107      	bne.n	800ab76 <_printf_common+0x52>
 800ab66:	f104 0a19 	add.w	sl, r4, #25
 800ab6a:	68e3      	ldr	r3, [r4, #12]
 800ab6c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab70:	1a9b      	subs	r3, r3, r2
 800ab72:	42ab      	cmp	r3, r5
 800ab74:	dc28      	bgt.n	800abc8 <_printf_common+0xa4>
 800ab76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ab7a:	6822      	ldr	r2, [r4, #0]
 800ab7c:	3300      	adds	r3, #0
 800ab7e:	bf18      	it	ne
 800ab80:	2301      	movne	r3, #1
 800ab82:	0692      	lsls	r2, r2, #26
 800ab84:	d42d      	bmi.n	800abe2 <_printf_common+0xbe>
 800ab86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	47c0      	blx	r8
 800ab90:	3001      	adds	r0, #1
 800ab92:	d020      	beq.n	800abd6 <_printf_common+0xb2>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	68e5      	ldr	r5, [r4, #12]
 800ab98:	f8d9 2000 	ldr.w	r2, [r9]
 800ab9c:	f003 0306 	and.w	r3, r3, #6
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	bf08      	it	eq
 800aba4:	1aad      	subeq	r5, r5, r2
 800aba6:	68a3      	ldr	r3, [r4, #8]
 800aba8:	6922      	ldr	r2, [r4, #16]
 800abaa:	bf0c      	ite	eq
 800abac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abb0:	2500      	movne	r5, #0
 800abb2:	4293      	cmp	r3, r2
 800abb4:	bfc4      	itt	gt
 800abb6:	1a9b      	subgt	r3, r3, r2
 800abb8:	18ed      	addgt	r5, r5, r3
 800abba:	f04f 0900 	mov.w	r9, #0
 800abbe:	341a      	adds	r4, #26
 800abc0:	454d      	cmp	r5, r9
 800abc2:	d11a      	bne.n	800abfa <_printf_common+0xd6>
 800abc4:	2000      	movs	r0, #0
 800abc6:	e008      	b.n	800abda <_printf_common+0xb6>
 800abc8:	2301      	movs	r3, #1
 800abca:	4652      	mov	r2, sl
 800abcc:	4639      	mov	r1, r7
 800abce:	4630      	mov	r0, r6
 800abd0:	47c0      	blx	r8
 800abd2:	3001      	adds	r0, #1
 800abd4:	d103      	bne.n	800abde <_printf_common+0xba>
 800abd6:	f04f 30ff 	mov.w	r0, #4294967295
 800abda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abde:	3501      	adds	r5, #1
 800abe0:	e7c3      	b.n	800ab6a <_printf_common+0x46>
 800abe2:	18e1      	adds	r1, r4, r3
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	2030      	movs	r0, #48	; 0x30
 800abe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abec:	4422      	add	r2, r4
 800abee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abf6:	3302      	adds	r3, #2
 800abf8:	e7c5      	b.n	800ab86 <_printf_common+0x62>
 800abfa:	2301      	movs	r3, #1
 800abfc:	4622      	mov	r2, r4
 800abfe:	4639      	mov	r1, r7
 800ac00:	4630      	mov	r0, r6
 800ac02:	47c0      	blx	r8
 800ac04:	3001      	adds	r0, #1
 800ac06:	d0e6      	beq.n	800abd6 <_printf_common+0xb2>
 800ac08:	f109 0901 	add.w	r9, r9, #1
 800ac0c:	e7d8      	b.n	800abc0 <_printf_common+0x9c>
	...

0800ac10 <_printf_i>:
 800ac10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ac18:	460c      	mov	r4, r1
 800ac1a:	7e09      	ldrb	r1, [r1, #24]
 800ac1c:	b085      	sub	sp, #20
 800ac1e:	296e      	cmp	r1, #110	; 0x6e
 800ac20:	4617      	mov	r7, r2
 800ac22:	4606      	mov	r6, r0
 800ac24:	4698      	mov	r8, r3
 800ac26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac28:	f000 80b3 	beq.w	800ad92 <_printf_i+0x182>
 800ac2c:	d822      	bhi.n	800ac74 <_printf_i+0x64>
 800ac2e:	2963      	cmp	r1, #99	; 0x63
 800ac30:	d036      	beq.n	800aca0 <_printf_i+0x90>
 800ac32:	d80a      	bhi.n	800ac4a <_printf_i+0x3a>
 800ac34:	2900      	cmp	r1, #0
 800ac36:	f000 80b9 	beq.w	800adac <_printf_i+0x19c>
 800ac3a:	2958      	cmp	r1, #88	; 0x58
 800ac3c:	f000 8083 	beq.w	800ad46 <_printf_i+0x136>
 800ac40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ac48:	e032      	b.n	800acb0 <_printf_i+0xa0>
 800ac4a:	2964      	cmp	r1, #100	; 0x64
 800ac4c:	d001      	beq.n	800ac52 <_printf_i+0x42>
 800ac4e:	2969      	cmp	r1, #105	; 0x69
 800ac50:	d1f6      	bne.n	800ac40 <_printf_i+0x30>
 800ac52:	6820      	ldr	r0, [r4, #0]
 800ac54:	6813      	ldr	r3, [r2, #0]
 800ac56:	0605      	lsls	r5, r0, #24
 800ac58:	f103 0104 	add.w	r1, r3, #4
 800ac5c:	d52a      	bpl.n	800acb4 <_printf_i+0xa4>
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6011      	str	r1, [r2, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	da03      	bge.n	800ac6e <_printf_i+0x5e>
 800ac66:	222d      	movs	r2, #45	; 0x2d
 800ac68:	425b      	negs	r3, r3
 800ac6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ac6e:	486f      	ldr	r0, [pc, #444]	; (800ae2c <_printf_i+0x21c>)
 800ac70:	220a      	movs	r2, #10
 800ac72:	e039      	b.n	800ace8 <_printf_i+0xd8>
 800ac74:	2973      	cmp	r1, #115	; 0x73
 800ac76:	f000 809d 	beq.w	800adb4 <_printf_i+0x1a4>
 800ac7a:	d808      	bhi.n	800ac8e <_printf_i+0x7e>
 800ac7c:	296f      	cmp	r1, #111	; 0x6f
 800ac7e:	d020      	beq.n	800acc2 <_printf_i+0xb2>
 800ac80:	2970      	cmp	r1, #112	; 0x70
 800ac82:	d1dd      	bne.n	800ac40 <_printf_i+0x30>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	f043 0320 	orr.w	r3, r3, #32
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	e003      	b.n	800ac96 <_printf_i+0x86>
 800ac8e:	2975      	cmp	r1, #117	; 0x75
 800ac90:	d017      	beq.n	800acc2 <_printf_i+0xb2>
 800ac92:	2978      	cmp	r1, #120	; 0x78
 800ac94:	d1d4      	bne.n	800ac40 <_printf_i+0x30>
 800ac96:	2378      	movs	r3, #120	; 0x78
 800ac98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac9c:	4864      	ldr	r0, [pc, #400]	; (800ae30 <_printf_i+0x220>)
 800ac9e:	e055      	b.n	800ad4c <_printf_i+0x13c>
 800aca0:	6813      	ldr	r3, [r2, #0]
 800aca2:	1d19      	adds	r1, r3, #4
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6011      	str	r1, [r2, #0]
 800aca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acb0:	2301      	movs	r3, #1
 800acb2:	e08c      	b.n	800adce <_printf_i+0x1be>
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6011      	str	r1, [r2, #0]
 800acb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acbc:	bf18      	it	ne
 800acbe:	b21b      	sxthne	r3, r3
 800acc0:	e7cf      	b.n	800ac62 <_printf_i+0x52>
 800acc2:	6813      	ldr	r3, [r2, #0]
 800acc4:	6825      	ldr	r5, [r4, #0]
 800acc6:	1d18      	adds	r0, r3, #4
 800acc8:	6010      	str	r0, [r2, #0]
 800acca:	0628      	lsls	r0, r5, #24
 800accc:	d501      	bpl.n	800acd2 <_printf_i+0xc2>
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	e002      	b.n	800acd8 <_printf_i+0xc8>
 800acd2:	0668      	lsls	r0, r5, #25
 800acd4:	d5fb      	bpl.n	800acce <_printf_i+0xbe>
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	4854      	ldr	r0, [pc, #336]	; (800ae2c <_printf_i+0x21c>)
 800acda:	296f      	cmp	r1, #111	; 0x6f
 800acdc:	bf14      	ite	ne
 800acde:	220a      	movne	r2, #10
 800ace0:	2208      	moveq	r2, #8
 800ace2:	2100      	movs	r1, #0
 800ace4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ace8:	6865      	ldr	r5, [r4, #4]
 800acea:	60a5      	str	r5, [r4, #8]
 800acec:	2d00      	cmp	r5, #0
 800acee:	f2c0 8095 	blt.w	800ae1c <_printf_i+0x20c>
 800acf2:	6821      	ldr	r1, [r4, #0]
 800acf4:	f021 0104 	bic.w	r1, r1, #4
 800acf8:	6021      	str	r1, [r4, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d13d      	bne.n	800ad7a <_printf_i+0x16a>
 800acfe:	2d00      	cmp	r5, #0
 800ad00:	f040 808e 	bne.w	800ae20 <_printf_i+0x210>
 800ad04:	4665      	mov	r5, ip
 800ad06:	2a08      	cmp	r2, #8
 800ad08:	d10b      	bne.n	800ad22 <_printf_i+0x112>
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	07db      	lsls	r3, r3, #31
 800ad0e:	d508      	bpl.n	800ad22 <_printf_i+0x112>
 800ad10:	6923      	ldr	r3, [r4, #16]
 800ad12:	6862      	ldr	r2, [r4, #4]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	bfde      	ittt	le
 800ad18:	2330      	movle	r3, #48	; 0x30
 800ad1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad22:	ebac 0305 	sub.w	r3, ip, r5
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	f8cd 8000 	str.w	r8, [sp]
 800ad2c:	463b      	mov	r3, r7
 800ad2e:	aa03      	add	r2, sp, #12
 800ad30:	4621      	mov	r1, r4
 800ad32:	4630      	mov	r0, r6
 800ad34:	f7ff fef6 	bl	800ab24 <_printf_common>
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d14d      	bne.n	800add8 <_printf_i+0x1c8>
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	b005      	add	sp, #20
 800ad42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad46:	4839      	ldr	r0, [pc, #228]	; (800ae2c <_printf_i+0x21c>)
 800ad48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ad4c:	6813      	ldr	r3, [r2, #0]
 800ad4e:	6821      	ldr	r1, [r4, #0]
 800ad50:	1d1d      	adds	r5, r3, #4
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6015      	str	r5, [r2, #0]
 800ad56:	060a      	lsls	r2, r1, #24
 800ad58:	d50b      	bpl.n	800ad72 <_printf_i+0x162>
 800ad5a:	07ca      	lsls	r2, r1, #31
 800ad5c:	bf44      	itt	mi
 800ad5e:	f041 0120 	orrmi.w	r1, r1, #32
 800ad62:	6021      	strmi	r1, [r4, #0]
 800ad64:	b91b      	cbnz	r3, 800ad6e <_printf_i+0x15e>
 800ad66:	6822      	ldr	r2, [r4, #0]
 800ad68:	f022 0220 	bic.w	r2, r2, #32
 800ad6c:	6022      	str	r2, [r4, #0]
 800ad6e:	2210      	movs	r2, #16
 800ad70:	e7b7      	b.n	800ace2 <_printf_i+0xd2>
 800ad72:	064d      	lsls	r5, r1, #25
 800ad74:	bf48      	it	mi
 800ad76:	b29b      	uxthmi	r3, r3
 800ad78:	e7ef      	b.n	800ad5a <_printf_i+0x14a>
 800ad7a:	4665      	mov	r5, ip
 800ad7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad80:	fb02 3311 	mls	r3, r2, r1, r3
 800ad84:	5cc3      	ldrb	r3, [r0, r3]
 800ad86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	d1f5      	bne.n	800ad7c <_printf_i+0x16c>
 800ad90:	e7b9      	b.n	800ad06 <_printf_i+0xf6>
 800ad92:	6813      	ldr	r3, [r2, #0]
 800ad94:	6825      	ldr	r5, [r4, #0]
 800ad96:	6961      	ldr	r1, [r4, #20]
 800ad98:	1d18      	adds	r0, r3, #4
 800ad9a:	6010      	str	r0, [r2, #0]
 800ad9c:	0628      	lsls	r0, r5, #24
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	d501      	bpl.n	800ada6 <_printf_i+0x196>
 800ada2:	6019      	str	r1, [r3, #0]
 800ada4:	e002      	b.n	800adac <_printf_i+0x19c>
 800ada6:	066a      	lsls	r2, r5, #25
 800ada8:	d5fb      	bpl.n	800ada2 <_printf_i+0x192>
 800adaa:	8019      	strh	r1, [r3, #0]
 800adac:	2300      	movs	r3, #0
 800adae:	6123      	str	r3, [r4, #16]
 800adb0:	4665      	mov	r5, ip
 800adb2:	e7b9      	b.n	800ad28 <_printf_i+0x118>
 800adb4:	6813      	ldr	r3, [r2, #0]
 800adb6:	1d19      	adds	r1, r3, #4
 800adb8:	6011      	str	r1, [r2, #0]
 800adba:	681d      	ldr	r5, [r3, #0]
 800adbc:	6862      	ldr	r2, [r4, #4]
 800adbe:	2100      	movs	r1, #0
 800adc0:	4628      	mov	r0, r5
 800adc2:	f7f5 fa05 	bl	80001d0 <memchr>
 800adc6:	b108      	cbz	r0, 800adcc <_printf_i+0x1bc>
 800adc8:	1b40      	subs	r0, r0, r5
 800adca:	6060      	str	r0, [r4, #4]
 800adcc:	6863      	ldr	r3, [r4, #4]
 800adce:	6123      	str	r3, [r4, #16]
 800add0:	2300      	movs	r3, #0
 800add2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800add6:	e7a7      	b.n	800ad28 <_printf_i+0x118>
 800add8:	6923      	ldr	r3, [r4, #16]
 800adda:	462a      	mov	r2, r5
 800addc:	4639      	mov	r1, r7
 800adde:	4630      	mov	r0, r6
 800ade0:	47c0      	blx	r8
 800ade2:	3001      	adds	r0, #1
 800ade4:	d0aa      	beq.n	800ad3c <_printf_i+0x12c>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	079b      	lsls	r3, r3, #30
 800adea:	d413      	bmi.n	800ae14 <_printf_i+0x204>
 800adec:	68e0      	ldr	r0, [r4, #12]
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	4298      	cmp	r0, r3
 800adf2:	bfb8      	it	lt
 800adf4:	4618      	movlt	r0, r3
 800adf6:	e7a3      	b.n	800ad40 <_printf_i+0x130>
 800adf8:	2301      	movs	r3, #1
 800adfa:	464a      	mov	r2, r9
 800adfc:	4639      	mov	r1, r7
 800adfe:	4630      	mov	r0, r6
 800ae00:	47c0      	blx	r8
 800ae02:	3001      	adds	r0, #1
 800ae04:	d09a      	beq.n	800ad3c <_printf_i+0x12c>
 800ae06:	3501      	adds	r5, #1
 800ae08:	68e3      	ldr	r3, [r4, #12]
 800ae0a:	9a03      	ldr	r2, [sp, #12]
 800ae0c:	1a9b      	subs	r3, r3, r2
 800ae0e:	42ab      	cmp	r3, r5
 800ae10:	dcf2      	bgt.n	800adf8 <_printf_i+0x1e8>
 800ae12:	e7eb      	b.n	800adec <_printf_i+0x1dc>
 800ae14:	2500      	movs	r5, #0
 800ae16:	f104 0919 	add.w	r9, r4, #25
 800ae1a:	e7f5      	b.n	800ae08 <_printf_i+0x1f8>
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1ac      	bne.n	800ad7a <_printf_i+0x16a>
 800ae20:	7803      	ldrb	r3, [r0, #0]
 800ae22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae2a:	e76c      	b.n	800ad06 <_printf_i+0xf6>
 800ae2c:	0800c395 	.word	0x0800c395
 800ae30:	0800c3a6 	.word	0x0800c3a6

0800ae34 <memmove>:
 800ae34:	4288      	cmp	r0, r1
 800ae36:	b510      	push	{r4, lr}
 800ae38:	eb01 0302 	add.w	r3, r1, r2
 800ae3c:	d807      	bhi.n	800ae4e <memmove+0x1a>
 800ae3e:	1e42      	subs	r2, r0, #1
 800ae40:	4299      	cmp	r1, r3
 800ae42:	d00a      	beq.n	800ae5a <memmove+0x26>
 800ae44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae48:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ae4c:	e7f8      	b.n	800ae40 <memmove+0xc>
 800ae4e:	4283      	cmp	r3, r0
 800ae50:	d9f5      	bls.n	800ae3e <memmove+0xa>
 800ae52:	1881      	adds	r1, r0, r2
 800ae54:	1ad2      	subs	r2, r2, r3
 800ae56:	42d3      	cmn	r3, r2
 800ae58:	d100      	bne.n	800ae5c <memmove+0x28>
 800ae5a:	bd10      	pop	{r4, pc}
 800ae5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ae64:	e7f7      	b.n	800ae56 <memmove+0x22>
	...

0800ae68 <_free_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	2900      	cmp	r1, #0
 800ae6e:	d045      	beq.n	800aefc <_free_r+0x94>
 800ae70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae74:	1f0c      	subs	r4, r1, #4
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bfb8      	it	lt
 800ae7a:	18e4      	addlt	r4, r4, r3
 800ae7c:	f000 f8d2 	bl	800b024 <__malloc_lock>
 800ae80:	4a1f      	ldr	r2, [pc, #124]	; (800af00 <_free_r+0x98>)
 800ae82:	6813      	ldr	r3, [r2, #0]
 800ae84:	4610      	mov	r0, r2
 800ae86:	b933      	cbnz	r3, 800ae96 <_free_r+0x2e>
 800ae88:	6063      	str	r3, [r4, #4]
 800ae8a:	6014      	str	r4, [r2, #0]
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae92:	f000 b8c8 	b.w	800b026 <__malloc_unlock>
 800ae96:	42a3      	cmp	r3, r4
 800ae98:	d90c      	bls.n	800aeb4 <_free_r+0x4c>
 800ae9a:	6821      	ldr	r1, [r4, #0]
 800ae9c:	1862      	adds	r2, r4, r1
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	bf04      	itt	eq
 800aea2:	681a      	ldreq	r2, [r3, #0]
 800aea4:	685b      	ldreq	r3, [r3, #4]
 800aea6:	6063      	str	r3, [r4, #4]
 800aea8:	bf04      	itt	eq
 800aeaa:	1852      	addeq	r2, r2, r1
 800aeac:	6022      	streq	r2, [r4, #0]
 800aeae:	6004      	str	r4, [r0, #0]
 800aeb0:	e7ec      	b.n	800ae8c <_free_r+0x24>
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	b10a      	cbz	r2, 800aebc <_free_r+0x54>
 800aeb8:	42a2      	cmp	r2, r4
 800aeba:	d9fa      	bls.n	800aeb2 <_free_r+0x4a>
 800aebc:	6819      	ldr	r1, [r3, #0]
 800aebe:	1858      	adds	r0, r3, r1
 800aec0:	42a0      	cmp	r0, r4
 800aec2:	d10b      	bne.n	800aedc <_free_r+0x74>
 800aec4:	6820      	ldr	r0, [r4, #0]
 800aec6:	4401      	add	r1, r0
 800aec8:	1858      	adds	r0, r3, r1
 800aeca:	4282      	cmp	r2, r0
 800aecc:	6019      	str	r1, [r3, #0]
 800aece:	d1dd      	bne.n	800ae8c <_free_r+0x24>
 800aed0:	6810      	ldr	r0, [r2, #0]
 800aed2:	6852      	ldr	r2, [r2, #4]
 800aed4:	605a      	str	r2, [r3, #4]
 800aed6:	4401      	add	r1, r0
 800aed8:	6019      	str	r1, [r3, #0]
 800aeda:	e7d7      	b.n	800ae8c <_free_r+0x24>
 800aedc:	d902      	bls.n	800aee4 <_free_r+0x7c>
 800aede:	230c      	movs	r3, #12
 800aee0:	602b      	str	r3, [r5, #0]
 800aee2:	e7d3      	b.n	800ae8c <_free_r+0x24>
 800aee4:	6820      	ldr	r0, [r4, #0]
 800aee6:	1821      	adds	r1, r4, r0
 800aee8:	428a      	cmp	r2, r1
 800aeea:	bf04      	itt	eq
 800aeec:	6811      	ldreq	r1, [r2, #0]
 800aeee:	6852      	ldreq	r2, [r2, #4]
 800aef0:	6062      	str	r2, [r4, #4]
 800aef2:	bf04      	itt	eq
 800aef4:	1809      	addeq	r1, r1, r0
 800aef6:	6021      	streq	r1, [r4, #0]
 800aef8:	605c      	str	r4, [r3, #4]
 800aefa:	e7c7      	b.n	800ae8c <_free_r+0x24>
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	bf00      	nop
 800af00:	20001e48 	.word	0x20001e48

0800af04 <_malloc_r>:
 800af04:	b570      	push	{r4, r5, r6, lr}
 800af06:	1ccd      	adds	r5, r1, #3
 800af08:	f025 0503 	bic.w	r5, r5, #3
 800af0c:	3508      	adds	r5, #8
 800af0e:	2d0c      	cmp	r5, #12
 800af10:	bf38      	it	cc
 800af12:	250c      	movcc	r5, #12
 800af14:	2d00      	cmp	r5, #0
 800af16:	4606      	mov	r6, r0
 800af18:	db01      	blt.n	800af1e <_malloc_r+0x1a>
 800af1a:	42a9      	cmp	r1, r5
 800af1c:	d903      	bls.n	800af26 <_malloc_r+0x22>
 800af1e:	230c      	movs	r3, #12
 800af20:	6033      	str	r3, [r6, #0]
 800af22:	2000      	movs	r0, #0
 800af24:	bd70      	pop	{r4, r5, r6, pc}
 800af26:	f000 f87d 	bl	800b024 <__malloc_lock>
 800af2a:	4a21      	ldr	r2, [pc, #132]	; (800afb0 <_malloc_r+0xac>)
 800af2c:	6814      	ldr	r4, [r2, #0]
 800af2e:	4621      	mov	r1, r4
 800af30:	b991      	cbnz	r1, 800af58 <_malloc_r+0x54>
 800af32:	4c20      	ldr	r4, [pc, #128]	; (800afb4 <_malloc_r+0xb0>)
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	b91b      	cbnz	r3, 800af40 <_malloc_r+0x3c>
 800af38:	4630      	mov	r0, r6
 800af3a:	f000 f863 	bl	800b004 <_sbrk_r>
 800af3e:	6020      	str	r0, [r4, #0]
 800af40:	4629      	mov	r1, r5
 800af42:	4630      	mov	r0, r6
 800af44:	f000 f85e 	bl	800b004 <_sbrk_r>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d124      	bne.n	800af96 <_malloc_r+0x92>
 800af4c:	230c      	movs	r3, #12
 800af4e:	6033      	str	r3, [r6, #0]
 800af50:	4630      	mov	r0, r6
 800af52:	f000 f868 	bl	800b026 <__malloc_unlock>
 800af56:	e7e4      	b.n	800af22 <_malloc_r+0x1e>
 800af58:	680b      	ldr	r3, [r1, #0]
 800af5a:	1b5b      	subs	r3, r3, r5
 800af5c:	d418      	bmi.n	800af90 <_malloc_r+0x8c>
 800af5e:	2b0b      	cmp	r3, #11
 800af60:	d90f      	bls.n	800af82 <_malloc_r+0x7e>
 800af62:	600b      	str	r3, [r1, #0]
 800af64:	50cd      	str	r5, [r1, r3]
 800af66:	18cc      	adds	r4, r1, r3
 800af68:	4630      	mov	r0, r6
 800af6a:	f000 f85c 	bl	800b026 <__malloc_unlock>
 800af6e:	f104 000b 	add.w	r0, r4, #11
 800af72:	1d23      	adds	r3, r4, #4
 800af74:	f020 0007 	bic.w	r0, r0, #7
 800af78:	1ac3      	subs	r3, r0, r3
 800af7a:	d0d3      	beq.n	800af24 <_malloc_r+0x20>
 800af7c:	425a      	negs	r2, r3
 800af7e:	50e2      	str	r2, [r4, r3]
 800af80:	e7d0      	b.n	800af24 <_malloc_r+0x20>
 800af82:	428c      	cmp	r4, r1
 800af84:	684b      	ldr	r3, [r1, #4]
 800af86:	bf16      	itet	ne
 800af88:	6063      	strne	r3, [r4, #4]
 800af8a:	6013      	streq	r3, [r2, #0]
 800af8c:	460c      	movne	r4, r1
 800af8e:	e7eb      	b.n	800af68 <_malloc_r+0x64>
 800af90:	460c      	mov	r4, r1
 800af92:	6849      	ldr	r1, [r1, #4]
 800af94:	e7cc      	b.n	800af30 <_malloc_r+0x2c>
 800af96:	1cc4      	adds	r4, r0, #3
 800af98:	f024 0403 	bic.w	r4, r4, #3
 800af9c:	42a0      	cmp	r0, r4
 800af9e:	d005      	beq.n	800afac <_malloc_r+0xa8>
 800afa0:	1a21      	subs	r1, r4, r0
 800afa2:	4630      	mov	r0, r6
 800afa4:	f000 f82e 	bl	800b004 <_sbrk_r>
 800afa8:	3001      	adds	r0, #1
 800afaa:	d0cf      	beq.n	800af4c <_malloc_r+0x48>
 800afac:	6025      	str	r5, [r4, #0]
 800afae:	e7db      	b.n	800af68 <_malloc_r+0x64>
 800afb0:	20001e48 	.word	0x20001e48
 800afb4:	20001e4c 	.word	0x20001e4c

0800afb8 <_realloc_r>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	4607      	mov	r7, r0
 800afbc:	4614      	mov	r4, r2
 800afbe:	460e      	mov	r6, r1
 800afc0:	b921      	cbnz	r1, 800afcc <_realloc_r+0x14>
 800afc2:	4611      	mov	r1, r2
 800afc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afc8:	f7ff bf9c 	b.w	800af04 <_malloc_r>
 800afcc:	b922      	cbnz	r2, 800afd8 <_realloc_r+0x20>
 800afce:	f7ff ff4b 	bl	800ae68 <_free_r>
 800afd2:	4625      	mov	r5, r4
 800afd4:	4628      	mov	r0, r5
 800afd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd8:	f000 f826 	bl	800b028 <_malloc_usable_size_r>
 800afdc:	42a0      	cmp	r0, r4
 800afde:	d20f      	bcs.n	800b000 <_realloc_r+0x48>
 800afe0:	4621      	mov	r1, r4
 800afe2:	4638      	mov	r0, r7
 800afe4:	f7ff ff8e 	bl	800af04 <_malloc_r>
 800afe8:	4605      	mov	r5, r0
 800afea:	2800      	cmp	r0, #0
 800afec:	d0f2      	beq.n	800afd4 <_realloc_r+0x1c>
 800afee:	4631      	mov	r1, r6
 800aff0:	4622      	mov	r2, r4
 800aff2:	f7ff fbfd 	bl	800a7f0 <memcpy>
 800aff6:	4631      	mov	r1, r6
 800aff8:	4638      	mov	r0, r7
 800affa:	f7ff ff35 	bl	800ae68 <_free_r>
 800affe:	e7e9      	b.n	800afd4 <_realloc_r+0x1c>
 800b000:	4635      	mov	r5, r6
 800b002:	e7e7      	b.n	800afd4 <_realloc_r+0x1c>

0800b004 <_sbrk_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4c06      	ldr	r4, [pc, #24]	; (800b020 <_sbrk_r+0x1c>)
 800b008:	2300      	movs	r3, #0
 800b00a:	4605      	mov	r5, r0
 800b00c:	4608      	mov	r0, r1
 800b00e:	6023      	str	r3, [r4, #0]
 800b010:	f7f7 f9da 	bl	80023c8 <_sbrk>
 800b014:	1c43      	adds	r3, r0, #1
 800b016:	d102      	bne.n	800b01e <_sbrk_r+0x1a>
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	b103      	cbz	r3, 800b01e <_sbrk_r+0x1a>
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	bd38      	pop	{r3, r4, r5, pc}
 800b020:	2000260c 	.word	0x2000260c

0800b024 <__malloc_lock>:
 800b024:	4770      	bx	lr

0800b026 <__malloc_unlock>:
 800b026:	4770      	bx	lr

0800b028 <_malloc_usable_size_r>:
 800b028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b02c:	1f18      	subs	r0, r3, #4
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bfbc      	itt	lt
 800b032:	580b      	ldrlt	r3, [r1, r0]
 800b034:	18c0      	addlt	r0, r0, r3
 800b036:	4770      	bx	lr

0800b038 <trunc>:
 800b038:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b03c:	ec5c bb10 	vmov	fp, ip, d0
 800b040:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b044:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800b048:	2913      	cmp	r1, #19
 800b04a:	4664      	mov	r4, ip
 800b04c:	dc11      	bgt.n	800b072 <trunc+0x3a>
 800b04e:	2900      	cmp	r1, #0
 800b050:	bfa7      	ittee	ge
 800b052:	4b15      	ldrge	r3, [pc, #84]	; (800b0a8 <trunc+0x70>)
 800b054:	fa43 f101 	asrge.w	r1, r3, r1
 800b058:	2200      	movlt	r2, #0
 800b05a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800b05e:	bfa4      	itt	ge
 800b060:	2200      	movge	r2, #0
 800b062:	ea2c 0301 	bicge.w	r3, ip, r1
 800b066:	4693      	mov	fp, r2
 800b068:	469c      	mov	ip, r3
 800b06a:	ec4c bb10 	vmov	d0, fp, ip
 800b06e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b072:	2933      	cmp	r1, #51	; 0x33
 800b074:	dd0d      	ble.n	800b092 <trunc+0x5a>
 800b076:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b07a:	d1f6      	bne.n	800b06a <trunc+0x32>
 800b07c:	4663      	mov	r3, ip
 800b07e:	ee10 2a10 	vmov	r2, s0
 800b082:	ee10 0a10 	vmov	r0, s0
 800b086:	4621      	mov	r1, r4
 800b088:	f7f5 f8f8 	bl	800027c <__adddf3>
 800b08c:	4683      	mov	fp, r0
 800b08e:	468c      	mov	ip, r1
 800b090:	e7eb      	b.n	800b06a <trunc+0x32>
 800b092:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800b096:	f04f 33ff 	mov.w	r3, #4294967295
 800b09a:	fa23 f000 	lsr.w	r0, r3, r0
 800b09e:	ea2b 0600 	bic.w	r6, fp, r0
 800b0a2:	46b3      	mov	fp, r6
 800b0a4:	46a4      	mov	ip, r4
 800b0a6:	e7e0      	b.n	800b06a <trunc+0x32>
 800b0a8:	000fffff 	.word	0x000fffff

0800b0ac <pow>:
 800b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b0:	ed2d 8b04 	vpush	{d8-d9}
 800b0b4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b388 <pow+0x2dc>
 800b0b8:	b08d      	sub	sp, #52	; 0x34
 800b0ba:	ec57 6b10 	vmov	r6, r7, d0
 800b0be:	ec55 4b11 	vmov	r4, r5, d1
 800b0c2:	f000 f965 	bl	800b390 <__ieee754_pow>
 800b0c6:	f999 3000 	ldrsb.w	r3, [r9]
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	eeb0 8a40 	vmov.f32	s16, s0
 800b0d2:	eef0 8a60 	vmov.f32	s17, s1
 800b0d6:	46c8      	mov	r8, r9
 800b0d8:	d05f      	beq.n	800b19a <pow+0xee>
 800b0da:	4622      	mov	r2, r4
 800b0dc:	462b      	mov	r3, r5
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	f7f5 fd1b 	bl	8000b1c <__aeabi_dcmpun>
 800b0e6:	4683      	mov	fp, r0
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d156      	bne.n	800b19a <pow+0xee>
 800b0ec:	4632      	mov	r2, r6
 800b0ee:	463b      	mov	r3, r7
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 fd12 	bl	8000b1c <__aeabi_dcmpun>
 800b0f8:	9001      	str	r0, [sp, #4]
 800b0fa:	b1e8      	cbz	r0, 800b138 <pow+0x8c>
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	2300      	movs	r3, #0
 800b100:	4620      	mov	r0, r4
 800b102:	4629      	mov	r1, r5
 800b104:	f7f5 fcd8 	bl	8000ab8 <__aeabi_dcmpeq>
 800b108:	2800      	cmp	r0, #0
 800b10a:	d046      	beq.n	800b19a <pow+0xee>
 800b10c:	2301      	movs	r3, #1
 800b10e:	9302      	str	r3, [sp, #8]
 800b110:	4b96      	ldr	r3, [pc, #600]	; (800b36c <pow+0x2c0>)
 800b112:	9303      	str	r3, [sp, #12]
 800b114:	4b96      	ldr	r3, [pc, #600]	; (800b370 <pow+0x2c4>)
 800b116:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b11a:	2200      	movs	r2, #0
 800b11c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b120:	9b00      	ldr	r3, [sp, #0]
 800b122:	2b02      	cmp	r3, #2
 800b124:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b128:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b12c:	d033      	beq.n	800b196 <pow+0xea>
 800b12e:	a802      	add	r0, sp, #8
 800b130:	f000 fefd 	bl	800bf2e <matherr>
 800b134:	bb48      	cbnz	r0, 800b18a <pow+0xde>
 800b136:	e05d      	b.n	800b1f4 <pow+0x148>
 800b138:	f04f 0a00 	mov.w	sl, #0
 800b13c:	f04f 0b00 	mov.w	fp, #0
 800b140:	4652      	mov	r2, sl
 800b142:	465b      	mov	r3, fp
 800b144:	4630      	mov	r0, r6
 800b146:	4639      	mov	r1, r7
 800b148:	f7f5 fcb6 	bl	8000ab8 <__aeabi_dcmpeq>
 800b14c:	ec4b ab19 	vmov	d9, sl, fp
 800b150:	2800      	cmp	r0, #0
 800b152:	d054      	beq.n	800b1fe <pow+0x152>
 800b154:	4652      	mov	r2, sl
 800b156:	465b      	mov	r3, fp
 800b158:	4620      	mov	r0, r4
 800b15a:	4629      	mov	r1, r5
 800b15c:	f7f5 fcac 	bl	8000ab8 <__aeabi_dcmpeq>
 800b160:	4680      	mov	r8, r0
 800b162:	b318      	cbz	r0, 800b1ac <pow+0x100>
 800b164:	2301      	movs	r3, #1
 800b166:	9302      	str	r3, [sp, #8]
 800b168:	4b80      	ldr	r3, [pc, #512]	; (800b36c <pow+0x2c0>)
 800b16a:	9303      	str	r3, [sp, #12]
 800b16c:	9b01      	ldr	r3, [sp, #4]
 800b16e:	930a      	str	r3, [sp, #40]	; 0x28
 800b170:	9b00      	ldr	r3, [sp, #0]
 800b172:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b176:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b17a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d0d5      	beq.n	800b12e <pow+0x82>
 800b182:	4b7b      	ldr	r3, [pc, #492]	; (800b370 <pow+0x2c4>)
 800b184:	2200      	movs	r2, #0
 800b186:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b18c:	b11b      	cbz	r3, 800b196 <pow+0xea>
 800b18e:	f7ff fb05 	bl	800a79c <__errno>
 800b192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b194:	6003      	str	r3, [r0, #0]
 800b196:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b19a:	eeb0 0a48 	vmov.f32	s0, s16
 800b19e:	eef0 0a68 	vmov.f32	s1, s17
 800b1a2:	b00d      	add	sp, #52	; 0x34
 800b1a4:	ecbd 8b04 	vpop	{d8-d9}
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	ec45 4b10 	vmov	d0, r4, r5
 800b1b0:	f000 feb5 	bl	800bf1e <finite>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d0f0      	beq.n	800b19a <pow+0xee>
 800b1b8:	4652      	mov	r2, sl
 800b1ba:	465b      	mov	r3, fp
 800b1bc:	4620      	mov	r0, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 fc84 	bl	8000acc <__aeabi_dcmplt>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d0e8      	beq.n	800b19a <pow+0xee>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	9302      	str	r3, [sp, #8]
 800b1cc:	4b67      	ldr	r3, [pc, #412]	; (800b36c <pow+0x2c0>)
 800b1ce:	9303      	str	r3, [sp, #12]
 800b1d0:	f999 3000 	ldrsb.w	r3, [r9]
 800b1d4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b1d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b1dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b1e0:	b913      	cbnz	r3, 800b1e8 <pow+0x13c>
 800b1e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b1e6:	e7a2      	b.n	800b12e <pow+0x82>
 800b1e8:	4962      	ldr	r1, [pc, #392]	; (800b374 <pow+0x2c8>)
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d19c      	bne.n	800b12e <pow+0x82>
 800b1f4:	f7ff fad2 	bl	800a79c <__errno>
 800b1f8:	2321      	movs	r3, #33	; 0x21
 800b1fa:	6003      	str	r3, [r0, #0]
 800b1fc:	e7c5      	b.n	800b18a <pow+0xde>
 800b1fe:	eeb0 0a48 	vmov.f32	s0, s16
 800b202:	eef0 0a68 	vmov.f32	s1, s17
 800b206:	f000 fe8a 	bl	800bf1e <finite>
 800b20a:	9000      	str	r0, [sp, #0]
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f040 8081 	bne.w	800b314 <pow+0x268>
 800b212:	ec47 6b10 	vmov	d0, r6, r7
 800b216:	f000 fe82 	bl	800bf1e <finite>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d07a      	beq.n	800b314 <pow+0x268>
 800b21e:	ec45 4b10 	vmov	d0, r4, r5
 800b222:	f000 fe7c 	bl	800bf1e <finite>
 800b226:	2800      	cmp	r0, #0
 800b228:	d074      	beq.n	800b314 <pow+0x268>
 800b22a:	ec53 2b18 	vmov	r2, r3, d8
 800b22e:	ee18 0a10 	vmov	r0, s16
 800b232:	4619      	mov	r1, r3
 800b234:	f7f5 fc72 	bl	8000b1c <__aeabi_dcmpun>
 800b238:	f999 9000 	ldrsb.w	r9, [r9]
 800b23c:	4b4b      	ldr	r3, [pc, #300]	; (800b36c <pow+0x2c0>)
 800b23e:	b1b0      	cbz	r0, 800b26e <pow+0x1c2>
 800b240:	2201      	movs	r2, #1
 800b242:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b246:	9b00      	ldr	r3, [sp, #0]
 800b248:	930a      	str	r3, [sp, #40]	; 0x28
 800b24a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b24e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b252:	f1b9 0f00 	cmp.w	r9, #0
 800b256:	d0c4      	beq.n	800b1e2 <pow+0x136>
 800b258:	4652      	mov	r2, sl
 800b25a:	465b      	mov	r3, fp
 800b25c:	4650      	mov	r0, sl
 800b25e:	4659      	mov	r1, fp
 800b260:	f7f5 faec 	bl	800083c <__aeabi_ddiv>
 800b264:	f1b9 0f02 	cmp.w	r9, #2
 800b268:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b26c:	e7c1      	b.n	800b1f2 <pow+0x146>
 800b26e:	2203      	movs	r2, #3
 800b270:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b274:	900a      	str	r0, [sp, #40]	; 0x28
 800b276:	4629      	mov	r1, r5
 800b278:	4620      	mov	r0, r4
 800b27a:	2200      	movs	r2, #0
 800b27c:	4b3e      	ldr	r3, [pc, #248]	; (800b378 <pow+0x2cc>)
 800b27e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b282:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b286:	f7f5 f9af 	bl	80005e8 <__aeabi_dmul>
 800b28a:	4604      	mov	r4, r0
 800b28c:	460d      	mov	r5, r1
 800b28e:	f1b9 0f00 	cmp.w	r9, #0
 800b292:	d124      	bne.n	800b2de <pow+0x232>
 800b294:	4b39      	ldr	r3, [pc, #228]	; (800b37c <pow+0x2d0>)
 800b296:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b29a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b29e:	4630      	mov	r0, r6
 800b2a0:	4652      	mov	r2, sl
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	f7f5 fc11 	bl	8000acc <__aeabi_dcmplt>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d056      	beq.n	800b35c <pow+0x2b0>
 800b2ae:	ec45 4b10 	vmov	d0, r4, r5
 800b2b2:	f000 fe49 	bl	800bf48 <rint>
 800b2b6:	4622      	mov	r2, r4
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	ec51 0b10 	vmov	r0, r1, d0
 800b2be:	f7f5 fbfb 	bl	8000ab8 <__aeabi_dcmpeq>
 800b2c2:	b920      	cbnz	r0, 800b2ce <pow+0x222>
 800b2c4:	4b2e      	ldr	r3, [pc, #184]	; (800b380 <pow+0x2d4>)
 800b2c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b2ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2ce:	f998 3000 	ldrsb.w	r3, [r8]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d142      	bne.n	800b35c <pow+0x2b0>
 800b2d6:	f7ff fa61 	bl	800a79c <__errno>
 800b2da:	2322      	movs	r3, #34	; 0x22
 800b2dc:	e78d      	b.n	800b1fa <pow+0x14e>
 800b2de:	4b29      	ldr	r3, [pc, #164]	; (800b384 <pow+0x2d8>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	4652      	mov	r2, sl
 800b2ea:	465b      	mov	r3, fp
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	f7f5 fbed 	bl	8000acc <__aeabi_dcmplt>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d0eb      	beq.n	800b2ce <pow+0x222>
 800b2f6:	ec45 4b10 	vmov	d0, r4, r5
 800b2fa:	f000 fe25 	bl	800bf48 <rint>
 800b2fe:	4622      	mov	r2, r4
 800b300:	462b      	mov	r3, r5
 800b302:	ec51 0b10 	vmov	r0, r1, d0
 800b306:	f7f5 fbd7 	bl	8000ab8 <__aeabi_dcmpeq>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d1df      	bne.n	800b2ce <pow+0x222>
 800b30e:	2200      	movs	r2, #0
 800b310:	4b18      	ldr	r3, [pc, #96]	; (800b374 <pow+0x2c8>)
 800b312:	e7da      	b.n	800b2ca <pow+0x21e>
 800b314:	2200      	movs	r2, #0
 800b316:	2300      	movs	r3, #0
 800b318:	ec51 0b18 	vmov	r0, r1, d8
 800b31c:	f7f5 fbcc 	bl	8000ab8 <__aeabi_dcmpeq>
 800b320:	2800      	cmp	r0, #0
 800b322:	f43f af3a 	beq.w	800b19a <pow+0xee>
 800b326:	ec47 6b10 	vmov	d0, r6, r7
 800b32a:	f000 fdf8 	bl	800bf1e <finite>
 800b32e:	2800      	cmp	r0, #0
 800b330:	f43f af33 	beq.w	800b19a <pow+0xee>
 800b334:	ec45 4b10 	vmov	d0, r4, r5
 800b338:	f000 fdf1 	bl	800bf1e <finite>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	f43f af2c 	beq.w	800b19a <pow+0xee>
 800b342:	2304      	movs	r3, #4
 800b344:	9302      	str	r3, [sp, #8]
 800b346:	4b09      	ldr	r3, [pc, #36]	; (800b36c <pow+0x2c0>)
 800b348:	9303      	str	r3, [sp, #12]
 800b34a:	2300      	movs	r3, #0
 800b34c:	930a      	str	r3, [sp, #40]	; 0x28
 800b34e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b352:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b356:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b35a:	e7b8      	b.n	800b2ce <pow+0x222>
 800b35c:	a802      	add	r0, sp, #8
 800b35e:	f000 fde6 	bl	800bf2e <matherr>
 800b362:	2800      	cmp	r0, #0
 800b364:	f47f af11 	bne.w	800b18a <pow+0xde>
 800b368:	e7b5      	b.n	800b2d6 <pow+0x22a>
 800b36a:	bf00      	nop
 800b36c:	0800c3b7 	.word	0x0800c3b7
 800b370:	3ff00000 	.word	0x3ff00000
 800b374:	fff00000 	.word	0xfff00000
 800b378:	3fe00000 	.word	0x3fe00000
 800b37c:	47efffff 	.word	0x47efffff
 800b380:	c7efffff 	.word	0xc7efffff
 800b384:	7ff00000 	.word	0x7ff00000
 800b388:	2000014c 	.word	0x2000014c
 800b38c:	00000000 	.word	0x00000000

0800b390 <__ieee754_pow>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	b091      	sub	sp, #68	; 0x44
 800b396:	ed8d 1b00 	vstr	d1, [sp]
 800b39a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b39e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b3a2:	ea58 0302 	orrs.w	r3, r8, r2
 800b3a6:	ec57 6b10 	vmov	r6, r7, d0
 800b3aa:	f000 84be 	beq.w	800bd2a <__ieee754_pow+0x99a>
 800b3ae:	4b7a      	ldr	r3, [pc, #488]	; (800b598 <__ieee754_pow+0x208>)
 800b3b0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b3b4:	429c      	cmp	r4, r3
 800b3b6:	463d      	mov	r5, r7
 800b3b8:	ee10 aa10 	vmov	sl, s0
 800b3bc:	dc09      	bgt.n	800b3d2 <__ieee754_pow+0x42>
 800b3be:	d103      	bne.n	800b3c8 <__ieee754_pow+0x38>
 800b3c0:	b93e      	cbnz	r6, 800b3d2 <__ieee754_pow+0x42>
 800b3c2:	45a0      	cmp	r8, r4
 800b3c4:	dc0d      	bgt.n	800b3e2 <__ieee754_pow+0x52>
 800b3c6:	e001      	b.n	800b3cc <__ieee754_pow+0x3c>
 800b3c8:	4598      	cmp	r8, r3
 800b3ca:	dc02      	bgt.n	800b3d2 <__ieee754_pow+0x42>
 800b3cc:	4598      	cmp	r8, r3
 800b3ce:	d10e      	bne.n	800b3ee <__ieee754_pow+0x5e>
 800b3d0:	b16a      	cbz	r2, 800b3ee <__ieee754_pow+0x5e>
 800b3d2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b3d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3da:	ea54 030a 	orrs.w	r3, r4, sl
 800b3de:	f000 84a4 	beq.w	800bd2a <__ieee754_pow+0x99a>
 800b3e2:	486e      	ldr	r0, [pc, #440]	; (800b59c <__ieee754_pow+0x20c>)
 800b3e4:	b011      	add	sp, #68	; 0x44
 800b3e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ea:	f000 bda5 	b.w	800bf38 <nan>
 800b3ee:	2d00      	cmp	r5, #0
 800b3f0:	da53      	bge.n	800b49a <__ieee754_pow+0x10a>
 800b3f2:	4b6b      	ldr	r3, [pc, #428]	; (800b5a0 <__ieee754_pow+0x210>)
 800b3f4:	4598      	cmp	r8, r3
 800b3f6:	dc4d      	bgt.n	800b494 <__ieee754_pow+0x104>
 800b3f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b3fc:	4598      	cmp	r8, r3
 800b3fe:	dd4c      	ble.n	800b49a <__ieee754_pow+0x10a>
 800b400:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b404:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b408:	2b14      	cmp	r3, #20
 800b40a:	dd26      	ble.n	800b45a <__ieee754_pow+0xca>
 800b40c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b410:	fa22 f103 	lsr.w	r1, r2, r3
 800b414:	fa01 f303 	lsl.w	r3, r1, r3
 800b418:	4293      	cmp	r3, r2
 800b41a:	d13e      	bne.n	800b49a <__ieee754_pow+0x10a>
 800b41c:	f001 0101 	and.w	r1, r1, #1
 800b420:	f1c1 0b02 	rsb	fp, r1, #2
 800b424:	2a00      	cmp	r2, #0
 800b426:	d15b      	bne.n	800b4e0 <__ieee754_pow+0x150>
 800b428:	4b5b      	ldr	r3, [pc, #364]	; (800b598 <__ieee754_pow+0x208>)
 800b42a:	4598      	cmp	r8, r3
 800b42c:	d124      	bne.n	800b478 <__ieee754_pow+0xe8>
 800b42e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b432:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b436:	ea53 030a 	orrs.w	r3, r3, sl
 800b43a:	f000 8476 	beq.w	800bd2a <__ieee754_pow+0x99a>
 800b43e:	4b59      	ldr	r3, [pc, #356]	; (800b5a4 <__ieee754_pow+0x214>)
 800b440:	429c      	cmp	r4, r3
 800b442:	dd2d      	ble.n	800b4a0 <__ieee754_pow+0x110>
 800b444:	f1b9 0f00 	cmp.w	r9, #0
 800b448:	f280 8473 	bge.w	800bd32 <__ieee754_pow+0x9a2>
 800b44c:	2000      	movs	r0, #0
 800b44e:	2100      	movs	r1, #0
 800b450:	ec41 0b10 	vmov	d0, r0, r1
 800b454:	b011      	add	sp, #68	; 0x44
 800b456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45a:	2a00      	cmp	r2, #0
 800b45c:	d13e      	bne.n	800b4dc <__ieee754_pow+0x14c>
 800b45e:	f1c3 0314 	rsb	r3, r3, #20
 800b462:	fa48 f103 	asr.w	r1, r8, r3
 800b466:	fa01 f303 	lsl.w	r3, r1, r3
 800b46a:	4543      	cmp	r3, r8
 800b46c:	f040 8469 	bne.w	800bd42 <__ieee754_pow+0x9b2>
 800b470:	f001 0101 	and.w	r1, r1, #1
 800b474:	f1c1 0b02 	rsb	fp, r1, #2
 800b478:	4b4b      	ldr	r3, [pc, #300]	; (800b5a8 <__ieee754_pow+0x218>)
 800b47a:	4598      	cmp	r8, r3
 800b47c:	d118      	bne.n	800b4b0 <__ieee754_pow+0x120>
 800b47e:	f1b9 0f00 	cmp.w	r9, #0
 800b482:	f280 845a 	bge.w	800bd3a <__ieee754_pow+0x9aa>
 800b486:	4948      	ldr	r1, [pc, #288]	; (800b5a8 <__ieee754_pow+0x218>)
 800b488:	4632      	mov	r2, r6
 800b48a:	463b      	mov	r3, r7
 800b48c:	2000      	movs	r0, #0
 800b48e:	f7f5 f9d5 	bl	800083c <__aeabi_ddiv>
 800b492:	e7dd      	b.n	800b450 <__ieee754_pow+0xc0>
 800b494:	f04f 0b02 	mov.w	fp, #2
 800b498:	e7c4      	b.n	800b424 <__ieee754_pow+0x94>
 800b49a:	f04f 0b00 	mov.w	fp, #0
 800b49e:	e7c1      	b.n	800b424 <__ieee754_pow+0x94>
 800b4a0:	f1b9 0f00 	cmp.w	r9, #0
 800b4a4:	dad2      	bge.n	800b44c <__ieee754_pow+0xbc>
 800b4a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b4aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b4ae:	e7cf      	b.n	800b450 <__ieee754_pow+0xc0>
 800b4b0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b4b4:	d106      	bne.n	800b4c4 <__ieee754_pow+0x134>
 800b4b6:	4632      	mov	r2, r6
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	4610      	mov	r0, r2
 800b4bc:	4619      	mov	r1, r3
 800b4be:	f7f5 f893 	bl	80005e8 <__aeabi_dmul>
 800b4c2:	e7c5      	b.n	800b450 <__ieee754_pow+0xc0>
 800b4c4:	4b39      	ldr	r3, [pc, #228]	; (800b5ac <__ieee754_pow+0x21c>)
 800b4c6:	4599      	cmp	r9, r3
 800b4c8:	d10a      	bne.n	800b4e0 <__ieee754_pow+0x150>
 800b4ca:	2d00      	cmp	r5, #0
 800b4cc:	db08      	blt.n	800b4e0 <__ieee754_pow+0x150>
 800b4ce:	ec47 6b10 	vmov	d0, r6, r7
 800b4d2:	b011      	add	sp, #68	; 0x44
 800b4d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d8:	f000 bc68 	b.w	800bdac <__ieee754_sqrt>
 800b4dc:	f04f 0b00 	mov.w	fp, #0
 800b4e0:	ec47 6b10 	vmov	d0, r6, r7
 800b4e4:	f000 fd12 	bl	800bf0c <fabs>
 800b4e8:	ec51 0b10 	vmov	r0, r1, d0
 800b4ec:	f1ba 0f00 	cmp.w	sl, #0
 800b4f0:	d127      	bne.n	800b542 <__ieee754_pow+0x1b2>
 800b4f2:	b124      	cbz	r4, 800b4fe <__ieee754_pow+0x16e>
 800b4f4:	4b2c      	ldr	r3, [pc, #176]	; (800b5a8 <__ieee754_pow+0x218>)
 800b4f6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d121      	bne.n	800b542 <__ieee754_pow+0x1b2>
 800b4fe:	f1b9 0f00 	cmp.w	r9, #0
 800b502:	da05      	bge.n	800b510 <__ieee754_pow+0x180>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	2000      	movs	r0, #0
 800b50a:	4927      	ldr	r1, [pc, #156]	; (800b5a8 <__ieee754_pow+0x218>)
 800b50c:	f7f5 f996 	bl	800083c <__aeabi_ddiv>
 800b510:	2d00      	cmp	r5, #0
 800b512:	da9d      	bge.n	800b450 <__ieee754_pow+0xc0>
 800b514:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b518:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b51c:	ea54 030b 	orrs.w	r3, r4, fp
 800b520:	d108      	bne.n	800b534 <__ieee754_pow+0x1a4>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4610      	mov	r0, r2
 800b528:	4619      	mov	r1, r3
 800b52a:	f7f4 fea5 	bl	8000278 <__aeabi_dsub>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	e7ac      	b.n	800b48e <__ieee754_pow+0xfe>
 800b534:	f1bb 0f01 	cmp.w	fp, #1
 800b538:	d18a      	bne.n	800b450 <__ieee754_pow+0xc0>
 800b53a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b53e:	4619      	mov	r1, r3
 800b540:	e786      	b.n	800b450 <__ieee754_pow+0xc0>
 800b542:	0fed      	lsrs	r5, r5, #31
 800b544:	1e6b      	subs	r3, r5, #1
 800b546:	930d      	str	r3, [sp, #52]	; 0x34
 800b548:	ea5b 0303 	orrs.w	r3, fp, r3
 800b54c:	d102      	bne.n	800b554 <__ieee754_pow+0x1c4>
 800b54e:	4632      	mov	r2, r6
 800b550:	463b      	mov	r3, r7
 800b552:	e7e8      	b.n	800b526 <__ieee754_pow+0x196>
 800b554:	4b16      	ldr	r3, [pc, #88]	; (800b5b0 <__ieee754_pow+0x220>)
 800b556:	4598      	cmp	r8, r3
 800b558:	f340 80fe 	ble.w	800b758 <__ieee754_pow+0x3c8>
 800b55c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b560:	4598      	cmp	r8, r3
 800b562:	dd0a      	ble.n	800b57a <__ieee754_pow+0x1ea>
 800b564:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <__ieee754_pow+0x214>)
 800b566:	429c      	cmp	r4, r3
 800b568:	dc0d      	bgt.n	800b586 <__ieee754_pow+0x1f6>
 800b56a:	f1b9 0f00 	cmp.w	r9, #0
 800b56e:	f6bf af6d 	bge.w	800b44c <__ieee754_pow+0xbc>
 800b572:	a307      	add	r3, pc, #28	; (adr r3, 800b590 <__ieee754_pow+0x200>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	e79f      	b.n	800b4ba <__ieee754_pow+0x12a>
 800b57a:	4b0e      	ldr	r3, [pc, #56]	; (800b5b4 <__ieee754_pow+0x224>)
 800b57c:	429c      	cmp	r4, r3
 800b57e:	ddf4      	ble.n	800b56a <__ieee754_pow+0x1da>
 800b580:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <__ieee754_pow+0x218>)
 800b582:	429c      	cmp	r4, r3
 800b584:	dd18      	ble.n	800b5b8 <__ieee754_pow+0x228>
 800b586:	f1b9 0f00 	cmp.w	r9, #0
 800b58a:	dcf2      	bgt.n	800b572 <__ieee754_pow+0x1e2>
 800b58c:	e75e      	b.n	800b44c <__ieee754_pow+0xbc>
 800b58e:	bf00      	nop
 800b590:	8800759c 	.word	0x8800759c
 800b594:	7e37e43c 	.word	0x7e37e43c
 800b598:	7ff00000 	.word	0x7ff00000
 800b59c:	0800c389 	.word	0x0800c389
 800b5a0:	433fffff 	.word	0x433fffff
 800b5a4:	3fefffff 	.word	0x3fefffff
 800b5a8:	3ff00000 	.word	0x3ff00000
 800b5ac:	3fe00000 	.word	0x3fe00000
 800b5b0:	41e00000 	.word	0x41e00000
 800b5b4:	3feffffe 	.word	0x3feffffe
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	4b63      	ldr	r3, [pc, #396]	; (800b748 <__ieee754_pow+0x3b8>)
 800b5bc:	f7f4 fe5c 	bl	8000278 <__aeabi_dsub>
 800b5c0:	a355      	add	r3, pc, #340	; (adr r3, 800b718 <__ieee754_pow+0x388>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	460d      	mov	r5, r1
 800b5ca:	f7f5 f80d 	bl	80005e8 <__aeabi_dmul>
 800b5ce:	a354      	add	r3, pc, #336	; (adr r3, 800b720 <__ieee754_pow+0x390>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	4620      	mov	r0, r4
 800b5da:	4629      	mov	r1, r5
 800b5dc:	f7f5 f804 	bl	80005e8 <__aeabi_dmul>
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5e6:	4b59      	ldr	r3, [pc, #356]	; (800b74c <__ieee754_pow+0x3bc>)
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7f4 fffc 	bl	80005e8 <__aeabi_dmul>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	a14c      	add	r1, pc, #304	; (adr r1, 800b728 <__ieee754_pow+0x398>)
 800b5f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5fa:	f7f4 fe3d 	bl	8000278 <__aeabi_dsub>
 800b5fe:	4622      	mov	r2, r4
 800b600:	462b      	mov	r3, r5
 800b602:	f7f4 fff1 	bl	80005e8 <__aeabi_dmul>
 800b606:	4602      	mov	r2, r0
 800b608:	460b      	mov	r3, r1
 800b60a:	2000      	movs	r0, #0
 800b60c:	4950      	ldr	r1, [pc, #320]	; (800b750 <__ieee754_pow+0x3c0>)
 800b60e:	f7f4 fe33 	bl	8000278 <__aeabi_dsub>
 800b612:	4622      	mov	r2, r4
 800b614:	462b      	mov	r3, r5
 800b616:	4680      	mov	r8, r0
 800b618:	4689      	mov	r9, r1
 800b61a:	4620      	mov	r0, r4
 800b61c:	4629      	mov	r1, r5
 800b61e:	f7f4 ffe3 	bl	80005e8 <__aeabi_dmul>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4640      	mov	r0, r8
 800b628:	4649      	mov	r1, r9
 800b62a:	f7f4 ffdd 	bl	80005e8 <__aeabi_dmul>
 800b62e:	a340      	add	r3, pc, #256	; (adr r3, 800b730 <__ieee754_pow+0x3a0>)
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	f7f4 ffd8 	bl	80005e8 <__aeabi_dmul>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b640:	f7f4 fe1a 	bl	8000278 <__aeabi_dsub>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4604      	mov	r4, r0
 800b64a:	460d      	mov	r5, r1
 800b64c:	4630      	mov	r0, r6
 800b64e:	4639      	mov	r1, r7
 800b650:	f7f4 fe14 	bl	800027c <__adddf3>
 800b654:	2000      	movs	r0, #0
 800b656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b65a:	4632      	mov	r2, r6
 800b65c:	463b      	mov	r3, r7
 800b65e:	f7f4 fe0b 	bl	8000278 <__aeabi_dsub>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4620      	mov	r0, r4
 800b668:	4629      	mov	r1, r5
 800b66a:	f7f4 fe05 	bl	8000278 <__aeabi_dsub>
 800b66e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b670:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b674:	4313      	orrs	r3, r2
 800b676:	4606      	mov	r6, r0
 800b678:	460f      	mov	r7, r1
 800b67a:	f040 81eb 	bne.w	800ba54 <__ieee754_pow+0x6c4>
 800b67e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b738 <__ieee754_pow+0x3a8>
 800b682:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b686:	2400      	movs	r4, #0
 800b688:	4622      	mov	r2, r4
 800b68a:	462b      	mov	r3, r5
 800b68c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b690:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b694:	f7f4 fdf0 	bl	8000278 <__aeabi_dsub>
 800b698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b69c:	f7f4 ffa4 	bl	80005e8 <__aeabi_dmul>
 800b6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	4689      	mov	r9, r1
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f7f4 ff9c 	bl	80005e8 <__aeabi_dmul>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4649      	mov	r1, r9
 800b6b8:	f7f4 fde0 	bl	800027c <__adddf3>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	462b      	mov	r3, r5
 800b6c0:	4680      	mov	r8, r0
 800b6c2:	4689      	mov	r9, r1
 800b6c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6c8:	f7f4 ff8e 	bl	80005e8 <__aeabi_dmul>
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	4640      	mov	r0, r8
 800b6d8:	e9cd 4500 	strd	r4, r5, [sp]
 800b6dc:	f7f4 fdce 	bl	800027c <__adddf3>
 800b6e0:	4b1c      	ldr	r3, [pc, #112]	; (800b754 <__ieee754_pow+0x3c4>)
 800b6e2:	4299      	cmp	r1, r3
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	460f      	mov	r7, r1
 800b6e8:	468b      	mov	fp, r1
 800b6ea:	f340 82f7 	ble.w	800bcdc <__ieee754_pow+0x94c>
 800b6ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b6f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b6f6:	4303      	orrs	r3, r0
 800b6f8:	f000 81ea 	beq.w	800bad0 <__ieee754_pow+0x740>
 800b6fc:	a310      	add	r3, pc, #64	; (adr r3, 800b740 <__ieee754_pow+0x3b0>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b706:	f7f4 ff6f 	bl	80005e8 <__aeabi_dmul>
 800b70a:	a30d      	add	r3, pc, #52	; (adr r3, 800b740 <__ieee754_pow+0x3b0>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	e6d5      	b.n	800b4be <__ieee754_pow+0x12e>
 800b712:	bf00      	nop
 800b714:	f3af 8000 	nop.w
 800b718:	60000000 	.word	0x60000000
 800b71c:	3ff71547 	.word	0x3ff71547
 800b720:	f85ddf44 	.word	0xf85ddf44
 800b724:	3e54ae0b 	.word	0x3e54ae0b
 800b728:	55555555 	.word	0x55555555
 800b72c:	3fd55555 	.word	0x3fd55555
 800b730:	652b82fe 	.word	0x652b82fe
 800b734:	3ff71547 	.word	0x3ff71547
 800b738:	00000000 	.word	0x00000000
 800b73c:	bff00000 	.word	0xbff00000
 800b740:	8800759c 	.word	0x8800759c
 800b744:	7e37e43c 	.word	0x7e37e43c
 800b748:	3ff00000 	.word	0x3ff00000
 800b74c:	3fd00000 	.word	0x3fd00000
 800b750:	3fe00000 	.word	0x3fe00000
 800b754:	408fffff 	.word	0x408fffff
 800b758:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b75c:	f04f 0200 	mov.w	r2, #0
 800b760:	da05      	bge.n	800b76e <__ieee754_pow+0x3de>
 800b762:	4bd3      	ldr	r3, [pc, #844]	; (800bab0 <__ieee754_pow+0x720>)
 800b764:	f7f4 ff40 	bl	80005e8 <__aeabi_dmul>
 800b768:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b76c:	460c      	mov	r4, r1
 800b76e:	1523      	asrs	r3, r4, #20
 800b770:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b774:	4413      	add	r3, r2
 800b776:	9309      	str	r3, [sp, #36]	; 0x24
 800b778:	4bce      	ldr	r3, [pc, #824]	; (800bab4 <__ieee754_pow+0x724>)
 800b77a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b77e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b782:	429c      	cmp	r4, r3
 800b784:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b788:	dd08      	ble.n	800b79c <__ieee754_pow+0x40c>
 800b78a:	4bcb      	ldr	r3, [pc, #812]	; (800bab8 <__ieee754_pow+0x728>)
 800b78c:	429c      	cmp	r4, r3
 800b78e:	f340 815e 	ble.w	800ba4e <__ieee754_pow+0x6be>
 800b792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b794:	3301      	adds	r3, #1
 800b796:	9309      	str	r3, [sp, #36]	; 0x24
 800b798:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b79c:	f04f 0a00 	mov.w	sl, #0
 800b7a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b7a4:	930c      	str	r3, [sp, #48]	; 0x30
 800b7a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7a8:	4bc4      	ldr	r3, [pc, #784]	; (800babc <__ieee754_pow+0x72c>)
 800b7aa:	4413      	add	r3, r2
 800b7ac:	ed93 7b00 	vldr	d7, [r3]
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	ec53 2b17 	vmov	r2, r3, d7
 800b7b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b7be:	f7f4 fd5b 	bl	8000278 <__aeabi_dsub>
 800b7c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ce:	f7f4 fd55 	bl	800027c <__adddf3>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	49b9      	ldr	r1, [pc, #740]	; (800bac0 <__ieee754_pow+0x730>)
 800b7da:	f7f5 f82f 	bl	800083c <__aeabi_ddiv>
 800b7de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	f7f4 fefd 	bl	80005e8 <__aeabi_dmul>
 800b7ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7f2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b7f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9302      	str	r3, [sp, #8]
 800b7fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b802:	106d      	asrs	r5, r5, #1
 800b804:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b808:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b80c:	2200      	movs	r2, #0
 800b80e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b812:	4640      	mov	r0, r8
 800b814:	4649      	mov	r1, r9
 800b816:	4614      	mov	r4, r2
 800b818:	461d      	mov	r5, r3
 800b81a:	f7f4 fee5 	bl	80005e8 <__aeabi_dmul>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	4630      	mov	r0, r6
 800b824:	4639      	mov	r1, r7
 800b826:	f7f4 fd27 	bl	8000278 <__aeabi_dsub>
 800b82a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b82e:	4606      	mov	r6, r0
 800b830:	460f      	mov	r7, r1
 800b832:	4620      	mov	r0, r4
 800b834:	4629      	mov	r1, r5
 800b836:	f7f4 fd1f 	bl	8000278 <__aeabi_dsub>
 800b83a:	4602      	mov	r2, r0
 800b83c:	460b      	mov	r3, r1
 800b83e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b842:	f7f4 fd19 	bl	8000278 <__aeabi_dsub>
 800b846:	4642      	mov	r2, r8
 800b848:	464b      	mov	r3, r9
 800b84a:	f7f4 fecd 	bl	80005e8 <__aeabi_dmul>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	f7f4 fd0f 	bl	8000278 <__aeabi_dsub>
 800b85a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b85e:	f7f4 fec3 	bl	80005e8 <__aeabi_dmul>
 800b862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b866:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b86a:	4610      	mov	r0, r2
 800b86c:	4619      	mov	r1, r3
 800b86e:	f7f4 febb 	bl	80005e8 <__aeabi_dmul>
 800b872:	a37b      	add	r3, pc, #492	; (adr r3, 800ba60 <__ieee754_pow+0x6d0>)
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	4604      	mov	r4, r0
 800b87a:	460d      	mov	r5, r1
 800b87c:	f7f4 feb4 	bl	80005e8 <__aeabi_dmul>
 800b880:	a379      	add	r3, pc, #484	; (adr r3, 800ba68 <__ieee754_pow+0x6d8>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f7f4 fcf9 	bl	800027c <__adddf3>
 800b88a:	4622      	mov	r2, r4
 800b88c:	462b      	mov	r3, r5
 800b88e:	f7f4 feab 	bl	80005e8 <__aeabi_dmul>
 800b892:	a377      	add	r3, pc, #476	; (adr r3, 800ba70 <__ieee754_pow+0x6e0>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	f7f4 fcf0 	bl	800027c <__adddf3>
 800b89c:	4622      	mov	r2, r4
 800b89e:	462b      	mov	r3, r5
 800b8a0:	f7f4 fea2 	bl	80005e8 <__aeabi_dmul>
 800b8a4:	a374      	add	r3, pc, #464	; (adr r3, 800ba78 <__ieee754_pow+0x6e8>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	f7f4 fce7 	bl	800027c <__adddf3>
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	f7f4 fe99 	bl	80005e8 <__aeabi_dmul>
 800b8b6:	a372      	add	r3, pc, #456	; (adr r3, 800ba80 <__ieee754_pow+0x6f0>)
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	f7f4 fcde 	bl	800027c <__adddf3>
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	462b      	mov	r3, r5
 800b8c4:	f7f4 fe90 	bl	80005e8 <__aeabi_dmul>
 800b8c8:	a36f      	add	r3, pc, #444	; (adr r3, 800ba88 <__ieee754_pow+0x6f8>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f7f4 fcd5 	bl	800027c <__adddf3>
 800b8d2:	4622      	mov	r2, r4
 800b8d4:	4606      	mov	r6, r0
 800b8d6:	460f      	mov	r7, r1
 800b8d8:	462b      	mov	r3, r5
 800b8da:	4620      	mov	r0, r4
 800b8dc:	4629      	mov	r1, r5
 800b8de:	f7f4 fe83 	bl	80005e8 <__aeabi_dmul>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	f7f4 fe7d 	bl	80005e8 <__aeabi_dmul>
 800b8ee:	4642      	mov	r2, r8
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	464b      	mov	r3, r9
 800b8f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8fa:	f7f4 fcbf 	bl	800027c <__adddf3>
 800b8fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b902:	f7f4 fe71 	bl	80005e8 <__aeabi_dmul>
 800b906:	4622      	mov	r2, r4
 800b908:	462b      	mov	r3, r5
 800b90a:	f7f4 fcb7 	bl	800027c <__adddf3>
 800b90e:	4642      	mov	r2, r8
 800b910:	4606      	mov	r6, r0
 800b912:	460f      	mov	r7, r1
 800b914:	464b      	mov	r3, r9
 800b916:	4640      	mov	r0, r8
 800b918:	4649      	mov	r1, r9
 800b91a:	f7f4 fe65 	bl	80005e8 <__aeabi_dmul>
 800b91e:	2200      	movs	r2, #0
 800b920:	4b68      	ldr	r3, [pc, #416]	; (800bac4 <__ieee754_pow+0x734>)
 800b922:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b926:	f7f4 fca9 	bl	800027c <__adddf3>
 800b92a:	4632      	mov	r2, r6
 800b92c:	463b      	mov	r3, r7
 800b92e:	f7f4 fca5 	bl	800027c <__adddf3>
 800b932:	9802      	ldr	r0, [sp, #8]
 800b934:	460d      	mov	r5, r1
 800b936:	4604      	mov	r4, r0
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4640      	mov	r0, r8
 800b93e:	4649      	mov	r1, r9
 800b940:	f7f4 fe52 	bl	80005e8 <__aeabi_dmul>
 800b944:	2200      	movs	r2, #0
 800b946:	4680      	mov	r8, r0
 800b948:	4689      	mov	r9, r1
 800b94a:	4b5e      	ldr	r3, [pc, #376]	; (800bac4 <__ieee754_pow+0x734>)
 800b94c:	4620      	mov	r0, r4
 800b94e:	4629      	mov	r1, r5
 800b950:	f7f4 fc92 	bl	8000278 <__aeabi_dsub>
 800b954:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b958:	f7f4 fc8e 	bl	8000278 <__aeabi_dsub>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	f7f4 fc88 	bl	8000278 <__aeabi_dsub>
 800b968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b96c:	f7f4 fe3c 	bl	80005e8 <__aeabi_dmul>
 800b970:	4622      	mov	r2, r4
 800b972:	4606      	mov	r6, r0
 800b974:	460f      	mov	r7, r1
 800b976:	462b      	mov	r3, r5
 800b978:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b97c:	f7f4 fe34 	bl	80005e8 <__aeabi_dmul>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	4630      	mov	r0, r6
 800b986:	4639      	mov	r1, r7
 800b988:	f7f4 fc78 	bl	800027c <__adddf3>
 800b98c:	4606      	mov	r6, r0
 800b98e:	460f      	mov	r7, r1
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4640      	mov	r0, r8
 800b996:	4649      	mov	r1, r9
 800b998:	f7f4 fc70 	bl	800027c <__adddf3>
 800b99c:	9802      	ldr	r0, [sp, #8]
 800b99e:	a33c      	add	r3, pc, #240	; (adr r3, 800ba90 <__ieee754_pow+0x700>)
 800b9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	f7f4 fe1e 	bl	80005e8 <__aeabi_dmul>
 800b9ac:	4642      	mov	r2, r8
 800b9ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b9b2:	464b      	mov	r3, r9
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	f7f4 fc5e 	bl	8000278 <__aeabi_dsub>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	f7f4 fc58 	bl	8000278 <__aeabi_dsub>
 800b9c8:	a333      	add	r3, pc, #204	; (adr r3, 800ba98 <__ieee754_pow+0x708>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fe0b 	bl	80005e8 <__aeabi_dmul>
 800b9d2:	a333      	add	r3, pc, #204	; (adr r3, 800baa0 <__ieee754_pow+0x710>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	4606      	mov	r6, r0
 800b9da:	460f      	mov	r7, r1
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7f4 fe02 	bl	80005e8 <__aeabi_dmul>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	4639      	mov	r1, r7
 800b9ec:	f7f4 fc46 	bl	800027c <__adddf3>
 800b9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9f2:	4b35      	ldr	r3, [pc, #212]	; (800bac8 <__ieee754_pow+0x738>)
 800b9f4:	4413      	add	r3, r2
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	f7f4 fc3f 	bl	800027c <__adddf3>
 800b9fe:	4604      	mov	r4, r0
 800ba00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba02:	460d      	mov	r5, r1
 800ba04:	f7f4 fd86 	bl	8000514 <__aeabi_i2d>
 800ba08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba0a:	4b30      	ldr	r3, [pc, #192]	; (800bacc <__ieee754_pow+0x73c>)
 800ba0c:	4413      	add	r3, r2
 800ba0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	4622      	mov	r2, r4
 800ba18:	462b      	mov	r3, r5
 800ba1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba1e:	f7f4 fc2d 	bl	800027c <__adddf3>
 800ba22:	4642      	mov	r2, r8
 800ba24:	464b      	mov	r3, r9
 800ba26:	f7f4 fc29 	bl	800027c <__adddf3>
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	463b      	mov	r3, r7
 800ba2e:	f7f4 fc25 	bl	800027c <__adddf3>
 800ba32:	9802      	ldr	r0, [sp, #8]
 800ba34:	4632      	mov	r2, r6
 800ba36:	463b      	mov	r3, r7
 800ba38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba3c:	f7f4 fc1c 	bl	8000278 <__aeabi_dsub>
 800ba40:	4642      	mov	r2, r8
 800ba42:	464b      	mov	r3, r9
 800ba44:	f7f4 fc18 	bl	8000278 <__aeabi_dsub>
 800ba48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba4c:	e607      	b.n	800b65e <__ieee754_pow+0x2ce>
 800ba4e:	f04f 0a01 	mov.w	sl, #1
 800ba52:	e6a5      	b.n	800b7a0 <__ieee754_pow+0x410>
 800ba54:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800baa8 <__ieee754_pow+0x718>
 800ba58:	e613      	b.n	800b682 <__ieee754_pow+0x2f2>
 800ba5a:	bf00      	nop
 800ba5c:	f3af 8000 	nop.w
 800ba60:	4a454eef 	.word	0x4a454eef
 800ba64:	3fca7e28 	.word	0x3fca7e28
 800ba68:	93c9db65 	.word	0x93c9db65
 800ba6c:	3fcd864a 	.word	0x3fcd864a
 800ba70:	a91d4101 	.word	0xa91d4101
 800ba74:	3fd17460 	.word	0x3fd17460
 800ba78:	518f264d 	.word	0x518f264d
 800ba7c:	3fd55555 	.word	0x3fd55555
 800ba80:	db6fabff 	.word	0xdb6fabff
 800ba84:	3fdb6db6 	.word	0x3fdb6db6
 800ba88:	33333303 	.word	0x33333303
 800ba8c:	3fe33333 	.word	0x3fe33333
 800ba90:	e0000000 	.word	0xe0000000
 800ba94:	3feec709 	.word	0x3feec709
 800ba98:	dc3a03fd 	.word	0xdc3a03fd
 800ba9c:	3feec709 	.word	0x3feec709
 800baa0:	145b01f5 	.word	0x145b01f5
 800baa4:	be3e2fe0 	.word	0xbe3e2fe0
 800baa8:	00000000 	.word	0x00000000
 800baac:	3ff00000 	.word	0x3ff00000
 800bab0:	43400000 	.word	0x43400000
 800bab4:	0003988e 	.word	0x0003988e
 800bab8:	000bb679 	.word	0x000bb679
 800babc:	0800c3c0 	.word	0x0800c3c0
 800bac0:	3ff00000 	.word	0x3ff00000
 800bac4:	40080000 	.word	0x40080000
 800bac8:	0800c3e0 	.word	0x0800c3e0
 800bacc:	0800c3d0 	.word	0x0800c3d0
 800bad0:	a3b4      	add	r3, pc, #720	; (adr r3, 800bda4 <__ieee754_pow+0xa14>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	4640      	mov	r0, r8
 800bad8:	4649      	mov	r1, r9
 800bada:	f7f4 fbcf 	bl	800027c <__adddf3>
 800bade:	4622      	mov	r2, r4
 800bae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bae4:	462b      	mov	r3, r5
 800bae6:	4630      	mov	r0, r6
 800bae8:	4639      	mov	r1, r7
 800baea:	f7f4 fbc5 	bl	8000278 <__aeabi_dsub>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baf6:	f7f5 f807 	bl	8000b08 <__aeabi_dcmpgt>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	f47f adfe 	bne.w	800b6fc <__ieee754_pow+0x36c>
 800bb00:	4aa3      	ldr	r2, [pc, #652]	; (800bd90 <__ieee754_pow+0xa00>)
 800bb02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb06:	4293      	cmp	r3, r2
 800bb08:	f340 810a 	ble.w	800bd20 <__ieee754_pow+0x990>
 800bb0c:	151b      	asrs	r3, r3, #20
 800bb0e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bb12:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bb16:	fa4a f303 	asr.w	r3, sl, r3
 800bb1a:	445b      	add	r3, fp
 800bb1c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bb20:	4e9c      	ldr	r6, [pc, #624]	; (800bd94 <__ieee754_pow+0xa04>)
 800bb22:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bb26:	4116      	asrs	r6, r2
 800bb28:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	ea23 0106 	bic.w	r1, r3, r6
 800bb32:	f1c2 0214 	rsb	r2, r2, #20
 800bb36:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bb3a:	fa4a fa02 	asr.w	sl, sl, r2
 800bb3e:	f1bb 0f00 	cmp.w	fp, #0
 800bb42:	4602      	mov	r2, r0
 800bb44:	460b      	mov	r3, r1
 800bb46:	4620      	mov	r0, r4
 800bb48:	4629      	mov	r1, r5
 800bb4a:	bfb8      	it	lt
 800bb4c:	f1ca 0a00 	rsblt	sl, sl, #0
 800bb50:	f7f4 fb92 	bl	8000278 <__aeabi_dsub>
 800bb54:	e9cd 0100 	strd	r0, r1, [sp]
 800bb58:	4642      	mov	r2, r8
 800bb5a:	464b      	mov	r3, r9
 800bb5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb60:	f7f4 fb8c 	bl	800027c <__adddf3>
 800bb64:	2000      	movs	r0, #0
 800bb66:	a378      	add	r3, pc, #480	; (adr r3, 800bd48 <__ieee754_pow+0x9b8>)
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	460d      	mov	r5, r1
 800bb70:	f7f4 fd3a 	bl	80005e8 <__aeabi_dmul>
 800bb74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb78:	4606      	mov	r6, r0
 800bb7a:	460f      	mov	r7, r1
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	4629      	mov	r1, r5
 800bb80:	f7f4 fb7a 	bl	8000278 <__aeabi_dsub>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4640      	mov	r0, r8
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	f7f4 fb74 	bl	8000278 <__aeabi_dsub>
 800bb90:	a36f      	add	r3, pc, #444	; (adr r3, 800bd50 <__ieee754_pow+0x9c0>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fd27 	bl	80005e8 <__aeabi_dmul>
 800bb9a:	a36f      	add	r3, pc, #444	; (adr r3, 800bd58 <__ieee754_pow+0x9c8>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	4680      	mov	r8, r0
 800bba2:	4689      	mov	r9, r1
 800bba4:	4620      	mov	r0, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	f7f4 fd1e 	bl	80005e8 <__aeabi_dmul>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	f7f4 fb62 	bl	800027c <__adddf3>
 800bbb8:	4604      	mov	r4, r0
 800bbba:	460d      	mov	r5, r1
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	f7f4 fb5a 	bl	800027c <__adddf3>
 800bbc8:	4632      	mov	r2, r6
 800bbca:	463b      	mov	r3, r7
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4689      	mov	r9, r1
 800bbd0:	f7f4 fb52 	bl	8000278 <__aeabi_dsub>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4620      	mov	r0, r4
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f7f4 fb4c 	bl	8000278 <__aeabi_dsub>
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	464b      	mov	r3, r9
 800bbe8:	4640      	mov	r0, r8
 800bbea:	4649      	mov	r1, r9
 800bbec:	f7f4 fcfc 	bl	80005e8 <__aeabi_dmul>
 800bbf0:	a35b      	add	r3, pc, #364	; (adr r3, 800bd60 <__ieee754_pow+0x9d0>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	f7f4 fcf5 	bl	80005e8 <__aeabi_dmul>
 800bbfe:	a35a      	add	r3, pc, #360	; (adr r3, 800bd68 <__ieee754_pow+0x9d8>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	f7f4 fb38 	bl	8000278 <__aeabi_dsub>
 800bc08:	4622      	mov	r2, r4
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	f7f4 fcec 	bl	80005e8 <__aeabi_dmul>
 800bc10:	a357      	add	r3, pc, #348	; (adr r3, 800bd70 <__ieee754_pow+0x9e0>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fb31 	bl	800027c <__adddf3>
 800bc1a:	4622      	mov	r2, r4
 800bc1c:	462b      	mov	r3, r5
 800bc1e:	f7f4 fce3 	bl	80005e8 <__aeabi_dmul>
 800bc22:	a355      	add	r3, pc, #340	; (adr r3, 800bd78 <__ieee754_pow+0x9e8>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f7f4 fb26 	bl	8000278 <__aeabi_dsub>
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	462b      	mov	r3, r5
 800bc30:	f7f4 fcda 	bl	80005e8 <__aeabi_dmul>
 800bc34:	a352      	add	r3, pc, #328	; (adr r3, 800bd80 <__ieee754_pow+0x9f0>)
 800bc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3a:	f7f4 fb1f 	bl	800027c <__adddf3>
 800bc3e:	4622      	mov	r2, r4
 800bc40:	462b      	mov	r3, r5
 800bc42:	f7f4 fcd1 	bl	80005e8 <__aeabi_dmul>
 800bc46:	4602      	mov	r2, r0
 800bc48:	460b      	mov	r3, r1
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 fb13 	bl	8000278 <__aeabi_dsub>
 800bc52:	4604      	mov	r4, r0
 800bc54:	460d      	mov	r5, r1
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	4649      	mov	r1, r9
 800bc5e:	f7f4 fcc3 	bl	80005e8 <__aeabi_dmul>
 800bc62:	2200      	movs	r2, #0
 800bc64:	e9cd 0100 	strd	r0, r1, [sp]
 800bc68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	4629      	mov	r1, r5
 800bc70:	f7f4 fb02 	bl	8000278 <__aeabi_dsub>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc7c:	f7f4 fdde 	bl	800083c <__aeabi_ddiv>
 800bc80:	4632      	mov	r2, r6
 800bc82:	4604      	mov	r4, r0
 800bc84:	460d      	mov	r5, r1
 800bc86:	463b      	mov	r3, r7
 800bc88:	4640      	mov	r0, r8
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	f7f4 fcac 	bl	80005e8 <__aeabi_dmul>
 800bc90:	4632      	mov	r2, r6
 800bc92:	463b      	mov	r3, r7
 800bc94:	f7f4 faf2 	bl	800027c <__adddf3>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	f7f4 faea 	bl	8000278 <__aeabi_dsub>
 800bca4:	4642      	mov	r2, r8
 800bca6:	464b      	mov	r3, r9
 800bca8:	f7f4 fae6 	bl	8000278 <__aeabi_dsub>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	4939      	ldr	r1, [pc, #228]	; (800bd98 <__ieee754_pow+0xa08>)
 800bcb4:	f7f4 fae0 	bl	8000278 <__aeabi_dsub>
 800bcb8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bcbc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	da2f      	bge.n	800bd26 <__ieee754_pow+0x996>
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	ec43 2b10 	vmov	d0, r2, r3
 800bccc:	f000 f9c0 	bl	800c050 <scalbn>
 800bcd0:	ec51 0b10 	vmov	r0, r1, d0
 800bcd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcd8:	f7ff bbf1 	b.w	800b4be <__ieee754_pow+0x12e>
 800bcdc:	4b2f      	ldr	r3, [pc, #188]	; (800bd9c <__ieee754_pow+0xa0c>)
 800bcde:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bce2:	429e      	cmp	r6, r3
 800bce4:	f77f af0c 	ble.w	800bb00 <__ieee754_pow+0x770>
 800bce8:	4b2d      	ldr	r3, [pc, #180]	; (800bda0 <__ieee754_pow+0xa10>)
 800bcea:	440b      	add	r3, r1
 800bcec:	4303      	orrs	r3, r0
 800bcee:	d00b      	beq.n	800bd08 <__ieee754_pow+0x978>
 800bcf0:	a325      	add	r3, pc, #148	; (adr r3, 800bd88 <__ieee754_pow+0x9f8>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcfa:	f7f4 fc75 	bl	80005e8 <__aeabi_dmul>
 800bcfe:	a322      	add	r3, pc, #136	; (adr r3, 800bd88 <__ieee754_pow+0x9f8>)
 800bd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd04:	f7ff bbdb 	b.w	800b4be <__ieee754_pow+0x12e>
 800bd08:	4622      	mov	r2, r4
 800bd0a:	462b      	mov	r3, r5
 800bd0c:	f7f4 fab4 	bl	8000278 <__aeabi_dsub>
 800bd10:	4642      	mov	r2, r8
 800bd12:	464b      	mov	r3, r9
 800bd14:	f7f4 feee 	bl	8000af4 <__aeabi_dcmpge>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	f43f aef1 	beq.w	800bb00 <__ieee754_pow+0x770>
 800bd1e:	e7e7      	b.n	800bcf0 <__ieee754_pow+0x960>
 800bd20:	f04f 0a00 	mov.w	sl, #0
 800bd24:	e718      	b.n	800bb58 <__ieee754_pow+0x7c8>
 800bd26:	4621      	mov	r1, r4
 800bd28:	e7d4      	b.n	800bcd4 <__ieee754_pow+0x944>
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	491a      	ldr	r1, [pc, #104]	; (800bd98 <__ieee754_pow+0xa08>)
 800bd2e:	f7ff bb8f 	b.w	800b450 <__ieee754_pow+0xc0>
 800bd32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd36:	f7ff bb8b 	b.w	800b450 <__ieee754_pow+0xc0>
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	f7ff bb87 	b.w	800b450 <__ieee754_pow+0xc0>
 800bd42:	4693      	mov	fp, r2
 800bd44:	f7ff bb98 	b.w	800b478 <__ieee754_pow+0xe8>
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	3fe62e43 	.word	0x3fe62e43
 800bd50:	fefa39ef 	.word	0xfefa39ef
 800bd54:	3fe62e42 	.word	0x3fe62e42
 800bd58:	0ca86c39 	.word	0x0ca86c39
 800bd5c:	be205c61 	.word	0xbe205c61
 800bd60:	72bea4d0 	.word	0x72bea4d0
 800bd64:	3e663769 	.word	0x3e663769
 800bd68:	c5d26bf1 	.word	0xc5d26bf1
 800bd6c:	3ebbbd41 	.word	0x3ebbbd41
 800bd70:	af25de2c 	.word	0xaf25de2c
 800bd74:	3f11566a 	.word	0x3f11566a
 800bd78:	16bebd93 	.word	0x16bebd93
 800bd7c:	3f66c16c 	.word	0x3f66c16c
 800bd80:	5555553e 	.word	0x5555553e
 800bd84:	3fc55555 	.word	0x3fc55555
 800bd88:	c2f8f359 	.word	0xc2f8f359
 800bd8c:	01a56e1f 	.word	0x01a56e1f
 800bd90:	3fe00000 	.word	0x3fe00000
 800bd94:	000fffff 	.word	0x000fffff
 800bd98:	3ff00000 	.word	0x3ff00000
 800bd9c:	4090cbff 	.word	0x4090cbff
 800bda0:	3f6f3400 	.word	0x3f6f3400
 800bda4:	652b82fe 	.word	0x652b82fe
 800bda8:	3c971547 	.word	0x3c971547

0800bdac <__ieee754_sqrt>:
 800bdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdb0:	4955      	ldr	r1, [pc, #340]	; (800bf08 <__ieee754_sqrt+0x15c>)
 800bdb2:	ec55 4b10 	vmov	r4, r5, d0
 800bdb6:	43a9      	bics	r1, r5
 800bdb8:	462b      	mov	r3, r5
 800bdba:	462a      	mov	r2, r5
 800bdbc:	d112      	bne.n	800bde4 <__ieee754_sqrt+0x38>
 800bdbe:	ee10 2a10 	vmov	r2, s0
 800bdc2:	ee10 0a10 	vmov	r0, s0
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	f7f4 fc0e 	bl	80005e8 <__aeabi_dmul>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	f7f4 fa52 	bl	800027c <__adddf3>
 800bdd8:	4604      	mov	r4, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	ec45 4b10 	vmov	d0, r4, r5
 800bde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde4:	2d00      	cmp	r5, #0
 800bde6:	ee10 0a10 	vmov	r0, s0
 800bdea:	4621      	mov	r1, r4
 800bdec:	dc0f      	bgt.n	800be0e <__ieee754_sqrt+0x62>
 800bdee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bdf2:	4330      	orrs	r0, r6
 800bdf4:	d0f2      	beq.n	800bddc <__ieee754_sqrt+0x30>
 800bdf6:	b155      	cbz	r5, 800be0e <__ieee754_sqrt+0x62>
 800bdf8:	ee10 2a10 	vmov	r2, s0
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	4629      	mov	r1, r5
 800be00:	f7f4 fa3a 	bl	8000278 <__aeabi_dsub>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	f7f4 fd18 	bl	800083c <__aeabi_ddiv>
 800be0c:	e7e4      	b.n	800bdd8 <__ieee754_sqrt+0x2c>
 800be0e:	151b      	asrs	r3, r3, #20
 800be10:	d073      	beq.n	800befa <__ieee754_sqrt+0x14e>
 800be12:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800be16:	07dd      	lsls	r5, r3, #31
 800be18:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800be1c:	bf48      	it	mi
 800be1e:	0fc8      	lsrmi	r0, r1, #31
 800be20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800be24:	bf44      	itt	mi
 800be26:	0049      	lslmi	r1, r1, #1
 800be28:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800be2c:	2500      	movs	r5, #0
 800be2e:	1058      	asrs	r0, r3, #1
 800be30:	0fcb      	lsrs	r3, r1, #31
 800be32:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800be36:	0049      	lsls	r1, r1, #1
 800be38:	2316      	movs	r3, #22
 800be3a:	462c      	mov	r4, r5
 800be3c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800be40:	19a7      	adds	r7, r4, r6
 800be42:	4297      	cmp	r7, r2
 800be44:	bfde      	ittt	le
 800be46:	19bc      	addle	r4, r7, r6
 800be48:	1bd2      	suble	r2, r2, r7
 800be4a:	19ad      	addle	r5, r5, r6
 800be4c:	0fcf      	lsrs	r7, r1, #31
 800be4e:	3b01      	subs	r3, #1
 800be50:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800be54:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800be58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800be5c:	d1f0      	bne.n	800be40 <__ieee754_sqrt+0x94>
 800be5e:	f04f 0c20 	mov.w	ip, #32
 800be62:	469e      	mov	lr, r3
 800be64:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800be68:	42a2      	cmp	r2, r4
 800be6a:	eb06 070e 	add.w	r7, r6, lr
 800be6e:	dc02      	bgt.n	800be76 <__ieee754_sqrt+0xca>
 800be70:	d112      	bne.n	800be98 <__ieee754_sqrt+0xec>
 800be72:	428f      	cmp	r7, r1
 800be74:	d810      	bhi.n	800be98 <__ieee754_sqrt+0xec>
 800be76:	2f00      	cmp	r7, #0
 800be78:	eb07 0e06 	add.w	lr, r7, r6
 800be7c:	da42      	bge.n	800bf04 <__ieee754_sqrt+0x158>
 800be7e:	f1be 0f00 	cmp.w	lr, #0
 800be82:	db3f      	blt.n	800bf04 <__ieee754_sqrt+0x158>
 800be84:	f104 0801 	add.w	r8, r4, #1
 800be88:	1b12      	subs	r2, r2, r4
 800be8a:	428f      	cmp	r7, r1
 800be8c:	bf88      	it	hi
 800be8e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800be92:	1bc9      	subs	r1, r1, r7
 800be94:	4433      	add	r3, r6
 800be96:	4644      	mov	r4, r8
 800be98:	0052      	lsls	r2, r2, #1
 800be9a:	f1bc 0c01 	subs.w	ip, ip, #1
 800be9e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800bea2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bea6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800beaa:	d1dd      	bne.n	800be68 <__ieee754_sqrt+0xbc>
 800beac:	430a      	orrs	r2, r1
 800beae:	d006      	beq.n	800bebe <__ieee754_sqrt+0x112>
 800beb0:	1c5c      	adds	r4, r3, #1
 800beb2:	bf13      	iteet	ne
 800beb4:	3301      	addne	r3, #1
 800beb6:	3501      	addeq	r5, #1
 800beb8:	4663      	moveq	r3, ip
 800beba:	f023 0301 	bicne.w	r3, r3, #1
 800bebe:	106a      	asrs	r2, r5, #1
 800bec0:	085b      	lsrs	r3, r3, #1
 800bec2:	07e9      	lsls	r1, r5, #31
 800bec4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bec8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800becc:	bf48      	it	mi
 800bece:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bed2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800bed6:	461c      	mov	r4, r3
 800bed8:	e780      	b.n	800bddc <__ieee754_sqrt+0x30>
 800beda:	0aca      	lsrs	r2, r1, #11
 800bedc:	3815      	subs	r0, #21
 800bede:	0549      	lsls	r1, r1, #21
 800bee0:	2a00      	cmp	r2, #0
 800bee2:	d0fa      	beq.n	800beda <__ieee754_sqrt+0x12e>
 800bee4:	02d6      	lsls	r6, r2, #11
 800bee6:	d50a      	bpl.n	800befe <__ieee754_sqrt+0x152>
 800bee8:	f1c3 0420 	rsb	r4, r3, #32
 800beec:	fa21 f404 	lsr.w	r4, r1, r4
 800bef0:	1e5d      	subs	r5, r3, #1
 800bef2:	4099      	lsls	r1, r3
 800bef4:	4322      	orrs	r2, r4
 800bef6:	1b43      	subs	r3, r0, r5
 800bef8:	e78b      	b.n	800be12 <__ieee754_sqrt+0x66>
 800befa:	4618      	mov	r0, r3
 800befc:	e7f0      	b.n	800bee0 <__ieee754_sqrt+0x134>
 800befe:	0052      	lsls	r2, r2, #1
 800bf00:	3301      	adds	r3, #1
 800bf02:	e7ef      	b.n	800bee4 <__ieee754_sqrt+0x138>
 800bf04:	46a0      	mov	r8, r4
 800bf06:	e7bf      	b.n	800be88 <__ieee754_sqrt+0xdc>
 800bf08:	7ff00000 	.word	0x7ff00000

0800bf0c <fabs>:
 800bf0c:	ec51 0b10 	vmov	r0, r1, d0
 800bf10:	ee10 2a10 	vmov	r2, s0
 800bf14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf18:	ec43 2b10 	vmov	d0, r2, r3
 800bf1c:	4770      	bx	lr

0800bf1e <finite>:
 800bf1e:	ee10 3a90 	vmov	r3, s1
 800bf22:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800bf26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bf2a:	0fc0      	lsrs	r0, r0, #31
 800bf2c:	4770      	bx	lr

0800bf2e <matherr>:
 800bf2e:	2000      	movs	r0, #0
 800bf30:	4770      	bx	lr
 800bf32:	0000      	movs	r0, r0
 800bf34:	0000      	movs	r0, r0
	...

0800bf38 <nan>:
 800bf38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf40 <nan+0x8>
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	00000000 	.word	0x00000000
 800bf44:	7ff80000 	.word	0x7ff80000

0800bf48 <rint>:
 800bf48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf4a:	ec51 0b10 	vmov	r0, r1, d0
 800bf4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf52:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800bf56:	2e13      	cmp	r6, #19
 800bf58:	460b      	mov	r3, r1
 800bf5a:	ee10 4a10 	vmov	r4, s0
 800bf5e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800bf62:	dc56      	bgt.n	800c012 <rint+0xca>
 800bf64:	2e00      	cmp	r6, #0
 800bf66:	da2b      	bge.n	800bfc0 <rint+0x78>
 800bf68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bf6c:	4302      	orrs	r2, r0
 800bf6e:	d023      	beq.n	800bfb8 <rint+0x70>
 800bf70:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800bf74:	4302      	orrs	r2, r0
 800bf76:	4254      	negs	r4, r2
 800bf78:	4314      	orrs	r4, r2
 800bf7a:	0c4b      	lsrs	r3, r1, #17
 800bf7c:	0b24      	lsrs	r4, r4, #12
 800bf7e:	045b      	lsls	r3, r3, #17
 800bf80:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800bf84:	ea44 0103 	orr.w	r1, r4, r3
 800bf88:	460b      	mov	r3, r1
 800bf8a:	492f      	ldr	r1, [pc, #188]	; (800c048 <rint+0x100>)
 800bf8c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800bf90:	e9d1 6700 	ldrd	r6, r7, [r1]
 800bf94:	4602      	mov	r2, r0
 800bf96:	4639      	mov	r1, r7
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f7f4 f96f 	bl	800027c <__adddf3>
 800bf9e:	e9cd 0100 	strd	r0, r1, [sp]
 800bfa2:	463b      	mov	r3, r7
 800bfa4:	4632      	mov	r2, r6
 800bfa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfaa:	f7f4 f965 	bl	8000278 <__aeabi_dsub>
 800bfae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfb2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800bfb6:	4639      	mov	r1, r7
 800bfb8:	ec41 0b10 	vmov	d0, r0, r1
 800bfbc:	b003      	add	sp, #12
 800bfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc0:	4a22      	ldr	r2, [pc, #136]	; (800c04c <rint+0x104>)
 800bfc2:	4132      	asrs	r2, r6
 800bfc4:	ea01 0702 	and.w	r7, r1, r2
 800bfc8:	4307      	orrs	r7, r0
 800bfca:	d0f5      	beq.n	800bfb8 <rint+0x70>
 800bfcc:	0852      	lsrs	r2, r2, #1
 800bfce:	4011      	ands	r1, r2
 800bfd0:	430c      	orrs	r4, r1
 800bfd2:	d00b      	beq.n	800bfec <rint+0xa4>
 800bfd4:	ea23 0202 	bic.w	r2, r3, r2
 800bfd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bfdc:	2e13      	cmp	r6, #19
 800bfde:	fa43 f306 	asr.w	r3, r3, r6
 800bfe2:	bf0c      	ite	eq
 800bfe4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800bfe8:	2400      	movne	r4, #0
 800bfea:	4313      	orrs	r3, r2
 800bfec:	4916      	ldr	r1, [pc, #88]	; (800c048 <rint+0x100>)
 800bfee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800bff2:	4622      	mov	r2, r4
 800bff4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bff8:	4620      	mov	r0, r4
 800bffa:	4629      	mov	r1, r5
 800bffc:	f7f4 f93e 	bl	800027c <__adddf3>
 800c000:	e9cd 0100 	strd	r0, r1, [sp]
 800c004:	4622      	mov	r2, r4
 800c006:	462b      	mov	r3, r5
 800c008:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c00c:	f7f4 f934 	bl	8000278 <__aeabi_dsub>
 800c010:	e7d2      	b.n	800bfb8 <rint+0x70>
 800c012:	2e33      	cmp	r6, #51	; 0x33
 800c014:	dd07      	ble.n	800c026 <rint+0xde>
 800c016:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c01a:	d1cd      	bne.n	800bfb8 <rint+0x70>
 800c01c:	ee10 2a10 	vmov	r2, s0
 800c020:	f7f4 f92c 	bl	800027c <__adddf3>
 800c024:	e7c8      	b.n	800bfb8 <rint+0x70>
 800c026:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c02a:	f04f 32ff 	mov.w	r2, #4294967295
 800c02e:	40f2      	lsrs	r2, r6
 800c030:	4210      	tst	r0, r2
 800c032:	d0c1      	beq.n	800bfb8 <rint+0x70>
 800c034:	0852      	lsrs	r2, r2, #1
 800c036:	4210      	tst	r0, r2
 800c038:	bf1f      	itttt	ne
 800c03a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c03e:	ea20 0202 	bicne.w	r2, r0, r2
 800c042:	4134      	asrne	r4, r6
 800c044:	4314      	orrne	r4, r2
 800c046:	e7d1      	b.n	800bfec <rint+0xa4>
 800c048:	0800c3f0 	.word	0x0800c3f0
 800c04c:	000fffff 	.word	0x000fffff

0800c050 <scalbn>:
 800c050:	b570      	push	{r4, r5, r6, lr}
 800c052:	ec55 4b10 	vmov	r4, r5, d0
 800c056:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c05a:	4606      	mov	r6, r0
 800c05c:	462b      	mov	r3, r5
 800c05e:	b9aa      	cbnz	r2, 800c08c <scalbn+0x3c>
 800c060:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c064:	4323      	orrs	r3, r4
 800c066:	d03b      	beq.n	800c0e0 <scalbn+0x90>
 800c068:	4b31      	ldr	r3, [pc, #196]	; (800c130 <scalbn+0xe0>)
 800c06a:	4629      	mov	r1, r5
 800c06c:	2200      	movs	r2, #0
 800c06e:	ee10 0a10 	vmov	r0, s0
 800c072:	f7f4 fab9 	bl	80005e8 <__aeabi_dmul>
 800c076:	4b2f      	ldr	r3, [pc, #188]	; (800c134 <scalbn+0xe4>)
 800c078:	429e      	cmp	r6, r3
 800c07a:	4604      	mov	r4, r0
 800c07c:	460d      	mov	r5, r1
 800c07e:	da12      	bge.n	800c0a6 <scalbn+0x56>
 800c080:	a327      	add	r3, pc, #156	; (adr r3, 800c120 <scalbn+0xd0>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	f7f4 faaf 	bl	80005e8 <__aeabi_dmul>
 800c08a:	e009      	b.n	800c0a0 <scalbn+0x50>
 800c08c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c090:	428a      	cmp	r2, r1
 800c092:	d10c      	bne.n	800c0ae <scalbn+0x5e>
 800c094:	ee10 2a10 	vmov	r2, s0
 800c098:	4620      	mov	r0, r4
 800c09a:	4629      	mov	r1, r5
 800c09c:	f7f4 f8ee 	bl	800027c <__adddf3>
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	460d      	mov	r5, r1
 800c0a4:	e01c      	b.n	800c0e0 <scalbn+0x90>
 800c0a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	3a36      	subs	r2, #54	; 0x36
 800c0ae:	4432      	add	r2, r6
 800c0b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c0b4:	428a      	cmp	r2, r1
 800c0b6:	dd0b      	ble.n	800c0d0 <scalbn+0x80>
 800c0b8:	ec45 4b11 	vmov	d1, r4, r5
 800c0bc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c128 <scalbn+0xd8>
 800c0c0:	f000 f83c 	bl	800c13c <copysign>
 800c0c4:	a318      	add	r3, pc, #96	; (adr r3, 800c128 <scalbn+0xd8>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	ec51 0b10 	vmov	r0, r1, d0
 800c0ce:	e7da      	b.n	800c086 <scalbn+0x36>
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	dd08      	ble.n	800c0e6 <scalbn+0x96>
 800c0d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c0d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c0dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c0e0:	ec45 4b10 	vmov	d0, r4, r5
 800c0e4:	bd70      	pop	{r4, r5, r6, pc}
 800c0e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c0ea:	da0d      	bge.n	800c108 <scalbn+0xb8>
 800c0ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c0f0:	429e      	cmp	r6, r3
 800c0f2:	ec45 4b11 	vmov	d1, r4, r5
 800c0f6:	dce1      	bgt.n	800c0bc <scalbn+0x6c>
 800c0f8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c120 <scalbn+0xd0>
 800c0fc:	f000 f81e 	bl	800c13c <copysign>
 800c100:	a307      	add	r3, pc, #28	; (adr r3, 800c120 <scalbn+0xd0>)
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	e7e0      	b.n	800c0ca <scalbn+0x7a>
 800c108:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c10c:	3236      	adds	r2, #54	; 0x36
 800c10e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c112:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c116:	4620      	mov	r0, r4
 800c118:	4629      	mov	r1, r5
 800c11a:	2200      	movs	r2, #0
 800c11c:	4b06      	ldr	r3, [pc, #24]	; (800c138 <scalbn+0xe8>)
 800c11e:	e7b2      	b.n	800c086 <scalbn+0x36>
 800c120:	c2f8f359 	.word	0xc2f8f359
 800c124:	01a56e1f 	.word	0x01a56e1f
 800c128:	8800759c 	.word	0x8800759c
 800c12c:	7e37e43c 	.word	0x7e37e43c
 800c130:	43500000 	.word	0x43500000
 800c134:	ffff3cb0 	.word	0xffff3cb0
 800c138:	3c900000 	.word	0x3c900000

0800c13c <copysign>:
 800c13c:	ec51 0b10 	vmov	r0, r1, d0
 800c140:	ee11 0a90 	vmov	r0, s3
 800c144:	ee10 2a10 	vmov	r2, s0
 800c148:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c14c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c150:	ea41 0300 	orr.w	r3, r1, r0
 800c154:	ec43 2b10 	vmov	d0, r2, r3
 800c158:	4770      	bx	lr
	...

0800c15c <_init>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	bf00      	nop
 800c160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c162:	bc08      	pop	{r3}
 800c164:	469e      	mov	lr, r3
 800c166:	4770      	bx	lr

0800c168 <_fini>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	bf00      	nop
 800c16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16e:	bc08      	pop	{r3}
 800c170:	469e      	mov	lr, r3
 800c172:	4770      	bx	lr
