
Progetto real time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800c098  0800c098  0001c098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2f8  0800c2f8  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2f8  0800c2f8  0001c2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c300  0800c300  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c300  0800c300  0001c300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c304  0800c304  0001c304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800c308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d0  20000150  0800c458  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002220  0800c458  00022220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aeef  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ae8  00000000  00000000  0004b06f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023b8  00000000  00000000  0004fb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002180  00000000  00000000  00051f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000067e4  00000000  00000000  00054090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bd5c  00000000  00000000  0005a874  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001081ad  00000000  00000000  000765d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e77d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fc8  00000000  00000000  0017e7f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c07c 	.word	0x0800c07c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800c07c 	.word	0x0800c07c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f001 fd98 	bl	8002a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f89e 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 faaa 	bl	800149c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f48:	f000 f93e 	bl	80011c8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f4c:	f000 f974 	bl	8001238 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f50:	f000 f9b2 	bl	80012b8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f54:	f000 f9d6 	bl	8001304 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f58:	f000 fa12 	bl	8001380 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f5c:	f000 fa40 	bl	80013e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f60:	f000 fa6e 	bl	8001440 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN 2 */
  /*Transmit the initialization messages and initialize the temperature sensor*/
  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	222f      	movs	r2, #47	; 0x2f
 8000f6a:	4931      	ldr	r1, [pc, #196]	; (8001030 <main+0xf8>)
 8000f6c:	4831      	ldr	r0, [pc, #196]	; (8001034 <main+0xfc>)
 8000f6e:	f005 f8b9 	bl	80060e4 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 8000f72:	f001 fbc1 	bl	80026f8 <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	2230      	movs	r2, #48	; 0x30
 8000f7c:	492e      	ldr	r1, [pc, #184]	; (8001038 <main+0x100>)
 8000f7e:	482d      	ldr	r0, [pc, #180]	; (8001034 <main+0xfc>)
 8000f80:	f005 f8b0 	bl	80060e4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	222c      	movs	r2, #44	; 0x2c
 8000f8a:	492c      	ldr	r1, [pc, #176]	; (800103c <main+0x104>)
 8000f8c:	4829      	ldr	r0, [pc, #164]	; (8001034 <main+0xfc>)
 8000f8e:	f005 f8a9 	bl	80060e4 <HAL_UART_Transmit>
  BSP_HSENSOR_Init();
 8000f92:	f001 fb83 	bl	800269c <BSP_HSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg4,sizeof(msg4),1000);
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	222d      	movs	r2, #45	; 0x2d
 8000f9c:	4928      	ldr	r1, [pc, #160]	; (8001040 <main+0x108>)
 8000f9e:	4825      	ldr	r0, [pc, #148]	; (8001034 <main+0xfc>)
 8000fa0:	f005 f8a0 	bl	80060e4 <HAL_UART_Transmit>

  /*Initialize the data structure*/
  struct_init(&ambient_conditions);
 8000fa4:	4827      	ldr	r0, [pc, #156]	; (8001044 <main+0x10c>)
 8000fa6:	f000 fc29 	bl	80017fc <struct_init>
  /* USER CODE END 2 */

  osKernelInitialize();
 8000faa:	f006 f823 	bl	8006ff4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  mutex= osMutexNew(NULL);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f006 f960 	bl	8007274 <osMutexNew>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4b24      	ldr	r3, [pc, #144]	; (8001048 <main+0x110>)
 8000fb8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  temp_sem=osSemaphoreNew(1,1,NULL);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f006 f9f2 	bl	80073a8 <osSemaphoreNew>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <main+0x114>)
 8000fc8:	601a      	str	r2, [r3, #0]
  humid_sem=osSemaphoreNew(1,0,NULL);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f006 f9ea 	bl	80073a8 <osSemaphoreNew>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <main+0x118>)
 8000fd8:	601a      	str	r2, [r3, #0]
  apparent_temp_sem=osSemaphoreNew(1,0,NULL);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f006 f9e2 	bl	80073a8 <osSemaphoreNew>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <main+0x11c>)
 8000fe8:	601a      	str	r2, [r3, #0]

 /* defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes); */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  apparent_temp_task_handle=osThreadNew(apparent_temp_task,&ambient_conditions, &ambient_tasks_attributes);
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <main+0x120>)
 8000fec:	4915      	ldr	r1, [pc, #84]	; (8001044 <main+0x10c>)
 8000fee:	481b      	ldr	r0, [pc, #108]	; (800105c <main+0x124>)
 8000ff0:	f006 f868 	bl	80070c4 <osThreadNew>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <main+0x128>)
 8000ff8:	601a      	str	r2, [r3, #0]
  temp_task_handle=osThreadNew(temp_task,&ambient_conditions, &ambient_tasks_attributes);
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <main+0x120>)
 8000ffc:	4911      	ldr	r1, [pc, #68]	; (8001044 <main+0x10c>)
 8000ffe:	4819      	ldr	r0, [pc, #100]	; (8001064 <main+0x12c>)
 8001000:	f006 f860 	bl	80070c4 <osThreadNew>
 8001004:	4602      	mov	r2, r0
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <main+0x130>)
 8001008:	601a      	str	r2, [r3, #0]
  humid_task_handle=osThreadNew(humid_task,&ambient_conditions, &ambient_tasks_attributes);
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <main+0x120>)
 800100c:	490d      	ldr	r1, [pc, #52]	; (8001044 <main+0x10c>)
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <main+0x134>)
 8001010:	f006 f858 	bl	80070c4 <osThreadNew>
 8001014:	4602      	mov	r2, r0
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <main+0x138>)
 8001018:	601a      	str	r2, [r3, #0]
  safety_task_handle=osThreadNew(safety_task,&ambient_conditions,&safety_task_attributes);
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <main+0x13c>)
 800101c:	4909      	ldr	r1, [pc, #36]	; (8001044 <main+0x10c>)
 800101e:	4816      	ldr	r0, [pc, #88]	; (8001078 <main+0x140>)
 8001020:	f006 f850 	bl	80070c4 <osThreadNew>
 8001024:	4602      	mov	r2, r0
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <main+0x144>)
 8001028:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800102a:	f006 f817 	bl	800705c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800102e:	e7fe      	b.n	800102e <main+0xf6>
 8001030:	20000000 	.word	0x20000000
 8001034:	20001ff8 	.word	0x20001ff8
 8001038:	20000030 	.word	0x20000030
 800103c:	20000060 	.word	0x20000060
 8001040:	2000008c 	.word	0x2000008c
 8001044:	20001aa4 	.word	0x20001aa4
 8001048:	20001ff4 	.word	0x20001ff4
 800104c:	20001f8c 	.word	0x20001f8c
 8001050:	20001f38 	.word	0x20001f38
 8001054:	2000207c 	.word	0x2000207c
 8001058:	0800c1f0 	.word	0x0800c1f0
 800105c:	08001b15 	.word	0x08001b15
 8001060:	20001f88 	.word	0x20001f88
 8001064:	08001919 	.word	0x08001919
 8001068:	20002084 	.word	0x20002084
 800106c:	08001a19 	.word	0x08001a19
 8001070:	20002080 	.word	0x20002080
 8001074:	0800c214 	.word	0x0800c214
 8001078:	08001cb1 	.word	0x08001cb1
 800107c:	20002078 	.word	0x20002078

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0b8      	sub	sp, #224	; 0xe0
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800108a:	2244      	movs	r2, #68	; 0x44
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f009 fb49 	bl	800a726 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a4:	463b      	mov	r3, r7
 80010a6:	2288      	movs	r2, #136	; 0x88
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f009 fb3b 	bl	800a726 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80010b0:	f003 f8ee 	bl	8004290 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <SystemClock_Config+0x140>)
 80010b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ba:	4a41      	ldr	r2, [pc, #260]	; (80011c0 <SystemClock_Config+0x140>)
 80010bc:	f023 0318 	bic.w	r3, r3, #24
 80010c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010c4:	2314      	movs	r3, #20
 80010c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010dc:	2360      	movs	r3, #96	; 0x60
 80010de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010f4:	2328      	movs	r3, #40	; 0x28
 80010f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010fa:	2307      	movs	r3, #7
 80010fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001110:	4618      	mov	r0, r3
 8001112:	f003 fa09 	bl	8004528 <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800111c:	f000 fdfe 	bl	8001d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001120:	230f      	movs	r3, #15
 8001122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800113e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001142:	2104      	movs	r1, #4
 8001144:	4618      	mov	r0, r3
 8001146:	f003 fd9f 	bl	8004c88 <HAL_RCC_ClockConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001150:	f000 fde4 	bl	8001d1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <SystemClock_Config+0x144>)
 8001156:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001158:	2300      	movs	r3, #0
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800115c:	2300      	movs	r3, #0
 800115e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800116a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800116e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001170:	2301      	movs	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001178:	2318      	movs	r3, #24
 800117a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800117c:	2307      	movs	r3, #7
 800117e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800118c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	4618      	mov	r0, r3
 8001192:	f003 ffaf 	bl	80050f4 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800119c:	f000 fdbe 	bl	8001d1c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011a4:	f003 f892 	bl	80042cc <HAL_PWREx_ControlVoltageScaling>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 80011ae:	f000 fdb5 	bl	8001d1c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011b2:	f004 fa85 	bl	80056c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011b6:	bf00      	nop
 80011b8:	37e0      	adds	r7, #224	; 0xe0
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	00012085 	.word	0x00012085

080011c8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80011cc:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011ce:	4a19      	ldr	r2, [pc, #100]	; (8001234 <MX_DFSDM1_Init+0x6c>)
 80011d0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_DFSDM1_Init+0x68>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_DFSDM1_Init+0x68>)
 8001200:	2204      	movs	r2, #4
 8001202:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_DFSDM1_Init+0x68>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_DFSDM1_Init+0x68>)
 800120c:	2201      	movs	r2, #1
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_DFSDM1_Init+0x68>)
 8001212:	2200      	movs	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_DFSDM1_Init+0x68>)
 8001218:	2200      	movs	r2, #0
 800121a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_DFSDM1_Init+0x68>)
 800121e:	f001 fd61 	bl	8002ce4 <HAL_DFSDM_ChannelInit>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001228:	f000 fd78 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20001a68 	.word	0x20001a68
 8001234:	40016020 	.word	0x40016020

08001238 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_I2C2_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MX_I2C2_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_I2C2_Init+0x74>)
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MX_I2C2_Init+0x7c>)
 8001246:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_I2C2_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_I2C2_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_I2C2_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_I2C2_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C2_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C2_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001272:	480e      	ldr	r0, [pc, #56]	; (80012ac <MX_I2C2_Init+0x74>)
 8001274:	f002 f923 	bl	80034be <HAL_I2C_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800127e:	f000 fd4d 	bl	8001d1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4809      	ldr	r0, [pc, #36]	; (80012ac <MX_I2C2_Init+0x74>)
 8001286:	f002 fe23 	bl	8003ed0 <HAL_I2CEx_ConfigAnalogFilter>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 fd44 	bl	8001d1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_I2C2_Init+0x74>)
 8001298:	f002 fe65 	bl	8003f66 <HAL_I2CEx_ConfigDigitalFilter>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 fd3b 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20001f3c 	.word	0x20001f3c
 80012b0:	40005800 	.word	0x40005800
 80012b4:	10909cec 	.word	0x10909cec

080012b8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_QUADSPI_Init+0x44>)
 80012be:	4a10      	ldr	r2, [pc, #64]	; (8001300 <MX_QUADSPI_Init+0x48>)
 80012c0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_QUADSPI_Init+0x44>)
 80012c4:	22ff      	movs	r2, #255	; 0xff
 80012c6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_QUADSPI_Init+0x44>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_QUADSPI_Init+0x44>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_QUADSPI_Init+0x44>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_QUADSPI_Init+0x44>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_QUADSPI_Init+0x44>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_QUADSPI_Init+0x44>)
 80012e8:	f003 f856 	bl	8004398 <HAL_QSPI_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80012f2:	f000 fd13 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20002088 	.word	0x20002088
 8001300:	a0001000 	.word	0xa0001000

08001304 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_SPI3_Init+0x74>)
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <MX_SPI3_Init+0x78>)
 800130c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_SPI3_Init+0x74>)
 8001310:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001314:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_SPI3_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_SPI3_Init+0x74>)
 800131e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001322:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_SPI3_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_SPI3_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_SPI3_Init+0x74>)
 8001332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001336:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_SPI3_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_SPI3_Init+0x74>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_SPI3_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_SPI3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_SPI3_Init+0x74>)
 8001352:	2207      	movs	r2, #7
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_SPI3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_SPI3_Init+0x74>)
 800135e:	2208      	movs	r2, #8
 8001360:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_SPI3_Init+0x74>)
 8001364:	f004 fb86 	bl	8005a74 <HAL_SPI_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800136e:	f000 fcd5 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20001f90 	.word	0x20001f90
 800137c:	40003c00 	.word	0x40003c00

08001380 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <MX_USART1_UART_Init+0x5c>)
 8001388:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART1_UART_Init+0x58>)
 80013c4:	f004 fe40 	bl	8006048 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ce:	f000 fca5 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20001ff8 	.word	0x20001ff8
 80013dc:	40013800 	.word	0x40013800

080013e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_USART3_UART_Init+0x58>)
 80013e6:	4a15      	ldr	r2, [pc, #84]	; (800143c <MX_USART3_UART_Init+0x5c>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <MX_USART3_UART_Init+0x58>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART3_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_USART3_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART3_UART_Init+0x58>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_USART3_UART_Init+0x58>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_USART3_UART_Init+0x58>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART3_UART_Init+0x58>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_USART3_UART_Init+0x58>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART3_UART_Init+0x58>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_USART3_UART_Init+0x58>)
 8001424:	f004 fe10 	bl	8006048 <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800142e:	f000 fc75 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20001ab0 	.word	0x20001ab0
 800143c:	40004800 	.word	0x40004800

08001440 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001446:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800144a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800144e:	2206      	movs	r2, #6
 8001450:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001454:	2202      	movs	r2, #2
 8001456:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800145a:	2202      	movs	r2, #2
 800145c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001472:	2200      	movs	r2, #0
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001484:	f002 fdbb 	bl	8003ffe <HAL_PCD_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800148e:	f000 fc45 	bl	8001d1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20001b30 	.word	0x20001b30

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014b2:	4bba      	ldr	r3, [pc, #744]	; (800179c <MX_GPIO_Init+0x300>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4ab9      	ldr	r2, [pc, #740]	; (800179c <MX_GPIO_Init+0x300>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4bb7      	ldr	r3, [pc, #732]	; (800179c <MX_GPIO_Init+0x300>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	4bb4      	ldr	r3, [pc, #720]	; (800179c <MX_GPIO_Init+0x300>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4ab3      	ldr	r2, [pc, #716]	; (800179c <MX_GPIO_Init+0x300>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4bb1      	ldr	r3, [pc, #708]	; (800179c <MX_GPIO_Init+0x300>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4bae      	ldr	r3, [pc, #696]	; (800179c <MX_GPIO_Init+0x300>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4aad      	ldr	r2, [pc, #692]	; (800179c <MX_GPIO_Init+0x300>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4bab      	ldr	r3, [pc, #684]	; (800179c <MX_GPIO_Init+0x300>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4ba8      	ldr	r3, [pc, #672]	; (800179c <MX_GPIO_Init+0x300>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4aa7      	ldr	r2, [pc, #668]	; (800179c <MX_GPIO_Init+0x300>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4ba5      	ldr	r3, [pc, #660]	; (800179c <MX_GPIO_Init+0x300>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	4ba2      	ldr	r3, [pc, #648]	; (800179c <MX_GPIO_Init+0x300>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4aa1      	ldr	r2, [pc, #644]	; (800179c <MX_GPIO_Init+0x300>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b9f      	ldr	r3, [pc, #636]	; (800179c <MX_GPIO_Init+0x300>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001530:	489b      	ldr	r0, [pc, #620]	; (80017a0 <MX_GPIO_Init+0x304>)
 8001532:	f001 ff89 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	f248 1104 	movw	r1, #33028	; 0x8104
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f001 ff82 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8001544:	2200      	movs	r2, #0
 8001546:	f24f 0114 	movw	r1, #61460	; 0xf014
 800154a:	4896      	ldr	r0, [pc, #600]	; (80017a4 <MX_GPIO_Init+0x308>)
 800154c:	f001 ff7c 	bl	8003448 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f241 0181 	movw	r1, #4225	; 0x1081
 8001556:	4894      	ldr	r0, [pc, #592]	; (80017a8 <MX_GPIO_Init+0x30c>)
 8001558:	f001 ff76 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001562:	4891      	ldr	r0, [pc, #580]	; (80017a8 <MX_GPIO_Init+0x30c>)
 8001564:	f001 ff70 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800156e:	488f      	ldr	r0, [pc, #572]	; (80017ac <MX_GPIO_Init+0x310>)
 8001570:	f001 ff6a 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2120      	movs	r1, #32
 8001578:	488a      	ldr	r0, [pc, #552]	; (80017a4 <MX_GPIO_Init+0x308>)
 800157a:	f001 ff65 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	4887      	ldr	r0, [pc, #540]	; (80017a0 <MX_GPIO_Init+0x304>)
 8001584:	f001 ff60 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001588:	f240 1315 	movw	r3, #277	; 0x115
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158e:	2301      	movs	r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	487f      	ldr	r0, [pc, #508]	; (80017a0 <MX_GPIO_Init+0x304>)
 80015a2:	f001 fcb5 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80015a6:	236a      	movs	r3, #106	; 0x6a
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015aa:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <MX_GPIO_Init+0x314>)
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4879      	ldr	r0, [pc, #484]	; (80017a0 <MX_GPIO_Init+0x304>)
 80015ba:	f001 fca9 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c4:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <MX_GPIO_Init+0x318>)
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4876      	ldr	r0, [pc, #472]	; (80017ac <MX_GPIO_Init+0x310>)
 80015d4:	f001 fc9c 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 80015d8:	233f      	movs	r3, #63	; 0x3f
 80015da:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015dc:	230b      	movs	r3, #11
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4870      	ldr	r0, [pc, #448]	; (80017ac <MX_GPIO_Init+0x310>)
 80015ec:	f001 fc90 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80015f0:	2303      	movs	r3, #3
 80015f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001600:	2308      	movs	r3, #8
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f001 fc7f 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001612:	f248 1304 	movw	r3, #33028	; 0x8104
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f001 fc6f 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001632:	2308      	movs	r3, #8
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001642:	2301      	movs	r3, #1
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001650:	f001 fc5e 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001654:	2310      	movs	r3, #16
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001658:	230b      	movs	r3, #11
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f001 fc51 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800166e:	23e0      	movs	r3, #224	; 0xe0
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167e:	2305      	movs	r3, #5
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f001 fc40 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001690:	2301      	movs	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <MX_GPIO_Init+0x314>)
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4840      	ldr	r0, [pc, #256]	; (80017a4 <MX_GPIO_Init+0x308>)
 80016a4:	f001 fc34 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80016a8:	2302      	movs	r3, #2
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ac:	230b      	movs	r3, #11
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	483a      	ldr	r0, [pc, #232]	; (80017a4 <MX_GPIO_Init+0x308>)
 80016bc:	f001 fc28 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80016c0:	f24f 0334 	movw	r3, #61492	; 0xf034
 80016c4:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4832      	ldr	r0, [pc, #200]	; (80017a4 <MX_GPIO_Init+0x308>)
 80016da:	f001 fc19 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80016de:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80016e2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e4:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <MX_GPIO_Init+0x314>)
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	482d      	ldr	r0, [pc, #180]	; (80017a8 <MX_GPIO_Init+0x30c>)
 80016f4:	f001 fc0c 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80016f8:	f243 0381 	movw	r3, #12417	; 0x3081
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4825      	ldr	r0, [pc, #148]	; (80017a8 <MX_GPIO_Init+0x30c>)
 8001712:	f001 fbfd 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001716:	f44f 7310 	mov.w	r3, #576	; 0x240
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	481f      	ldr	r0, [pc, #124]	; (80017ac <MX_GPIO_Init+0x310>)
 8001730:	f001 fbee 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001734:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <MX_GPIO_Init+0x314>)
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <MX_GPIO_Init+0x310>)
 800174a:	f001 fbe1 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800174e:	2302      	movs	r3, #2
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800175e:	2305      	movs	r3, #5
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480f      	ldr	r0, [pc, #60]	; (80017a8 <MX_GPIO_Init+0x30c>)
 800176a:	f001 fbd1 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800176e:	2378      	movs	r3, #120	; 0x78
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800177e:	2307      	movs	r3, #7
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	; (80017a8 <MX_GPIO_Init+0x30c>)
 800178a:	f001 fbc1 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800178e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001794:	2312      	movs	r3, #18
 8001796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001798:	2301      	movs	r3, #1
 800179a:	e00d      	b.n	80017b8 <MX_GPIO_Init+0x31c>
 800179c:	40021000 	.word	0x40021000
 80017a0:	48001000 	.word	0x48001000
 80017a4:	48000400 	.word	0x48000400
 80017a8:	48000c00 	.word	0x48000c00
 80017ac:	48000800 	.word	0x48000800
 80017b0:	10110000 	.word	0x10110000
 80017b4:	10210000 	.word	0x10210000
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017be:	2304      	movs	r3, #4
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <MX_GPIO_Init+0x35c>)
 80017ca:	f001 fba1 	bl	8002f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2017      	movs	r0, #23
 80017d4:	f001 fa5c 	bl	8002c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017d8:	2017      	movs	r0, #23
 80017da:	f001 fa75 	bl	8002cc8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2105      	movs	r1, #5
 80017e2:	2028      	movs	r0, #40	; 0x28
 80017e4:	f001 fa54 	bl	8002c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e8:	2028      	movs	r0, #40	; 0x28
 80017ea:	f001 fa6d 	bl	8002cc8 <HAL_NVIC_EnableIRQ>

}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	48000400 	.word	0x48000400

080017fc <struct_init>:

/* USER CODE BEGIN 4 */
/*Initialize the data structure*/
void struct_init(struct ambient_conditions* ac){
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	ac->humid_value=0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
	ac->temp_value=0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
	ac->humidex=0;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <calculate_h>:

/*Calculate humidex based on temperature and humidity*/
float calculate_h(struct ambient_conditions*ac){
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	float h=0;
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
	float e=0;
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]

	e=0.06*ac->humid_value*(pow(10,0.03*ac->temp_value));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe79 	bl	8000538 <__aeabi_f2d>
 8001846:	a32e      	add	r3, pc, #184	; (adr r3, 8001900 <calculate_h+0xd8>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fecc 	bl	80005e8 <__aeabi_dmul>
 8001850:	4603      	mov	r3, r0
 8001852:	460c      	mov	r4, r1
 8001854:	4625      	mov	r5, r4
 8001856:	461c      	mov	r4, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe6b 	bl	8000538 <__aeabi_f2d>
 8001862:	a329      	add	r3, pc, #164	; (adr r3, 8001908 <calculate_h+0xe0>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe febe 	bl	80005e8 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	ec43 2b17 	vmov	d7, r2, r3
 8001874:	eeb0 1a47 	vmov.f32	s2, s14
 8001878:	eef0 1a67 	vmov.f32	s3, s15
 800187c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80018f8 <calculate_h+0xd0>
 8001880:	f009 fba4 	bl	800afcc <pow>
 8001884:	ec53 2b10 	vmov	r2, r3, d0
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe feac 	bl	80005e8 <__aeabi_dmul>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	4618      	mov	r0, r3
 8001896:	4621      	mov	r1, r4
 8001898:	f7ff f97e 	bl	8000b98 <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	60bb      	str	r3, [r7, #8]
	h=ac->temp_value+(0.55555*(e-10));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe47 	bl	8000538 <__aeabi_f2d>
 80018aa:	4604      	mov	r4, r0
 80018ac:	460d      	mov	r5, r1
 80018ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fe3b 	bl	8000538 <__aeabi_f2d>
 80018c2:	a313      	add	r3, pc, #76	; (adr r3, 8001910 <calculate_h+0xe8>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fe8e 	bl	80005e8 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe fcd2 	bl	800027c <__adddf3>
 80018d8:	4603      	mov	r3, r0
 80018da:	460c      	mov	r4, r1
 80018dc:	4618      	mov	r0, r3
 80018de:	4621      	mov	r1, r4
 80018e0:	f7ff f95a 	bl	8000b98 <__aeabi_d2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	60fb      	str	r3, [r7, #12]

	return h;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	ee07 3a90 	vmov	s15, r3
}
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bdb0      	pop	{r4, r5, r7, pc}
 80018f8:	00000000 	.word	0x00000000
 80018fc:	40240000 	.word	0x40240000
 8001900:	eb851eb8 	.word	0xeb851eb8
 8001904:	3faeb851 	.word	0x3faeb851
 8001908:	eb851eb8 	.word	0xeb851eb8
 800190c:	3f9eb851 	.word	0x3f9eb851
 8001910:	cb295e9e 	.word	0xcb295e9e
 8001914:	3fe1c710 	.word	0x3fe1c710

08001918 <temp_task>:

/*Read the temperature value from the sensor and split it in 2 integer (1 for integer part and 1 for fractional part).
Then the message is prepared and printed on serial. Float are not supported, so 2 integer are required*/
void temp_task(struct ambient_conditions*ac){
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b095      	sub	sp, #84	; 0x54
 800191c:	af02      	add	r7, sp, #8
 800191e:	6078      	str	r0, [r7, #4]
	int int1=0;
 8001920:	2300      	movs	r3, #0
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
	float frac=0;
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
	int int2=0;
 800192a:	2300      	movs	r3, #0
 800192c:	63fb      	str	r3, [r7, #60]	; 0x3c
	char msg[50] = "";
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	222e      	movs	r2, #46	; 0x2e
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f008 fef3 	bl	800a726 <memset>

  for(;;)
  {
	 osSemaphoreAcquire(temp_sem,portMAX_DELAY);
 8001940:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <temp_task+0xe8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	4618      	mov	r0, r3
 800194a:	f005 fdcb 	bl	80074e4 <osSemaphoreAcquire>
	 osSemaphoreAcquire(mutex, portMAX_DELAY);
 800194e:	4b2d      	ldr	r3, [pc, #180]	; (8001a04 <temp_task+0xec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f04f 31ff 	mov.w	r1, #4294967295
 8001956:	4618      	mov	r0, r3
 8001958:	f005 fdc4 	bl	80074e4 <osSemaphoreAcquire>
	 ac->temp_value = BSP_TSENSOR_ReadTemp();
 800195c:	f000 fee8 	bl	8002730 <BSP_TSENSOR_ReadTemp>
 8001960:	eef0 7a40 	vmov.f32	s15, s0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	edc3 7a00 	vstr	s15, [r3]
	 osSemaphoreRelease(mutex);
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <temp_task+0xec>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f005 fe1e 	bl	80075b0 <osSemaphoreRelease>

	 /* Get the remaining stack space (for debug)
	 uint32_t size=osThreadGetStackSpace(temp_task_handle); */

	 int1 = ac->temp_value;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197e:	ee17 3a90 	vmov	r3, s15
 8001982:	647b      	str	r3, [r7, #68]	; 0x44
	 frac = ac->temp_value - int1;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001998:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	 int2 = trunc(frac * 100);
 800199c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80019a0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a08 <temp_task+0xf0>
 80019a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a8:	ee17 0a90 	vmov	r0, s15
 80019ac:	f7fe fdc4 	bl	8000538 <__aeabi_f2d>
 80019b0:	4603      	mov	r3, r0
 80019b2:	460c      	mov	r4, r1
 80019b4:	ec44 3b10 	vmov	d0, r3, r4
 80019b8:	f009 face 	bl	800af58 <trunc>
 80019bc:	ec54 3b10 	vmov	r3, r4, d0
 80019c0:	4618      	mov	r0, r3
 80019c2:	4621      	mov	r1, r4
 80019c4:	f7ff f8c0 	bl	8000b48 <__aeabi_d2iz>
 80019c8:	4603      	mov	r3, r0
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	 snprintf(msg,50,"TEMPERATURE = %d.%02d %cC\r\n", int1,int2,'°');
 80019cc:	f107 0008 	add.w	r0, r7, #8
 80019d0:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019dc:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <temp_task+0xf4>)
 80019de:	2132      	movs	r1, #50	; 0x32
 80019e0:	f008 feaa 	bl	800a738 <sniprintf>
	 HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 80019e4:	f107 0108 	add.w	r1, r7, #8
 80019e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ec:	2232      	movs	r2, #50	; 0x32
 80019ee:	4808      	ldr	r0, [pc, #32]	; (8001a10 <temp_task+0xf8>)
 80019f0:	f004 fb78 	bl	80060e4 <HAL_UART_Transmit>
	 osSemaphoreRelease(humid_sem);
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <temp_task+0xfc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f005 fdd9 	bl	80075b0 <osSemaphoreRelease>
	 osSemaphoreAcquire(temp_sem,portMAX_DELAY);
 80019fe:	e79f      	b.n	8001940 <temp_task+0x28>
 8001a00:	20001f8c 	.word	0x20001f8c
 8001a04:	20001ff4 	.word	0x20001ff4
 8001a08:	42c80000 	.word	0x42c80000
 8001a0c:	0800c0b4 	.word	0x0800c0b4
 8001a10:	20001ff8 	.word	0x20001ff8
 8001a14:	20001f38 	.word	0x20001f38

08001a18 <humid_task>:
  }
}

/*Read the humidity value from the sensor and split it in 2 integer (1 for integer part and 1 for fractional part).
Then the message is prepared and printed on serial. Float are not supported, so 2 integer are required*/
void humid_task(struct ambient_conditions* ac){
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b095      	sub	sp, #84	; 0x54
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	6078      	str	r0, [r7, #4]
	int int1=0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
	float frac=0;
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	643b      	str	r3, [r7, #64]	; 0x40
	int int2=0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
	char msg[50] = "";
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	222e      	movs	r2, #46	; 0x2e
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 fe73 	bl	800a726 <memset>

  for(;;)
  {
	 osSemaphoreAcquire(humid_sem, portMAX_DELAY);
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <humid_task+0xe4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f005 fd4b 	bl	80074e4 <osSemaphoreAcquire>
	 osSemaphoreAcquire(mutex, portMAX_DELAY);
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <humid_task+0xe8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 31ff 	mov.w	r1, #4294967295
 8001a56:	4618      	mov	r0, r3
 8001a58:	f005 fd44 	bl	80074e4 <osSemaphoreAcquire>
	 ac->humid_value = BSP_HSENSOR_ReadHumidity();
 8001a5c:	f000 fe3e 	bl	80026dc <BSP_HSENSOR_ReadHumidity>
 8001a60:	eef0 7a40 	vmov.f32	s15, s0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	edc3 7a01 	vstr	s15, [r3, #4]
	 osSemaphoreRelease(mutex);
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <humid_task+0xe8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 fd9e 	bl	80075b0 <osSemaphoreRelease>

	 int1 = ac->humid_value;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7e:	ee17 3a90 	vmov	r3, s15
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
	 frac = ac->humid_value - int1;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	 int2 = trunc(frac * 100);
 8001a9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001aa0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001b04 <humid_task+0xec>
 8001aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa8:	ee17 0a90 	vmov	r0, s15
 8001aac:	f7fe fd44 	bl	8000538 <__aeabi_f2d>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	460c      	mov	r4, r1
 8001ab4:	ec44 3b10 	vmov	d0, r3, r4
 8001ab8:	f009 fa4e 	bl	800af58 <trunc>
 8001abc:	ec54 3b10 	vmov	r3, r4, d0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	f7ff f840 	bl	8000b48 <__aeabi_d2iz>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
	 snprintf(msg,50,"HUMIDITY = %d.%02d %%\r\n", int1, int2);
 8001acc:	f107 0008 	add.w	r0, r7, #8
 8001ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad6:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <humid_task+0xf0>)
 8001ad8:	2132      	movs	r1, #50	; 0x32
 8001ada:	f008 fe2d 	bl	800a738 <sniprintf>
	 HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001ade:	f107 0108 	add.w	r1, r7, #8
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	2232      	movs	r2, #50	; 0x32
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <humid_task+0xf4>)
 8001aea:	f004 fafb 	bl	80060e4 <HAL_UART_Transmit>
	 osSemaphoreRelease(apparent_temp_sem);
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <humid_task+0xf8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 fd5c 	bl	80075b0 <osSemaphoreRelease>
	 osSemaphoreAcquire(humid_sem, portMAX_DELAY);
 8001af8:	e7a2      	b.n	8001a40 <humid_task+0x28>
 8001afa:	bf00      	nop
 8001afc:	20001f38 	.word	0x20001f38
 8001b00:	20001ff4 	.word	0x20001ff4
 8001b04:	42c80000 	.word	0x42c80000
 8001b08:	0800c0d0 	.word	0x0800c0d0
 8001b0c:	20001ff8 	.word	0x20001ff8
 8001b10:	2000207c 	.word	0x2000207c

08001b14 <apparent_temp_task>:
  }
}

/*Compute the apparent temperature based on real temperature and humidity using the Humidex method (can only be used if the temperature is >=20) */
void apparent_temp_task(struct ambient_conditions* ac){
 8001b14:	b5b0      	push	{r4, r5, r7, lr}
 8001b16:	b0a6      	sub	sp, #152	; 0x98
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	6078      	str	r0, [r7, #4]
	int int1=0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float frac=0;
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int int2=0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char msg[80] = "";
 8001b30:	2300      	movs	r3, #0
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
 8001b34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b38:	224c      	movs	r2, #76	; 0x4c
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f008 fdf2 	bl	800a726 <memset>
	char line[]="--------------------------------------\n\r";
 8001b42:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <apparent_temp_task+0x17c>)
 8001b44:	f107 0408 	add.w	r4, r7, #8
 8001b48:	461d      	mov	r5, r3
 8001b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b56:	c403      	stmia	r4!, {r0, r1}
 8001b58:	7022      	strb	r2, [r4, #0]

	for(;;)
	  {
		 osSemaphoreAcquire(apparent_temp_sem, portMAX_DELAY);
 8001b5a:	4b4e      	ldr	r3, [pc, #312]	; (8001c94 <apparent_temp_task+0x180>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b62:	4618      	mov	r0, r3
 8001b64:	f005 fcbe 	bl	80074e4 <osSemaphoreAcquire>
		 osSemaphoreAcquire(mutex, portMAX_DELAY);
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <apparent_temp_task+0x184>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	4618      	mov	r0, r3
 8001b72:	f005 fcb7 	bl	80074e4 <osSemaphoreAcquire>

		 /*Calculate humidex if the temperature>=20 or else set a value of 0, meaning the apparent temperature has no meaning */
		 if(ac->temp_value>=20){
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	db08      	blt.n	8001b9c <apparent_temp_task+0x88>
			ac->humidex = calculate_h(ac);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fe4c 	bl	8001828 <calculate_h>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	edc3 7a02 	vstr	s15, [r3, #8]
 8001b9a:	e003      	b.n	8001ba4 <apparent_temp_task+0x90>
		 }
		 else{
			 ac->humidex = 0;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
		 }
		 osSemaphoreRelease(mutex);
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <apparent_temp_task+0x184>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f005 fd01 	bl	80075b0 <osSemaphoreRelease>
		 if(ac->humidex){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	d045      	beq.n	8001c4a <apparent_temp_task+0x136>
			 int1 = ac->humidex;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 3a90 	vmov	r3, s15
 8001bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		 	 frac = ac->humidex - int1;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		 	 int2 = trunc(frac * 100);
 8001bea:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001bee:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001c9c <apparent_temp_task+0x188>
 8001bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf6:	ee17 0a90 	vmov	r0, s15
 8001bfa:	f7fe fc9d 	bl	8000538 <__aeabi_f2d>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	ec44 3b10 	vmov	d0, r3, r4
 8001c06:	f009 f9a7 	bl	800af58 <trunc>
 8001c0a:	ec54 3b10 	vmov	r3, r4, d0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4621      	mov	r1, r4
 8001c12:	f7fe ff99 	bl	8000b48 <__aeabi_d2iz>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		 	 snprintf(msg,80,"APPARENT TEMPERATURE = %d.%02d %cC\r\n", int1, int2,'°');
 8001c1c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001c20:	f24c 23b0 	movw	r3, #49840	; 0xc2b0
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c30:	4a1b      	ldr	r2, [pc, #108]	; (8001ca0 <apparent_temp_task+0x18c>)
 8001c32:	2150      	movs	r1, #80	; 0x50
 8001c34:	f008 fd80 	bl	800a738 <sniprintf>
		 	 HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001c38:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c40:	2250      	movs	r2, #80	; 0x50
 8001c42:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <apparent_temp_task+0x190>)
 8001c44:	f004 fa4e 	bl	80060e4 <HAL_UART_Transmit>
 8001c48:	e010      	b.n	8001c6c <apparent_temp_task+0x158>
		 }
		 else{
			 snprintf(msg,80,"THE TEMPERATURE IS TOO LOW IN ORDER TO CALCULATE THE APPARENT TEMPERATURE\r\n");
 8001c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <apparent_temp_task+0x194>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	4611      	mov	r1, r2
 8001c54:	234c      	movs	r3, #76	; 0x4c
 8001c56:	461a      	mov	r2, r3
 8001c58:	f008 fd5a 	bl	800a710 <memcpy>
			 HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001c5c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c64:	2250      	movs	r2, #80	; 0x50
 8001c66:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <apparent_temp_task+0x190>)
 8001c68:	f004 fa3c 	bl	80060e4 <HAL_UART_Transmit>
		 }
		 HAL_UART_Transmit(&huart1,( uint8_t * )line,sizeof(line),1000);
 8001c6c:	f107 0108 	add.w	r1, r7, #8
 8001c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c74:	2229      	movs	r2, #41	; 0x29
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <apparent_temp_task+0x190>)
 8001c78:	f004 fa34 	bl	80060e4 <HAL_UART_Transmit>
		 osDelay(1000);
 8001c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c80:	f005 faca 	bl	8007218 <osDelay>
		 osSemaphoreRelease(temp_sem);
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <apparent_temp_task+0x198>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 fc91 	bl	80075b0 <osSemaphoreRelease>
		 osSemaphoreAcquire(apparent_temp_sem, portMAX_DELAY);
 8001c8e:	e764      	b.n	8001b5a <apparent_temp_task+0x46>
 8001c90:	0800c15c 	.word	0x0800c15c
 8001c94:	2000207c 	.word	0x2000207c
 8001c98:	20001ff4 	.word	0x20001ff4
 8001c9c:	42c80000 	.word	0x42c80000
 8001ca0:	0800c0e8 	.word	0x0800c0e8
 8001ca4:	20001ff8 	.word	0x20001ff8
 8001ca8:	0800c110 	.word	0x0800c110
 8001cac:	20001f8c 	.word	0x20001f8c

08001cb0 <safety_task>:
	  }
}

void safety_task(struct ambient_conditions* ac){
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b096      	sub	sp, #88	; 0x58
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	char msg[80] = "Safety Task operating";
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <safety_task+0x40>)
 8001cba:	f107 0408 	add.w	r4, r7, #8
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc8:	6020      	str	r0, [r4, #0]
 8001cca:	3404      	adds	r4, #4
 8001ccc:	8021      	strh	r1, [r4, #0]
 8001cce:	f107 031e 	add.w	r3, r7, #30
 8001cd2:	223a      	movs	r2, #58	; 0x3a
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f008 fd25 	bl	800a726 <memset>

	for(;;)
	{
		HAL_UART_Transmit(&huart1,( uint8_t * )msg,sizeof(msg),1000);
 8001cdc:	f107 0108 	add.w	r1, r7, #8
 8001ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce4:	2250      	movs	r2, #80	; 0x50
 8001ce6:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <safety_task+0x44>)
 8001ce8:	f004 f9fc 	bl	80060e4 <HAL_UART_Transmit>
 8001cec:	e7f6      	b.n	8001cdc <safety_task+0x2c>
 8001cee:	bf00      	nop
 8001cf0:	0800c188 	.word	0x0800c188
 8001cf4:	20001ff8 	.word	0x20001ff8

08001cf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d101      	bne.n	8001d0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d0a:	f000 fec9 	bl	8002aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40012c00 	.word	0x40012c00

08001d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_MspInit+0x4c>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	210f      	movs	r1, #15
 8001d66:	f06f 0001 	mvn.w	r0, #1
 8001d6a:	f000 ff91 	bl	8002c90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001d94:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d128      	bne.n	8001dee <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da0:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6613      	str	r3, [r2, #96]	; 0x60
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db8:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_DFSDM_ChannelMspInit+0x80>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001dcc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001dde:	2306      	movs	r3, #6
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001dea:	f001 f891 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000016c 	.word	0x2000016c
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48001000 	.word	0x48001000

08001e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_I2C_MspInit+0x7c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d128      	bne.n	8001e78 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_I2C_MspInit+0x80>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <HAL_I2C_MspInit+0x80>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_I2C_MspInit+0x80>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001e3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	2312      	movs	r3, #18
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e50:	2304      	movs	r3, #4
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480b      	ldr	r0, [pc, #44]	; (8001e88 <HAL_I2C_MspInit+0x84>)
 8001e5c:	f001 f858 	bl	8002f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_I2C_MspInit+0x80>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <HAL_I2C_MspInit+0x80>)
 8001e66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_I2C_MspInit+0x80>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40005800 	.word	0x40005800
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48000400 	.word	0x48000400

08001e8c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_I2C_MspDeInit+0x30>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <HAL_I2C_MspDeInit+0x34>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <HAL_I2C_MspDeInit+0x34>)
 8001ea4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001eaa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_I2C_MspDeInit+0x38>)
 8001eb0:	f001 f9d6 	bl	8003260 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40005800 	.word	0x40005800
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	48000400 	.word	0x48000400

08001ec8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <HAL_QSPI_MspInit+0x7c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d128      	bne.n	8001f3c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_QSPI_MspInit+0x80>)
 8001eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eee:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_QSPI_MspInit+0x80>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6513      	str	r3, [r2, #80]	; 0x50
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_QSPI_MspInit+0x80>)
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_QSPI_MspInit+0x80>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <HAL_QSPI_MspInit+0x80>)
 8001f08:	f043 0310 	orr.w	r3, r3, #16
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_QSPI_MspInit+0x80>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001f1a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001f1e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <HAL_QSPI_MspInit+0x84>)
 8001f38:	f000 ffea 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	a0001000 	.word	0xa0001000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	48001000 	.word	0x48001000

08001f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_SPI_MspInit+0x7c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d128      	bne.n	8001fc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_SPI_MspInit+0x80>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <HAL_SPI_MspInit+0x80>)
 8001f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7e:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <HAL_SPI_MspInit+0x80>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_SPI_MspInit+0x80>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <HAL_SPI_MspInit+0x80>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_SPI_MspInit+0x80>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001fa2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fb4:	2306      	movs	r3, #6
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <HAL_SPI_MspInit+0x84>)
 8001fc0:	f000 ffa6 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40003c00 	.word	0x40003c00
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	48000800 	.word	0x48000800

08001fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	; (80020b0 <HAL_UART_MspInit+0xd8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d128      	bne.n	800204c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	4a2d      	ldr	r2, [pc, #180]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6613      	str	r3, [r2, #96]	; 0x60
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800202a:	23c0      	movs	r3, #192	; 0xc0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800203a:	2307      	movs	r3, #7
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	481c      	ldr	r0, [pc, #112]	; (80020b8 <HAL_UART_MspInit+0xe0>)
 8002046:	f000 ff63 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800204a:	e02d      	b.n	80020a8 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <HAL_UART_MspInit+0xe4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d128      	bne.n	80020a8 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002056:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_UART_MspInit+0xdc>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002086:	f44f 7340 	mov.w	r3, #768	; 0x300
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002098:	2307      	movs	r3, #7
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <HAL_UART_MspInit+0xe8>)
 80020a4:	f000 ff34 	bl	8002f10 <HAL_GPIO_Init>
}
 80020a8:	bf00      	nop
 80020aa:	3730      	adds	r7, #48	; 0x30
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013800 	.word	0x40013800
 80020b4:	40021000 	.word	0x40021000
 80020b8:	48000400 	.word	0x48000400
 80020bc:	40004800 	.word	0x40004800
 80020c0:	48000c00 	.word	0x48000c00

080020c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e4:	d154      	bne.n	8002190 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	4a2b      	ldr	r2, [pc, #172]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f2:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80020fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4619      	mov	r1, r3
 8002112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002116:	f000 fefb 	bl	8002f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800211a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800212c:	230a      	movs	r3, #10
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f000 fee9 	bl	8002f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4a15      	ldr	r2, [pc, #84]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 8002144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d114      	bne.n	800218c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800217a:	f002 f8fd 	bl	8004378 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_PCD_MspInit+0xd4>)
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800218a:	e001      	b.n	8002190 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800218c:	f002 f8f4 	bl	8004378 <HAL_PWREx_EnableVddUSB>
}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	; 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	2019      	movs	r0, #25
 80021b2:	f000 fd6d 	bl	8002c90 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80021b6:	2019      	movs	r0, #25
 80021b8:	f000 fd86 	bl	8002cc8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_InitTick+0x9c>)
 80021be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_InitTick+0x9c>)
 80021c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c6:	6613      	str	r3, [r2, #96]	; 0x60
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_InitTick+0x9c>)
 80021ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d4:	f107 0210 	add.w	r2, r7, #16
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fef6 	bl	8004fd0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80021e4:	f002 fede 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 80021e8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_InitTick+0xa0>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9b      	lsrs	r3, r3, #18
 80021f4:	3b01      	subs	r3, #1
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_InitTick+0xa4>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <HAL_InitTick+0xa8>)
 80021fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_InitTick+0xa4>)
 8002200:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002204:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_InitTick+0xa4>)
 8002208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_InitTick+0xa4>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_InitTick+0xa4>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002218:	4809      	ldr	r0, [pc, #36]	; (8002240 <HAL_InitTick+0xa4>)
 800221a:	f003 fcb5 	bl	8005b88 <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d104      	bne.n	800222e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002224:	4806      	ldr	r0, [pc, #24]	; (8002240 <HAL_InitTick+0xa4>)
 8002226:	f003 fce5 	bl	8005bf4 <HAL_TIM_Base_Start_IT>
 800222a:	4603      	mov	r3, r0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3730      	adds	r7, #48	; 0x30
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	431bde83 	.word	0x431bde83
 8002240:	200020cc 	.word	0x200020cc
 8002244:	40012c00 	.word	0x40012c00

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <MemManage_Handler+0x4>

08002262 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	e7fe      	b.n	800226c <UsageFault_Handler+0x4>

0800226e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002280:	2020      	movs	r0, #32
 8002282:	f001 f8f9 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002286:	2040      	movs	r0, #64	; 0x40
 8002288:	f001 f8f6 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800228c:	2080      	movs	r0, #128	; 0x80
 800228e:	f001 f8f3 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002292:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002296:	f001 f8ef 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022a6:	f003 fccf 	bl	8005c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200020cc 	.word	0x200020cc

080022b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80022b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022bc:	f001 f8dc 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80022c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022c4:	f001 f8d8 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022cc:	f001 f8d4 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80022d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022d4:	f001 f8d0 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80022d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022dc:	f001 f8cc 	bl	8003478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <_sbrk+0x50>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <_sbrk+0x16>
		heap_end = &end;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <_sbrk+0x50>)
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <_sbrk+0x54>)
 80022f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <_sbrk+0x50>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <_sbrk+0x50>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	466a      	mov	r2, sp
 800230a:	4293      	cmp	r3, r2
 800230c:	d907      	bls.n	800231e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800230e:	f008 f9d5 	bl	800a6bc <__errno>
 8002312:	4602      	mov	r2, r0
 8002314:	230c      	movs	r3, #12
 8002316:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	e006      	b.n	800232c <_sbrk+0x48>
	}

	heap_end += incr;
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <_sbrk+0x50>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	4a03      	ldr	r2, [pc, #12]	; (8002334 <_sbrk+0x50>)
 8002328:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000170 	.word	0x20000170
 8002338:	20002220 	.word	0x20002220

0800233c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <SystemInit+0x64>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	4a16      	ldr	r2, [pc, #88]	; (80023a0 <SystemInit+0x64>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002350:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <SystemInit+0x68>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <SystemInit+0x68>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <SystemInit+0x68>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <SystemInit+0x68>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <SystemInit+0x68>)
 8002368:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800236c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002370:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <SystemInit+0x68>)
 8002374:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002378:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <SystemInit+0x68>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <SystemInit+0x68>)
 8002380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <SystemInit+0x68>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SystemInit+0x64>)
 800238e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002392:	609a      	str	r2, [r3, #8]
#endif
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00
 80023a4:	40021000 	.word	0x40021000

080023a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023ae:	e003      	b.n	80023b8 <LoopCopyDataInit>

080023b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023b6:	3104      	adds	r1, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023b8:	480b      	ldr	r0, [pc, #44]	; (80023e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80023bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023c0:	d3f6      	bcc.n	80023b0 <CopyDataInit>
	ldr	r2, =_sbss
 80023c2:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023c4:	e002      	b.n	80023cc <LoopFillZerobss>

080023c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023c8:	f842 3b04 	str.w	r3, [r2], #4

080023cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <LoopForever+0x16>)
	cmp	r2, r3
 80023ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023d0:	d3f9      	bcc.n	80023c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023d2:	f7ff ffb3 	bl	800233c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d6:	f008 f977 	bl	800a6c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023da:	f7fe fdad 	bl	8000f38 <main>

080023de <LoopForever>:

LoopForever:
    b LoopForever
 80023de:	e7fe      	b.n	80023de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023e0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023e4:	0800c308 	.word	0x0800c308
	ldr	r0, =_sdata
 80023e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023ec:	20000150 	.word	0x20000150
	ldr	r2, =_sbss
 80023f0:	20000150 	.word	0x20000150
	ldr	r3, = _ebss
 80023f4:	20002220 	.word	0x20002220

080023f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023f8:	e7fe      	b.n	80023f8 <ADC1_2_IRQHandler>
	...

080023fc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <I2Cx_MspInit+0xa8>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <I2Cx_MspInit+0xa8>)
 800240a:	f043 0302 	orr.w	r3, r3, #2
 800240e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <I2Cx_MspInit+0xa8>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800241c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002420:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002422:	2312      	movs	r3, #18
 8002424:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002426:	2301      	movs	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800242e:	2304      	movs	r3, #4
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	481b      	ldr	r0, [pc, #108]	; (80024a8 <I2Cx_MspInit+0xac>)
 800243a:	f000 fd69 	bl	8002f10 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	4818      	ldr	r0, [pc, #96]	; (80024a8 <I2Cx_MspInit+0xac>)
 8002446:	f000 fd63 	bl	8002f10 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <I2Cx_MspInit+0xa8>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <I2Cx_MspInit+0xa8>)
 8002450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002454:	6593      	str	r3, [r2, #88]	; 0x58
 8002456:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <I2Cx_MspInit+0xa8>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <I2Cx_MspInit+0xa8>)
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <I2Cx_MspInit+0xa8>)
 8002468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800246c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <I2Cx_MspInit+0xa8>)
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <I2Cx_MspInit+0xa8>)
 8002474:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002478:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	210f      	movs	r1, #15
 800247e:	2021      	movs	r0, #33	; 0x21
 8002480:	f000 fc06 	bl	8002c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002484:	2021      	movs	r0, #33	; 0x21
 8002486:	f000 fc1f 	bl	8002cc8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	210f      	movs	r1, #15
 800248e:	2022      	movs	r0, #34	; 0x22
 8002490:	f000 fbfe 	bl	8002c90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002494:	2022      	movs	r0, #34	; 0x22
 8002496:	f000 fc17 	bl	8002cc8 <HAL_NVIC_EnableIRQ>
}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	; 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	48000400 	.word	0x48000400

080024ac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <I2Cx_Init+0x54>)
 80024b8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <I2Cx_Init+0x58>)
 80024be:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff89 	bl	80023fc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 ffe7 	bl	80034be <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80024f0:	2100      	movs	r1, #0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f001 fcec 	bl	8003ed0 <HAL_I2CEx_ConfigAnalogFilter>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40005800 	.word	0x40005800
 8002504:	00702681 	.word	0x00702681

08002508 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af04      	add	r7, sp, #16
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	72fb      	strb	r3, [r7, #11]
 800251a:	460b      	mov	r3, r1
 800251c:	813b      	strh	r3, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	b299      	uxth	r1, r3
 800252a:	88f8      	ldrh	r0, [r7, #6]
 800252c:	893a      	ldrh	r2, [r7, #8]
 800252e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002532:	9302      	str	r3, [sp, #8]
 8002534:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4603      	mov	r3, r0
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f001 f990 	bl	8003864 <HAL_I2C_Mem_Read>
 8002544:	4603      	mov	r3, r0
 8002546:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d004      	beq.n	8002558 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	4619      	mov	r1, r3
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f832 	bl	80025bc <I2Cx_Error>
  }
  return status;
 8002558:	7dfb      	ldrb	r3, [r7, #23]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b08a      	sub	sp, #40	; 0x28
 8002566:	af04      	add	r7, sp, #16
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	4608      	mov	r0, r1
 800256c:	4611      	mov	r1, r2
 800256e:	461a      	mov	r2, r3
 8002570:	4603      	mov	r3, r0
 8002572:	72fb      	strb	r3, [r7, #11]
 8002574:	460b      	mov	r3, r1
 8002576:	813b      	strh	r3, [r7, #8]
 8002578:	4613      	mov	r3, r2
 800257a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002580:	7afb      	ldrb	r3, [r7, #11]
 8002582:	b299      	uxth	r1, r3
 8002584:	88f8      	ldrh	r0, [r7, #6]
 8002586:	893a      	ldrh	r2, [r7, #8]
 8002588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258c:	9302      	str	r3, [sp, #8]
 800258e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	4603      	mov	r3, r0
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f001 f84f 	bl	800363c <HAL_I2C_Mem_Write>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80025a8:	7afb      	ldrb	r3, [r7, #11]
 80025aa:	4619      	mov	r1, r3
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f805 	bl	80025bc <I2Cx_Error>
  }
  return status;
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f001 f807 	bl	80035dc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff6c 	bl	80024ac <I2Cx_Init>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <SENSOR_IO_Init+0x10>)
 80025e2:	f7ff ff63 	bl	80024ac <I2Cx_Init>
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000218c 	.word	0x2000218c

080025f0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	460b      	mov	r3, r1
 80025fc:	71bb      	strb	r3, [r7, #6]
 80025fe:	4613      	mov	r3, r2
 8002600:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002602:	79bb      	ldrb	r3, [r7, #6]
 8002604:	b29a      	uxth	r2, r3
 8002606:	79f9      	ldrb	r1, [r7, #7]
 8002608:	2301      	movs	r3, #1
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	1d7b      	adds	r3, r7, #5
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2301      	movs	r3, #1
 8002612:	4803      	ldr	r0, [pc, #12]	; (8002620 <SENSOR_IO_Write+0x30>)
 8002614:	f7ff ffa5 	bl	8002562 <I2Cx_WriteMultiple>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	2000218c 	.word	0x2000218c

08002624 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af02      	add	r7, sp, #8
 800262a:	4603      	mov	r3, r0
 800262c:	460a      	mov	r2, r1
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	4613      	mov	r3, r2
 8002632:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002638:	79bb      	ldrb	r3, [r7, #6]
 800263a:	b29a      	uxth	r2, r3
 800263c:	79f9      	ldrb	r1, [r7, #7]
 800263e:	2301      	movs	r3, #1
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	f107 030f 	add.w	r3, r7, #15
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2301      	movs	r3, #1
 800264a:	4804      	ldr	r0, [pc, #16]	; (800265c <SENSOR_IO_Read+0x38>)
 800264c:	f7ff ff5c 	bl	8002508 <I2Cx_ReadMultiple>

  return read_value;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000218c 	.word	0x2000218c

08002660 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af02      	add	r7, sp, #8
 8002666:	603a      	str	r2, [r7, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	460b      	mov	r3, r1
 8002670:	71bb      	strb	r3, [r7, #6]
 8002672:	4613      	mov	r3, r2
 8002674:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002676:	79bb      	ldrb	r3, [r7, #6]
 8002678:	b29a      	uxth	r2, r3
 800267a:	79f9      	ldrb	r1, [r7, #7]
 800267c:	88bb      	ldrh	r3, [r7, #4]
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2301      	movs	r3, #1
 8002686:	4804      	ldr	r0, [pc, #16]	; (8002698 <SENSOR_IO_ReadMultiple+0x38>)
 8002688:	f7ff ff3e 	bl	8002508 <I2Cx_ReadMultiple>
 800268c:	4603      	mov	r3, r0
 800268e:	b29b      	uxth	r3, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	2000218c 	.word	0x2000218c

0800269c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <BSP_HSENSOR_Init+0x38>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	20be      	movs	r0, #190	; 0xbe
 80026a8:	4798      	blx	r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	2bbc      	cmp	r3, #188	; 0xbc
 80026ae:	d002      	beq.n	80026b6 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	e009      	b.n	80026ca <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <BSP_HSENSOR_Init+0x3c>)
 80026b8:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <BSP_HSENSOR_Init+0x38>)
 80026ba:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <BSP_HSENSOR_Init+0x3c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	20be      	movs	r0, #190	; 0xbe
 80026c4:	4798      	blx	r3
    ret = HSENSOR_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80026ca:	687b      	ldr	r3, [r7, #4]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200000c0 	.word	0x200000c0
 80026d8:	20000174 	.word	0x20000174

080026dc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <BSP_HSENSOR_ReadHumidity+0x18>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	20be      	movs	r0, #190	; 0xbe
 80026e8:	4798      	blx	r3
 80026ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80026ee:	eeb0 0a67 	vmov.f32	s0, s15
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000174 	.word	0x20000174

080026f8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <BSP_TSENSOR_Init+0x30>)
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <BSP_TSENSOR_Init+0x34>)
 8002706:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002708:	f7ff ff68 	bl	80025dc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <BSP_TSENSOR_Init+0x30>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2100      	movs	r1, #0
 8002714:	20be      	movs	r0, #190	; 0xbe
 8002716:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800271c:	79fb      	ldrb	r3, [r7, #7]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000178 	.word	0x20000178
 800272c:	200000cc 	.word	0x200000cc

08002730 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <BSP_TSENSOR_ReadTemp+0x18>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	20be      	movs	r0, #190	; 0xbe
 800273c:	4798      	blx	r3
 800273e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002742:	eeb0 0a67 	vmov.f32	s0, s15
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000178 	.word	0x20000178

0800274c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2120      	movs	r1, #32
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff61 	bl	8002624 <SENSOR_IO_Read>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	f023 0303 	bic.w	r3, r3, #3
 800277c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800278c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	2120      	movs	r1, #32
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff2a 	bl	80025f0 <SENSOR_IO_Write>
}
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80027b2:	f7ff ff13 	bl	80025dc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	210f      	movs	r1, #15
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff31 	bl	8002624 <SENSOR_IO_Read>
 80027c2:	4603      	mov	r3, r0
 80027c4:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	b2d8      	uxtb	r0, r3
 80027de:	f107 020c 	add.w	r2, r7, #12
 80027e2:	2302      	movs	r3, #2
 80027e4:	21b0      	movs	r1, #176	; 0xb0
 80027e6:	f7ff ff3b 	bl	8002660 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80027ea:	7b3b      	ldrb	r3, [r7, #12]
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80027f2:	7b7b      	ldrb	r3, [r7, #13]
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	b2d8      	uxtb	r0, r3
 80027fe:	f107 020c 	add.w	r2, r7, #12
 8002802:	2302      	movs	r3, #2
 8002804:	21b6      	movs	r1, #182	; 0xb6
 8002806:	f7ff ff2b 	bl	8002660 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800280a:	7b7b      	ldrb	r3, [r7, #13]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b21a      	sxth	r2, r3
 8002810:	7b3b      	ldrb	r3, [r7, #12]
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	b2d8      	uxtb	r0, r3
 800281c:	f107 020c 	add.w	r2, r7, #12
 8002820:	2302      	movs	r3, #2
 8002822:	21ba      	movs	r1, #186	; 0xba
 8002824:	f7ff ff1c 	bl	8002660 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002828:	7b7b      	ldrb	r3, [r7, #13]
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	b21a      	sxth	r2, r3
 800282e:	7b3b      	ldrb	r3, [r7, #12]
 8002830:	b21b      	sxth	r3, r3
 8002832:	4313      	orrs	r3, r2
 8002834:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2d8      	uxtb	r0, r3
 800283a:	f107 020c 	add.w	r2, r7, #12
 800283e:	2302      	movs	r3, #2
 8002840:	21a8      	movs	r1, #168	; 0xa8
 8002842:	f7ff ff0d 	bl	8002660 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002846:	7b7b      	ldrb	r3, [r7, #13]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002854:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002858:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002866:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800286a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002878:	ee67 6a27 	vmul.f32	s13, s14, s15
 800287c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002880:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002892:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800289e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a2:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80028a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b2:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80028b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ba:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002900 <HTS221_H_ReadHumidity+0x130>
 80028be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	dd01      	ble.n	80028cc <HTS221_H_ReadHumidity+0xfc>
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HTS221_H_ReadHumidity+0x134>)
 80028ca:	e00a      	b.n	80028e2 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 80028cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d502      	bpl.n	80028e0 <HTS221_H_ReadHumidity+0x110>
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	e000      	b.n	80028e2 <HTS221_H_ReadHumidity+0x112>
 80028e0:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80028e2:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80028e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80028e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028f0:	eef0 7a66 	vmov.f32	s15, s13
}
 80028f4:	eeb0 0a67 	vmov.f32	s0, s15
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	447a0000 	.word	0x447a0000
 8002904:	447a0000 	.word	0x447a0000

08002908 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2120      	movs	r1, #32
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fe82 	bl	8002624 <SENSOR_IO_Read>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	f023 0304 	bic.w	r3, r3, #4
 800292a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	f023 0303 	bic.w	r3, r3, #3
 800293a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800294a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	2120      	movs	r1, #32
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fe4b 	bl	80025f0 <SENSOR_IO_Write>
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b088      	sub	sp, #32
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	b2d8      	uxtb	r0, r3
 8002970:	f107 0208 	add.w	r2, r7, #8
 8002974:	2302      	movs	r3, #2
 8002976:	21b2      	movs	r1, #178	; 0xb2
 8002978:	f7ff fe72 	bl	8002660 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2135      	movs	r1, #53	; 0x35
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe4e 	bl	8002624 <SENSOR_IO_Read>
 8002988:	4603      	mov	r3, r0
 800298a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800298c:	7ffb      	ldrb	r3, [r7, #31]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	b21b      	sxth	r3, r3
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	b21a      	sxth	r2, r3
 8002998:	7a3b      	ldrb	r3, [r7, #8]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80029a0:	7ffb      	ldrb	r3, [r7, #31]
 80029a2:	019b      	lsls	r3, r3, #6
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	b21a      	sxth	r2, r3
 80029ac:	7a7b      	ldrb	r3, [r7, #9]
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	4313      	orrs	r3, r2
 80029b2:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80029b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029b8:	10db      	asrs	r3, r3, #3
 80029ba:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80029bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029c0:	10db      	asrs	r3, r3, #3
 80029c2:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	b2d8      	uxtb	r0, r3
 80029c8:	f107 0208 	add.w	r2, r7, #8
 80029cc:	2304      	movs	r3, #4
 80029ce:	21bc      	movs	r1, #188	; 0xbc
 80029d0:	f7ff fe46 	bl	8002660 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80029d4:	7a7b      	ldrb	r3, [r7, #9]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b21a      	sxth	r2, r3
 80029da:	7a3b      	ldrb	r3, [r7, #8]
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80029e2:	7afb      	ldrb	r3, [r7, #11]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	7abb      	ldrb	r3, [r7, #10]
 80029ea:	b21b      	sxth	r3, r3
 80029ec:	4313      	orrs	r3, r2
 80029ee:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	b2d8      	uxtb	r0, r3
 80029f4:	f107 0208 	add.w	r2, r7, #8
 80029f8:	2302      	movs	r3, #2
 80029fa:	21aa      	movs	r1, #170	; 0xaa
 80029fc:	f7ff fe30 	bl	8002660 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a00:	7a7b      	ldrb	r3, [r7, #9]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	b21a      	sxth	r2, r3
 8002a06:	7a3b      	ldrb	r3, [r7, #8]
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002a0e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002a12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a24:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002a36:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	ee07 3a90 	vmov	s15, r3
 8002a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	ee07 3a90 	vmov	s15, r3
}
 8002a66:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7a:	2003      	movs	r0, #3
 8002a7c:	f000 f8fd 	bl	8002c7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff fb8b 	bl	800219c <HAL_InitTick>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	71fb      	strb	r3, [r7, #7]
 8002a90:	e001      	b.n	8002a96 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a92:	f7ff f94b 	bl	8001d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a96:	79fb      	ldrb	r3, [r7, #7]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_IncTick+0x1c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_IncTick+0x20>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	4a03      	ldr	r2, [pc, #12]	; (8002abc <HAL_IncTick+0x1c>)
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	200021d8 	.word	0x200021d8
 8002ac0:	200000e0 	.word	0x200000e0

08002ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_GetTick+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	200021d8 	.word	0x200021d8

08002adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff ffee 	bl	8002ac4 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d004      	beq.n	8002b00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_Delay+0x40>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b00:	bf00      	nop
 8002b02:	f7ff ffdf 	bl	8002ac4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d8f7      	bhi.n	8002b02 <HAL_Delay+0x26>
  {
  }
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200000e0 	.word	0x200000e0

08002b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b52:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <__NVIC_SetPriorityGrouping+0x44>)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60d3      	str	r3, [r2, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <__NVIC_GetPriorityGrouping+0x18>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	f003 0307 	and.w	r3, r3, #7
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	db0b      	blt.n	8002bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4907      	ldr	r1, [pc, #28]	; (8002bbc <__NVIC_EnableIRQ+0x38>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	db0a      	blt.n	8002bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	490c      	ldr	r1, [pc, #48]	; (8002c0c <__NVIC_SetPriority+0x4c>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	0112      	lsls	r2, r2, #4
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	440b      	add	r3, r1
 8002be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be8:	e00a      	b.n	8002c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4908      	ldr	r1, [pc, #32]	; (8002c10 <__NVIC_SetPriority+0x50>)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	0112      	lsls	r2, r2, #4
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	761a      	strb	r2, [r3, #24]
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000e100 	.word	0xe000e100
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	; 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f1c3 0307 	rsb	r3, r3, #7
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	bf28      	it	cs
 8002c32:	2304      	movcs	r3, #4
 8002c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2b06      	cmp	r3, #6
 8002c3c:	d902      	bls.n	8002c44 <NVIC_EncodePriority+0x30>
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3b03      	subs	r3, #3
 8002c42:	e000      	b.n	8002c46 <NVIC_EncodePriority+0x32>
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c48:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	401a      	ands	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43d9      	mvns	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	4313      	orrs	r3, r2
         );
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	; 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff4c 	bl	8002b20 <__NVIC_SetPriorityGrouping>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca2:	f7ff ff61 	bl	8002b68 <__NVIC_GetPriorityGrouping>
 8002ca6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	6978      	ldr	r0, [r7, #20]
 8002cae:	f7ff ffb1 	bl	8002c14 <NVIC_EncodePriority>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ff80 	bl	8002bc0 <__NVIC_SetPriority>
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff54 	bl	8002b84 <__NVIC_EnableIRQ>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0ac      	b.n	8002e50 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f8b2 	bl	8002e64 <DFSDM_GetChannelFromInstance>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <HAL_DFSDM_ChannelInit+0x174>)
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e09f      	b.n	8002e50 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff f833 	bl	8001d7c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002d16:	4b51      	ldr	r3, [pc, #324]	; (8002e5c <HAL_DFSDM_ChannelInit+0x178>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	4a4f      	ldr	r2, [pc, #316]	; (8002e5c <HAL_DFSDM_ChannelInit+0x178>)
 8002d1e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002d20:	4b4e      	ldr	r3, [pc, #312]	; (8002e5c <HAL_DFSDM_ChannelInit+0x178>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d125      	bne.n	8002d74 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002d28:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a4c      	ldr	r2, [pc, #304]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d32:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002d34:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4948      	ldr	r1, [pc, #288]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a46      	ldr	r2, [pc, #280]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d48:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002d4c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	791b      	ldrb	r3, [r3, #4]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002d56:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	493f      	ldr	r1, [pc, #252]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002d68:	4b3d      	ldr	r3, [pc, #244]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a3c      	ldr	r2, [pc, #240]	; (8002e60 <HAL_DFSDM_ChannelInit+0x17c>)
 8002d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002d82:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d92:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002d98:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 020f 	bic.w	r2, r2, #15
 8002db0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6819      	ldr	r1, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002dd8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f002 0207 	and.w	r2, r2, #7
 8002e04:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e30:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f810 	bl	8002e64 <DFSDM_GetChannelFromInstance>
 8002e44:	4601      	mov	r1, r0
 8002e46:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <HAL_DFSDM_ChannelInit+0x174>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000180 	.word	0x20000180
 8002e5c:	2000017c 	.word	0x2000017c
 8002e60:	40016000 	.word	0x40016000

08002e64 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d102      	bne.n	8002e7a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e032      	b.n	8002ee0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <DFSDM_GetChannelFromInstance+0x90>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d102      	bne.n	8002e88 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	e02b      	b.n	8002ee0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <DFSDM_GetChannelFromInstance+0x94>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d102      	bne.n	8002e96 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002e90:	2302      	movs	r3, #2
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	e024      	b.n	8002ee0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a18      	ldr	r2, [pc, #96]	; (8002efc <DFSDM_GetChannelFromInstance+0x98>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d102      	bne.n	8002ea4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e01d      	b.n	8002ee0 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <DFSDM_GetChannelFromInstance+0x9c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d102      	bne.n	8002eb2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002eac:	2304      	movs	r3, #4
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e016      	b.n	8002ee0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <DFSDM_GetChannelFromInstance+0xa0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d102      	bne.n	8002ec0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002eba:	2305      	movs	r3, #5
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	e00f      	b.n	8002ee0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <DFSDM_GetChannelFromInstance+0xa4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d102      	bne.n	8002ece <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002ec8:	2306      	movs	r3, #6
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e008      	b.n	8002ee0 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <DFSDM_GetChannelFromInstance+0xa8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d102      	bne.n	8002edc <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e001      	b.n	8002ee0 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40016000 	.word	0x40016000
 8002ef4:	40016020 	.word	0x40016020
 8002ef8:	40016040 	.word	0x40016040
 8002efc:	40016060 	.word	0x40016060
 8002f00:	40016080 	.word	0x40016080
 8002f04:	400160a0 	.word	0x400160a0
 8002f08:	400160c0 	.word	0x400160c0
 8002f0c:	400160e0 	.word	0x400160e0

08002f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1e:	e17f      	b.n	8003220 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8171 	beq.w	800321a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x38>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b12      	cmp	r3, #18
 8002f46:	d123      	bne.n	8002f90 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	08da      	lsrs	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3208      	adds	r2, #8
 8002f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	08da      	lsrs	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3208      	adds	r2, #8
 8002f8a:	6939      	ldr	r1, [r7, #16]
 8002f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0203 	and.w	r2, r3, #3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d00b      	beq.n	8002fe4 <HAL_GPIO_Init+0xd4>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d007      	beq.n	8002fe4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fd8:	2b11      	cmp	r3, #17
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b12      	cmp	r3, #18
 8002fe2:	d130      	bne.n	8003046 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301a:	2201      	movs	r2, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43db      	mvns	r3, r3
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4013      	ands	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	091b      	lsrs	r3, r3, #4
 8003030:	f003 0201 	and.w	r2, r3, #1
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b03      	cmp	r3, #3
 8003050:	d118      	bne.n	8003084 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003058:	2201      	movs	r2, #1
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	08db      	lsrs	r3, r3, #3
 800306e:	f003 0201 	and.w	r2, r3, #1
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4313      	orrs	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80ac 	beq.w	800321a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	4b5e      	ldr	r3, [pc, #376]	; (800323c <HAL_GPIO_Init+0x32c>)
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	4a5d      	ldr	r2, [pc, #372]	; (800323c <HAL_GPIO_Init+0x32c>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6613      	str	r3, [r2, #96]	; 0x60
 80030ce:	4b5b      	ldr	r3, [pc, #364]	; (800323c <HAL_GPIO_Init+0x32c>)
 80030d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030da:	4a59      	ldr	r2, [pc, #356]	; (8003240 <HAL_GPIO_Init+0x330>)
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	3302      	adds	r3, #2
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	4013      	ands	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003104:	d025      	beq.n	8003152 <HAL_GPIO_Init+0x242>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a4e      	ldr	r2, [pc, #312]	; (8003244 <HAL_GPIO_Init+0x334>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <HAL_GPIO_Init+0x23e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4d      	ldr	r2, [pc, #308]	; (8003248 <HAL_GPIO_Init+0x338>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0x23a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a4c      	ldr	r2, [pc, #304]	; (800324c <HAL_GPIO_Init+0x33c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x236>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4b      	ldr	r2, [pc, #300]	; (8003250 <HAL_GPIO_Init+0x340>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x232>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4a      	ldr	r2, [pc, #296]	; (8003254 <HAL_GPIO_Init+0x344>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x22e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a49      	ldr	r2, [pc, #292]	; (8003258 <HAL_GPIO_Init+0x348>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x22a>
 8003136:	2306      	movs	r3, #6
 8003138:	e00c      	b.n	8003154 <HAL_GPIO_Init+0x244>
 800313a:	2307      	movs	r3, #7
 800313c:	e00a      	b.n	8003154 <HAL_GPIO_Init+0x244>
 800313e:	2305      	movs	r3, #5
 8003140:	e008      	b.n	8003154 <HAL_GPIO_Init+0x244>
 8003142:	2304      	movs	r3, #4
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x244>
 8003146:	2303      	movs	r3, #3
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x244>
 800314a:	2302      	movs	r3, #2
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x244>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x244>
 8003152:	2300      	movs	r3, #0
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003164:	4936      	ldr	r1, [pc, #216]	; (8003240 <HAL_GPIO_Init+0x330>)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003172:	4b3a      	ldr	r3, [pc, #232]	; (800325c <HAL_GPIO_Init+0x34c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <HAL_GPIO_Init+0x34c>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800319c:	4b2f      	ldr	r3, [pc, #188]	; (800325c <HAL_GPIO_Init+0x34c>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <HAL_GPIO_Init+0x34c>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031c6:	4b25      	ldr	r3, [pc, #148]	; (800325c <HAL_GPIO_Init+0x34c>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ea:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_GPIO_Init+0x34c>)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_GPIO_Init+0x34c>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003214:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_GPIO_Init+0x34c>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	3301      	adds	r3, #1
 800321e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	f47f ae78 	bne.w	8002f20 <HAL_GPIO_Init+0x10>
  }
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40021000 	.word	0x40021000
 8003240:	40010000 	.word	0x40010000
 8003244:	48000400 	.word	0x48000400
 8003248:	48000800 	.word	0x48000800
 800324c:	48000c00 	.word	0x48000c00
 8003250:	48001000 	.word	0x48001000
 8003254:	48001400 	.word	0x48001400
 8003258:	48001800 	.word	0x48001800
 800325c:	40010400 	.word	0x40010400

08003260 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800326e:	e0cd      	b.n	800340c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003270:	2201      	movs	r2, #1
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80c0 	beq.w	8003406 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003286:	4a68      	ldr	r2, [pc, #416]	; (8003428 <HAL_GPIO_DeInit+0x1c8>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ae:	d025      	beq.n	80032fc <HAL_GPIO_DeInit+0x9c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a5e      	ldr	r2, [pc, #376]	; (800342c <HAL_GPIO_DeInit+0x1cc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d01f      	beq.n	80032f8 <HAL_GPIO_DeInit+0x98>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a5d      	ldr	r2, [pc, #372]	; (8003430 <HAL_GPIO_DeInit+0x1d0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d019      	beq.n	80032f4 <HAL_GPIO_DeInit+0x94>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a5c      	ldr	r2, [pc, #368]	; (8003434 <HAL_GPIO_DeInit+0x1d4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_GPIO_DeInit+0x90>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_GPIO_DeInit+0x1d8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00d      	beq.n	80032ec <HAL_GPIO_DeInit+0x8c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a5a      	ldr	r2, [pc, #360]	; (800343c <HAL_GPIO_DeInit+0x1dc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <HAL_GPIO_DeInit+0x88>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a59      	ldr	r2, [pc, #356]	; (8003440 <HAL_GPIO_DeInit+0x1e0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_GPIO_DeInit+0x84>
 80032e0:	2306      	movs	r3, #6
 80032e2:	e00c      	b.n	80032fe <HAL_GPIO_DeInit+0x9e>
 80032e4:	2307      	movs	r3, #7
 80032e6:	e00a      	b.n	80032fe <HAL_GPIO_DeInit+0x9e>
 80032e8:	2305      	movs	r3, #5
 80032ea:	e008      	b.n	80032fe <HAL_GPIO_DeInit+0x9e>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e006      	b.n	80032fe <HAL_GPIO_DeInit+0x9e>
 80032f0:	2303      	movs	r3, #3
 80032f2:	e004      	b.n	80032fe <HAL_GPIO_DeInit+0x9e>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e002      	b.n	80032fe <HAL_GPIO_DeInit+0x9e>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_GPIO_DeInit+0x9e>
 80032fc:	2300      	movs	r3, #0
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	f002 0203 	and.w	r2, r2, #3
 8003304:	0092      	lsls	r2, r2, #2
 8003306:	4093      	lsls	r3, r2
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	429a      	cmp	r2, r3
 800330c:	d132      	bne.n	8003374 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800330e:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <HAL_GPIO_DeInit+0x1e4>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	43db      	mvns	r3, r3
 8003316:	494b      	ldr	r1, [pc, #300]	; (8003444 <HAL_GPIO_DeInit+0x1e4>)
 8003318:	4013      	ands	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800331c:	4b49      	ldr	r3, [pc, #292]	; (8003444 <HAL_GPIO_DeInit+0x1e4>)
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	4947      	ldr	r1, [pc, #284]	; (8003444 <HAL_GPIO_DeInit+0x1e4>)
 8003326:	4013      	ands	r3, r2
 8003328:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800332a:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_GPIO_DeInit+0x1e4>)
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	43db      	mvns	r3, r3
 8003332:	4944      	ldr	r1, [pc, #272]	; (8003444 <HAL_GPIO_DeInit+0x1e4>)
 8003334:	4013      	ands	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8003338:	4b42      	ldr	r3, [pc, #264]	; (8003444 <HAL_GPIO_DeInit+0x1e4>)
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	43db      	mvns	r3, r3
 8003340:	4940      	ldr	r1, [pc, #256]	; (8003444 <HAL_GPIO_DeInit+0x1e4>)
 8003342:	4013      	ands	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	220f      	movs	r2, #15
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003356:	4a34      	ldr	r2, [pc, #208]	; (8003428 <HAL_GPIO_DeInit+0x1c8>)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3302      	adds	r3, #2
 800335e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43da      	mvns	r2, r3
 8003366:	4830      	ldr	r0, [pc, #192]	; (8003428 <HAL_GPIO_DeInit+0x1c8>)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	400a      	ands	r2, r1
 800336e:	3302      	adds	r3, #2
 8003370:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2103      	movs	r1, #3
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	08d2      	lsrs	r2, r2, #3
 80033a8:	4019      	ands	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2103      	movs	r1, #3
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	401a      	ands	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	2101      	movs	r1, #1
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	401a      	ands	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2103      	movs	r1, #3
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	401a      	ands	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	2101      	movs	r1, #1
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	401a      	ands	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	f47f af2b 	bne.w	8003270 <HAL_GPIO_DeInit+0x10>
  }
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40010000 	.word	0x40010000
 800342c:	48000400 	.word	0x48000400
 8003430:	48000800 	.word	0x48000800
 8003434:	48000c00 	.word	0x48000c00
 8003438:	48001000 	.word	0x48001000
 800343c:	48001400 	.word	0x48001400
 8003440:	48001800 	.word	0x48001800
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003464:	e002      	b.n	800346c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800348e:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f806 	bl	80034a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40010400 	.word	0x40010400

080034a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e081      	b.n	80035d4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fe fc8d 	bl	8001e04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2224      	movs	r2, #36	; 0x24
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800350e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800351e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003534:	609a      	str	r2, [r3, #8]
 8003536:	e006      	b.n	8003546 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003544:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d104      	bne.n	8003558 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003556:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	ea42 0103 	orr.w	r1, r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	021a      	lsls	r2, r3, #8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69d9      	ldr	r1, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e021      	b.n	8003632 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2224      	movs	r2, #36	; 0x24
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe fc40 	bl	8001e8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b20      	cmp	r3, #32
 8003660:	f040 80f9 	bne.w	8003856 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_I2C_Mem_Write+0x34>
 800366a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0ed      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_I2C_Mem_Write+0x4e>
 8003686:	2302      	movs	r3, #2
 8003688:	e0e6      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003692:	f7ff fa17 	bl	8002ac4 <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2319      	movs	r3, #25
 800369e:	2201      	movs	r2, #1
 80036a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fac3 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0d1      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2221      	movs	r2, #33	; 0x21
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036dc:	88f8      	ldrh	r0, [r7, #6]
 80036de:	893a      	ldrh	r2, [r7, #8]
 80036e0:	8979      	ldrh	r1, [r7, #10]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	4603      	mov	r3, r0
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f9d3 	bl	8003a98 <I2C_RequestMemoryWrite>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0a9      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2bff      	cmp	r3, #255	; 0xff
 800370c:	d90e      	bls.n	800372c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	b2da      	uxtb	r2, r3
 800371a:	8979      	ldrh	r1, [r7, #10]
 800371c:	2300      	movs	r3, #0
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fba5 	bl	8003e74 <I2C_TransferConfig>
 800372a:	e00f      	b.n	800374c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	b2da      	uxtb	r2, r3
 800373c:	8979      	ldrh	r1, [r7, #10]
 800373e:	2300      	movs	r3, #0
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fb94 	bl	8003e74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 faad 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e07b      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d034      	beq.n	8003804 <HAL_I2C_Mem_Write+0x1c8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d130      	bne.n	8003804 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a8:	2200      	movs	r2, #0
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fa3f 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e04d      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2bff      	cmp	r3, #255	; 0xff
 80037c4:	d90e      	bls.n	80037e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	22ff      	movs	r2, #255	; 0xff
 80037ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	8979      	ldrh	r1, [r7, #10]
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fb49 	bl	8003e74 <I2C_TransferConfig>
 80037e2:	e00f      	b.n	8003804 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	8979      	ldrh	r1, [r7, #10]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fb38 	bl	8003e74 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d19e      	bne.n	800374c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 fa8c 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e01a      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2220      	movs	r2, #32
 8003828:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_I2C_Mem_Write+0x224>)
 8003836:	400b      	ands	r3, r1
 8003838:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	fe00e800 	.word	0xfe00e800

08003864 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b20      	cmp	r3, #32
 8003888:	f040 80fd 	bne.w	8003a86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_I2C_Mem_Read+0x34>
 8003892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0f1      	b.n	8003a88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2C_Mem_Read+0x4e>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0ea      	b.n	8003a88 <HAL_I2C_Mem_Read+0x224>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038ba:	f7ff f903 	bl	8002ac4 <HAL_GetTick>
 80038be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2319      	movs	r3, #25
 80038c6:	2201      	movs	r2, #1
 80038c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f9af 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0d5      	b.n	8003a88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2222      	movs	r2, #34	; 0x22
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2240      	movs	r2, #64	; 0x40
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003904:	88f8      	ldrh	r0, [r7, #6]
 8003906:	893a      	ldrh	r2, [r7, #8]
 8003908:	8979      	ldrh	r1, [r7, #10]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	4603      	mov	r3, r0
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f913 	bl	8003b40 <I2C_RequestMemoryRead>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0ad      	b.n	8003a88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2bff      	cmp	r3, #255	; 0xff
 8003934:	d90e      	bls.n	8003954 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	22ff      	movs	r2, #255	; 0xff
 800393a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	b2da      	uxtb	r2, r3
 8003942:	8979      	ldrh	r1, [r7, #10]
 8003944:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <HAL_I2C_Mem_Read+0x22c>)
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fa91 	bl	8003e74 <I2C_TransferConfig>
 8003952:	e00f      	b.n	8003974 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	b2da      	uxtb	r2, r3
 8003964:	8979      	ldrh	r1, [r7, #10]
 8003966:	4b4a      	ldr	r3, [pc, #296]	; (8003a90 <HAL_I2C_Mem_Read+0x22c>)
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fa80 	bl	8003e74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	2200      	movs	r2, #0
 800397c:	2104      	movs	r1, #4
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f956 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e07c      	b.n	8003a88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d034      	beq.n	8003a34 <HAL_I2C_Mem_Read+0x1d0>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d130      	bne.n	8003a34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	2200      	movs	r2, #0
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f927 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e04d      	b.n	8003a88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2bff      	cmp	r3, #255	; 0xff
 80039f4:	d90e      	bls.n	8003a14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	22ff      	movs	r2, #255	; 0xff
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	8979      	ldrh	r1, [r7, #10]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fa31 	bl	8003e74 <I2C_TransferConfig>
 8003a12:	e00f      	b.n	8003a34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	8979      	ldrh	r1, [r7, #10]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fa20 	bl	8003e74 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d19a      	bne.n	8003974 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f974 	bl	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e01a      	b.n	8003a88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2220      	movs	r2, #32
 8003a58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_I2C_Mem_Read+0x230>)
 8003a66:	400b      	ands	r3, r1
 8003a68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
  }
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	80002400 	.word	0x80002400
 8003a94:	fe00e800 	.word	0xfe00e800

08003a98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <I2C_RequestMemoryWrite+0xa4>)
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f9d7 	bl	8003e74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	69b9      	ldr	r1, [r7, #24]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f8f0 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e02c      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae0:	893b      	ldrh	r3, [r7, #8]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
 8003aea:	e015      	b.n	8003b18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f8d6 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e012      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f884 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	80002000 	.word	0x80002000

08003b40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	817b      	strh	r3, [r7, #10]
 8003b52:	460b      	mov	r3, r1
 8003b54:	813b      	strh	r3, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	8979      	ldrh	r1, [r7, #10]
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <I2C_RequestMemoryRead+0xa4>)
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	2300      	movs	r3, #0
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f984 	bl	8003e74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	69b9      	ldr	r1, [r7, #24]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f89d 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e02c      	b.n	8003bda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b86:	893b      	ldrh	r3, [r7, #8]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b90:	e015      	b.n	8003bbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b92:	893b      	ldrh	r3, [r7, #8]
 8003b94:	0a1b      	lsrs	r3, r3, #8
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f883 	bl	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e012      	b.n	8003bda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2140      	movs	r1, #64	; 0x40
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f831 	bl	8003c30 <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	80002000 	.word	0x80002000

08003be8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d103      	bne.n	8003c06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2200      	movs	r2, #0
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d007      	beq.n	8003c24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699a      	ldr	r2, [r3, #24]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	619a      	str	r2, [r3, #24]
  }
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c40:	e022      	b.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d01e      	beq.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fe ff3b 	bl	8002ac4 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d113      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e00f      	b.n	8003ca8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d0cd      	beq.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cbc:	e02c      	b.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f870 	bl	8003da8 <I2C_IsAcknowledgeFailed>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e02a      	b.n	8003d28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d01e      	beq.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cda:	f7fe fef3 	bl	8002ac4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d302      	bcc.n	8003cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d113      	bne.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf4:	f043 0220 	orr.w	r2, r3, #32
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e007      	b.n	8003d28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d1cb      	bne.n	8003cbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3c:	e028      	b.n	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f830 	bl	8003da8 <I2C_IsAcknowledgeFailed>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e026      	b.n	8003da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d52:	f7fe feb7 	bl	8002ac4 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d113      	bne.n	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e007      	b.n	8003da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d1cf      	bne.n	8003d3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d151      	bne.n	8003e66 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc2:	e022      	b.n	8003e0a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dca:	d01e      	beq.n	8003e0a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dcc:	f7fe fe7a 	bl	8002ac4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d302      	bcc.n	8003de2 <I2C_IsAcknowledgeFailed+0x3a>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d113      	bne.n	8003e0a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e02e      	b.n	8003e68 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d1d5      	bne.n	8003dc4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2220      	movs	r2, #32
 8003e26:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff fedd 	bl	8003be8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	fe00e800 	.word	0xfe00e800

08003e74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	817b      	strh	r3, [r7, #10]
 8003e82:	4613      	mov	r3, r2
 8003e84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	0d5b      	lsrs	r3, r3, #21
 8003e90:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <I2C_TransferConfig+0x58>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	ea02 0103 	and.w	r1, r2, r3
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ea4:	7a7b      	ldrb	r3, [r7, #9]
 8003ea6:	041b      	lsls	r3, r3, #16
 8003ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	03ff63ff 	.word	0x03ff63ff

08003ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d138      	bne.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e032      	b.n	8003f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d139      	bne.n	8003ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e033      	b.n	8003ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2224      	movs	r2, #36	; 0x24
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e000      	b.n	8003ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004000:	b08f      	sub	sp, #60	; 0x3c
 8004002:	af0a      	add	r7, sp, #40	; 0x28
 8004004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e116      	b.n	800423e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe f84a 	bl	80020c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2203      	movs	r2, #3
 8004034:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d102      	bne.n	800404a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f002 fda5 	bl	8006b9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	687e      	ldr	r6, [r7, #4]
 800405c:	466d      	mov	r5, sp
 800405e:	f106 0410 	add.w	r4, r6, #16
 8004062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800406a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800406e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004072:	1d33      	adds	r3, r6, #4
 8004074:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004076:	6838      	ldr	r0, [r7, #0]
 8004078:	f002 fd3f 	bl	8006afa <USB_CoreInit>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d005      	beq.n	800408e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0d7      	b.n	800423e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f002 fd93 	bl	8006bc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	e04a      	b.n	8004136 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	333d      	adds	r3, #61	; 0x3d
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040b4:	7bfa      	ldrb	r2, [r7, #15]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	333c      	adds	r3, #60	; 0x3c
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	b298      	uxth	r0, r3
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	3342      	adds	r3, #66	; 0x42
 80040dc:	4602      	mov	r2, r0
 80040de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040e0:	7bfa      	ldrb	r2, [r7, #15]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	333f      	adds	r3, #63	; 0x3f
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	3344      	adds	r3, #68	; 0x44
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3348      	adds	r3, #72	; 0x48
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3350      	adds	r3, #80	; 0x50
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	3301      	adds	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
 8004136:	7bfa      	ldrb	r2, [r7, #15]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	d3af      	bcc.n	80040a0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e044      	b.n	80041d0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800415c:	7bfa      	ldrb	r2, [r7, #15]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041b4:	7bfa      	ldrb	r2, [r7, #15]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	3301      	adds	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d3b5      	bcc.n	8004146 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	687e      	ldr	r6, [r7, #4]
 80041e2:	466d      	mov	r5, sp
 80041e4:	f106 0410 	add.w	r4, r6, #16
 80041e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80041f8:	1d33      	adds	r3, r6, #4
 80041fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041fc:	6838      	ldr	r0, [r7, #0]
 80041fe:	f002 fd09 	bl	8006c14 <USB_DevInit>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e014      	b.n	800423e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	2b01      	cmp	r3, #1
 800422a:	d102      	bne.n	8004232 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f80a 	bl	8004246 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f002 fe8f 	bl	8006f5a <USB_DevDisconnect>

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004246 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004246:	b480      	push	{r7}
 8004248:	b085      	sub	sp, #20
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	f043 0303 	orr.w	r3, r3, #3
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a04      	ldr	r2, [pc, #16]	; (80042ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800429a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40007000 	.word	0x40007000

080042b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40007000 	.word	0x40007000

080042cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042da:	d130      	bne.n	800433e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042dc:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e8:	d038      	beq.n	800435c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042f2:	4a1e      	ldr	r2, [pc, #120]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2232      	movs	r2, #50	; 0x32
 8004300:	fb02 f303 	mul.w	r3, r2, r3
 8004304:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0c9b      	lsrs	r3, r3, #18
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004310:	e002      	b.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3b01      	subs	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004324:	d102      	bne.n	800432c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f2      	bne.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d110      	bne.n	800435c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e00f      	b.n	800435e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434a:	d007      	beq.n	800435c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004354:	4a05      	ldr	r2, [pc, #20]	; (800436c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800435a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40007000 	.word	0x40007000
 8004370:	200000bc 	.word	0x200000bc
 8004374:	431bde83 	.word	0x431bde83

08004378 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_PWREx_EnableVddUSB+0x1c>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004386:	6053      	str	r3, [r2, #4]
}
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40007000 	.word	0x40007000

08004398 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af02      	add	r7, sp, #8
 800439e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80043a0:	f7fe fb90 	bl	8002ac4 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e06f      	b.n	8004490 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_QSPI_Init+0x28>
 80043bc:	2302      	movs	r3, #2
 80043be:	e067      	b.n	8004490 <HAL_QSPI_Init+0xf8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7fd fd73 	bl	8001ec8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80043e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f858 	bl	800449c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	021a      	lsls	r2, r3, #8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	2120      	movs	r1, #32
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f850 	bl	80044b8 <QSPI_WaitFlagStateUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800441c:	7afb      	ldrb	r3, [r7, #11]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d131      	bne.n	8004486 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800442c:	f023 0310 	bic.w	r3, r3, #16
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6852      	ldr	r2, [r2, #4]
 8004434:	0611      	lsls	r1, r2, #24
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68d2      	ldr	r2, [r2, #12]
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	430b      	orrs	r3, r1
 8004442:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_QSPI_Init+0x100>)
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6912      	ldr	r2, [r2, #16]
 8004452:	0411      	lsls	r1, r2, #16
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6952      	ldr	r2, [r2, #20]
 8004458:	4311      	orrs	r1, r2
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6992      	ldr	r2, [r2, #24]
 800445e:	4311      	orrs	r1, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	430b      	orrs	r3, r1
 8004466:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800448e:	7afb      	ldrb	r3, [r7, #11]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	ffe0f8fe 	.word	0xffe0f8fe

0800449c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80044c8:	e01a      	b.n	8004500 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d016      	beq.n	8004500 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fe faf7 	bl	8002ac4 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2204      	movs	r2, #4
 80044ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e00e      	b.n	800451e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf14      	ite	ne
 800450e:	2301      	movne	r3, #1
 8004510:	2300      	moveq	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	429a      	cmp	r2, r3
 800451a:	d1d6      	bne.n	80044ca <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e39d      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800453a:	4ba4      	ldr	r3, [pc, #656]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004544:	4ba1      	ldr	r3, [pc, #644]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80e1 	beq.w	800471e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <HAL_RCC_OscConfig+0x4a>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	f040 8088 	bne.w	800467a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b01      	cmp	r3, #1
 800456e:	f040 8084 	bne.w	800467a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004572:	4b96      	ldr	r3, [pc, #600]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_RCC_OscConfig+0x62>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e375      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1a      	ldr	r2, [r3, #32]
 800458e:	4b8f      	ldr	r3, [pc, #572]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d004      	beq.n	80045a4 <HAL_RCC_OscConfig+0x7c>
 800459a:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a2:	e005      	b.n	80045b0 <HAL_RCC_OscConfig+0x88>
 80045a4:	4b89      	ldr	r3, [pc, #548]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80045a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d223      	bcs.n	80045fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fd3b 	bl	8005034 <RCC_SetFlashLatencyFromMSIRange>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e356      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045c8:	4b80      	ldr	r3, [pc, #512]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7f      	ldr	r2, [pc, #508]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80045ce:	f043 0308 	orr.w	r3, r3, #8
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	4b7d      	ldr	r3, [pc, #500]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	497a      	ldr	r1, [pc, #488]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045e6:	4b79      	ldr	r3, [pc, #484]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	4975      	ldr	r1, [pc, #468]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	604b      	str	r3, [r1, #4]
 80045fa:	e022      	b.n	8004642 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045fc:	4b73      	ldr	r3, [pc, #460]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a72      	ldr	r2, [pc, #456]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004602:	f043 0308 	orr.w	r3, r3, #8
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b70      	ldr	r3, [pc, #448]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	496d      	ldr	r1, [pc, #436]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800461a:	4b6c      	ldr	r3, [pc, #432]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	4968      	ldr	r1, [pc, #416]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fcfe 	bl	8005034 <RCC_SetFlashLatencyFromMSIRange>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e319      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004642:	f000 fc03 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8004646:	4601      	mov	r1, r0
 8004648:	4b60      	ldr	r3, [pc, #384]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	4a5f      	ldr	r2, [pc, #380]	; (80047d0 <HAL_RCC_OscConfig+0x2a8>)
 8004654:	5cd3      	ldrb	r3, [r2, r3]
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	fa21 f303 	lsr.w	r3, r1, r3
 800465e:	4a5d      	ldr	r2, [pc, #372]	; (80047d4 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004662:	4b5d      	ldr	r3, [pc, #372]	; (80047d8 <HAL_RCC_OscConfig+0x2b0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd fd98 	bl	800219c <HAL_InitTick>
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d052      	beq.n	800471c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	e2fd      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d032      	beq.n	80046e8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004682:	4b52      	ldr	r3, [pc, #328]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a51      	ldr	r2, [pc, #324]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800468e:	f7fe fa19 	bl	8002ac4 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004696:	f7fe fa15 	bl	8002ac4 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e2e6      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046a8:	4b48      	ldr	r3, [pc, #288]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b4:	4b45      	ldr	r3, [pc, #276]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a44      	ldr	r2, [pc, #272]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046ba:	f043 0308 	orr.w	r3, r3, #8
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b42      	ldr	r3, [pc, #264]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	493f      	ldr	r1, [pc, #252]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d2:	4b3e      	ldr	r3, [pc, #248]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	493a      	ldr	r1, [pc, #232]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	604b      	str	r3, [r1, #4]
 80046e6:	e01a      	b.n	800471e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046e8:	4b38      	ldr	r3, [pc, #224]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a37      	ldr	r2, [pc, #220]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046f4:	f7fe f9e6 	bl	8002ac4 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046fc:	f7fe f9e2 	bl	8002ac4 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e2b3      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800470e:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x1d4>
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800471c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d074      	beq.n	8004814 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d005      	beq.n	800473c <HAL_RCC_OscConfig+0x214>
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d10e      	bne.n	8004754 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d10b      	bne.n	8004754 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473c:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d064      	beq.n	8004812 <HAL_RCC_OscConfig+0x2ea>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d160      	bne.n	8004812 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e290      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475c:	d106      	bne.n	800476c <HAL_RCC_OscConfig+0x244>
 800475e:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e01d      	b.n	80047a8 <HAL_RCC_OscConfig+0x280>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004774:	d10c      	bne.n	8004790 <HAL_RCC_OscConfig+0x268>
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a14      	ldr	r2, [pc, #80]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800477c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4b12      	ldr	r3, [pc, #72]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a11      	ldr	r2, [pc, #68]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0x280>
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 8004796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <HAL_RCC_OscConfig+0x2a4>)
 80047a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01c      	beq.n	80047ea <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fe f988 	bl	8002ac4 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b6:	e011      	b.n	80047dc <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b8:	f7fe f984 	bl	8002ac4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b64      	cmp	r3, #100	; 0x64
 80047c4:	d90a      	bls.n	80047dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e255      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	0800c238 	.word	0x0800c238
 80047d4:	200000bc 	.word	0x200000bc
 80047d8:	200000dc 	.word	0x200000dc
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047dc:	4bae      	ldr	r3, [pc, #696]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0e7      	beq.n	80047b8 <HAL_RCC_OscConfig+0x290>
 80047e8:	e014      	b.n	8004814 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fe f96b 	bl	8002ac4 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f2:	f7fe f967 	bl	8002ac4 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	; 0x64
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e238      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004804:	4ba4      	ldr	r3, [pc, #656]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x2ca>
 8004810:	e000      	b.n	8004814 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004812:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d060      	beq.n	80048e2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d005      	beq.n	8004832 <HAL_RCC_OscConfig+0x30a>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b0c      	cmp	r3, #12
 800482a:	d119      	bne.n	8004860 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d116      	bne.n	8004860 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004832:	4b99      	ldr	r3, [pc, #612]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_RCC_OscConfig+0x322>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e215      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484a:	4b93      	ldr	r3, [pc, #588]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	061b      	lsls	r3, r3, #24
 8004858:	498f      	ldr	r1, [pc, #572]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800485e:	e040      	b.n	80048e2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d023      	beq.n	80048b0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004868:	4b8b      	ldr	r3, [pc, #556]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a8a      	ldr	r2, [pc, #552]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 800486e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fe f926 	bl	8002ac4 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487c:	f7fe f922 	bl	8002ac4 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1f3      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800488e:	4b82      	ldr	r3, [pc, #520]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489a:	4b7f      	ldr	r3, [pc, #508]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	497b      	ldr	r1, [pc, #492]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
 80048ae:	e018      	b.n	80048e2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b0:	4b79      	ldr	r3, [pc, #484]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a78      	ldr	r2, [pc, #480]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80048b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe f902 	bl	8002ac4 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c4:	f7fe f8fe 	bl	8002ac4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1cf      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048d6:	4b70      	ldr	r3, [pc, #448]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d03c      	beq.n	8004968 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01c      	beq.n	8004930 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f6:	4b68      	ldr	r3, [pc, #416]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80048f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fc:	4a66      	ldr	r2, [pc, #408]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004906:	f7fe f8dd 	bl	8002ac4 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490e:	f7fe f8d9 	bl	8002ac4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1aa      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004920:	4b5d      	ldr	r3, [pc, #372]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0ef      	beq.n	800490e <HAL_RCC_OscConfig+0x3e6>
 800492e:	e01b      	b.n	8004968 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004936:	4a58      	ldr	r2, [pc, #352]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fe f8c0 	bl	8002ac4 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004948:	f7fe f8bc 	bl	8002ac4 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e18d      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800495a:	4b4f      	ldr	r3, [pc, #316]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 800495c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ef      	bne.n	8004948 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a5 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800497a:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10d      	bne.n	80049a2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004986:	4b44      	ldr	r3, [pc, #272]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	4a43      	ldr	r2, [pc, #268]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 800498c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004990:	6593      	str	r3, [r2, #88]	; 0x58
 8004992:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499a:	60bb      	str	r3, [r7, #8]
 800499c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499e:	2301      	movs	r3, #1
 80049a0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a2:	4b3e      	ldr	r3, [pc, #248]	; (8004a9c <HAL_RCC_OscConfig+0x574>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d118      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ae:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_RCC_OscConfig+0x574>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a3a      	ldr	r2, [pc, #232]	; (8004a9c <HAL_RCC_OscConfig+0x574>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ba:	f7fe f883 	bl	8002ac4 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c2:	f7fe f87f 	bl	8002ac4 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e150      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d4:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_OscConfig+0x574>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d108      	bne.n	80049fa <HAL_RCC_OscConfig+0x4d2>
 80049e8:	4b2b      	ldr	r3, [pc, #172]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	4a2a      	ldr	r2, [pc, #168]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f8:	e024      	b.n	8004a44 <HAL_RCC_OscConfig+0x51c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	d110      	bne.n	8004a24 <HAL_RCC_OscConfig+0x4fc>
 8004a02:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a12:	4b21      	ldr	r3, [pc, #132]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	4a1f      	ldr	r2, [pc, #124]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a22:	e00f      	b.n	8004a44 <HAL_RCC_OscConfig+0x51c>
 8004a24:	4b1c      	ldr	r3, [pc, #112]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a34:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	4a17      	ldr	r2, [pc, #92]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d016      	beq.n	8004a7a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fe f83a 	bl	8002ac4 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a54:	f7fe f836 	bl	8002ac4 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e105      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_OscConfig+0x570>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ed      	beq.n	8004a54 <HAL_RCC_OscConfig+0x52c>
 8004a78:	e019      	b.n	8004aae <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fe f823 	bl	8002ac4 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a80:	e00e      	b.n	8004aa0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a82:	f7fe f81f 	bl	8002ac4 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d905      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e0ee      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004aa0:	4b77      	ldr	r3, [pc, #476]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e9      	bne.n	8004a82 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aae:	7ffb      	ldrb	r3, [r7, #31]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab4:	4b72      	ldr	r3, [pc, #456]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab8:	4a71      	ldr	r2, [pc, #452]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004abe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80d5 	beq.w	8004c74 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	f000 808e 	beq.w	8004bee <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d15b      	bne.n	8004b92 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b69      	ldr	r3, [pc, #420]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a68      	ldr	r2, [pc, #416]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae6:	f7fd ffed 	bl	8002ac4 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aee:	f7fd ffe9 	bl	8002ac4 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0ba      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b00:	4b5f      	ldr	r3, [pc, #380]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b0c:	4b5c      	ldr	r3, [pc, #368]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	4b5c      	ldr	r3, [pc, #368]	; (8004c84 <HAL_RCC_OscConfig+0x75c>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b1c:	3a01      	subs	r2, #1
 8004b1e:	0112      	lsls	r2, r2, #4
 8004b20:	4311      	orrs	r1, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b26:	0212      	lsls	r2, r2, #8
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b2e:	0852      	lsrs	r2, r2, #1
 8004b30:	3a01      	subs	r2, #1
 8004b32:	0552      	lsls	r2, r2, #21
 8004b34:	4311      	orrs	r1, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b3a:	0852      	lsrs	r2, r2, #1
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	0652      	lsls	r2, r2, #25
 8004b40:	4311      	orrs	r1, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b46:	0912      	lsrs	r2, r2, #4
 8004b48:	0452      	lsls	r2, r2, #17
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	494c      	ldr	r1, [pc, #304]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b52:	4b4b      	ldr	r3, [pc, #300]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a4a      	ldr	r2, [pc, #296]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b5e:	4b48      	ldr	r3, [pc, #288]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	4a47      	ldr	r2, [pc, #284]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b68:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7fd ffab 	bl	8002ac4 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b72:	f7fd ffa7 	bl	8002ac4 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e078      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b84:	4b3e      	ldr	r3, [pc, #248]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x64a>
 8004b90:	e070      	b.n	8004c74 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b92:	4b3b      	ldr	r3, [pc, #236]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a3a      	ldr	r2, [pc, #232]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004baa:	4b35      	ldr	r3, [pc, #212]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	4a34      	ldr	r2, [pc, #208]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004bb0:	f023 0303 	bic.w	r3, r3, #3
 8004bb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bb6:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	4a31      	ldr	r2, [pc, #196]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004bbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fd ff7d 	bl	8002ac4 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bce:	f7fd ff79 	bl	8002ac4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e04a      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <HAL_RCC_OscConfig+0x6a6>
 8004bec:	e042      	b.n	8004c74 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e03d      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004bfa:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <HAL_RCC_OscConfig+0x758>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0203 	and.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d130      	bne.n	8004c70 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d127      	bne.n	8004c70 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d11f      	bne.n	8004c70 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c3a:	2a07      	cmp	r2, #7
 8004c3c:	bf14      	ite	ne
 8004c3e:	2201      	movne	r2, #1
 8004c40:	2200      	moveq	r2, #0
 8004c42:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d113      	bne.n	8004c70 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	3b01      	subs	r3, #1
 8004c56:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d109      	bne.n	8004c70 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	f99d808c 	.word	0xf99d808c

08004c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0c8      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c9c:	4b66      	ldr	r3, [pc, #408]	; (8004e38 <HAL_RCC_ClockConfig+0x1b0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d910      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <HAL_RCC_ClockConfig+0x1b0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 0207 	bic.w	r2, r3, #7
 8004cb2:	4961      	ldr	r1, [pc, #388]	; (8004e38 <HAL_RCC_ClockConfig+0x1b0>)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b5f      	ldr	r3, [pc, #380]	; (8004e38 <HAL_RCC_ClockConfig+0x1b0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0b0      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d04c      	beq.n	8004d72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce0:	4b56      	ldr	r3, [pc, #344]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d121      	bne.n	8004d30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e09e      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cf8:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d115      	bne.n	8004d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e092      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d10:	4b4a      	ldr	r3, [pc, #296]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d109      	bne.n	8004d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e086      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d20:	4b46      	ldr	r3, [pc, #280]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e07e      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d30:	4b42      	ldr	r3, [pc, #264]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f023 0203 	bic.w	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	493f      	ldr	r1, [pc, #252]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d42:	f7fd febf 	bl	8002ac4 <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d48:	e00a      	b.n	8004d60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d4a:	f7fd febb 	bl	8002ac4 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e066      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d60:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 020c 	and.w	r2, r3, #12
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d1eb      	bne.n	8004d4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d7e:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	492c      	ldr	r1, [pc, #176]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	4b29      	ldr	r3, [pc, #164]	; (8004e38 <HAL_RCC_ClockConfig+0x1b0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d210      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <HAL_RCC_ClockConfig+0x1b0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 0207 	bic.w	r2, r3, #7
 8004da6:	4924      	ldr	r1, [pc, #144]	; (8004e38 <HAL_RCC_ClockConfig+0x1b0>)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_RCC_ClockConfig+0x1b0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e036      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4918      	ldr	r1, [pc, #96]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4910      	ldr	r1, [pc, #64]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dfe:	f000 f825 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8004e02:	4601      	mov	r1, r0
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <HAL_RCC_ClockConfig+0x1b4>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	5cd3      	ldrb	r3, [r2, r3]
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	fa21 f303 	lsr.w	r3, r1, r3
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <HAL_RCC_ClockConfig+0x1c0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd f9ba 	bl	800219c <HAL_InitTick>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e2c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40022000 	.word	0x40022000
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	0800c238 	.word	0x0800c238
 8004e44:	200000bc 	.word	0x200000bc
 8004e48:	200000dc 	.word	0x200000dc

08004e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b089      	sub	sp, #36	; 0x24
 8004e50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e5a:	4b3d      	ldr	r3, [pc, #244]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e64:	4b3a      	ldr	r3, [pc, #232]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_GetSysClockFreq+0x34>
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b0c      	cmp	r3, #12
 8004e78:	d121      	bne.n	8004ebe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d11e      	bne.n	8004ebe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e80:	4b33      	ldr	r3, [pc, #204]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e8c:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ea8:	4a2a      	ldr	r2, [pc, #168]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10d      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d102      	bne.n	8004eca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e004      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ed0:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ed2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d133      	bne.n	8004f42 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eda:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d002      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004eee:	e005      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ef2:	617b      	str	r3, [r7, #20]
      break;
 8004ef4:	e005      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ef6:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ef8:	617b      	str	r3, [r7, #20]
      break;
 8004efa:	e002      	b.n	8004f02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	617b      	str	r3, [r7, #20]
      break;
 8004f00:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	fb02 f203 	mul.w	r2, r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f28:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	0e5b      	lsrs	r3, r3, #25
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f42:	69bb      	ldr	r3, [r7, #24]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3724      	adds	r7, #36	; 0x24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40021000 	.word	0x40021000
 8004f54:	0800c250 	.word	0x0800c250
 8004f58:	00f42400 	.word	0x00f42400
 8004f5c:	007a1200 	.word	0x007a1200

08004f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f64:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f66:	681b      	ldr	r3, [r3, #0]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	200000bc 	.word	0x200000bc

08004f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f7c:	f7ff fff0 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004f80:	4601      	mov	r1, r0
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f8e:	5cd3      	ldrb	r3, [r2, r3]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	0800c248 	.word	0x0800c248

08004fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fa8:	f7ff ffda 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004fac:	4601      	mov	r1, r0
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	0adb      	lsrs	r3, r3, #11
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fba:	5cd3      	ldrb	r3, [r2, r3]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40021000 	.word	0x40021000
 8004fcc:	0800c248 	.word	0x0800c248

08004fd0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	220f      	movs	r2, #15
 8004fde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004fe0:	4b12      	ldr	r3, [pc, #72]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0203 	and.w	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <HAL_RCC_GetClockConfig+0x60>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0207 	and.w	r2, r3, #7
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40021000 	.word	0x40021000
 8005030:	40022000 	.word	0x40022000

08005034 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005040:	4b2a      	ldr	r3, [pc, #168]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800504c:	f7ff f930 	bl	80042b0 <HAL_PWREx_GetVoltageRange>
 8005050:	6178      	str	r0, [r7, #20]
 8005052:	e014      	b.n	800507e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	4a24      	ldr	r2, [pc, #144]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800505a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505e:	6593      	str	r3, [r2, #88]	; 0x58
 8005060:	4b22      	ldr	r3, [pc, #136]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800506c:	f7ff f920 	bl	80042b0 <HAL_PWREx_GetVoltageRange>
 8005070:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005072:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005076:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005084:	d10b      	bne.n	800509e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b80      	cmp	r3, #128	; 0x80
 800508a:	d919      	bls.n	80050c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2ba0      	cmp	r3, #160	; 0xa0
 8005090:	d902      	bls.n	8005098 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005092:	2302      	movs	r3, #2
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	e013      	b.n	80050c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005098:	2301      	movs	r3, #1
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e010      	b.n	80050c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d902      	bls.n	80050aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050a4:	2303      	movs	r3, #3
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	e00a      	b.n	80050c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d102      	bne.n	80050b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050b0:	2302      	movs	r3, #2
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	e004      	b.n	80050c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b70      	cmp	r3, #112	; 0x70
 80050ba:	d101      	bne.n	80050c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050bc:	2301      	movs	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 0207 	bic.w	r2, r3, #7
 80050c8:	4909      	ldr	r1, [pc, #36]	; (80050f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d001      	beq.n	80050e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40022000 	.word	0x40022000

080050f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050fc:	2300      	movs	r3, #0
 80050fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005100:	2300      	movs	r3, #0
 8005102:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800510c:	2b00      	cmp	r3, #0
 800510e:	d03f      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005118:	d01c      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800511a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511e:	d802      	bhi.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00e      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005124:	e01f      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005126:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800512a:	d003      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800512c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005130:	d01c      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005132:	e018      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005134:	4b85      	ldr	r3, [pc, #532]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	4a84      	ldr	r2, [pc, #528]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005140:	e015      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fac9 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005152:	e00c      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3320      	adds	r3, #32
 8005158:	2100      	movs	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fbb0 	bl	80058c0 <RCCEx_PLLSAI2_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005164:	e003      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	74fb      	strb	r3, [r7, #19]
      break;
 800516a:	e000      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800516c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800516e:	7cfb      	ldrb	r3, [r7, #19]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10b      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005174:	4b75      	ldr	r3, [pc, #468]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005182:	4972      	ldr	r1, [pc, #456]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800518a:	e001      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d03f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051a4:	d01c      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80051a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051aa:	d802      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00e      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xda>
 80051b0:	e01f      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80051b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051b6:	d003      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80051b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051bc:	d01c      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80051be:	e018      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051c0:	4b62      	ldr	r3, [pc, #392]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a61      	ldr	r2, [pc, #388]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051cc:	e015      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3304      	adds	r3, #4
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fa83 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051de:	e00c      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3320      	adds	r3, #32
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fb6a 	bl	80058c0 <RCCEx_PLLSAI2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051f0:	e003      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	74fb      	strb	r3, [r7, #19]
      break;
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80051f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005200:	4b52      	ldr	r3, [pc, #328]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800520e:	494f      	ldr	r1, [pc, #316]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005216:	e001      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a0 	beq.w	800536a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800522e:	4b47      	ldr	r3, [pc, #284]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005244:	4b41      	ldr	r3, [pc, #260]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	4a40      	ldr	r2, [pc, #256]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800524a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524e:	6593      	str	r3, [r2, #88]	; 0x58
 8005250:	4b3e      	ldr	r3, [pc, #248]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525c:	2301      	movs	r3, #1
 800525e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005260:	4b3b      	ldr	r3, [pc, #236]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a3a      	ldr	r2, [pc, #232]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526c:	f7fd fc2a 	bl	8002ac4 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005272:	e009      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005274:	f7fd fc26 	bl	8002ac4 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d902      	bls.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	74fb      	strb	r3, [r7, #19]
        break;
 8005286:	e005      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005288:	4b31      	ldr	r3, [pc, #196]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ef      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d15c      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800529a:	4b2c      	ldr	r3, [pc, #176]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01f      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d019      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052b8:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c4:	4b21      	ldr	r3, [pc, #132]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	4a20      	ldr	r2, [pc, #128]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d4:	4b1d      	ldr	r3, [pc, #116]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	4a1c      	ldr	r2, [pc, #112]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e4:	4a19      	ldr	r2, [pc, #100]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f6:	f7fd fbe5 	bl	8002ac4 <HAL_GetTick>
 80052fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052fc:	e00b      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fe:	f7fd fbe1 	bl	8002ac4 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f241 3288 	movw	r2, #5000	; 0x1388
 800530c:	4293      	cmp	r3, r2
 800530e:	d902      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	74fb      	strb	r3, [r7, #19]
            break;
 8005314:	e006      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0ec      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10c      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533a:	4904      	ldr	r1, [pc, #16]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005342:	e009      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	74bb      	strb	r3, [r7, #18]
 8005348:	e006      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800534a:	bf00      	nop
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005358:	7c7b      	ldrb	r3, [r7, #17]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535e:	4b9e      	ldr	r3, [pc, #632]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	4a9d      	ldr	r2, [pc, #628]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005376:	4b98      	ldr	r3, [pc, #608]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f023 0203 	bic.w	r2, r3, #3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	4994      	ldr	r1, [pc, #592]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005398:	4b8f      	ldr	r3, [pc, #572]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f023 020c 	bic.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	498c      	ldr	r1, [pc, #560]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ba:	4b87      	ldr	r3, [pc, #540]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	4983      	ldr	r1, [pc, #524]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053dc:	4b7e      	ldr	r3, [pc, #504]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	497b      	ldr	r1, [pc, #492]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fe:	4b76      	ldr	r3, [pc, #472]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540c:	4972      	ldr	r1, [pc, #456]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005420:	4b6d      	ldr	r3, [pc, #436]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542e:	496a      	ldr	r1, [pc, #424]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005442:	4b65      	ldr	r3, [pc, #404]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005450:	4961      	ldr	r1, [pc, #388]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005464:	4b5c      	ldr	r3, [pc, #368]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005472:	4959      	ldr	r1, [pc, #356]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005486:	4b54      	ldr	r3, [pc, #336]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	4950      	ldr	r1, [pc, #320]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a8:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	4948      	ldr	r1, [pc, #288]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ca:	4b43      	ldr	r3, [pc, #268]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d8:	493f      	ldr	r1, [pc, #252]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d028      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054ec:	4b3a      	ldr	r3, [pc, #232]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054fa:	4937      	ldr	r1, [pc, #220]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800550a:	d106      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800550c:	4b32      	ldr	r3, [pc, #200]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4a31      	ldr	r2, [pc, #196]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005516:	60d3      	str	r3, [r2, #12]
 8005518:	e011      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005522:	d10c      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	2101      	movs	r1, #1
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f8d8 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 8005530:	4603      	mov	r3, r0
 8005532:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005534:	7cfb      	ldrb	r3, [r7, #19]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800553a:	7cfb      	ldrb	r3, [r7, #19]
 800553c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d028      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800554a:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005550:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005558:	491f      	ldr	r1, [pc, #124]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005568:	d106      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800556a:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005574:	60d3      	str	r3, [r2, #12]
 8005576:	e011      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005580:	d10c      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3304      	adds	r3, #4
 8005586:	2101      	movs	r1, #1
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f8a9 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02b      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b6:	4908      	ldr	r1, [pc, #32]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c6:	d109      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a02      	ldr	r2, [pc, #8]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d2:	60d3      	str	r3, [r2, #12]
 80055d4:	e014      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80055d6:	bf00      	nop
 80055d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	2101      	movs	r1, #1
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f877 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02f      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800560c:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561a:	4928      	ldr	r1, [pc, #160]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562a:	d10d      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	2102      	movs	r1, #2
 8005632:	4618      	mov	r0, r3
 8005634:	f000 f854 	bl	80056e0 <RCCEx_PLLSAI1_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d014      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	74bb      	strb	r3, [r7, #18]
 8005646:	e011      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800564c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005650:	d10c      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3320      	adds	r3, #32
 8005656:	2102      	movs	r1, #2
 8005658:	4618      	mov	r0, r3
 800565a:	f000 f931 	bl	80058c0 <RCCEx_PLLSAI2_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005686:	490d      	ldr	r1, [pc, #52]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800569a:	4b08      	ldr	r3, [pc, #32]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056aa:	4904      	ldr	r1, [pc, #16]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40021000 	.word	0x40021000

080056c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80056ca:	f043 0304 	orr.w	r3, r3, #4
 80056ce:	6013      	str	r3, [r2, #0]
}
 80056d0:	bf00      	nop
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40021000 	.word	0x40021000

080056e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ee:	4b73      	ldr	r3, [pc, #460]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056fa:	4b70      	ldr	r3, [pc, #448]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0203 	and.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d10d      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
       ||
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005712:	4b6a      	ldr	r3, [pc, #424]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	091b      	lsrs	r3, r3, #4
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
       ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d044      	beq.n	80057b0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
 800572a:	e041      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d00c      	beq.n	800574e <RCCEx_PLLSAI1_Config+0x6e>
 8005734:	2b03      	cmp	r3, #3
 8005736:	d013      	beq.n	8005760 <RCCEx_PLLSAI1_Config+0x80>
 8005738:	2b01      	cmp	r3, #1
 800573a:	d120      	bne.n	800577e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800573c:	4b5f      	ldr	r3, [pc, #380]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11d      	bne.n	8005784 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800574c:	e01a      	b.n	8005784 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800574e:	4b5b      	ldr	r3, [pc, #364]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800575e:	e013      	b.n	8005788 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005760:	4b56      	ldr	r3, [pc, #344]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10f      	bne.n	800578c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800576c:	4b53      	ldr	r3, [pc, #332]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800577c:	e006      	b.n	800578c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
      break;
 8005782:	e004      	b.n	800578e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005784:	bf00      	nop
 8005786:	e002      	b.n	800578e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800578c:	bf00      	nop
    }

    if(status == HAL_OK)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10d      	bne.n	80057b0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005794:	4b49      	ldr	r3, [pc, #292]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6819      	ldr	r1, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	430b      	orrs	r3, r1
 80057aa:	4944      	ldr	r1, [pc, #272]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d17d      	bne.n	80058b2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057b6:	4b41      	ldr	r3, [pc, #260]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a40      	ldr	r2, [pc, #256]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c2:	f7fd f97f 	bl	8002ac4 <HAL_GetTick>
 80057c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057c8:	e009      	b.n	80057de <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ca:	f7fd f97b 	bl	8002ac4 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d902      	bls.n	80057de <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	73fb      	strb	r3, [r7, #15]
        break;
 80057dc:	e005      	b.n	80057ea <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057de:	4b37      	ldr	r3, [pc, #220]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1ef      	bne.n	80057ca <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d160      	bne.n	80058b2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d111      	bne.n	800581a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057f6:	4b31      	ldr	r3, [pc, #196]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6892      	ldr	r2, [r2, #8]
 8005806:	0211      	lsls	r1, r2, #8
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68d2      	ldr	r2, [r2, #12]
 800580c:	0912      	lsrs	r2, r2, #4
 800580e:	0452      	lsls	r2, r2, #17
 8005810:	430a      	orrs	r2, r1
 8005812:	492a      	ldr	r1, [pc, #168]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	610b      	str	r3, [r1, #16]
 8005818:	e027      	b.n	800586a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d112      	bne.n	8005846 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005820:	4b26      	ldr	r3, [pc, #152]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005828:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6892      	ldr	r2, [r2, #8]
 8005830:	0211      	lsls	r1, r2, #8
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6912      	ldr	r2, [r2, #16]
 8005836:	0852      	lsrs	r2, r2, #1
 8005838:	3a01      	subs	r2, #1
 800583a:	0552      	lsls	r2, r2, #21
 800583c:	430a      	orrs	r2, r1
 800583e:	491f      	ldr	r1, [pc, #124]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005840:	4313      	orrs	r3, r2
 8005842:	610b      	str	r3, [r1, #16]
 8005844:	e011      	b.n	800586a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800584e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6892      	ldr	r2, [r2, #8]
 8005856:	0211      	lsls	r1, r2, #8
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6952      	ldr	r2, [r2, #20]
 800585c:	0852      	lsrs	r2, r2, #1
 800585e:	3a01      	subs	r2, #1
 8005860:	0652      	lsls	r2, r2, #25
 8005862:	430a      	orrs	r2, r1
 8005864:	4915      	ldr	r1, [pc, #84]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800586a:	4b14      	ldr	r3, [pc, #80]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a13      	ldr	r2, [pc, #76]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005874:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fd f925 	bl	8002ac4 <HAL_GetTick>
 800587a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800587c:	e009      	b.n	8005892 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800587e:	f7fd f921 	bl	8002ac4 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d902      	bls.n	8005892 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	73fb      	strb	r3, [r7, #15]
          break;
 8005890:	e005      	b.n	800589e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005892:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ef      	beq.n	800587e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d106      	bne.n	80058b2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	4903      	ldr	r1, [pc, #12]	; (80058bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40021000 	.word	0x40021000

080058c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ce:	4b68      	ldr	r3, [pc, #416]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058da:	4b65      	ldr	r3, [pc, #404]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0203 	and.w	r2, r3, #3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d10d      	bne.n	8005906 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
       ||
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	091b      	lsrs	r3, r3, #4
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
       ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d044      	beq.n	8005990 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	73fb      	strb	r3, [r7, #15]
 800590a:	e041      	b.n	8005990 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d00c      	beq.n	800592e <RCCEx_PLLSAI2_Config+0x6e>
 8005914:	2b03      	cmp	r3, #3
 8005916:	d013      	beq.n	8005940 <RCCEx_PLLSAI2_Config+0x80>
 8005918:	2b01      	cmp	r3, #1
 800591a:	d120      	bne.n	800595e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800591c:	4b54      	ldr	r3, [pc, #336]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11d      	bne.n	8005964 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800592c:	e01a      	b.n	8005964 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800592e:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593e:	e013      	b.n	8005968 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005940:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10f      	bne.n	800596c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800594c:	4b48      	ldr	r3, [pc, #288]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800595c:	e006      	b.n	800596c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
      break;
 8005962:	e004      	b.n	800596e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005964:	bf00      	nop
 8005966:	e002      	b.n	800596e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005968:	bf00      	nop
 800596a:	e000      	b.n	800596e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800596c:	bf00      	nop
    }

    if(status == HAL_OK)
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10d      	bne.n	8005990 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005974:	4b3e      	ldr	r3, [pc, #248]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	3b01      	subs	r3, #1
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	430b      	orrs	r3, r1
 800598a:	4939      	ldr	r1, [pc, #228]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 800598c:	4313      	orrs	r3, r2
 800598e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d167      	bne.n	8005a66 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005996:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a35      	ldr	r2, [pc, #212]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 800599c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a2:	f7fd f88f 	bl	8002ac4 <HAL_GetTick>
 80059a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059a8:	e009      	b.n	80059be <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059aa:	f7fd f88b 	bl	8002ac4 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d902      	bls.n	80059be <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	73fb      	strb	r3, [r7, #15]
        break;
 80059bc:	e005      	b.n	80059ca <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059be:	4b2c      	ldr	r3, [pc, #176]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1ef      	bne.n	80059aa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d14a      	bne.n	8005a66 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d111      	bne.n	80059fa <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059d6:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6892      	ldr	r2, [r2, #8]
 80059e6:	0211      	lsls	r1, r2, #8
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68d2      	ldr	r2, [r2, #12]
 80059ec:	0912      	lsrs	r2, r2, #4
 80059ee:	0452      	lsls	r2, r2, #17
 80059f0:	430a      	orrs	r2, r1
 80059f2:	491f      	ldr	r1, [pc, #124]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	614b      	str	r3, [r1, #20]
 80059f8:	e011      	b.n	8005a1e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059fa:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6892      	ldr	r2, [r2, #8]
 8005a0a:	0211      	lsls	r1, r2, #8
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6912      	ldr	r2, [r2, #16]
 8005a10:	0852      	lsrs	r2, r2, #1
 8005a12:	3a01      	subs	r2, #1
 8005a14:	0652      	lsls	r2, r2, #25
 8005a16:	430a      	orrs	r2, r1
 8005a18:	4915      	ldr	r1, [pc, #84]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a1e:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2a:	f7fd f84b 	bl	8002ac4 <HAL_GetTick>
 8005a2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a30:	e009      	b.n	8005a46 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a32:	f7fd f847 	bl	8002ac4 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d902      	bls.n	8005a46 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	73fb      	strb	r3, [r7, #15]
          break;
 8005a44:	e005      	b.n	8005a52 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a46:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0ef      	beq.n	8005a32 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	4903      	ldr	r1, [pc, #12]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40021000 	.word	0x40021000

08005a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e07c      	b.n	8005b80 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7fc fa55 	bl	8001f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ac6:	d902      	bls.n	8005ace <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e002      	b.n	8005ad4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005adc:	d007      	beq.n	8005aee <HAL_SPI_Init+0x7a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ae6:	d002      	beq.n	8005aee <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005afe:	d903      	bls.n	8005b08 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	631a      	str	r2, [r3, #48]	; 0x30
 8005b06:	e002      	b.n	8005b0e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	ea42 0103 	orr.w	r1, r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	f003 0204 	and.w	r2, r3, #4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	ea42 0103 	orr.w	r1, r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e01d      	b.n	8005bd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f815 	bl	8005bde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3304      	adds	r3, #4
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	f000 f986 	bl	8005ed8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <HAL_TIM_Base_Start_IT+0x50>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b06      	cmp	r3, #6
 8005c1c:	d00b      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x42>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c24:	d007      	beq.n	8005c36 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	00010007 	.word	0x00010007

08005c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d122      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0202 	mvn.w	r2, #2
 8005c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f905 	bl	8005e9a <HAL_TIM_IC_CaptureCallback>
 8005c90:	e005      	b.n	8005c9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f8f7 	bl	8005e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f908 	bl	8005eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d122      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d11b      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0204 	mvn.w	r2, #4
 8005cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8db 	bl	8005e9a <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8cd 	bl	8005e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8de 	bl	8005eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0308 	and.w	r3, r3, #8
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d122      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d11b      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0208 	mvn.w	r2, #8
 8005d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2204      	movs	r2, #4
 8005d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f8b1 	bl	8005e9a <HAL_TIM_IC_CaptureCallback>
 8005d38:	e005      	b.n	8005d46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8a3 	bl	8005e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8b4 	bl	8005eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d122      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d11b      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f06f 0210 	mvn.w	r2, #16
 8005d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2208      	movs	r2, #8
 8005d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f887 	bl	8005e9a <HAL_TIM_IC_CaptureCallback>
 8005d8c:	e005      	b.n	8005d9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f879 	bl	8005e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f88a 	bl	8005eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10e      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d107      	bne.n	8005dcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0201 	mvn.w	r2, #1
 8005dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb ff96 	bl	8001cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d10e      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b80      	cmp	r3, #128	; 0x80
 8005de6:	d107      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f914 	bl	8006020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e06:	d10e      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	2b80      	cmp	r3, #128	; 0x80
 8005e14:	d107      	bne.n	8005e26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f907 	bl	8006034 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d10e      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d107      	bne.n	8005e52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f838 	bl	8005ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d10e      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d107      	bne.n	8005e7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f06f 0220 	mvn.w	r2, #32
 8005e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8c7 	bl	800600c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e7e:	bf00      	nop
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a40      	ldr	r2, [pc, #256]	; (8005fec <TIM_Base_SetConfig+0x114>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef6:	d00f      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a3d      	ldr	r2, [pc, #244]	; (8005ff0 <TIM_Base_SetConfig+0x118>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a3c      	ldr	r2, [pc, #240]	; (8005ff4 <TIM_Base_SetConfig+0x11c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a3b      	ldr	r2, [pc, #236]	; (8005ff8 <TIM_Base_SetConfig+0x120>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a3a      	ldr	r2, [pc, #232]	; (8005ffc <TIM_Base_SetConfig+0x124>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a2f      	ldr	r2, [pc, #188]	; (8005fec <TIM_Base_SetConfig+0x114>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01f      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f38:	d01b      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a2c      	ldr	r2, [pc, #176]	; (8005ff0 <TIM_Base_SetConfig+0x118>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d017      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a2b      	ldr	r2, [pc, #172]	; (8005ff4 <TIM_Base_SetConfig+0x11c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a2a      	ldr	r2, [pc, #168]	; (8005ff8 <TIM_Base_SetConfig+0x120>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00f      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a29      	ldr	r2, [pc, #164]	; (8005ffc <TIM_Base_SetConfig+0x124>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00b      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a28      	ldr	r2, [pc, #160]	; (8006000 <TIM_Base_SetConfig+0x128>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d007      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a27      	ldr	r2, [pc, #156]	; (8006004 <TIM_Base_SetConfig+0x12c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d003      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a26      	ldr	r2, [pc, #152]	; (8006008 <TIM_Base_SetConfig+0x130>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d108      	bne.n	8005f84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a10      	ldr	r2, [pc, #64]	; (8005fec <TIM_Base_SetConfig+0x114>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00f      	beq.n	8005fd0 <TIM_Base_SetConfig+0xf8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a12      	ldr	r2, [pc, #72]	; (8005ffc <TIM_Base_SetConfig+0x124>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00b      	beq.n	8005fd0 <TIM_Base_SetConfig+0xf8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a11      	ldr	r2, [pc, #68]	; (8006000 <TIM_Base_SetConfig+0x128>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d007      	beq.n	8005fd0 <TIM_Base_SetConfig+0xf8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a10      	ldr	r2, [pc, #64]	; (8006004 <TIM_Base_SetConfig+0x12c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d003      	beq.n	8005fd0 <TIM_Base_SetConfig+0xf8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a0f      	ldr	r2, [pc, #60]	; (8006008 <TIM_Base_SetConfig+0x130>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d103      	bne.n	8005fd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	615a      	str	r2, [r3, #20]
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40012c00 	.word	0x40012c00
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40013400 	.word	0x40013400
 8006000:	40014000 	.word	0x40014000
 8006004:	40014400 	.word	0x40014400
 8006008:	40014800 	.word	0x40014800

0800600c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e040      	b.n	80060dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7fb ffb4 	bl	8001fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2224      	movs	r2, #36	; 0x24
 8006074:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8c0 	bl	800620c <UART_SetConfig>
 800608c:	4603      	mov	r3, r0
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e022      	b.n	80060dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fbfc 	bl	800689c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fc83 	bl	80069e0 <UART_CheckIdleState>
 80060da:	4603      	mov	r3, r0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	; 0x28
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	4613      	mov	r3, r2
 80060f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	f040 8081 	bne.w	8006200 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_UART_Transmit+0x26>
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e079      	b.n	8006202 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_UART_Transmit+0x38>
 8006118:	2302      	movs	r3, #2
 800611a:	e072      	b.n	8006202 <HAL_UART_Transmit+0x11e>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2221      	movs	r2, #33	; 0x21
 800612e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006130:	f7fc fcc8 	bl	8002ac4 <HAL_GetTick>
 8006134:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614e:	d108      	bne.n	8006162 <HAL_UART_Transmit+0x7e>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	e003      	b.n	800616a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800616a:	e02d      	b.n	80061c8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2200      	movs	r2, #0
 8006174:	2180      	movs	r1, #128	; 0x80
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fc77 	bl	8006a6a <UART_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e03d      	b.n	8006202 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	881a      	ldrh	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006198:	b292      	uxth	r2, r2
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	3302      	adds	r3, #2
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e008      	b.n	80061b6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	b292      	uxth	r2, r2
 80061ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1cb      	bne.n	800616c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2200      	movs	r2, #0
 80061dc:	2140      	movs	r1, #64	; 0x40
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fc43 	bl	8006a6a <UART_WaitOnFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e009      	b.n	8006202 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2220      	movs	r2, #32
 80061f2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e000      	b.n	8006202 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006200:	2302      	movs	r3, #2
  }
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800620c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006210:	b088      	sub	sp, #32
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	4313      	orrs	r3, r2
 8006238:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4bac      	ldr	r3, [pc, #688]	; (80064f4 <UART_SetConfig+0x2e8>)
 8006242:	4013      	ands	r3, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	69f9      	ldr	r1, [r7, #28]
 800624a:	430b      	orrs	r3, r1
 800624c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4aa2      	ldr	r2, [pc, #648]	; (80064f8 <UART_SetConfig+0x2ec>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	4313      	orrs	r3, r2
 800627c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	430a      	orrs	r2, r1
 8006290:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a99      	ldr	r2, [pc, #612]	; (80064fc <UART_SetConfig+0x2f0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d121      	bne.n	80062e0 <UART_SetConfig+0xd4>
 800629c:	4b98      	ldr	r3, [pc, #608]	; (8006500 <UART_SetConfig+0x2f4>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d816      	bhi.n	80062d8 <UART_SetConfig+0xcc>
 80062aa:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <UART_SetConfig+0xa4>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062c1 	.word	0x080062c1
 80062b4:	080062cd 	.word	0x080062cd
 80062b8:	080062c7 	.word	0x080062c7
 80062bc:	080062d3 	.word	0x080062d3
 80062c0:	2301      	movs	r3, #1
 80062c2:	76fb      	strb	r3, [r7, #27]
 80062c4:	e0e8      	b.n	8006498 <UART_SetConfig+0x28c>
 80062c6:	2302      	movs	r3, #2
 80062c8:	76fb      	strb	r3, [r7, #27]
 80062ca:	e0e5      	b.n	8006498 <UART_SetConfig+0x28c>
 80062cc:	2304      	movs	r3, #4
 80062ce:	76fb      	strb	r3, [r7, #27]
 80062d0:	e0e2      	b.n	8006498 <UART_SetConfig+0x28c>
 80062d2:	2308      	movs	r3, #8
 80062d4:	76fb      	strb	r3, [r7, #27]
 80062d6:	e0df      	b.n	8006498 <UART_SetConfig+0x28c>
 80062d8:	2310      	movs	r3, #16
 80062da:	76fb      	strb	r3, [r7, #27]
 80062dc:	bf00      	nop
 80062de:	e0db      	b.n	8006498 <UART_SetConfig+0x28c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a87      	ldr	r2, [pc, #540]	; (8006504 <UART_SetConfig+0x2f8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d134      	bne.n	8006354 <UART_SetConfig+0x148>
 80062ea:	4b85      	ldr	r3, [pc, #532]	; (8006500 <UART_SetConfig+0x2f4>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d829      	bhi.n	800634c <UART_SetConfig+0x140>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <UART_SetConfig+0xf4>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006335 	.word	0x08006335
 8006304:	0800634d 	.word	0x0800634d
 8006308:	0800634d 	.word	0x0800634d
 800630c:	0800634d 	.word	0x0800634d
 8006310:	08006341 	.word	0x08006341
 8006314:	0800634d 	.word	0x0800634d
 8006318:	0800634d 	.word	0x0800634d
 800631c:	0800634d 	.word	0x0800634d
 8006320:	0800633b 	.word	0x0800633b
 8006324:	0800634d 	.word	0x0800634d
 8006328:	0800634d 	.word	0x0800634d
 800632c:	0800634d 	.word	0x0800634d
 8006330:	08006347 	.word	0x08006347
 8006334:	2300      	movs	r3, #0
 8006336:	76fb      	strb	r3, [r7, #27]
 8006338:	e0ae      	b.n	8006498 <UART_SetConfig+0x28c>
 800633a:	2302      	movs	r3, #2
 800633c:	76fb      	strb	r3, [r7, #27]
 800633e:	e0ab      	b.n	8006498 <UART_SetConfig+0x28c>
 8006340:	2304      	movs	r3, #4
 8006342:	76fb      	strb	r3, [r7, #27]
 8006344:	e0a8      	b.n	8006498 <UART_SetConfig+0x28c>
 8006346:	2308      	movs	r3, #8
 8006348:	76fb      	strb	r3, [r7, #27]
 800634a:	e0a5      	b.n	8006498 <UART_SetConfig+0x28c>
 800634c:	2310      	movs	r3, #16
 800634e:	76fb      	strb	r3, [r7, #27]
 8006350:	bf00      	nop
 8006352:	e0a1      	b.n	8006498 <UART_SetConfig+0x28c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a6b      	ldr	r2, [pc, #428]	; (8006508 <UART_SetConfig+0x2fc>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d120      	bne.n	80063a0 <UART_SetConfig+0x194>
 800635e:	4b68      	ldr	r3, [pc, #416]	; (8006500 <UART_SetConfig+0x2f4>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006364:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006368:	2b10      	cmp	r3, #16
 800636a:	d00f      	beq.n	800638c <UART_SetConfig+0x180>
 800636c:	2b10      	cmp	r3, #16
 800636e:	d802      	bhi.n	8006376 <UART_SetConfig+0x16a>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <UART_SetConfig+0x174>
 8006374:	e010      	b.n	8006398 <UART_SetConfig+0x18c>
 8006376:	2b20      	cmp	r3, #32
 8006378:	d005      	beq.n	8006386 <UART_SetConfig+0x17a>
 800637a:	2b30      	cmp	r3, #48	; 0x30
 800637c:	d009      	beq.n	8006392 <UART_SetConfig+0x186>
 800637e:	e00b      	b.n	8006398 <UART_SetConfig+0x18c>
 8006380:	2300      	movs	r3, #0
 8006382:	76fb      	strb	r3, [r7, #27]
 8006384:	e088      	b.n	8006498 <UART_SetConfig+0x28c>
 8006386:	2302      	movs	r3, #2
 8006388:	76fb      	strb	r3, [r7, #27]
 800638a:	e085      	b.n	8006498 <UART_SetConfig+0x28c>
 800638c:	2304      	movs	r3, #4
 800638e:	76fb      	strb	r3, [r7, #27]
 8006390:	e082      	b.n	8006498 <UART_SetConfig+0x28c>
 8006392:	2308      	movs	r3, #8
 8006394:	76fb      	strb	r3, [r7, #27]
 8006396:	e07f      	b.n	8006498 <UART_SetConfig+0x28c>
 8006398:	2310      	movs	r3, #16
 800639a:	76fb      	strb	r3, [r7, #27]
 800639c:	bf00      	nop
 800639e:	e07b      	b.n	8006498 <UART_SetConfig+0x28c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a59      	ldr	r2, [pc, #356]	; (800650c <UART_SetConfig+0x300>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d120      	bne.n	80063ec <UART_SetConfig+0x1e0>
 80063aa:	4b55      	ldr	r3, [pc, #340]	; (8006500 <UART_SetConfig+0x2f4>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d00f      	beq.n	80063d8 <UART_SetConfig+0x1cc>
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d802      	bhi.n	80063c2 <UART_SetConfig+0x1b6>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <UART_SetConfig+0x1c0>
 80063c0:	e010      	b.n	80063e4 <UART_SetConfig+0x1d8>
 80063c2:	2b80      	cmp	r3, #128	; 0x80
 80063c4:	d005      	beq.n	80063d2 <UART_SetConfig+0x1c6>
 80063c6:	2bc0      	cmp	r3, #192	; 0xc0
 80063c8:	d009      	beq.n	80063de <UART_SetConfig+0x1d2>
 80063ca:	e00b      	b.n	80063e4 <UART_SetConfig+0x1d8>
 80063cc:	2300      	movs	r3, #0
 80063ce:	76fb      	strb	r3, [r7, #27]
 80063d0:	e062      	b.n	8006498 <UART_SetConfig+0x28c>
 80063d2:	2302      	movs	r3, #2
 80063d4:	76fb      	strb	r3, [r7, #27]
 80063d6:	e05f      	b.n	8006498 <UART_SetConfig+0x28c>
 80063d8:	2304      	movs	r3, #4
 80063da:	76fb      	strb	r3, [r7, #27]
 80063dc:	e05c      	b.n	8006498 <UART_SetConfig+0x28c>
 80063de:	2308      	movs	r3, #8
 80063e0:	76fb      	strb	r3, [r7, #27]
 80063e2:	e059      	b.n	8006498 <UART_SetConfig+0x28c>
 80063e4:	2310      	movs	r3, #16
 80063e6:	76fb      	strb	r3, [r7, #27]
 80063e8:	bf00      	nop
 80063ea:	e055      	b.n	8006498 <UART_SetConfig+0x28c>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a47      	ldr	r2, [pc, #284]	; (8006510 <UART_SetConfig+0x304>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d124      	bne.n	8006440 <UART_SetConfig+0x234>
 80063f6:	4b42      	ldr	r3, [pc, #264]	; (8006500 <UART_SetConfig+0x2f4>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006404:	d012      	beq.n	800642c <UART_SetConfig+0x220>
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d802      	bhi.n	8006412 <UART_SetConfig+0x206>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <UART_SetConfig+0x214>
 8006410:	e012      	b.n	8006438 <UART_SetConfig+0x22c>
 8006412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006416:	d006      	beq.n	8006426 <UART_SetConfig+0x21a>
 8006418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800641c:	d009      	beq.n	8006432 <UART_SetConfig+0x226>
 800641e:	e00b      	b.n	8006438 <UART_SetConfig+0x22c>
 8006420:	2300      	movs	r3, #0
 8006422:	76fb      	strb	r3, [r7, #27]
 8006424:	e038      	b.n	8006498 <UART_SetConfig+0x28c>
 8006426:	2302      	movs	r3, #2
 8006428:	76fb      	strb	r3, [r7, #27]
 800642a:	e035      	b.n	8006498 <UART_SetConfig+0x28c>
 800642c:	2304      	movs	r3, #4
 800642e:	76fb      	strb	r3, [r7, #27]
 8006430:	e032      	b.n	8006498 <UART_SetConfig+0x28c>
 8006432:	2308      	movs	r3, #8
 8006434:	76fb      	strb	r3, [r7, #27]
 8006436:	e02f      	b.n	8006498 <UART_SetConfig+0x28c>
 8006438:	2310      	movs	r3, #16
 800643a:	76fb      	strb	r3, [r7, #27]
 800643c:	bf00      	nop
 800643e:	e02b      	b.n	8006498 <UART_SetConfig+0x28c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2c      	ldr	r2, [pc, #176]	; (80064f8 <UART_SetConfig+0x2ec>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d124      	bne.n	8006494 <UART_SetConfig+0x288>
 800644a:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <UART_SetConfig+0x2f4>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006450:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006458:	d012      	beq.n	8006480 <UART_SetConfig+0x274>
 800645a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645e:	d802      	bhi.n	8006466 <UART_SetConfig+0x25a>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <UART_SetConfig+0x268>
 8006464:	e012      	b.n	800648c <UART_SetConfig+0x280>
 8006466:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800646a:	d006      	beq.n	800647a <UART_SetConfig+0x26e>
 800646c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006470:	d009      	beq.n	8006486 <UART_SetConfig+0x27a>
 8006472:	e00b      	b.n	800648c <UART_SetConfig+0x280>
 8006474:	2300      	movs	r3, #0
 8006476:	76fb      	strb	r3, [r7, #27]
 8006478:	e00e      	b.n	8006498 <UART_SetConfig+0x28c>
 800647a:	2302      	movs	r3, #2
 800647c:	76fb      	strb	r3, [r7, #27]
 800647e:	e00b      	b.n	8006498 <UART_SetConfig+0x28c>
 8006480:	2304      	movs	r3, #4
 8006482:	76fb      	strb	r3, [r7, #27]
 8006484:	e008      	b.n	8006498 <UART_SetConfig+0x28c>
 8006486:	2308      	movs	r3, #8
 8006488:	76fb      	strb	r3, [r7, #27]
 800648a:	e005      	b.n	8006498 <UART_SetConfig+0x28c>
 800648c:	2310      	movs	r3, #16
 800648e:	76fb      	strb	r3, [r7, #27]
 8006490:	bf00      	nop
 8006492:	e001      	b.n	8006498 <UART_SetConfig+0x28c>
 8006494:	2310      	movs	r3, #16
 8006496:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <UART_SetConfig+0x2ec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	f040 80fa 	bne.w	8006698 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064a4:	7efb      	ldrb	r3, [r7, #27]
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d836      	bhi.n	8006518 <UART_SetConfig+0x30c>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x2a4>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	08006519 	.word	0x08006519
 80064b8:	080064dd 	.word	0x080064dd
 80064bc:	08006519 	.word	0x08006519
 80064c0:	080064e3 	.word	0x080064e3
 80064c4:	08006519 	.word	0x08006519
 80064c8:	08006519 	.word	0x08006519
 80064cc:	08006519 	.word	0x08006519
 80064d0:	080064eb 	.word	0x080064eb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fe fd50 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80064d8:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80064da:	e020      	b.n	800651e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80064dc:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <UART_SetConfig+0x308>)
 80064de:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80064e0:	e01d      	b.n	800651e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80064e2:	f7fe fcb3 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 80064e6:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80064e8:	e019      	b.n	800651e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ee:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80064f0:	e015      	b.n	800651e <UART_SetConfig+0x312>
 80064f2:	bf00      	nop
 80064f4:	efff69f3 	.word	0xefff69f3
 80064f8:	40008000 	.word	0x40008000
 80064fc:	40013800 	.word	0x40013800
 8006500:	40021000 	.word	0x40021000
 8006504:	40004400 	.word	0x40004400
 8006508:	40004800 	.word	0x40004800
 800650c:	40004c00 	.word	0x40004c00
 8006510:	40005000 	.word	0x40005000
 8006514:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	74fb      	strb	r3, [r7, #19]
        break;
 800651c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 81ac 	beq.w	800687e <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	4413      	add	r3, r2
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	429a      	cmp	r2, r3
 8006534:	d305      	bcc.n	8006542 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	429a      	cmp	r2, r3
 8006540:	d902      	bls.n	8006548 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	74fb      	strb	r3, [r7, #19]
 8006546:	e19a      	b.n	800687e <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8006548:	7efb      	ldrb	r3, [r7, #27]
 800654a:	2b08      	cmp	r3, #8
 800654c:	f200 8091 	bhi.w	8006672 <UART_SetConfig+0x466>
 8006550:	a201      	add	r2, pc, #4	; (adr r2, 8006558 <UART_SetConfig+0x34c>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800657d 	.word	0x0800657d
 800655c:	08006673 	.word	0x08006673
 8006560:	080065c9 	.word	0x080065c9
 8006564:	08006673 	.word	0x08006673
 8006568:	080065fd 	.word	0x080065fd
 800656c:	08006673 	.word	0x08006673
 8006570:	08006673 	.word	0x08006673
 8006574:	08006673 	.word	0x08006673
 8006578:	08006649 	.word	0x08006649
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800657c:	f7fe fcfc 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8006580:	4603      	mov	r3, r0
 8006582:	4619      	mov	r1, r3
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	f04f 0400 	mov.w	r4, #0
 8006590:	0214      	lsls	r4, r2, #8
 8006592:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006596:	020b      	lsls	r3, r1, #8
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6852      	ldr	r2, [r2, #4]
 800659c:	0852      	lsrs	r2, r2, #1
 800659e:	4611      	mov	r1, r2
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	eb13 0b01 	adds.w	fp, r3, r1
 80065a8:	eb44 0c02 	adc.w	ip, r4, r2
 80065ac:	4658      	mov	r0, fp
 80065ae:	4661      	mov	r1, ip
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f04f 0400 	mov.w	r4, #0
 80065b8:	461a      	mov	r2, r3
 80065ba:	4623      	mov	r3, r4
 80065bc:	f7fa fb3c 	bl	8000c38 <__aeabi_uldivmod>
 80065c0:	4603      	mov	r3, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80065c6:	e057      	b.n	8006678 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	f04f 0400 	mov.w	r4, #0
 80065d2:	49b1      	ldr	r1, [pc, #708]	; (8006898 <UART_SetConfig+0x68c>)
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	eb13 0b01 	adds.w	fp, r3, r1
 80065dc:	eb44 0c02 	adc.w	ip, r4, r2
 80065e0:	4658      	mov	r0, fp
 80065e2:	4661      	mov	r1, ip
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f04f 0400 	mov.w	r4, #0
 80065ec:	461a      	mov	r2, r3
 80065ee:	4623      	mov	r3, r4
 80065f0:	f7fa fb22 	bl	8000c38 <__aeabi_uldivmod>
 80065f4:	4603      	mov	r3, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80065fa:	e03d      	b.n	8006678 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80065fc:	f7fe fc26 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8006600:	4603      	mov	r3, r0
 8006602:	4619      	mov	r1, r3
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	f04f 0400 	mov.w	r4, #0
 8006610:	0214      	lsls	r4, r2, #8
 8006612:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006616:	020b      	lsls	r3, r1, #8
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6852      	ldr	r2, [r2, #4]
 800661c:	0852      	lsrs	r2, r2, #1
 800661e:	4611      	mov	r1, r2
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	eb13 0b01 	adds.w	fp, r3, r1
 8006628:	eb44 0c02 	adc.w	ip, r4, r2
 800662c:	4658      	mov	r0, fp
 800662e:	4661      	mov	r1, ip
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f04f 0400 	mov.w	r4, #0
 8006638:	461a      	mov	r2, r3
 800663a:	4623      	mov	r3, r4
 800663c:	f7fa fafc 	bl	8000c38 <__aeabi_uldivmod>
 8006640:	4603      	mov	r3, r0
 8006642:	460c      	mov	r4, r1
 8006644:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006646:	e017      	b.n	8006678 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	f04f 0400 	mov.w	r4, #0
 8006652:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006656:	f144 0100 	adc.w	r1, r4, #0
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f04f 0400 	mov.w	r4, #0
 8006662:	461a      	mov	r2, r3
 8006664:	4623      	mov	r3, r4
 8006666:	f7fa fae7 	bl	8000c38 <__aeabi_uldivmod>
 800666a:	4603      	mov	r3, r0
 800666c:	460c      	mov	r4, r1
 800666e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006670:	e002      	b.n	8006678 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	74fb      	strb	r3, [r7, #19]
            break;
 8006676:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667e:	d308      	bcc.n	8006692 <UART_SetConfig+0x486>
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d204      	bcs.n	8006692 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	60da      	str	r2, [r3, #12]
 8006690:	e0f5      	b.n	800687e <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	74fb      	strb	r3, [r7, #19]
 8006696:	e0f2      	b.n	800687e <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a0:	d17f      	bne.n	80067a2 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80066a2:	7efb      	ldrb	r3, [r7, #27]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d85c      	bhi.n	8006762 <UART_SetConfig+0x556>
 80066a8:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x4a4>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	080066d5 	.word	0x080066d5
 80066b4:	080066f3 	.word	0x080066f3
 80066b8:	08006711 	.word	0x08006711
 80066bc:	08006763 	.word	0x08006763
 80066c0:	0800672d 	.word	0x0800672d
 80066c4:	08006763 	.word	0x08006763
 80066c8:	08006763 	.word	0x08006763
 80066cc:	08006763 	.word	0x08006763
 80066d0:	0800674b 	.word	0x0800674b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80066d4:	f7fe fc50 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80066d8:	4603      	mov	r3, r0
 80066da:	005a      	lsls	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	441a      	add	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066f0:	e03a      	b.n	8006768 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80066f2:	f7fe fc57 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 80066f6:	4603      	mov	r3, r0
 80066f8:	005a      	lsls	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	085b      	lsrs	r3, r3, #1
 8006700:	441a      	add	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	fbb2 f3f3 	udiv	r3, r2, r3
 800670a:	b29b      	uxth	r3, r3
 800670c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800670e:	e02b      	b.n	8006768 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800671a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6852      	ldr	r2, [r2, #4]
 8006722:	fbb3 f3f2 	udiv	r3, r3, r2
 8006726:	b29b      	uxth	r3, r3
 8006728:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800672a:	e01d      	b.n	8006768 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800672c:	f7fe fb8e 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 8006730:	4603      	mov	r3, r0
 8006732:	005a      	lsls	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	441a      	add	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	b29b      	uxth	r3, r3
 8006746:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006748:	e00e      	b.n	8006768 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	fbb2 f3f3 	udiv	r3, r2, r3
 800675c:	b29b      	uxth	r3, r3
 800675e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006760:	e002      	b.n	8006768 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	74fb      	strb	r3, [r7, #19]
        break;
 8006766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	d916      	bls.n	800679c <UART_SetConfig+0x590>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006774:	d212      	bcs.n	800679c <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f023 030f 	bic.w	r3, r3, #15
 800677e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	b29a      	uxth	r2, r3
 800678c:	897b      	ldrh	r3, [r7, #10]
 800678e:	4313      	orrs	r3, r2
 8006790:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	897a      	ldrh	r2, [r7, #10]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	e070      	b.n	800687e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	74fb      	strb	r3, [r7, #19]
 80067a0:	e06d      	b.n	800687e <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80067a2:	7efb      	ldrb	r3, [r7, #27]
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d859      	bhi.n	800685c <UART_SetConfig+0x650>
 80067a8:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x5a4>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067f1 	.word	0x080067f1
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	0800685d 	.word	0x0800685d
 80067c0:	08006829 	.word	0x08006829
 80067c4:	0800685d 	.word	0x0800685d
 80067c8:	0800685d 	.word	0x0800685d
 80067cc:	0800685d 	.word	0x0800685d
 80067d0:	08006845 	.word	0x08006845
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80067d4:	f7fe fbd0 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	441a      	add	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067ee:	e038      	b.n	8006862 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80067f0:	f7fe fbd8 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 80067f4:	4602      	mov	r2, r0
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	441a      	add	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	fbb2 f3f3 	udiv	r3, r2, r3
 8006806:	b29b      	uxth	r3, r3
 8006808:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800680a:	e02a      	b.n	8006862 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006816:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6852      	ldr	r2, [r2, #4]
 800681e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006822:	b29b      	uxth	r3, r3
 8006824:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006826:	e01c      	b.n	8006862 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006828:	f7fe fb10 	bl	8004e4c <HAL_RCC_GetSysClockFreq>
 800682c:	4602      	mov	r2, r0
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	441a      	add	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	fbb2 f3f3 	udiv	r3, r2, r3
 800683e:	b29b      	uxth	r3, r3
 8006840:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006842:	e00e      	b.n	8006862 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	fbb2 f3f3 	udiv	r3, r2, r3
 8006856:	b29b      	uxth	r3, r3
 8006858:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800685a:	e002      	b.n	8006862 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	74fb      	strb	r3, [r7, #19]
        break;
 8006860:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2b0f      	cmp	r3, #15
 8006866:	d908      	bls.n	800687a <UART_SetConfig+0x66e>
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800686e:	d204      	bcs.n	800687a <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	60da      	str	r2, [r3, #12]
 8006878:	e001      	b.n	800687e <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800688a:	7cfb      	ldrb	r3, [r7, #19]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006896:	bf00      	nop
 8006898:	f4240000 	.word	0xf4240000

0800689c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01a      	beq.n	80069b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699a:	d10a      	bne.n	80069b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	605a      	str	r2, [r3, #4]
  }
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80069ee:	f7fc f869 	bl	8002ac4 <HAL_GetTick>
 80069f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d10e      	bne.n	8006a20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f82a 	bl	8006a6a <UART_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e020      	b.n	8006a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d10e      	bne.n	8006a4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f814 	bl	8006a6a <UART_WaitOnFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e00a      	b.n	8006a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	603b      	str	r3, [r7, #0]
 8006a76:	4613      	mov	r3, r2
 8006a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	e02a      	b.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d026      	beq.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a84:	f7fc f81e 	bl	8002ac4 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d302      	bcc.n	8006a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d11b      	bne.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006aa8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0201 	bic.w	r2, r2, #1
 8006ab8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e00f      	b.n	8006af2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4013      	ands	r3, r2
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	bf0c      	ite	eq
 8006ae2:	2301      	moveq	r3, #1
 8006ae4:	2300      	movne	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d0c5      	beq.n	8006a7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006afa:	b084      	sub	sp, #16
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	f107 001c 	add.w	r0, r7, #28
 8006b08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d122      	bne.n	8006b58 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d105      	bne.n	8006b4c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa1d 	bl	8006f8c <USB_CoreReset>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
 8006b56:	e01a      	b.n	8006b8e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fa11 	bl	8006f8c <USB_CoreReset>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8006b80:	e005      	b.n	8006b8e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b9a:	b004      	add	sp, #16
 8006b9c:	4770      	bx	lr

08006b9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f023 0201 	bic.w	r2, r3, #1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d106      	bne.n	8006bec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	e00b      	b.n	8006c04 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	e001      	b.n	8006c04 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e003      	b.n	8006c0c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c04:	2032      	movs	r0, #50	; 0x32
 8006c06:	f7fb ff69 	bl	8002adc <HAL_Delay>

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c14:	b084      	sub	sp, #16
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e009      	b.n	8006c48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	3340      	adds	r3, #64	; 0x40
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	2200      	movs	r2, #0
 8006c40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3301      	adds	r3, #1
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b0e      	cmp	r3, #14
 8006c4c:	d9f2      	bls.n	8006c34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d112      	bne.n	8006c7a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e005      	b.n	8006c86 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	4619      	mov	r1, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	680b      	ldr	r3, [r1, #0]
 8006ca4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ca6:	2103      	movs	r1, #3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f93d 	bl	8006f28 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cae:	2110      	movs	r1, #16
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8f1 	bl	8006e98 <USB_FlushTxFifo>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f90f 	bl	8006ee4 <USB_FlushRxFifo>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2300      	movs	r3, #0
 8006cda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	e043      	b.n	8006d82 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d10:	d118      	bne.n	8006d44 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	461a      	mov	r2, r3
 8006d26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	e013      	b.n	8006d56 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	e008      	b.n	8006d56 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d50:	461a      	mov	r2, r3
 8006d52:	2300      	movs	r3, #0
 8006d54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d62:	461a      	mov	r2, r3
 8006d64:	2300      	movs	r3, #0
 8006d66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d74:	461a      	mov	r2, r3
 8006d76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d3b7      	bcc.n	8006cfa <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	e043      	b.n	8006e18 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da6:	d118      	bne.n	8006dda <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	e013      	b.n	8006dec <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	e008      	b.n	8006dec <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de6:	461a      	mov	r2, r3
 8006de8:	2300      	movs	r3, #0
 8006dea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	3301      	adds	r3, #1
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d3b7      	bcc.n	8006d90 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f043 0210 	orr.w	r2, r3, #16
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <USB_DevInit+0x280>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f043 0208 	orr.w	r2, r3, #8
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d107      	bne.n	8006e82 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7a:	f043 0304 	orr.w	r3, r3, #4
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e8e:	b004      	add	sp, #16
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	803c3800 	.word	0x803c3800

08006e98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	019b      	lsls	r3, r3, #6
 8006eaa:	f043 0220 	orr.w	r2, r3, #32
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	60fb      	str	r3, [r7, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4a09      	ldr	r2, [pc, #36]	; (8006ee0 <USB_FlushTxFifo+0x48>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d901      	bls.n	8006ec4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e006      	b.n	8006ed2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d0f0      	beq.n	8006eb2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	00030d40 	.word	0x00030d40

08006ee4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2210      	movs	r2, #16
 8006ef4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <USB_FlushRxFifo+0x40>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d901      	bls.n	8006f08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e006      	b.n	8006f16 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b10      	cmp	r3, #16
 8006f12:	d0f0      	beq.n	8006ef6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	00030d40 	.word	0x00030d40

08006f28 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f74:	f043 0302 	orr.w	r3, r3, #2
 8006f78:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006f7a:	2003      	movs	r0, #3
 8006f7c:	f7fb fdae 	bl	8002adc <HAL_Delay>

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <USB_CoreReset+0x64>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d901      	bls.n	8006faa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e01b      	b.n	8006fe2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	daf2      	bge.n	8006f98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f043 0201 	orr.w	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a09      	ldr	r2, [pc, #36]	; (8006ff0 <USB_CoreReset+0x64>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d901      	bls.n	8006fd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e006      	b.n	8006fe2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d0f0      	beq.n	8006fc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	00030d40 	.word	0x00030d40

08006ff4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ffa:	f3ef 8305 	mrs	r3, IPSR
 8006ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007000:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10f      	bne.n	8007026 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007006:	f3ef 8310 	mrs	r3, PRIMASK
 800700a:	607b      	str	r3, [r7, #4]
  return(result);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <osKernelInitialize+0x32>
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <osKernelInitialize+0x64>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d109      	bne.n	800702e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800701a:	f3ef 8311 	mrs	r3, BASEPRI
 800701e:	603b      	str	r3, [r7, #0]
  return(result);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007026:	f06f 0305 	mvn.w	r3, #5
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	e00c      	b.n	8007048 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800702e:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <osKernelInitialize+0x64>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d105      	bne.n	8007042 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007036:	4b08      	ldr	r3, [pc, #32]	; (8007058 <osKernelInitialize+0x64>)
 8007038:	2201      	movs	r2, #1
 800703a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e002      	b.n	8007048 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007042:	f04f 33ff 	mov.w	r3, #4294967295
 8007046:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007048:	68fb      	ldr	r3, [r7, #12]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	200001a0 	.word	0x200001a0

0800705c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007062:	f3ef 8305 	mrs	r3, IPSR
 8007066:	60bb      	str	r3, [r7, #8]
  return(result);
 8007068:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10f      	bne.n	800708e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706e:	f3ef 8310 	mrs	r3, PRIMASK
 8007072:	607b      	str	r3, [r7, #4]
  return(result);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <osKernelStart+0x32>
 800707a:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <osKernelStart+0x64>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d109      	bne.n	8007096 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007082:	f3ef 8311 	mrs	r3, BASEPRI
 8007086:	603b      	str	r3, [r7, #0]
  return(result);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <osKernelStart+0x3a>
    stat = osErrorISR;
 800708e:	f06f 0305 	mvn.w	r3, #5
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	e00e      	b.n	80070b4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <osKernelStart+0x64>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d107      	bne.n	80070ae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800709e:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <osKernelStart+0x64>)
 80070a0:	2202      	movs	r2, #2
 80070a2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80070a4:	f001 fdc4 	bl	8008c30 <vTaskStartScheduler>
      stat = osOK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e002      	b.n	80070b4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295
 80070b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80070b4:	68fb      	ldr	r3, [r7, #12]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	200001a0 	.word	0x200001a0

080070c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b092      	sub	sp, #72	; 0x48
 80070c8:	af04      	add	r7, sp, #16
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070d4:	f3ef 8305 	mrs	r3, IPSR
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8094 	bne.w	800720a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e2:	f3ef 8310 	mrs	r3, PRIMASK
 80070e6:	623b      	str	r3, [r7, #32]
  return(result);
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f040 808d 	bne.w	800720a <osThreadNew+0x146>
 80070f0:	4b48      	ldr	r3, [pc, #288]	; (8007214 <osThreadNew+0x150>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d106      	bne.n	8007106 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070f8:	f3ef 8311 	mrs	r3, BASEPRI
 80070fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f040 8082 	bne.w	800720a <osThreadNew+0x146>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d07e      	beq.n	800720a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800710c:	2380      	movs	r3, #128	; 0x80
 800710e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007110:	2318      	movs	r3, #24
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007114:	2300      	movs	r3, #0
 8007116:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007118:	f107 031b 	add.w	r3, r7, #27
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295
 8007122:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d045      	beq.n	80071b6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <osThreadNew+0x74>
        name = attr->name;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <osThreadNew+0x9a>
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	2b38      	cmp	r3, #56	; 0x38
 8007150:	d805      	bhi.n	800715e <osThreadNew+0x9a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <osThreadNew+0x9e>
        return (NULL);
 800715e:	2300      	movs	r3, #0
 8007160:	e054      	b.n	800720c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	089b      	lsrs	r3, r3, #2
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00e      	beq.n	8007198 <osThreadNew+0xd4>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	2b5b      	cmp	r3, #91	; 0x5b
 8007180:	d90a      	bls.n	8007198 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007186:	2b00      	cmp	r3, #0
 8007188:	d006      	beq.n	8007198 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <osThreadNew+0xd4>
        mem = 1;
 8007192:	2301      	movs	r3, #1
 8007194:	62bb      	str	r3, [r7, #40]	; 0x28
 8007196:	e010      	b.n	80071ba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10c      	bne.n	80071ba <osThreadNew+0xf6>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d108      	bne.n	80071ba <osThreadNew+0xf6>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d104      	bne.n	80071ba <osThreadNew+0xf6>
          mem = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071b4:	e001      	b.n	80071ba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d110      	bne.n	80071e2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80071c8:	9202      	str	r2, [sp, #8]
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 fb62 	bl	80088a0 <xTaskCreateStatic>
 80071dc:	4603      	mov	r3, r0
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	e013      	b.n	800720a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d110      	bne.n	800720a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f107 0314 	add.w	r3, r7, #20
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f001 fba9 	bl	8008952 <xTaskCreate>
 8007200:	4603      	mov	r3, r0
 8007202:	2b01      	cmp	r3, #1
 8007204:	d001      	beq.n	800720a <osThreadNew+0x146>
          hTask = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800720a:	697b      	ldr	r3, [r7, #20]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3738      	adds	r7, #56	; 0x38
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	200001a0 	.word	0x200001a0

08007218 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007220:	f3ef 8305 	mrs	r3, IPSR
 8007224:	613b      	str	r3, [r7, #16]
  return(result);
 8007226:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10f      	bne.n	800724c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800722c:	f3ef 8310 	mrs	r3, PRIMASK
 8007230:	60fb      	str	r3, [r7, #12]
  return(result);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <osDelay+0x34>
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <osDelay+0x58>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d109      	bne.n	8007254 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007240:	f3ef 8311 	mrs	r3, BASEPRI
 8007244:	60bb      	str	r3, [r7, #8]
  return(result);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <osDelay+0x3c>
    stat = osErrorISR;
 800724c:	f06f 0305 	mvn.w	r3, #5
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e007      	b.n	8007264 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <osDelay+0x4c>
      vTaskDelay(ticks);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fcb2 	bl	8008bc8 <vTaskDelay>
    }
  }

  return (stat);
 8007264:	697b      	ldr	r3, [r7, #20]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	200001a0 	.word	0x200001a0

08007274 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	; 0x28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007280:	f3ef 8305 	mrs	r3, IPSR
 8007284:	613b      	str	r3, [r7, #16]
  return(result);
 8007286:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 8085 	bne.w	8007398 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728e:	f3ef 8310 	mrs	r3, PRIMASK
 8007292:	60fb      	str	r3, [r7, #12]
  return(result);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d17e      	bne.n	8007398 <osMutexNew+0x124>
 800729a:	4b42      	ldr	r3, [pc, #264]	; (80073a4 <osMutexNew+0x130>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d105      	bne.n	80072ae <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072a2:	f3ef 8311 	mrs	r3, BASEPRI
 80072a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d174      	bne.n	8007398 <osMutexNew+0x124>
    if (attr != NULL) {
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <osMutexNew+0x48>
      type = attr->attr_bits;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	e001      	b.n	80072c0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <osMutexNew+0x5c>
      rmtx = 1U;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	e001      	b.n	80072d4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d15c      	bne.n	8007398 <osMutexNew+0x124>
      mem = -1;
 80072de:	f04f 33ff 	mov.w	r3, #4294967295
 80072e2:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d015      	beq.n	8007316 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d006      	beq.n	8007300 <osMutexNew+0x8c>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	2b4f      	cmp	r3, #79	; 0x4f
 80072f8:	d902      	bls.n	8007300 <osMutexNew+0x8c>
          mem = 1;
 80072fa:	2301      	movs	r3, #1
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	e00c      	b.n	800731a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d108      	bne.n	800731a <osMutexNew+0xa6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d104      	bne.n	800731a <osMutexNew+0xa6>
            mem = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	e001      	b.n	800731a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d112      	bne.n	8007346 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	4619      	mov	r1, r3
 800732c:	2004      	movs	r0, #4
 800732e:	f000 fbeb 	bl	8007b08 <xQueueCreateMutexStatic>
 8007332:	6278      	str	r0, [r7, #36]	; 0x24
 8007334:	e016      	b.n	8007364 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	4619      	mov	r1, r3
 800733c:	2001      	movs	r0, #1
 800733e:	f000 fbe3 	bl	8007b08 <xQueueCreateMutexStatic>
 8007342:	6278      	str	r0, [r7, #36]	; 0x24
 8007344:	e00e      	b.n	8007364 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007352:	2004      	movs	r0, #4
 8007354:	f000 fbc0 	bl	8007ad8 <xQueueCreateMutex>
 8007358:	6278      	str	r0, [r7, #36]	; 0x24
 800735a:	e003      	b.n	8007364 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800735c:	2001      	movs	r0, #1
 800735e:	f000 fbbb 	bl	8007ad8 <xQueueCreateMutex>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00c      	beq.n	8007384 <osMutexNew+0x110>
        if (attr != NULL) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <osMutexNew+0x104>
          name = attr->name;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	e001      	b.n	800737c <osMutexNew+0x108>
        } else {
          name = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800737c:	6979      	ldr	r1, [r7, #20]
 800737e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007380:	f001 fa08 	bl	8008794 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	2b00      	cmp	r3, #0
 8007388:	d006      	beq.n	8007398 <osMutexNew+0x124>
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800739a:	4618      	mov	r0, r3
 800739c:	3728      	adds	r7, #40	; 0x28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	200001a0 	.word	0x200001a0

080073a8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	; 0x30
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b8:	f3ef 8305 	mrs	r3, IPSR
 80073bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80073be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f040 8088 	bne.w	80074d6 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ca:	617b      	str	r3, [r7, #20]
  return(result);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 8081 	bne.w	80074d6 <osSemaphoreNew+0x12e>
 80073d4:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <osSemaphoreNew+0x138>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d105      	bne.n	80073e8 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073dc:	f3ef 8311 	mrs	r3, BASEPRI
 80073e0:	613b      	str	r3, [r7, #16]
  return(result);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d176      	bne.n	80074d6 <osSemaphoreNew+0x12e>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d073      	beq.n	80074d6 <osSemaphoreNew+0x12e>
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d86f      	bhi.n	80074d6 <osSemaphoreNew+0x12e>
    mem = -1;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d015      	beq.n	800742e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d006      	beq.n	8007418 <osSemaphoreNew+0x70>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	2b4f      	cmp	r3, #79	; 0x4f
 8007410:	d902      	bls.n	8007418 <osSemaphoreNew+0x70>
        mem = 1;
 8007412:	2301      	movs	r3, #1
 8007414:	623b      	str	r3, [r7, #32]
 8007416:	e00c      	b.n	8007432 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d108      	bne.n	8007432 <osSemaphoreNew+0x8a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <osSemaphoreNew+0x8a>
          mem = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	623b      	str	r3, [r7, #32]
 800742c:	e001      	b.n	8007432 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d04d      	beq.n	80074d6 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d129      	bne.n	8007494 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d10b      	bne.n	800745e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689a      	ldr	r2, [r3, #8]
 800744a:	2303      	movs	r3, #3
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	4613      	mov	r3, r2
 8007450:	2200      	movs	r2, #0
 8007452:	2100      	movs	r1, #0
 8007454:	2001      	movs	r0, #1
 8007456:	f000 fa53 	bl	8007900 <xQueueGenericCreateStatic>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24
 800745c:	e005      	b.n	800746a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800745e:	2203      	movs	r2, #3
 8007460:	2100      	movs	r1, #0
 8007462:	2001      	movs	r0, #1
 8007464:	f000 fabe 	bl	80079e4 <xQueueGenericCreate>
 8007468:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	2b00      	cmp	r3, #0
 800746e:	d022      	beq.n	80074b6 <osSemaphoreNew+0x10e>
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d01f      	beq.n	80074b6 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007476:	2300      	movs	r3, #0
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800747e:	f000 fbc5 	bl	8007c0c <xQueueGenericSend>
 8007482:	4603      	mov	r3, r0
 8007484:	2b01      	cmp	r3, #1
 8007486:	d016      	beq.n	80074b6 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8007488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800748a:	f001 f838 	bl	80084fe <vQueueDelete>
            hSemaphore = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
 8007492:	e010      	b.n	80074b6 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d108      	bne.n	80074ac <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	461a      	mov	r2, r3
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fb4b 	bl	8007b3e <xQueueCreateCountingSemaphoreStatic>
 80074a8:	6278      	str	r0, [r7, #36]	; 0x24
 80074aa:	e004      	b.n	80074b6 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80074ac:	68b9      	ldr	r1, [r7, #8]
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 fb7a 	bl	8007ba8 <xQueueCreateCountingSemaphore>
 80074b4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00c      	beq.n	80074d6 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <osSemaphoreNew+0x122>
          name = attr->name;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	61fb      	str	r3, [r7, #28]
 80074c8:	e001      	b.n	80074ce <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80074ce:	69f9      	ldr	r1, [r7, #28]
 80074d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074d2:	f001 f95f 	bl	8008794 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3728      	adds	r7, #40	; 0x28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	200001a0 	.word	0x200001a0

080074e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d103      	bne.n	8007504 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80074fc:	f06f 0303 	mvn.w	r3, #3
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	e04b      	b.n	800759c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007504:	f3ef 8305 	mrs	r3, IPSR
 8007508:	617b      	str	r3, [r7, #20]
  return(result);
 800750a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10f      	bne.n	8007530 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007510:	f3ef 8310 	mrs	r3, PRIMASK
 8007514:	613b      	str	r3, [r7, #16]
  return(result);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <osSemaphoreAcquire+0x4c>
 800751c:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <osSemaphoreAcquire+0xc4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d128      	bne.n	8007576 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007524:	f3ef 8311 	mrs	r3, BASEPRI
 8007528:	60fb      	str	r3, [r7, #12]
  return(result);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d022      	beq.n	8007576 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007536:	f06f 0303 	mvn.w	r3, #3
 800753a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800753c:	e02d      	b.n	800759a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	461a      	mov	r2, r3
 8007548:	2100      	movs	r1, #0
 800754a:	69b8      	ldr	r0, [r7, #24]
 800754c:	f000 ff5a 	bl	8008404 <xQueueReceiveFromISR>
 8007550:	4603      	mov	r3, r0
 8007552:	2b01      	cmp	r3, #1
 8007554:	d003      	beq.n	800755e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007556:	f06f 0302 	mvn.w	r3, #2
 800755a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800755c:	e01d      	b.n	800759a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01a      	beq.n	800759a <osSemaphoreAcquire+0xb6>
 8007564:	4b11      	ldr	r3, [pc, #68]	; (80075ac <osSemaphoreAcquire+0xc8>)
 8007566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007574:	e011      	b.n	800759a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	69b8      	ldr	r0, [r7, #24]
 800757a:	f000 fe3b 	bl	80081f4 <xQueueSemaphoreTake>
 800757e:	4603      	mov	r3, r0
 8007580:	2b01      	cmp	r3, #1
 8007582:	d00b      	beq.n	800759c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800758a:	f06f 0301 	mvn.w	r3, #1
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	e004      	b.n	800759c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007592:	f06f 0302 	mvn.w	r3, #2
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	e000      	b.n	800759c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800759a:	bf00      	nop
      }
    }
  }

  return (stat);
 800759c:	69fb      	ldr	r3, [r7, #28]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200001a0 	.word	0x200001a0
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d103      	bne.n	80075ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80075c6:	f06f 0303 	mvn.w	r3, #3
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	e03e      	b.n	800764c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075ce:	f3ef 8305 	mrs	r3, IPSR
 80075d2:	617b      	str	r3, [r7, #20]
  return(result);
 80075d4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10f      	bne.n	80075fa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075da:	f3ef 8310 	mrs	r3, PRIMASK
 80075de:	613b      	str	r3, [r7, #16]
  return(result);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <osSemaphoreRelease+0x4a>
 80075e6:	4b1c      	ldr	r3, [pc, #112]	; (8007658 <osSemaphoreRelease+0xa8>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d120      	bne.n	8007630 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ee:	f3ef 8311 	mrs	r3, BASEPRI
 80075f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d01a      	beq.n	8007630 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80075fe:	f107 0308 	add.w	r3, r7, #8
 8007602:	4619      	mov	r1, r3
 8007604:	69b8      	ldr	r0, [r7, #24]
 8007606:	f000 fc8f 	bl	8007f28 <xQueueGiveFromISR>
 800760a:	4603      	mov	r3, r0
 800760c:	2b01      	cmp	r3, #1
 800760e:	d003      	beq.n	8007618 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007610:	f06f 0302 	mvn.w	r3, #2
 8007614:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007616:	e018      	b.n	800764a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d015      	beq.n	800764a <osSemaphoreRelease+0x9a>
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <osSemaphoreRelease+0xac>)
 8007620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800762e:	e00c      	b.n	800764a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007630:	2300      	movs	r3, #0
 8007632:	2200      	movs	r2, #0
 8007634:	2100      	movs	r1, #0
 8007636:	69b8      	ldr	r0, [r7, #24]
 8007638:	f000 fae8 	bl	8007c0c <xQueueGenericSend>
 800763c:	4603      	mov	r3, r0
 800763e:	2b01      	cmp	r3, #1
 8007640:	d004      	beq.n	800764c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007642:	f06f 0302 	mvn.w	r3, #2
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	e000      	b.n	800764c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800764a:	bf00      	nop
    }
  }

  return (stat);
 800764c:	69fb      	ldr	r3, [r7, #28]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200001a0 	.word	0x200001a0
 800765c:	e000ed04 	.word	0xe000ed04

08007660 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4a07      	ldr	r2, [pc, #28]	; (800768c <vApplicationGetIdleTaskMemory+0x2c>)
 8007670:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	4a06      	ldr	r2, [pc, #24]	; (8007690 <vApplicationGetIdleTaskMemory+0x30>)
 8007676:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2280      	movs	r2, #128	; 0x80
 800767c:	601a      	str	r2, [r3, #0]
}
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	200001a4 	.word	0x200001a4
 8007690:	20000200 	.word	0x20000200

08007694 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a07      	ldr	r2, [pc, #28]	; (80076c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80076a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4a06      	ldr	r2, [pc, #24]	; (80076c4 <vApplicationGetTimerTaskMemory+0x30>)
 80076aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b2:	601a      	str	r2, [r3, #0]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	20000400 	.word	0x20000400
 80076c4:	2000045c 	.word	0x2000045c

080076c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f103 0208 	add.w	r2, r3, #8
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f103 0208 	add.w	r2, r3, #8
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f103 0208 	add.w	r2, r3, #8
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
}
 800775e:	bf00      	nop
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007780:	d103      	bne.n	800778a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e00c      	b.n	80077a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3308      	adds	r3, #8
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e002      	b.n	8007798 <vListInsert+0x2e>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d2f6      	bcs.n	8007792 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	601a      	str	r2, [r3, #0]
}
 80077d0:	bf00      	nop
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	6892      	ldr	r2, [r2, #8]
 80077f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6852      	ldr	r2, [r2, #4]
 80077fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d103      	bne.n	8007810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	1e5a      	subs	r2, r3, #1
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d109      	bne.n	8007858 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	60bb      	str	r3, [r7, #8]
 8007856:	e7fe      	b.n	8007856 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007858:	f002 fc40 	bl	800a0dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007864:	68f9      	ldr	r1, [r7, #12]
 8007866:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	441a      	add	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007888:	3b01      	subs	r3, #1
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800788e:	fb01 f303 	mul.w	r3, r1, r3
 8007892:	441a      	add	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	22ff      	movs	r2, #255	; 0xff
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	22ff      	movs	r2, #255	; 0xff
 80078a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d114      	bne.n	80078d8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01a      	beq.n	80078ec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3310      	adds	r3, #16
 80078ba:	4618      	mov	r0, r3
 80078bc:	f001 fc3e 	bl	800913c <xTaskRemoveFromEventList>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d012      	beq.n	80078ec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80078c6:	4b0d      	ldr	r3, [pc, #52]	; (80078fc <xQueueGenericReset+0xcc>)
 80078c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	e009      	b.n	80078ec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	3310      	adds	r3, #16
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fef3 	bl	80076c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3324      	adds	r3, #36	; 0x24
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff feee 	bl	80076c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078ec:	f002 fc24 	bl	800a138 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078f0:	2301      	movs	r3, #1
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	e000ed04 	.word	0xe000ed04

08007900 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08e      	sub	sp, #56	; 0x38
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <xQueueGenericCreateStatic+0x28>
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
 8007926:	e7fe      	b.n	8007926 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d109      	bne.n	8007942 <xQueueGenericCreateStatic+0x42>
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
 8007940:	e7fe      	b.n	8007940 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <xQueueGenericCreateStatic+0x4e>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <xQueueGenericCreateStatic+0x52>
 800794e:	2301      	movs	r3, #1
 8007950:	e000      	b.n	8007954 <xQueueGenericCreateStatic+0x54>
 8007952:	2300      	movs	r3, #0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d109      	bne.n	800796c <xQueueGenericCreateStatic+0x6c>
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	623b      	str	r3, [r7, #32]
 800796a:	e7fe      	b.n	800796a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <xQueueGenericCreateStatic+0x78>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <xQueueGenericCreateStatic+0x7c>
 8007978:	2301      	movs	r3, #1
 800797a:	e000      	b.n	800797e <xQueueGenericCreateStatic+0x7e>
 800797c:	2300      	movs	r3, #0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d109      	bne.n	8007996 <xQueueGenericCreateStatic+0x96>
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	61fb      	str	r3, [r7, #28]
 8007994:	e7fe      	b.n	8007994 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007996:	2350      	movs	r3, #80	; 0x50
 8007998:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b50      	cmp	r3, #80	; 0x50
 800799e:	d009      	beq.n	80079b4 <xQueueGenericCreateStatic+0xb4>
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e7fe      	b.n	80079b2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80079b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00d      	beq.n	80079da <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	4613      	mov	r3, r2
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f842 	bl	8007a5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079dc:	4618      	mov	r0, r3
 80079de:	3730      	adds	r7, #48	; 0x30
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08a      	sub	sp, #40	; 0x28
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4613      	mov	r3, r2
 80079f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d109      	bne.n	8007a0c <xQueueGenericCreate+0x28>
 80079f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	e7fe      	b.n	8007a0a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d102      	bne.n	8007a18 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e004      	b.n	8007a22 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	fb02 f303 	mul.w	r3, r2, r3
 8007a20:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	3350      	adds	r3, #80	; 0x50
 8007a26:	4618      	mov	r0, r3
 8007a28:	f002 fc72 	bl	800a310 <pvPortMalloc>
 8007a2c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00f      	beq.n	8007a54 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	3350      	adds	r3, #80	; 0x50
 8007a38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a42:	79fa      	ldrb	r2, [r7, #7]
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	68b9      	ldr	r1, [r7, #8]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f805 	bl	8007a5e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007a54:	69bb      	ldr	r3, [r7, #24]
	}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e002      	b.n	8007a80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	69b8      	ldr	r0, [r7, #24]
 8007a90:	f7ff fece 	bl	8007830 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	78fa      	ldrb	r2, [r7, #3]
 8007a98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f89e 	bl	8007c0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	617b      	str	r3, [r7, #20]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6939      	ldr	r1, [r7, #16]
 8007af0:	6978      	ldr	r0, [r7, #20]
 8007af2:	f7ff ff77 	bl	80079e4 <xQueueGenericCreate>
 8007af6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7ff ffd3 	bl	8007aa4 <prvInitialiseMutex>

		return pxNewQueue;
 8007afe:	68fb      	ldr	r3, [r7, #12]
	}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b14:	2301      	movs	r3, #1
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	2300      	movs	r3, #0
 8007b1a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b1c:	79fb      	ldrb	r3, [r7, #7]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2200      	movs	r2, #0
 8007b24:	6939      	ldr	r1, [r7, #16]
 8007b26:	6978      	ldr	r0, [r7, #20]
 8007b28:	f7ff feea 	bl	8007900 <xQueueGenericCreateStatic>
 8007b2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f7ff ffb8 	bl	8007aa4 <prvInitialiseMutex>

		return pxNewQueue;
 8007b34:	68fb      	ldr	r3, [r7, #12]
	}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b08a      	sub	sp, #40	; 0x28
 8007b42:	af02      	add	r7, sp, #8
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d109      	bne.n	8007b64 <xQueueCreateCountingSemaphoreStatic+0x26>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	61bb      	str	r3, [r7, #24]
 8007b62:	e7fe      	b.n	8007b62 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d909      	bls.n	8007b80 <xQueueCreateCountingSemaphoreStatic+0x42>
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	e7fe      	b.n	8007b7e <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007b80:	2302      	movs	r3, #2
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff feb8 	bl	8007900 <xQueueGenericCreateStatic>
 8007b90:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007b9e:	69fb      	ldr	r3, [r7, #28]
	}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3720      	adds	r7, #32
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <xQueueCreateCountingSemaphore+0x24>
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	613b      	str	r3, [r7, #16]
 8007bca:	e7fe      	b.n	8007bca <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d909      	bls.n	8007be8 <xQueueCreateCountingSemaphore+0x40>
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e7fe      	b.n	8007be6 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007be8:	2202      	movs	r2, #2
 8007bea:	2100      	movs	r1, #0
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff fef9 	bl	80079e4 <xQueueGenericCreate>
 8007bf2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007c00:	697b      	ldr	r3, [r7, #20]
	}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08e      	sub	sp, #56	; 0x38
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d109      	bne.n	8007c3c <xQueueGenericSend+0x30>
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c3a:	e7fe      	b.n	8007c3a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <xQueueGenericSend+0x3e>
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <xQueueGenericSend+0x42>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <xQueueGenericSend+0x44>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <xQueueGenericSend+0x5c>
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
 8007c66:	e7fe      	b.n	8007c66 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d103      	bne.n	8007c76 <xQueueGenericSend+0x6a>
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d101      	bne.n	8007c7a <xQueueGenericSend+0x6e>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericSend+0x70>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <xQueueGenericSend+0x88>
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	623b      	str	r3, [r7, #32]
 8007c92:	e7fe      	b.n	8007c92 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c94:	f001 fc0e 	bl	80094b4 <xTaskGetSchedulerState>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <xQueueGenericSend+0x98>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <xQueueGenericSend+0x9c>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <xQueueGenericSend+0x9e>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <xQueueGenericSend+0xb6>
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cc2:	f002 fa0b 	bl	800a0dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d302      	bcc.n	8007cd8 <xQueueGenericSend+0xcc>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d129      	bne.n	8007d2c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cde:	f000 fc48 	bl	8008572 <prvCopyDataToQueue>
 8007ce2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	3324      	adds	r3, #36	; 0x24
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 fa23 	bl	800913c <xTaskRemoveFromEventList>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d013      	beq.n	8007d24 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007cfc:	4b3f      	ldr	r3, [pc, #252]	; (8007dfc <xQueueGenericSend+0x1f0>)
 8007cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	e00a      	b.n	8007d24 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d007      	beq.n	8007d24 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d14:	4b39      	ldr	r3, [pc, #228]	; (8007dfc <xQueueGenericSend+0x1f0>)
 8007d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d24:	f002 fa08 	bl	800a138 <vPortExitCritical>
				return pdPASS;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e063      	b.n	8007df4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d32:	f002 fa01 	bl	800a138 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e05c      	b.n	8007df4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d40:	f107 0314 	add.w	r3, r7, #20
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 fa5b 	bl	8009200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d4e:	f002 f9f3 	bl	800a138 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d52:	f000 ffd1 	bl	8008cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d56:	f002 f9c1 	bl	800a0dc <vPortEnterCritical>
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d103      	bne.n	8007d70 <xQueueGenericSend+0x164>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d76:	b25b      	sxtb	r3, r3
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d103      	bne.n	8007d86 <xQueueGenericSend+0x17a>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d86:	f002 f9d7 	bl	800a138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d8a:	1d3a      	adds	r2, r7, #4
 8007d8c:	f107 0314 	add.w	r3, r7, #20
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 fa4a 	bl	800922c <xTaskCheckForTimeOut>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d124      	bne.n	8007de8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007da0:	f000 fcdf 	bl	8008762 <prvIsQueueFull>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d018      	beq.n	8007ddc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	3310      	adds	r3, #16
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	4611      	mov	r1, r2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 f974 	bl	80090a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dba:	f000 fc6a 	bl	8008692 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dbe:	f000 ffa9 	bl	8008d14 <xTaskResumeAll>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f47f af7c 	bne.w	8007cc2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007dca:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <xQueueGenericSend+0x1f0>)
 8007dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	e772      	b.n	8007cc2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dde:	f000 fc58 	bl	8008692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007de2:	f000 ff97 	bl	8008d14 <xTaskResumeAll>
 8007de6:	e76c      	b.n	8007cc2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dea:	f000 fc52 	bl	8008692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dee:	f000 ff91 	bl	8008d14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007df2:	2300      	movs	r3, #0
		}
	}
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3738      	adds	r7, #56	; 0x38
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	e000ed04 	.word	0xe000ed04

08007e00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08e      	sub	sp, #56	; 0x38
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
 8007e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <xQueueGenericSendFromISR+0x2c>
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
 8007e2a:	e7fe      	b.n	8007e2a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d103      	bne.n	8007e3a <xQueueGenericSendFromISR+0x3a>
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <xQueueGenericSendFromISR+0x3e>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <xQueueGenericSendFromISR+0x40>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <xQueueGenericSendFromISR+0x58>
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	623b      	str	r3, [r7, #32]
 8007e56:	e7fe      	b.n	8007e56 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d103      	bne.n	8007e66 <xQueueGenericSendFromISR+0x66>
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <xQueueGenericSendFromISR+0x6a>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e000      	b.n	8007e6c <xQueueGenericSendFromISR+0x6c>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d109      	bne.n	8007e84 <xQueueGenericSendFromISR+0x84>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	61fb      	str	r3, [r7, #28]
 8007e82:	e7fe      	b.n	8007e82 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e84:	f002 fa06 	bl	800a294 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e88:	f3ef 8211 	mrs	r2, BASEPRI
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	61ba      	str	r2, [r7, #24]
 8007e9e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d302      	bcc.n	8007eb6 <xQueueGenericSendFromISR+0xb6>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d12c      	bne.n	8007f10 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec6:	f000 fb54 	bl	8008572 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007eca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d112      	bne.n	8007efa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d016      	beq.n	8007f0a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	3324      	adds	r3, #36	; 0x24
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f001 f92b 	bl	800913c <xTaskRemoveFromEventList>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00e      	beq.n	8007f0a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00b      	beq.n	8007f0a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	e007      	b.n	8007f0a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007efe:	3301      	adds	r3, #1
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	b25a      	sxtb	r2, r3
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007f0e:	e001      	b.n	8007f14 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3738      	adds	r7, #56	; 0x38
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08e      	sub	sp, #56	; 0x38
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d109      	bne.n	8007f50 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	e7fe      	b.n	8007f4e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <xQueueGiveFromISR+0x44>
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	e7fe      	b.n	8007f6a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <xQueueGiveFromISR+0x54>
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <xQueueGiveFromISR+0x58>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e000      	b.n	8007f82 <xQueueGiveFromISR+0x5a>
 8007f80:	2300      	movs	r3, #0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d109      	bne.n	8007f9a <xQueueGiveFromISR+0x72>
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	61bb      	str	r3, [r7, #24]
 8007f98:	e7fe      	b.n	8007f98 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f9a:	f002 f97b 	bl	800a294 <vPortValidateInterruptPriority>
	__asm volatile
 8007f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	617a      	str	r2, [r7, #20]
 8007fb4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007fb6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d22b      	bcs.n	8008022 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe4:	d112      	bne.n	800800c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d016      	beq.n	800801c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	3324      	adds	r3, #36	; 0x24
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f001 f8a2 	bl	800913c <xTaskRemoveFromEventList>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00e      	beq.n	800801c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e007      	b.n	800801c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800800c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008010:	3301      	adds	r3, #1
 8008012:	b2db      	uxtb	r3, r3
 8008014:	b25a      	sxtb	r2, r3
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800801c:	2301      	movs	r3, #1
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
 8008020:	e001      	b.n	8008026 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008022:	2300      	movs	r3, #0
 8008024:	637b      	str	r3, [r7, #52]	; 0x34
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008032:	4618      	mov	r0, r3
 8008034:	3738      	adds	r7, #56	; 0x38
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08c      	sub	sp, #48	; 0x30
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008048:	2300      	movs	r3, #0
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <xQueueReceive+0x2e>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	623b      	str	r3, [r7, #32]
 8008068:	e7fe      	b.n	8008068 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d103      	bne.n	8008078 <xQueueReceive+0x3c>
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <xQueueReceive+0x40>
 8008078:	2301      	movs	r3, #1
 800807a:	e000      	b.n	800807e <xQueueReceive+0x42>
 800807c:	2300      	movs	r3, #0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d109      	bne.n	8008096 <xQueueReceive+0x5a>
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	e7fe      	b.n	8008094 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008096:	f001 fa0d 	bl	80094b4 <xTaskGetSchedulerState>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <xQueueReceive+0x6a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <xQueueReceive+0x6e>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <xQueueReceive+0x70>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <xQueueReceive+0x88>
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	e7fe      	b.n	80080c2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80080c4:	f002 f80a 	bl	800a0dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01f      	beq.n	8008114 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d8:	f000 fab5 	bl	8008646 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	1e5a      	subs	r2, r3, #1
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00f      	beq.n	800810c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	3310      	adds	r3, #16
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 f823 	bl	800913c <xTaskRemoveFromEventList>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080fc:	4b3c      	ldr	r3, [pc, #240]	; (80081f0 <xQueueReceive+0x1b4>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800810c:	f002 f814 	bl	800a138 <vPortExitCritical>
				return pdPASS;
 8008110:	2301      	movs	r3, #1
 8008112:	e069      	b.n	80081e8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800811a:	f002 f80d 	bl	800a138 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800811e:	2300      	movs	r3, #0
 8008120:	e062      	b.n	80081e8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008124:	2b00      	cmp	r3, #0
 8008126:	d106      	bne.n	8008136 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008128:	f107 0310 	add.w	r3, r7, #16
 800812c:	4618      	mov	r0, r3
 800812e:	f001 f867 	bl	8009200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008132:	2301      	movs	r3, #1
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008136:	f001 ffff 	bl	800a138 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800813a:	f000 fddd 	bl	8008cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800813e:	f001 ffcd 	bl	800a0dc <vPortEnterCritical>
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008148:	b25b      	sxtb	r3, r3
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d103      	bne.n	8008158 <xQueueReceive+0x11c>
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800815e:	b25b      	sxtb	r3, r3
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d103      	bne.n	800816e <xQueueReceive+0x132>
 8008166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800816e:	f001 ffe3 	bl	800a138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008172:	1d3a      	adds	r2, r7, #4
 8008174:	f107 0310 	add.w	r3, r7, #16
 8008178:	4611      	mov	r1, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f001 f856 	bl	800922c <xTaskCheckForTimeOut>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d123      	bne.n	80081ce <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008188:	f000 fad5 	bl	8008736 <prvIsQueueEmpty>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d017      	beq.n	80081c2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008194:	3324      	adds	r3, #36	; 0x24
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f000 ff80 	bl	80090a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a2:	f000 fa76 	bl	8008692 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081a6:	f000 fdb5 	bl	8008d14 <xTaskResumeAll>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d189      	bne.n	80080c4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80081b0:	4b0f      	ldr	r3, [pc, #60]	; (80081f0 <xQueueReceive+0x1b4>)
 80081b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	e780      	b.n	80080c4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c4:	f000 fa65 	bl	8008692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081c8:	f000 fda4 	bl	8008d14 <xTaskResumeAll>
 80081cc:	e77a      	b.n	80080c4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d0:	f000 fa5f 	bl	8008692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081d4:	f000 fd9e 	bl	8008d14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081da:	f000 faac 	bl	8008736 <prvIsQueueEmpty>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f43f af6f 	beq.w	80080c4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3730      	adds	r7, #48	; 0x30
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	e000ed04 	.word	0xe000ed04

080081f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08e      	sub	sp, #56	; 0x38
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80081fe:	2300      	movs	r3, #0
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d109      	bne.n	8008224 <xQueueSemaphoreTake+0x30>
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	623b      	str	r3, [r7, #32]
 8008222:	e7fe      	b.n	8008222 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	2b00      	cmp	r3, #0
 800822a:	d009      	beq.n	8008240 <xQueueSemaphoreTake+0x4c>
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	61fb      	str	r3, [r7, #28]
 800823e:	e7fe      	b.n	800823e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008240:	f001 f938 	bl	80094b4 <xTaskGetSchedulerState>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <xQueueSemaphoreTake+0x5c>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <xQueueSemaphoreTake+0x60>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <xQueueSemaphoreTake+0x62>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d109      	bne.n	800826e <xQueueSemaphoreTake+0x7a>
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	e7fe      	b.n	800826c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800826e:	f001 ff35 	bl	800a0dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	2b00      	cmp	r3, #0
 800827c:	d024      	beq.n	80082c8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	1e5a      	subs	r2, r3, #1
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800828e:	f001 fa8d 	bl	80097ac <pvTaskIncrementMutexHeldCount>
 8008292:	4602      	mov	r2, r0
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008296:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00f      	beq.n	80082c0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	3310      	adds	r3, #16
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 ff49 	bl	800913c <xTaskRemoveFromEventList>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d007      	beq.n	80082c0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082b0:	4b53      	ldr	r3, [pc, #332]	; (8008400 <xQueueSemaphoreTake+0x20c>)
 80082b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082c0:	f001 ff3a 	bl	800a138 <vPortExitCritical>
				return pdPASS;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e096      	b.n	80083f6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d110      	bne.n	80082f0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d009      	beq.n	80082e8 <xQueueSemaphoreTake+0xf4>
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	617b      	str	r3, [r7, #20]
 80082e6:	e7fe      	b.n	80082e6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80082e8:	f001 ff26 	bl	800a138 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e082      	b.n	80083f6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082f6:	f107 030c 	add.w	r3, r7, #12
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 ff80 	bl	8009200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008304:	f001 ff18 	bl	800a138 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008308:	f000 fcf6 	bl	8008cf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800830c:	f001 fee6 	bl	800a0dc <vPortEnterCritical>
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008316:	b25b      	sxtb	r3, r3
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831c:	d103      	bne.n	8008326 <xQueueSemaphoreTake+0x132>
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800832c:	b25b      	sxtb	r3, r3
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d103      	bne.n	800833c <xQueueSemaphoreTake+0x148>
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800833c:	f001 fefc 	bl	800a138 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008340:	463a      	mov	r2, r7
 8008342:	f107 030c 	add.w	r3, r7, #12
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f000 ff6f 	bl	800922c <xTaskCheckForTimeOut>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d132      	bne.n	80083ba <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008356:	f000 f9ee 	bl	8008736 <prvIsQueueEmpty>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d026      	beq.n	80083ae <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d109      	bne.n	800837c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008368:	f001 feb8 	bl	800a0dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4618      	mov	r0, r3
 8008372:	f001 f8bd 	bl	80094f0 <xTaskPriorityInherit>
 8008376:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008378:	f001 fede 	bl	800a138 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	3324      	adds	r3, #36	; 0x24
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	4611      	mov	r1, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fe8b 	bl	80090a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800838a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800838c:	f000 f981 	bl	8008692 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008390:	f000 fcc0 	bl	8008d14 <xTaskResumeAll>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	f47f af69 	bne.w	800826e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800839c:	4b18      	ldr	r3, [pc, #96]	; (8008400 <xQueueSemaphoreTake+0x20c>)
 800839e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	e75f      	b.n	800826e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083b0:	f000 f96f 	bl	8008692 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083b4:	f000 fcae 	bl	8008d14 <xTaskResumeAll>
 80083b8:	e759      	b.n	800826e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083bc:	f000 f969 	bl	8008692 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083c0:	f000 fca8 	bl	8008d14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083c6:	f000 f9b6 	bl	8008736 <prvIsQueueEmpty>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f43f af4e 	beq.w	800826e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00d      	beq.n	80083f4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80083d8:	f001 fe80 	bl	800a0dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80083dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083de:	f000 f8b0 	bl	8008542 <prvGetDisinheritPriorityAfterTimeout>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 f95a 	bl	80096a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80083f0:	f001 fea2 	bl	800a138 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3738      	adds	r7, #56	; 0x38
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <xQueueReceiveFromISR+0x2a>
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	623b      	str	r3, [r7, #32]
 800842c:	e7fe      	b.n	800842c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <xQueueReceiveFromISR+0x38>
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <xQueueReceiveFromISR+0x3c>
 800843c:	2301      	movs	r3, #1
 800843e:	e000      	b.n	8008442 <xQueueReceiveFromISR+0x3e>
 8008440:	2300      	movs	r3, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d109      	bne.n	800845a <xQueueReceiveFromISR+0x56>
 8008446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	61fb      	str	r3, [r7, #28]
 8008458:	e7fe      	b.n	8008458 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800845a:	f001 ff1b 	bl	800a294 <vPortValidateInterruptPriority>
	__asm volatile
 800845e:	f3ef 8211 	mrs	r2, BASEPRI
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	61ba      	str	r2, [r7, #24]
 8008474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	2b00      	cmp	r3, #0
 8008484:	d02f      	beq.n	80084e6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800848c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008494:	f000 f8d7 	bl	8008646 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	1e5a      	subs	r2, r3, #1
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a8:	d112      	bne.n	80084d0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d016      	beq.n	80084e0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	3310      	adds	r3, #16
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 fe40 	bl	800913c <xTaskRemoveFromEventList>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00e      	beq.n	80084e0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	e007      	b.n	80084e0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d4:	3301      	adds	r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	b25a      	sxtb	r2, r3
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80084e0:	2301      	movs	r3, #1
 80084e2:	637b      	str	r3, [r7, #52]	; 0x34
 80084e4:	e001      	b.n	80084ea <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3738      	adds	r7, #56	; 0x38
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <vQueueDelete+0x26>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	e7fe      	b.n	8008522 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 f95d 	bl	80087e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008530:	2b00      	cmp	r3, #0
 8008532:	d102      	bne.n	800853a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f001 ffad 	bl	800a494 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b00      	cmp	r3, #0
 8008550:	d006      	beq.n	8008560 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	e001      	b.n	8008564 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008564:	68fb      	ldr	r3, [r7, #12]
	}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10d      	bne.n	80085ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d14d      	bne.n	8008634 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	4618      	mov	r0, r3
 800859e:	f001 f815 	bl	80095cc <xTaskPriorityDisinherit>
 80085a2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	605a      	str	r2, [r3, #4]
 80085aa:	e043      	b.n	8008634 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d119      	bne.n	80085e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6898      	ldr	r0, [r3, #8]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	461a      	mov	r2, r3
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	f002 f8a7 	bl	800a710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ca:	441a      	add	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d32b      	bcc.n	8008634 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	609a      	str	r2, [r3, #8]
 80085e4:	e026      	b.n	8008634 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68d8      	ldr	r0, [r3, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	461a      	mov	r2, r3
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	f002 f88d 	bl	800a710 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fe:	425b      	negs	r3, r3
 8008600:	441a      	add	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d207      	bcs.n	8008622 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	425b      	negs	r3, r3
 800861c:	441a      	add	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d105      	bne.n	8008634 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	3b01      	subs	r3, #1
 8008632:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800863c:	697b      	ldr	r3, [r7, #20]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d018      	beq.n	800868a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008660:	441a      	add	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68da      	ldr	r2, [r3, #12]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	429a      	cmp	r2, r3
 8008670:	d303      	bcc.n	800867a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68d9      	ldr	r1, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	461a      	mov	r2, r3
 8008684:	6838      	ldr	r0, [r7, #0]
 8008686:	f002 f843 	bl	800a710 <memcpy>
	}
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800869a:	f001 fd1f 	bl	800a0dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086a6:	e011      	b.n	80086cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d012      	beq.n	80086d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3324      	adds	r3, #36	; 0x24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fd41 	bl	800913c <xTaskRemoveFromEventList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086c0:	f000 fe14 	bl	80092ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	dce9      	bgt.n	80086a8 <prvUnlockQueue+0x16>
 80086d4:	e000      	b.n	80086d8 <prvUnlockQueue+0x46>
					break;
 80086d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	22ff      	movs	r2, #255	; 0xff
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086e0:	f001 fd2a 	bl	800a138 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086e4:	f001 fcfa 	bl	800a0dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086f0:	e011      	b.n	8008716 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d012      	beq.n	8008720 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	3310      	adds	r3, #16
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 fd1c 	bl	800913c <xTaskRemoveFromEventList>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800870a:	f000 fdef 	bl	80092ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	3b01      	subs	r3, #1
 8008712:	b2db      	uxtb	r3, r3
 8008714:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871a:	2b00      	cmp	r3, #0
 800871c:	dce9      	bgt.n	80086f2 <prvUnlockQueue+0x60>
 800871e:	e000      	b.n	8008722 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008720:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	22ff      	movs	r2, #255	; 0xff
 8008726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800872a:	f001 fd05 	bl	800a138 <vPortExitCritical>
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800873e:	f001 fccd 	bl	800a0dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	2b00      	cmp	r3, #0
 8008748:	d102      	bne.n	8008750 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800874a:	2301      	movs	r3, #1
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	e001      	b.n	8008754 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008750:	2300      	movs	r3, #0
 8008752:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008754:	f001 fcf0 	bl	800a138 <vPortExitCritical>

	return xReturn;
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800876a:	f001 fcb7 	bl	800a0dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008776:	429a      	cmp	r2, r3
 8008778:	d102      	bne.n	8008780 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800877a:	2301      	movs	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	e001      	b.n	8008784 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008784:	f001 fcd8 	bl	800a138 <vPortExitCritical>

	return xReturn;
 8008788:	68fb      	ldr	r3, [r7, #12]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	e014      	b.n	80087ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087a4:	4a0e      	ldr	r2, [pc, #56]	; (80087e0 <vQueueAddToRegistry+0x4c>)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10b      	bne.n	80087c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087b0:	490b      	ldr	r1, [pc, #44]	; (80087e0 <vQueueAddToRegistry+0x4c>)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087ba:	4a09      	ldr	r2, [pc, #36]	; (80087e0 <vQueueAddToRegistry+0x4c>)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	00db      	lsls	r3, r3, #3
 80087c0:	4413      	add	r3, r2
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087c6:	e005      	b.n	80087d4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3301      	adds	r3, #1
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b07      	cmp	r3, #7
 80087d2:	d9e7      	bls.n	80087a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	200021dc 	.word	0x200021dc

080087e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087ec:	2300      	movs	r3, #0
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	e016      	b.n	8008820 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80087f2:	4a10      	ldr	r2, [pc, #64]	; (8008834 <vQueueUnregisterQueue+0x50>)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	4413      	add	r3, r2
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d10b      	bne.n	800881a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008802:	4a0c      	ldr	r2, [pc, #48]	; (8008834 <vQueueUnregisterQueue+0x50>)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2100      	movs	r1, #0
 8008808:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800880c:	4a09      	ldr	r2, [pc, #36]	; (8008834 <vQueueUnregisterQueue+0x50>)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	4413      	add	r3, r2
 8008814:	2200      	movs	r2, #0
 8008816:	605a      	str	r2, [r3, #4]
				break;
 8008818:	e005      	b.n	8008826 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b07      	cmp	r3, #7
 8008824:	d9e5      	bls.n	80087f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	200021dc 	.word	0x200021dc

08008838 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008848:	f001 fc48 	bl	800a0dc <vPortEnterCritical>
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008852:	b25b      	sxtb	r3, r3
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d103      	bne.n	8008862 <vQueueWaitForMessageRestricted+0x2a>
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008868:	b25b      	sxtb	r3, r3
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886e:	d103      	bne.n	8008878 <vQueueWaitForMessageRestricted+0x40>
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008878:	f001 fc5e 	bl	800a138 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	3324      	adds	r3, #36	; 0x24
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fc2b 	bl	80090e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008892:	6978      	ldr	r0, [r7, #20]
 8008894:	f7ff fefd 	bl	8008692 <prvUnlockQueue>
	}
 8008898:	bf00      	nop
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08e      	sub	sp, #56	; 0x38
 80088a4:	af04      	add	r7, sp, #16
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d109      	bne.n	80088c8 <xTaskCreateStatic+0x28>
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	623b      	str	r3, [r7, #32]
 80088c6:	e7fe      	b.n	80088c6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d109      	bne.n	80088e2 <xTaskCreateStatic+0x42>
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	61fb      	str	r3, [r7, #28]
 80088e0:	e7fe      	b.n	80088e0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088e2:	235c      	movs	r3, #92	; 0x5c
 80088e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b5c      	cmp	r3, #92	; 0x5c
 80088ea:	d009      	beq.n	8008900 <xTaskCreateStatic+0x60>
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	61bb      	str	r3, [r7, #24]
 80088fe:	e7fe      	b.n	80088fe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	2b00      	cmp	r3, #0
 8008904:	d01e      	beq.n	8008944 <xTaskCreateStatic+0xa4>
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01b      	beq.n	8008944 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008914:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	2202      	movs	r2, #2
 800891a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800891e:	2300      	movs	r3, #0
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	9302      	str	r3, [sp, #8]
 8008926:	f107 0314 	add.w	r3, r7, #20
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f850 	bl	80089dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800893c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800893e:	f000 f8d3 	bl	8008ae8 <prvAddNewTaskToReadyList>
 8008942:	e001      	b.n	8008948 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008948:	697b      	ldr	r3, [r7, #20]
	}
 800894a:	4618      	mov	r0, r3
 800894c:	3728      	adds	r7, #40	; 0x28
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008952:	b580      	push	{r7, lr}
 8008954:	b08c      	sub	sp, #48	; 0x30
 8008956:	af04      	add	r7, sp, #16
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	603b      	str	r3, [r7, #0]
 800895e:	4613      	mov	r3, r2
 8008960:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008962:	88fb      	ldrh	r3, [r7, #6]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4618      	mov	r0, r3
 8008968:	f001 fcd2 	bl	800a310 <pvPortMalloc>
 800896c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00e      	beq.n	8008992 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008974:	205c      	movs	r0, #92	; 0x5c
 8008976:	f001 fccb 	bl	800a310 <pvPortMalloc>
 800897a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	631a      	str	r2, [r3, #48]	; 0x30
 8008988:	e005      	b.n	8008996 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800898a:	6978      	ldr	r0, [r7, #20]
 800898c:	f001 fd82 	bl	800a494 <vPortFree>
 8008990:	e001      	b.n	8008996 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d017      	beq.n	80089cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089a4:	88fa      	ldrh	r2, [r7, #6]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	9302      	str	r3, [sp, #8]
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 f80e 	bl	80089dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089c0:	69f8      	ldr	r0, [r7, #28]
 80089c2:	f000 f891 	bl	8008ae8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089c6:	2301      	movs	r3, #1
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	e002      	b.n	80089d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089cc:	f04f 33ff 	mov.w	r3, #4294967295
 80089d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089d2:	69bb      	ldr	r3, [r7, #24]
	}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3720      	adds	r7, #32
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	461a      	mov	r2, r3
 80089f4:	21a5      	movs	r1, #165	; 0xa5
 80089f6:	f001 fe96 	bl	800a726 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a04:	3b01      	subs	r3, #1
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	f023 0307 	bic.w	r3, r3, #7
 8008a12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	f003 0307 	and.w	r3, r3, #7
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <prvInitialiseNewTask+0x56>
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	e7fe      	b.n	8008a30 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	e012      	b.n	8008a5e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	7819      	ldrb	r1, [r3, #0]
 8008a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	3334      	adds	r3, #52	; 0x34
 8008a48:	460a      	mov	r2, r1
 8008a4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	4413      	add	r3, r2
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d006      	beq.n	8008a66 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	2b0f      	cmp	r3, #15
 8008a62:	d9e9      	bls.n	8008a38 <prvInitialiseNewTask+0x5c>
 8008a64:	e000      	b.n	8008a68 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008a66:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	2b37      	cmp	r3, #55	; 0x37
 8008a74:	d901      	bls.n	8008a7a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a76:	2337      	movs	r3, #55	; 0x37
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	2200      	movs	r2, #0
 8008a8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fe39 	bl	8007708 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	3318      	adds	r3, #24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fe34 	bl	8007708 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ab4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	2200      	movs	r2, #0
 8008aba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	68f9      	ldr	r1, [r7, #12]
 8008ac8:	69b8      	ldr	r0, [r7, #24]
 8008aca:	f001 f9e1 	bl	8009e90 <pxPortInitialiseStack>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ae0:	bf00      	nop
 8008ae2:	3720      	adds	r7, #32
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008af0:	f001 faf4 	bl	800a0dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008af4:	4b2d      	ldr	r3, [pc, #180]	; (8008bac <prvAddNewTaskToReadyList+0xc4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	4a2c      	ldr	r2, [pc, #176]	; (8008bac <prvAddNewTaskToReadyList+0xc4>)
 8008afc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008afe:	4b2c      	ldr	r3, [pc, #176]	; (8008bb0 <prvAddNewTaskToReadyList+0xc8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b06:	4a2a      	ldr	r2, [pc, #168]	; (8008bb0 <prvAddNewTaskToReadyList+0xc8>)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b0c:	4b27      	ldr	r3, [pc, #156]	; (8008bac <prvAddNewTaskToReadyList+0xc4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d110      	bne.n	8008b36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b14:	f000 fc0e 	bl	8009334 <prvInitialiseTaskLists>
 8008b18:	e00d      	b.n	8008b36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b1a:	4b26      	ldr	r3, [pc, #152]	; (8008bb4 <prvAddNewTaskToReadyList+0xcc>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d109      	bne.n	8008b36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b22:	4b23      	ldr	r3, [pc, #140]	; (8008bb0 <prvAddNewTaskToReadyList+0xc8>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d802      	bhi.n	8008b36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b30:	4a1f      	ldr	r2, [pc, #124]	; (8008bb0 <prvAddNewTaskToReadyList+0xc8>)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b36:	4b20      	ldr	r3, [pc, #128]	; (8008bb8 <prvAddNewTaskToReadyList+0xd0>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	4a1e      	ldr	r2, [pc, #120]	; (8008bb8 <prvAddNewTaskToReadyList+0xd0>)
 8008b3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b40:	4b1d      	ldr	r3, [pc, #116]	; (8008bb8 <prvAddNewTaskToReadyList+0xd0>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4c:	4b1b      	ldr	r3, [pc, #108]	; (8008bbc <prvAddNewTaskToReadyList+0xd4>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d903      	bls.n	8008b5c <prvAddNewTaskToReadyList+0x74>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	4a18      	ldr	r2, [pc, #96]	; (8008bbc <prvAddNewTaskToReadyList+0xd4>)
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4a15      	ldr	r2, [pc, #84]	; (8008bc0 <prvAddNewTaskToReadyList+0xd8>)
 8008b6a:	441a      	add	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f7fe fdd5 	bl	8007722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b78:	f001 fade 	bl	800a138 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b7c:	4b0d      	ldr	r3, [pc, #52]	; (8008bb4 <prvAddNewTaskToReadyList+0xcc>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00e      	beq.n	8008ba2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b84:	4b0a      	ldr	r3, [pc, #40]	; (8008bb0 <prvAddNewTaskToReadyList+0xc8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d207      	bcs.n	8008ba2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b92:	4b0c      	ldr	r3, [pc, #48]	; (8008bc4 <prvAddNewTaskToReadyList+0xdc>)
 8008b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ba2:	bf00      	nop
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000d30 	.word	0x20000d30
 8008bb0:	2000085c 	.word	0x2000085c
 8008bb4:	20000d3c 	.word	0x20000d3c
 8008bb8:	20000d4c 	.word	0x20000d4c
 8008bbc:	20000d38 	.word	0x20000d38
 8008bc0:	20000860 	.word	0x20000860
 8008bc4:	e000ed04 	.word	0xe000ed04

08008bc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d016      	beq.n	8008c08 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bda:	4b13      	ldr	r3, [pc, #76]	; (8008c28 <vTaskDelay+0x60>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d009      	beq.n	8008bf6 <vTaskDelay+0x2e>
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	60bb      	str	r3, [r7, #8]
 8008bf4:	e7fe      	b.n	8008bf4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008bf6:	f000 f87f 	bl	8008cf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fde9 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c02:	f000 f887 	bl	8008d14 <xTaskResumeAll>
 8008c06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d107      	bne.n	8008c1e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008c0e:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <vTaskDelay+0x64>)
 8008c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000d58 	.word	0x20000d58
 8008c2c:	e000ed04 	.word	0xe000ed04

08008c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	; 0x28
 8008c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c3e:	463a      	mov	r2, r7
 8008c40:	1d39      	adds	r1, r7, #4
 8008c42:	f107 0308 	add.w	r3, r7, #8
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fd0a 	bl	8007660 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	9202      	str	r2, [sp, #8]
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	2300      	movs	r3, #0
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	460a      	mov	r2, r1
 8008c5e:	4920      	ldr	r1, [pc, #128]	; (8008ce0 <vTaskStartScheduler+0xb0>)
 8008c60:	4820      	ldr	r0, [pc, #128]	; (8008ce4 <vTaskStartScheduler+0xb4>)
 8008c62:	f7ff fe1d 	bl	80088a0 <xTaskCreateStatic>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b1f      	ldr	r3, [pc, #124]	; (8008ce8 <vTaskStartScheduler+0xb8>)
 8008c6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ce8 <vTaskStartScheduler+0xb8>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c74:	2301      	movs	r3, #1
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	e001      	b.n	8008c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d102      	bne.n	8008c8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c84:	f000 fdfa 	bl	800987c <xTimerCreateTimerTask>
 8008c88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d115      	bne.n	8008cbc <vTaskStartScheduler+0x8c>
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <vTaskStartScheduler+0xbc>)
 8008ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008caa:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <vTaskStartScheduler+0xc0>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008cb0:	4b10      	ldr	r3, [pc, #64]	; (8008cf4 <vTaskStartScheduler+0xc4>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cb6:	f001 f973 	bl	8009fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cba:	e00d      	b.n	8008cd8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc2:	d109      	bne.n	8008cd8 <vTaskStartScheduler+0xa8>
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	e7fe      	b.n	8008cd6 <vTaskStartScheduler+0xa6>
}
 8008cd8:	bf00      	nop
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	0800c1d8 	.word	0x0800c1d8
 8008ce4:	08009305 	.word	0x08009305
 8008ce8:	20000d54 	.word	0x20000d54
 8008cec:	20000d50 	.word	0x20000d50
 8008cf0:	20000d3c 	.word	0x20000d3c
 8008cf4:	20000d34 	.word	0x20000d34

08008cf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008cfc:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <vTaskSuspendAll+0x18>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3301      	adds	r3, #1
 8008d02:	4a03      	ldr	r2, [pc, #12]	; (8008d10 <vTaskSuspendAll+0x18>)
 8008d04:	6013      	str	r3, [r2, #0]
}
 8008d06:	bf00      	nop
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	20000d58 	.word	0x20000d58

08008d14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d22:	4b41      	ldr	r3, [pc, #260]	; (8008e28 <xTaskResumeAll+0x114>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d109      	bne.n	8008d3e <xTaskResumeAll+0x2a>
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	e7fe      	b.n	8008d3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d3e:	f001 f9cd 	bl	800a0dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d42:	4b39      	ldr	r3, [pc, #228]	; (8008e28 <xTaskResumeAll+0x114>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	4a37      	ldr	r2, [pc, #220]	; (8008e28 <xTaskResumeAll+0x114>)
 8008d4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d4c:	4b36      	ldr	r3, [pc, #216]	; (8008e28 <xTaskResumeAll+0x114>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d162      	bne.n	8008e1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d54:	4b35      	ldr	r3, [pc, #212]	; (8008e2c <xTaskResumeAll+0x118>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d05e      	beq.n	8008e1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d5c:	e02f      	b.n	8008dbe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008d5e:	4b34      	ldr	r3, [pc, #208]	; (8008e30 <xTaskResumeAll+0x11c>)
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3318      	adds	r3, #24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe fd36 	bl	80077dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe fd31 	bl	80077dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7e:	4b2d      	ldr	r3, [pc, #180]	; (8008e34 <xTaskResumeAll+0x120>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d903      	bls.n	8008d8e <xTaskResumeAll+0x7a>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	4a2a      	ldr	r2, [pc, #168]	; (8008e34 <xTaskResumeAll+0x120>)
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d92:	4613      	mov	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4a27      	ldr	r2, [pc, #156]	; (8008e38 <xTaskResumeAll+0x124>)
 8008d9c:	441a      	add	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3304      	adds	r3, #4
 8008da2:	4619      	mov	r1, r3
 8008da4:	4610      	mov	r0, r2
 8008da6:	f7fe fcbc 	bl	8007722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dae:	4b23      	ldr	r3, [pc, #140]	; (8008e3c <xTaskResumeAll+0x128>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d302      	bcc.n	8008dbe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008db8:	4b21      	ldr	r3, [pc, #132]	; (8008e40 <xTaskResumeAll+0x12c>)
 8008dba:	2201      	movs	r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dbe:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <xTaskResumeAll+0x11c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1cb      	bne.n	8008d5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dcc:	f000 fb4c 	bl	8009468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008dd0:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <xTaskResumeAll+0x130>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d010      	beq.n	8008dfe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ddc:	f000 f846 	bl	8008e6c <xTaskIncrementTick>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008de6:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <xTaskResumeAll+0x12c>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1f1      	bne.n	8008ddc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008df8:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <xTaskResumeAll+0x130>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008dfe:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <xTaskResumeAll+0x12c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d009      	beq.n	8008e1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e0a:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <xTaskResumeAll+0x134>)
 8008e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e1a:	f001 f98d 	bl	800a138 <vPortExitCritical>

	return xAlreadyYielded;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20000d58 	.word	0x20000d58
 8008e2c:	20000d30 	.word	0x20000d30
 8008e30:	20000cf0 	.word	0x20000cf0
 8008e34:	20000d38 	.word	0x20000d38
 8008e38:	20000860 	.word	0x20000860
 8008e3c:	2000085c 	.word	0x2000085c
 8008e40:	20000d44 	.word	0x20000d44
 8008e44:	20000d40 	.word	0x20000d40
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <xTaskGetTickCount+0x1c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e58:	687b      	ldr	r3, [r7, #4]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20000d34 	.word	0x20000d34

08008e6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e76:	4b51      	ldr	r3, [pc, #324]	; (8008fbc <xTaskIncrementTick+0x150>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f040 808d 	bne.w	8008f9a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e80:	4b4f      	ldr	r3, [pc, #316]	; (8008fc0 <xTaskIncrementTick+0x154>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3301      	adds	r3, #1
 8008e86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e88:	4a4d      	ldr	r2, [pc, #308]	; (8008fc0 <xTaskIncrementTick+0x154>)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d11f      	bne.n	8008ed4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e94:	4b4b      	ldr	r3, [pc, #300]	; (8008fc4 <xTaskIncrementTick+0x158>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <xTaskIncrementTick+0x46>
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	e7fe      	b.n	8008eb0 <xTaskIncrementTick+0x44>
 8008eb2:	4b44      	ldr	r3, [pc, #272]	; (8008fc4 <xTaskIncrementTick+0x158>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	4b43      	ldr	r3, [pc, #268]	; (8008fc8 <xTaskIncrementTick+0x15c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a41      	ldr	r2, [pc, #260]	; (8008fc4 <xTaskIncrementTick+0x158>)
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	4a41      	ldr	r2, [pc, #260]	; (8008fc8 <xTaskIncrementTick+0x15c>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	4b41      	ldr	r3, [pc, #260]	; (8008fcc <xTaskIncrementTick+0x160>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	4a3f      	ldr	r2, [pc, #252]	; (8008fcc <xTaskIncrementTick+0x160>)
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	f000 faca 	bl	8009468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ed4:	4b3e      	ldr	r3, [pc, #248]	; (8008fd0 <xTaskIncrementTick+0x164>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d34e      	bcc.n	8008f7c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ede:	4b39      	ldr	r3, [pc, #228]	; (8008fc4 <xTaskIncrementTick+0x158>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d101      	bne.n	8008eec <xTaskIncrementTick+0x80>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e000      	b.n	8008eee <xTaskIncrementTick+0x82>
 8008eec:	2300      	movs	r3, #0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d004      	beq.n	8008efc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef2:	4b37      	ldr	r3, [pc, #220]	; (8008fd0 <xTaskIncrementTick+0x164>)
 8008ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef8:	601a      	str	r2, [r3, #0]
					break;
 8008efa:	e03f      	b.n	8008f7c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008efc:	4b31      	ldr	r3, [pc, #196]	; (8008fc4 <xTaskIncrementTick+0x158>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d203      	bcs.n	8008f1c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f14:	4a2e      	ldr	r2, [pc, #184]	; (8008fd0 <xTaskIncrementTick+0x164>)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6013      	str	r3, [r2, #0]
						break;
 8008f1a:	e02f      	b.n	8008f7c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe fc5b 	bl	80077dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d004      	beq.n	8008f38 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	3318      	adds	r3, #24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe fc52 	bl	80077dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f3c:	4b25      	ldr	r3, [pc, #148]	; (8008fd4 <xTaskIncrementTick+0x168>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d903      	bls.n	8008f4c <xTaskIncrementTick+0xe0>
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f48:	4a22      	ldr	r2, [pc, #136]	; (8008fd4 <xTaskIncrementTick+0x168>)
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	4613      	mov	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4a1f      	ldr	r2, [pc, #124]	; (8008fd8 <xTaskIncrementTick+0x16c>)
 8008f5a:	441a      	add	r2, r3
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f7fe fbdd 	bl	8007722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6c:	4b1b      	ldr	r3, [pc, #108]	; (8008fdc <xTaskIncrementTick+0x170>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d3b3      	bcc.n	8008ede <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008f76:	2301      	movs	r3, #1
 8008f78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f7a:	e7b0      	b.n	8008ede <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f7c:	4b17      	ldr	r3, [pc, #92]	; (8008fdc <xTaskIncrementTick+0x170>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f82:	4915      	ldr	r1, [pc, #84]	; (8008fd8 <xTaskIncrementTick+0x16c>)
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d907      	bls.n	8008fa4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008f94:	2301      	movs	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	e004      	b.n	8008fa4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008f9a:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <xTaskIncrementTick+0x174>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	4a0f      	ldr	r2, [pc, #60]	; (8008fe0 <xTaskIncrementTick+0x174>)
 8008fa2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <xTaskIncrementTick+0x178>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008fac:	2301      	movs	r3, #1
 8008fae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000d58 	.word	0x20000d58
 8008fc0:	20000d34 	.word	0x20000d34
 8008fc4:	20000ce8 	.word	0x20000ce8
 8008fc8:	20000cec 	.word	0x20000cec
 8008fcc:	20000d48 	.word	0x20000d48
 8008fd0:	20000d50 	.word	0x20000d50
 8008fd4:	20000d38 	.word	0x20000d38
 8008fd8:	20000860 	.word	0x20000860
 8008fdc:	2000085c 	.word	0x2000085c
 8008fe0:	20000d40 	.word	0x20000d40
 8008fe4:	20000d44 	.word	0x20000d44

08008fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008fee:	4b27      	ldr	r3, [pc, #156]	; (800908c <vTaskSwitchContext+0xa4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d003      	beq.n	8008ffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ff6:	4b26      	ldr	r3, [pc, #152]	; (8009090 <vTaskSwitchContext+0xa8>)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ffc:	e040      	b.n	8009080 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008ffe:	4b24      	ldr	r3, [pc, #144]	; (8009090 <vTaskSwitchContext+0xa8>)
 8009000:	2200      	movs	r2, #0
 8009002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009004:	4b23      	ldr	r3, [pc, #140]	; (8009094 <vTaskSwitchContext+0xac>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	e00f      	b.n	800902c <vTaskSwitchContext+0x44>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <vTaskSwitchContext+0x3e>
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	607b      	str	r3, [r7, #4]
 8009024:	e7fe      	b.n	8009024 <vTaskSwitchContext+0x3c>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3b01      	subs	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	491a      	ldr	r1, [pc, #104]	; (8009098 <vTaskSwitchContext+0xb0>)
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0e5      	beq.n	800900c <vTaskSwitchContext+0x24>
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	4613      	mov	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4a13      	ldr	r2, [pc, #76]	; (8009098 <vTaskSwitchContext+0xb0>)
 800904c:	4413      	add	r3, r2
 800904e:	60bb      	str	r3, [r7, #8]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	605a      	str	r2, [r3, #4]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	3308      	adds	r3, #8
 8009062:	429a      	cmp	r2, r3
 8009064:	d104      	bne.n	8009070 <vTaskSwitchContext+0x88>
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	605a      	str	r2, [r3, #4]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	4a09      	ldr	r2, [pc, #36]	; (800909c <vTaskSwitchContext+0xb4>)
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	4a06      	ldr	r2, [pc, #24]	; (8009094 <vTaskSwitchContext+0xac>)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6013      	str	r3, [r2, #0]
}
 8009080:	bf00      	nop
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	20000d58 	.word	0x20000d58
 8009090:	20000d44 	.word	0x20000d44
 8009094:	20000d38 	.word	0x20000d38
 8009098:	20000860 	.word	0x20000860
 800909c:	2000085c 	.word	0x2000085c

080090a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d109      	bne.n	80090c4 <vTaskPlaceOnEventList+0x24>
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
 80090c2:	e7fe      	b.n	80090c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090c4:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <vTaskPlaceOnEventList+0x44>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3318      	adds	r3, #24
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7fe fb4c 	bl	800776a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090d2:	2101      	movs	r1, #1
 80090d4:	6838      	ldr	r0, [r7, #0]
 80090d6:	f000 fb7d 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
}
 80090da:	bf00      	nop
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	2000085c 	.word	0x2000085c

080090e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d109      	bne.n	800910e <vTaskPlaceOnEventListRestricted+0x26>
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	e7fe      	b.n	800910c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <vTaskPlaceOnEventListRestricted+0x50>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3318      	adds	r3, #24
 8009114:	4619      	mov	r1, r3
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7fe fb03 	bl	8007722 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009122:	f04f 33ff 	mov.w	r3, #4294967295
 8009126:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	68b8      	ldr	r0, [r7, #8]
 800912c:	f000 fb52 	bl	80097d4 <prvAddCurrentTaskToDelayedList>
	}
 8009130:	bf00      	nop
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	2000085c 	.word	0x2000085c

0800913c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d109      	bne.n	8009166 <xTaskRemoveFromEventList+0x2a>
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	e7fe      	b.n	8009164 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	3318      	adds	r3, #24
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fb36 	bl	80077dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009170:	4b1d      	ldr	r3, [pc, #116]	; (80091e8 <xTaskRemoveFromEventList+0xac>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d11d      	bne.n	80091b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	3304      	adds	r3, #4
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe fb2d 	bl	80077dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009186:	4b19      	ldr	r3, [pc, #100]	; (80091ec <xTaskRemoveFromEventList+0xb0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d903      	bls.n	8009196 <xTaskRemoveFromEventList+0x5a>
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	4a16      	ldr	r2, [pc, #88]	; (80091ec <xTaskRemoveFromEventList+0xb0>)
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919a:	4613      	mov	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4a13      	ldr	r2, [pc, #76]	; (80091f0 <xTaskRemoveFromEventList+0xb4>)
 80091a4:	441a      	add	r2, r3
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	3304      	adds	r3, #4
 80091aa:	4619      	mov	r1, r3
 80091ac:	4610      	mov	r0, r2
 80091ae:	f7fe fab8 	bl	8007722 <vListInsertEnd>
 80091b2:	e005      	b.n	80091c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	3318      	adds	r3, #24
 80091b8:	4619      	mov	r1, r3
 80091ba:	480e      	ldr	r0, [pc, #56]	; (80091f4 <xTaskRemoveFromEventList+0xb8>)
 80091bc:	f7fe fab1 	bl	8007722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c4:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <xTaskRemoveFromEventList+0xbc>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d905      	bls.n	80091da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091ce:	2301      	movs	r3, #1
 80091d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091d2:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <xTaskRemoveFromEventList+0xc0>)
 80091d4:	2201      	movs	r2, #1
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	e001      	b.n	80091de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80091da:	2300      	movs	r3, #0
 80091dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80091de:	697b      	ldr	r3, [r7, #20]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20000d58 	.word	0x20000d58
 80091ec:	20000d38 	.word	0x20000d38
 80091f0:	20000860 	.word	0x20000860
 80091f4:	20000cf0 	.word	0x20000cf0
 80091f8:	2000085c 	.word	0x2000085c
 80091fc:	20000d44 	.word	0x20000d44

08009200 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009208:	4b06      	ldr	r3, [pc, #24]	; (8009224 <vTaskInternalSetTimeOutState+0x24>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009210:	4b05      	ldr	r3, [pc, #20]	; (8009228 <vTaskInternalSetTimeOutState+0x28>)
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	605a      	str	r2, [r3, #4]
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	20000d48 	.word	0x20000d48
 8009228:	20000d34 	.word	0x20000d34

0800922c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d109      	bne.n	8009250 <xTaskCheckForTimeOut+0x24>
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	613b      	str	r3, [r7, #16]
 800924e:	e7fe      	b.n	800924e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <xTaskCheckForTimeOut+0x3e>
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	e7fe      	b.n	8009268 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800926a:	f000 ff37 	bl	800a0dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800926e:	4b1d      	ldr	r3, [pc, #116]	; (80092e4 <xTaskCheckForTimeOut+0xb8>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d102      	bne.n	800928e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
 800928c:	e023      	b.n	80092d6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <xTaskCheckForTimeOut+0xbc>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d007      	beq.n	80092aa <xTaskCheckForTimeOut+0x7e>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d302      	bcc.n	80092aa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092a4:	2301      	movs	r3, #1
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	e015      	b.n	80092d6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d20b      	bcs.n	80092cc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	1ad2      	subs	r2, r2, r3
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ff9d 	bl	8009200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092c6:	2300      	movs	r3, #0
 80092c8:	61fb      	str	r3, [r7, #28]
 80092ca:	e004      	b.n	80092d6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092d6:	f000 ff2f 	bl	800a138 <vPortExitCritical>

	return xReturn;
 80092da:	69fb      	ldr	r3, [r7, #28]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3720      	adds	r7, #32
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20000d34 	.word	0x20000d34
 80092e8:	20000d48 	.word	0x20000d48

080092ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092f0:	4b03      	ldr	r3, [pc, #12]	; (8009300 <vTaskMissedYield+0x14>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
}
 80092f6:	bf00      	nop
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	20000d44 	.word	0x20000d44

08009304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800930c:	f000 f852 	bl	80093b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009310:	4b06      	ldr	r3, [pc, #24]	; (800932c <prvIdleTask+0x28>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d9f9      	bls.n	800930c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009318:	4b05      	ldr	r3, [pc, #20]	; (8009330 <prvIdleTask+0x2c>)
 800931a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009328:	e7f0      	b.n	800930c <prvIdleTask+0x8>
 800932a:	bf00      	nop
 800932c:	20000860 	.word	0x20000860
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800933a:	2300      	movs	r3, #0
 800933c:	607b      	str	r3, [r7, #4]
 800933e:	e00c      	b.n	800935a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	4613      	mov	r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4a12      	ldr	r2, [pc, #72]	; (8009394 <prvInitialiseTaskLists+0x60>)
 800934c:	4413      	add	r3, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe f9ba 	bl	80076c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	3301      	adds	r3, #1
 8009358:	607b      	str	r3, [r7, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b37      	cmp	r3, #55	; 0x37
 800935e:	d9ef      	bls.n	8009340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009360:	480d      	ldr	r0, [pc, #52]	; (8009398 <prvInitialiseTaskLists+0x64>)
 8009362:	f7fe f9b1 	bl	80076c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009366:	480d      	ldr	r0, [pc, #52]	; (800939c <prvInitialiseTaskLists+0x68>)
 8009368:	f7fe f9ae 	bl	80076c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800936c:	480c      	ldr	r0, [pc, #48]	; (80093a0 <prvInitialiseTaskLists+0x6c>)
 800936e:	f7fe f9ab 	bl	80076c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009372:	480c      	ldr	r0, [pc, #48]	; (80093a4 <prvInitialiseTaskLists+0x70>)
 8009374:	f7fe f9a8 	bl	80076c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009378:	480b      	ldr	r0, [pc, #44]	; (80093a8 <prvInitialiseTaskLists+0x74>)
 800937a:	f7fe f9a5 	bl	80076c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800937e:	4b0b      	ldr	r3, [pc, #44]	; (80093ac <prvInitialiseTaskLists+0x78>)
 8009380:	4a05      	ldr	r2, [pc, #20]	; (8009398 <prvInitialiseTaskLists+0x64>)
 8009382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009384:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <prvInitialiseTaskLists+0x7c>)
 8009386:	4a05      	ldr	r2, [pc, #20]	; (800939c <prvInitialiseTaskLists+0x68>)
 8009388:	601a      	str	r2, [r3, #0]
}
 800938a:	bf00      	nop
 800938c:	3708      	adds	r7, #8
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000860 	.word	0x20000860
 8009398:	20000cc0 	.word	0x20000cc0
 800939c:	20000cd4 	.word	0x20000cd4
 80093a0:	20000cf0 	.word	0x20000cf0
 80093a4:	20000d04 	.word	0x20000d04
 80093a8:	20000d1c 	.word	0x20000d1c
 80093ac:	20000ce8 	.word	0x20000ce8
 80093b0:	20000cec 	.word	0x20000cec

080093b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093ba:	e019      	b.n	80093f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093bc:	f000 fe8e 	bl	800a0dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80093c0:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <prvCheckTasksWaitingTermination+0x4c>)
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fa05 	bl	80077dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093d2:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <prvCheckTasksWaitingTermination+0x50>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	4a0a      	ldr	r2, [pc, #40]	; (8009404 <prvCheckTasksWaitingTermination+0x50>)
 80093da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <prvCheckTasksWaitingTermination+0x54>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	4a09      	ldr	r2, [pc, #36]	; (8009408 <prvCheckTasksWaitingTermination+0x54>)
 80093e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093e6:	f000 fea7 	bl	800a138 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f80e 	bl	800940c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093f0:	4b05      	ldr	r3, [pc, #20]	; (8009408 <prvCheckTasksWaitingTermination+0x54>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e1      	bne.n	80093bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20000d04 	.word	0x20000d04
 8009404:	20000d30 	.word	0x20000d30
 8009408:	20000d18 	.word	0x20000d18

0800940c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800941a:	2b00      	cmp	r3, #0
 800941c:	d108      	bne.n	8009430 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	4618      	mov	r0, r3
 8009424:	f001 f836 	bl	800a494 <vPortFree>
				vPortFree( pxTCB );
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 f833 	bl	800a494 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800942e:	e017      	b.n	8009460 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009436:	2b01      	cmp	r3, #1
 8009438:	d103      	bne.n	8009442 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 f82a 	bl	800a494 <vPortFree>
	}
 8009440:	e00e      	b.n	8009460 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009448:	2b02      	cmp	r3, #2
 800944a:	d009      	beq.n	8009460 <prvDeleteTCB+0x54>
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e7fe      	b.n	800945e <prvDeleteTCB+0x52>
	}
 8009460:	bf00      	nop
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800946e:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <prvResetNextTaskUnblockTime+0x44>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <prvResetNextTaskUnblockTime+0x14>
 8009478:	2301      	movs	r3, #1
 800947a:	e000      	b.n	800947e <prvResetNextTaskUnblockTime+0x16>
 800947c:	2300      	movs	r3, #0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d004      	beq.n	800948c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009482:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <prvResetNextTaskUnblockTime+0x48>)
 8009484:	f04f 32ff 	mov.w	r2, #4294967295
 8009488:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800948a:	e008      	b.n	800949e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800948c:	4b07      	ldr	r3, [pc, #28]	; (80094ac <prvResetNextTaskUnblockTime+0x44>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	4a05      	ldr	r2, [pc, #20]	; (80094b0 <prvResetNextTaskUnblockTime+0x48>)
 800949c:	6013      	str	r3, [r2, #0]
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20000ce8 	.word	0x20000ce8
 80094b0:	20000d50 	.word	0x20000d50

080094b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094ba:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <xTaskGetSchedulerState+0x34>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d102      	bne.n	80094c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094c2:	2301      	movs	r3, #1
 80094c4:	607b      	str	r3, [r7, #4]
 80094c6:	e008      	b.n	80094da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c8:	4b08      	ldr	r3, [pc, #32]	; (80094ec <xTaskGetSchedulerState+0x38>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d102      	bne.n	80094d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094d0:	2302      	movs	r3, #2
 80094d2:	607b      	str	r3, [r7, #4]
 80094d4:	e001      	b.n	80094da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094d6:	2300      	movs	r3, #0
 80094d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094da:	687b      	ldr	r3, [r7, #4]
	}
 80094dc:	4618      	mov	r0, r3
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	20000d3c 	.word	0x20000d3c
 80094ec:	20000d58 	.word	0x20000d58

080094f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094fc:	2300      	movs	r3, #0
 80094fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d056      	beq.n	80095b4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950a:	4b2d      	ldr	r3, [pc, #180]	; (80095c0 <xTaskPriorityInherit+0xd0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009510:	429a      	cmp	r2, r3
 8009512:	d246      	bcs.n	80095a2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	db06      	blt.n	800952a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800951c:	4b28      	ldr	r3, [pc, #160]	; (80095c0 <xTaskPriorityInherit+0xd0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6959      	ldr	r1, [r3, #20]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4a22      	ldr	r2, [pc, #136]	; (80095c4 <xTaskPriorityInherit+0xd4>)
 800953c:	4413      	add	r3, r2
 800953e:	4299      	cmp	r1, r3
 8009540:	d101      	bne.n	8009546 <xTaskPriorityInherit+0x56>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <xTaskPriorityInherit+0x58>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d022      	beq.n	8009592 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	3304      	adds	r3, #4
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe f943 	bl	80077dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009556:	4b1a      	ldr	r3, [pc, #104]	; (80095c0 <xTaskPriorityInherit+0xd0>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009564:	4b18      	ldr	r3, [pc, #96]	; (80095c8 <xTaskPriorityInherit+0xd8>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d903      	bls.n	8009574 <xTaskPriorityInherit+0x84>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	4a15      	ldr	r2, [pc, #84]	; (80095c8 <xTaskPriorityInherit+0xd8>)
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4a10      	ldr	r2, [pc, #64]	; (80095c4 <xTaskPriorityInherit+0xd4>)
 8009582:	441a      	add	r2, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe f8c9 	bl	8007722 <vListInsertEnd>
 8009590:	e004      	b.n	800959c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009592:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <xTaskPriorityInherit+0xd0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800959c:	2301      	movs	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	e008      	b.n	80095b4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095a6:	4b06      	ldr	r3, [pc, #24]	; (80095c0 <xTaskPriorityInherit+0xd0>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d201      	bcs.n	80095b4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80095b0:	2301      	movs	r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095b4:	68fb      	ldr	r3, [r7, #12]
	}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	2000085c 	.word	0x2000085c
 80095c4:	20000860 	.word	0x20000860
 80095c8:	20000d38 	.word	0x20000d38

080095cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095d8:	2300      	movs	r3, #0
 80095da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d054      	beq.n	800968c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095e2:	4b2d      	ldr	r3, [pc, #180]	; (8009698 <xTaskPriorityDisinherit+0xcc>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d009      	beq.n	8009600 <xTaskPriorityDisinherit+0x34>
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	60fb      	str	r3, [r7, #12]
 80095fe:	e7fe      	b.n	80095fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009604:	2b00      	cmp	r3, #0
 8009606:	d109      	bne.n	800961c <xTaskPriorityDisinherit+0x50>
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60bb      	str	r3, [r7, #8]
 800961a:	e7fe      	b.n	800961a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009620:	1e5a      	subs	r2, r3, #1
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800962e:	429a      	cmp	r2, r3
 8009630:	d02c      	beq.n	800968c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009636:	2b00      	cmp	r3, #0
 8009638:	d128      	bne.n	800968c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3304      	adds	r3, #4
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe f8cc 	bl	80077dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <xTaskPriorityDisinherit+0xd0>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	429a      	cmp	r2, r3
 8009662:	d903      	bls.n	800966c <xTaskPriorityDisinherit+0xa0>
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	4a0c      	ldr	r2, [pc, #48]	; (800969c <xTaskPriorityDisinherit+0xd0>)
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	4613      	mov	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4a09      	ldr	r2, [pc, #36]	; (80096a0 <xTaskPriorityDisinherit+0xd4>)
 800967a:	441a      	add	r2, r3
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fe f84d 	bl	8007722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009688:	2301      	movs	r3, #1
 800968a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800968c:	697b      	ldr	r3, [r7, #20]
	}
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	2000085c 	.word	0x2000085c
 800969c:	20000d38 	.word	0x20000d38
 80096a0:	20000860 	.word	0x20000860

080096a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80096b2:	2301      	movs	r3, #1
 80096b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d06d      	beq.n	8009798 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d109      	bne.n	80096d8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	e7fe      	b.n	80096d6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d902      	bls.n	80096e8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	61fb      	str	r3, [r7, #28]
 80096e6:	e002      	b.n	80096ee <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d04f      	beq.n	8009798 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d14a      	bne.n	8009798 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009702:	4b27      	ldr	r3, [pc, #156]	; (80097a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	429a      	cmp	r2, r3
 800970a:	d109      	bne.n	8009720 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	e7fe      	b.n	800971e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	db04      	blt.n	800973e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	6959      	ldr	r1, [r3, #20]
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800974e:	4413      	add	r3, r2
 8009750:	4299      	cmp	r1, r3
 8009752:	d101      	bne.n	8009758 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8009754:	2301      	movs	r3, #1
 8009756:	e000      	b.n	800975a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009758:	2300      	movs	r3, #0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d01c      	beq.n	8009798 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	3304      	adds	r3, #4
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe f83a 	bl	80077dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976c:	4b0e      	ldr	r3, [pc, #56]	; (80097a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	429a      	cmp	r2, r3
 8009772:	d903      	bls.n	800977c <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	4a0b      	ldr	r2, [pc, #44]	; (80097a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	4613      	mov	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4a06      	ldr	r2, [pc, #24]	; (80097a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800978a:	441a      	add	r2, r3
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	3304      	adds	r3, #4
 8009790:	4619      	mov	r1, r3
 8009792:	4610      	mov	r0, r2
 8009794:	f7fd ffc5 	bl	8007722 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009798:	bf00      	nop
 800979a:	3720      	adds	r7, #32
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	2000085c 	.word	0x2000085c
 80097a4:	20000860 	.word	0x20000860
 80097a8:	20000d38 	.word	0x20000d38

080097ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d004      	beq.n	80097c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097be:	3201      	adds	r2, #1
 80097c0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80097c2:	4b03      	ldr	r3, [pc, #12]	; (80097d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80097c4:	681b      	ldr	r3, [r3, #0]
	}
 80097c6:	4618      	mov	r0, r3
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	2000085c 	.word	0x2000085c

080097d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097de:	4b21      	ldr	r3, [pc, #132]	; (8009864 <prvAddCurrentTaskToDelayedList+0x90>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097e4:	4b20      	ldr	r3, [pc, #128]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3304      	adds	r3, #4
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fd fff6 	bl	80077dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f6:	d10a      	bne.n	800980e <prvAddCurrentTaskToDelayedList+0x3a>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d007      	beq.n	800980e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097fe:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	3304      	adds	r3, #4
 8009804:	4619      	mov	r1, r3
 8009806:	4819      	ldr	r0, [pc, #100]	; (800986c <prvAddCurrentTaskToDelayedList+0x98>)
 8009808:	f7fd ff8b 	bl	8007722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800980c:	e026      	b.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4413      	add	r3, r2
 8009814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	429a      	cmp	r2, r3
 8009824:	d209      	bcs.n	800983a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009826:	4b12      	ldr	r3, [pc, #72]	; (8009870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3304      	adds	r3, #4
 8009830:	4619      	mov	r1, r3
 8009832:	4610      	mov	r0, r2
 8009834:	f7fd ff99 	bl	800776a <vListInsert>
}
 8009838:	e010      	b.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983a:	4b0e      	ldr	r3, [pc, #56]	; (8009874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b0a      	ldr	r3, [pc, #40]	; (8009868 <prvAddCurrentTaskToDelayedList+0x94>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3304      	adds	r3, #4
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f7fd ff8f 	bl	800776a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	429a      	cmp	r2, r3
 8009854:	d202      	bcs.n	800985c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009856:	4a08      	ldr	r2, [pc, #32]	; (8009878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	6013      	str	r3, [r2, #0]
}
 800985c:	bf00      	nop
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20000d34 	.word	0x20000d34
 8009868:	2000085c 	.word	0x2000085c
 800986c:	20000d1c 	.word	0x20000d1c
 8009870:	20000cec 	.word	0x20000cec
 8009874:	20000ce8 	.word	0x20000ce8
 8009878:	20000d50 	.word	0x20000d50

0800987c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08a      	sub	sp, #40	; 0x28
 8009880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009882:	2300      	movs	r3, #0
 8009884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009886:	f000 fac3 	bl	8009e10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800988a:	4b1c      	ldr	r3, [pc, #112]	; (80098fc <xTimerCreateTimerTask+0x80>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d021      	beq.n	80098d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800989a:	1d3a      	adds	r2, r7, #4
 800989c:	f107 0108 	add.w	r1, r7, #8
 80098a0:	f107 030c 	add.w	r3, r7, #12
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fd fef5 	bl	8007694 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	9202      	str	r2, [sp, #8]
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	2302      	movs	r3, #2
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	2300      	movs	r3, #0
 80098ba:	460a      	mov	r2, r1
 80098bc:	4910      	ldr	r1, [pc, #64]	; (8009900 <xTimerCreateTimerTask+0x84>)
 80098be:	4811      	ldr	r0, [pc, #68]	; (8009904 <xTimerCreateTimerTask+0x88>)
 80098c0:	f7fe ffee 	bl	80088a0 <xTaskCreateStatic>
 80098c4:	4602      	mov	r2, r0
 80098c6:	4b10      	ldr	r3, [pc, #64]	; (8009908 <xTimerCreateTimerTask+0x8c>)
 80098c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098ca:	4b0f      	ldr	r3, [pc, #60]	; (8009908 <xTimerCreateTimerTask+0x8c>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098d2:	2301      	movs	r3, #1
 80098d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d109      	bne.n	80098f0 <xTimerCreateTimerTask+0x74>
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	613b      	str	r3, [r7, #16]
 80098ee:	e7fe      	b.n	80098ee <xTimerCreateTimerTask+0x72>
	return xReturn;
 80098f0:	697b      	ldr	r3, [r7, #20]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20000d8c 	.word	0x20000d8c
 8009900:	0800c1e0 	.word	0x0800c1e0
 8009904:	08009a25 	.word	0x08009a25
 8009908:	20000d90 	.word	0x20000d90

0800990c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
 8009918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800991a:	2300      	movs	r3, #0
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d109      	bne.n	8009938 <xTimerGenericCommand+0x2c>
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	f383 8811 	msr	BASEPRI, r3
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	623b      	str	r3, [r7, #32]
 8009936:	e7fe      	b.n	8009936 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009938:	4b19      	ldr	r3, [pc, #100]	; (80099a0 <xTimerGenericCommand+0x94>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d02a      	beq.n	8009996 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b05      	cmp	r3, #5
 8009950:	dc18      	bgt.n	8009984 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009952:	f7ff fdaf 	bl	80094b4 <xTaskGetSchedulerState>
 8009956:	4603      	mov	r3, r0
 8009958:	2b02      	cmp	r3, #2
 800995a:	d109      	bne.n	8009970 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800995c:	4b10      	ldr	r3, [pc, #64]	; (80099a0 <xTimerGenericCommand+0x94>)
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	f107 0110 	add.w	r1, r7, #16
 8009964:	2300      	movs	r3, #0
 8009966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009968:	f7fe f950 	bl	8007c0c <xQueueGenericSend>
 800996c:	6278      	str	r0, [r7, #36]	; 0x24
 800996e:	e012      	b.n	8009996 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009970:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <xTimerGenericCommand+0x94>)
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	f107 0110 	add.w	r1, r7, #16
 8009978:	2300      	movs	r3, #0
 800997a:	2200      	movs	r2, #0
 800997c:	f7fe f946 	bl	8007c0c <xQueueGenericSend>
 8009980:	6278      	str	r0, [r7, #36]	; 0x24
 8009982:	e008      	b.n	8009996 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009984:	4b06      	ldr	r3, [pc, #24]	; (80099a0 <xTimerGenericCommand+0x94>)
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	f107 0110 	add.w	r1, r7, #16
 800998c:	2300      	movs	r3, #0
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	f7fe fa36 	bl	8007e00 <xQueueGenericSendFromISR>
 8009994:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009998:	4618      	mov	r0, r3
 800999a:	3728      	adds	r7, #40	; 0x28
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20000d8c 	.word	0x20000d8c

080099a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af02      	add	r7, sp, #8
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099ae:	4b1c      	ldr	r3, [pc, #112]	; (8009a20 <prvProcessExpiredTimer+0x7c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	3304      	adds	r3, #4
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fd ff0d 	bl	80077dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d121      	bne.n	8009a0e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	699a      	ldr	r2, [r3, #24]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	18d1      	adds	r1, r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	6978      	ldr	r0, [r7, #20]
 80099d8:	f000 f8c8 	bl	8009b6c <prvInsertTimerInActiveList>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d015      	beq.n	8009a0e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099e2:	2300      	movs	r3, #0
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	2300      	movs	r3, #0
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	2100      	movs	r1, #0
 80099ec:	6978      	ldr	r0, [r7, #20]
 80099ee:	f7ff ff8d 	bl	800990c <xTimerGenericCommand>
 80099f2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d109      	bne.n	8009a0e <prvProcessExpiredTimer+0x6a>
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	e7fe      	b.n	8009a0c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	6978      	ldr	r0, [r7, #20]
 8009a14:	4798      	blx	r3
}
 8009a16:	bf00      	nop
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20000d84 	.word	0x20000d84

08009a24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a2c:	f107 0308 	add.w	r3, r7, #8
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f857 	bl	8009ae4 <prvGetNextExpireTime>
 8009a36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f803 	bl	8009a48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a42:	f000 f8d5 	bl	8009bf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a46:	e7f1      	b.n	8009a2c <prvTimerTask+0x8>

08009a48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a52:	f7ff f951 	bl	8008cf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a56:	f107 0308 	add.w	r3, r7, #8
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f866 	bl	8009b2c <prvSampleTimeNow>
 8009a60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d130      	bne.n	8009aca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10a      	bne.n	8009a84 <prvProcessTimerOrBlockTask+0x3c>
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d806      	bhi.n	8009a84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a76:	f7ff f94d 	bl	8008d14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a7a:	68f9      	ldr	r1, [r7, #12]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff ff91 	bl	80099a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a82:	e024      	b.n	8009ace <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d008      	beq.n	8009a9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a8a:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <prvProcessTimerOrBlockTask+0x90>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bf0c      	ite	eq
 8009a94:	2301      	moveq	r3, #1
 8009a96:	2300      	movne	r3, #0
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a9c:	4b0f      	ldr	r3, [pc, #60]	; (8009adc <prvProcessTimerOrBlockTask+0x94>)
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f7fe fec5 	bl	8008838 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009aae:	f7ff f931 	bl	8008d14 <xTaskResumeAll>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ab8:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <prvProcessTimerOrBlockTask+0x98>)
 8009aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	f3bf 8f6f 	isb	sy
}
 8009ac8:	e001      	b.n	8009ace <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aca:	f7ff f923 	bl	8008d14 <xTaskResumeAll>
}
 8009ace:	bf00      	nop
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20000d88 	.word	0x20000d88
 8009adc:	20000d8c 	.word	0x20000d8c
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009aec:	4b0e      	ldr	r3, [pc, #56]	; (8009b28 <prvGetNextExpireTime+0x44>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	bf0c      	ite	eq
 8009af6:	2301      	moveq	r3, #1
 8009af8:	2300      	movne	r3, #0
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	461a      	mov	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b0a:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <prvGetNextExpireTime+0x44>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e001      	b.n	8009b1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	20000d84 	.word	0x20000d84

08009b2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b34:	f7ff f98a 	bl	8008e4c <xTaskGetTickCount>
 8009b38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b3a:	4b0b      	ldr	r3, [pc, #44]	; (8009b68 <prvSampleTimeNow+0x3c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d205      	bcs.n	8009b50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b44:	f000 f904 	bl	8009d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	e002      	b.n	8009b56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b56:	4a04      	ldr	r2, [pc, #16]	; (8009b68 <prvSampleTimeNow+0x3c>)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20000d94 	.word	0x20000d94

08009b6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	68ba      	ldr	r2, [r7, #8]
 8009b82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d812      	bhi.n	8009bb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	1ad2      	subs	r2, r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d302      	bcc.n	8009ba6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	617b      	str	r3, [r7, #20]
 8009ba4:	e01b      	b.n	8009bde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ba6:	4b10      	ldr	r3, [pc, #64]	; (8009be8 <prvInsertTimerInActiveList+0x7c>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4619      	mov	r1, r3
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	f7fd fdda 	bl	800776a <vListInsert>
 8009bb6:	e012      	b.n	8009bde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d206      	bcs.n	8009bce <prvInsertTimerInActiveList+0x62>
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d302      	bcc.n	8009bce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e007      	b.n	8009bde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bce:	4b07      	ldr	r3, [pc, #28]	; (8009bec <prvInsertTimerInActiveList+0x80>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fd fdc6 	bl	800776a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bde:	697b      	ldr	r3, [r7, #20]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3718      	adds	r7, #24
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	20000d88 	.word	0x20000d88
 8009bec:	20000d84 	.word	0x20000d84

08009bf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08e      	sub	sp, #56	; 0x38
 8009bf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bf6:	e099      	b.n	8009d2c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da17      	bge.n	8009c2e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bfe:	1d3b      	adds	r3, r7, #4
 8009c00:	3304      	adds	r3, #4
 8009c02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d109      	bne.n	8009c1e <prvProcessReceivedCommands+0x2e>
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	61fb      	str	r3, [r7, #28]
 8009c1c:	e7fe      	b.n	8009c1c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c24:	6850      	ldr	r0, [r2, #4]
 8009c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c28:	6892      	ldr	r2, [r2, #8]
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	db7a      	blt.n	8009d2a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d004      	beq.n	8009c4a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	3304      	adds	r3, #4
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fd fdc9 	bl	80077dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7ff ff6d 	bl	8009b2c <prvSampleTimeNow>
 8009c52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b09      	cmp	r3, #9
 8009c58:	d868      	bhi.n	8009d2c <prvProcessReceivedCommands+0x13c>
 8009c5a:	a201      	add	r2, pc, #4	; (adr r2, 8009c60 <prvProcessReceivedCommands+0x70>)
 8009c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c60:	08009c89 	.word	0x08009c89
 8009c64:	08009c89 	.word	0x08009c89
 8009c68:	08009c89 	.word	0x08009c89
 8009c6c:	08009d2d 	.word	0x08009d2d
 8009c70:	08009ce3 	.word	0x08009ce3
 8009c74:	08009d19 	.word	0x08009d19
 8009c78:	08009c89 	.word	0x08009c89
 8009c7c:	08009c89 	.word	0x08009c89
 8009c80:	08009d2d 	.word	0x08009d2d
 8009c84:	08009ce3 	.word	0x08009ce3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	18d1      	adds	r1, r2, r3
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c96:	f7ff ff69 	bl	8009b6c <prvInsertTimerInActiveList>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d045      	beq.n	8009d2c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	69db      	ldr	r3, [r3, #28]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d13d      	bne.n	8009d2c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cb0:	68ba      	ldr	r2, [r7, #8]
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	441a      	add	r2, r3
 8009cb8:	2300      	movs	r3, #0
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc2:	f7ff fe23 	bl	800990c <xTimerGenericCommand>
 8009cc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d12e      	bne.n	8009d2c <prvProcessReceivedCommands+0x13c>
 8009cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd2:	f383 8811 	msr	BASEPRI, r3
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	f3bf 8f4f 	dsb	sy
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	e7fe      	b.n	8009ce0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d109      	bne.n	8009d04 <prvProcessReceivedCommands+0x114>
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	e7fe      	b.n	8009d02 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	699a      	ldr	r2, [r3, #24]
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	18d1      	adds	r1, r2, r3
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d12:	f7ff ff2b 	bl	8009b6c <prvInsertTimerInActiveList>
					break;
 8009d16:	e009      	b.n	8009d2c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d104      	bne.n	8009d2c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8009d22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d24:	f000 fbb6 	bl	800a494 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d28:	e000      	b.n	8009d2c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <prvProcessReceivedCommands+0x15c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	1d39      	adds	r1, r7, #4
 8009d32:	2200      	movs	r2, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe f981 	bl	800803c <xQueueReceive>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f47f af5b 	bne.w	8009bf8 <prvProcessReceivedCommands+0x8>
	}
}
 8009d42:	bf00      	nop
 8009d44:	3730      	adds	r7, #48	; 0x30
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000d8c 	.word	0x20000d8c

08009d50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d56:	e044      	b.n	8009de2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d58:	4b2b      	ldr	r3, [pc, #172]	; (8009e08 <prvSwitchTimerLists+0xb8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d62:	4b29      	ldr	r3, [pc, #164]	; (8009e08 <prvSwitchTimerLists+0xb8>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fd fd33 	bl	80077dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d12d      	bne.n	8009de2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d90:	68ba      	ldr	r2, [r7, #8]
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d90e      	bls.n	8009db6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009da4:	4b18      	ldr	r3, [pc, #96]	; (8009e08 <prvSwitchTimerLists+0xb8>)
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	3304      	adds	r3, #4
 8009dac:	4619      	mov	r1, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	f7fd fcdb 	bl	800776a <vListInsert>
 8009db4:	e015      	b.n	8009de2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db6:	2300      	movs	r3, #0
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7ff fda3 	bl	800990c <xTimerGenericCommand>
 8009dc6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d109      	bne.n	8009de2 <prvSwitchTimerLists+0x92>
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	e7fe      	b.n	8009de0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009de2:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <prvSwitchTimerLists+0xb8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1b5      	bne.n	8009d58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009dec:	4b06      	ldr	r3, [pc, #24]	; (8009e08 <prvSwitchTimerLists+0xb8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009df2:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <prvSwitchTimerLists+0xbc>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a04      	ldr	r2, [pc, #16]	; (8009e08 <prvSwitchTimerLists+0xb8>)
 8009df8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009dfa:	4a04      	ldr	r2, [pc, #16]	; (8009e0c <prvSwitchTimerLists+0xbc>)
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	6013      	str	r3, [r2, #0]
}
 8009e00:	bf00      	nop
 8009e02:	3718      	adds	r7, #24
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	20000d84 	.word	0x20000d84
 8009e0c:	20000d88 	.word	0x20000d88

08009e10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e16:	f000 f961 	bl	800a0dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e1a:	4b15      	ldr	r3, [pc, #84]	; (8009e70 <prvCheckForValidListAndQueue+0x60>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d120      	bne.n	8009e64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e22:	4814      	ldr	r0, [pc, #80]	; (8009e74 <prvCheckForValidListAndQueue+0x64>)
 8009e24:	f7fd fc50 	bl	80076c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e28:	4813      	ldr	r0, [pc, #76]	; (8009e78 <prvCheckForValidListAndQueue+0x68>)
 8009e2a:	f7fd fc4d 	bl	80076c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e2e:	4b13      	ldr	r3, [pc, #76]	; (8009e7c <prvCheckForValidListAndQueue+0x6c>)
 8009e30:	4a10      	ldr	r2, [pc, #64]	; (8009e74 <prvCheckForValidListAndQueue+0x64>)
 8009e32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e34:	4b12      	ldr	r3, [pc, #72]	; (8009e80 <prvCheckForValidListAndQueue+0x70>)
 8009e36:	4a10      	ldr	r2, [pc, #64]	; (8009e78 <prvCheckForValidListAndQueue+0x68>)
 8009e38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <prvCheckForValidListAndQueue+0x74>)
 8009e40:	4a11      	ldr	r2, [pc, #68]	; (8009e88 <prvCheckForValidListAndQueue+0x78>)
 8009e42:	2110      	movs	r1, #16
 8009e44:	200a      	movs	r0, #10
 8009e46:	f7fd fd5b 	bl	8007900 <xQueueGenericCreateStatic>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	4b08      	ldr	r3, [pc, #32]	; (8009e70 <prvCheckForValidListAndQueue+0x60>)
 8009e4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <prvCheckForValidListAndQueue+0x60>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d005      	beq.n	8009e64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <prvCheckForValidListAndQueue+0x60>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	490b      	ldr	r1, [pc, #44]	; (8009e8c <prvCheckForValidListAndQueue+0x7c>)
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fc98 	bl	8008794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e64:	f000 f968 	bl	800a138 <vPortExitCritical>
}
 8009e68:	bf00      	nop
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20000d8c 	.word	0x20000d8c
 8009e74:	20000d5c 	.word	0x20000d5c
 8009e78:	20000d70 	.word	0x20000d70
 8009e7c:	20000d84 	.word	0x20000d84
 8009e80:	20000d88 	.word	0x20000d88
 8009e84:	20000e38 	.word	0x20000e38
 8009e88:	20000d98 	.word	0x20000d98
 8009e8c:	0800c1e8 	.word	0x0800c1e8

08009e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	3b04      	subs	r3, #4
 8009ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3b04      	subs	r3, #4
 8009eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	f023 0201 	bic.w	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3b04      	subs	r3, #4
 8009ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ec0:	4a0c      	ldr	r2, [pc, #48]	; (8009ef4 <pxPortInitialiseStack+0x64>)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3b14      	subs	r3, #20
 8009eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f06f 0202 	mvn.w	r2, #2
 8009ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3b20      	subs	r3, #32
 8009ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	08009ef9 	.word	0x08009ef9

08009ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f02:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <prvTaskExitError+0x50>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0a:	d009      	beq.n	8009f20 <prvTaskExitError+0x28>
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	e7fe      	b.n	8009f1e <prvTaskExitError+0x26>
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f32:	bf00      	nop
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d0fc      	beq.n	8009f34 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f3a:	bf00      	nop
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	200000e4 	.word	0x200000e4
 8009f4c:	00000000 	.word	0x00000000

08009f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f50:	4b07      	ldr	r3, [pc, #28]	; (8009f70 <pxCurrentTCBConst2>)
 8009f52:	6819      	ldr	r1, [r3, #0]
 8009f54:	6808      	ldr	r0, [r1, #0]
 8009f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5a:	f380 8809 	msr	PSP, r0
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f04f 0000 	mov.w	r0, #0
 8009f66:	f380 8811 	msr	BASEPRI, r0
 8009f6a:	4770      	bx	lr
 8009f6c:	f3af 8000 	nop.w

08009f70 <pxCurrentTCBConst2>:
 8009f70:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop

08009f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f78:	4808      	ldr	r0, [pc, #32]	; (8009f9c <prvPortStartFirstTask+0x24>)
 8009f7a:	6800      	ldr	r0, [r0, #0]
 8009f7c:	6800      	ldr	r0, [r0, #0]
 8009f7e:	f380 8808 	msr	MSP, r0
 8009f82:	f04f 0000 	mov.w	r0, #0
 8009f86:	f380 8814 	msr	CONTROL, r0
 8009f8a:	b662      	cpsie	i
 8009f8c:	b661      	cpsie	f
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	df00      	svc	0
 8009f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f9a:	bf00      	nop
 8009f9c:	e000ed08 	.word	0xe000ed08

08009fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fa6:	4b44      	ldr	r3, [pc, #272]	; (800a0b8 <xPortStartScheduler+0x118>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a44      	ldr	r2, [pc, #272]	; (800a0bc <xPortStartScheduler+0x11c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d109      	bne.n	8009fc4 <xPortStartScheduler+0x24>
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	613b      	str	r3, [r7, #16]
 8009fc2:	e7fe      	b.n	8009fc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fc4:	4b3c      	ldr	r3, [pc, #240]	; (800a0b8 <xPortStartScheduler+0x118>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a3d      	ldr	r2, [pc, #244]	; (800a0c0 <xPortStartScheduler+0x120>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d109      	bne.n	8009fe2 <xPortStartScheduler+0x42>
 8009fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	e7fe      	b.n	8009fe0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fe2:	4b38      	ldr	r3, [pc, #224]	; (800a0c4 <xPortStartScheduler+0x124>)
 8009fe4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	22ff      	movs	r2, #255	; 0xff
 8009ff2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ffc:	78fb      	ldrb	r3, [r7, #3]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a004:	b2da      	uxtb	r2, r3
 800a006:	4b30      	ldr	r3, [pc, #192]	; (800a0c8 <xPortStartScheduler+0x128>)
 800a008:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a00a:	4b30      	ldr	r3, [pc, #192]	; (800a0cc <xPortStartScheduler+0x12c>)
 800a00c:	2207      	movs	r2, #7
 800a00e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a010:	e009      	b.n	800a026 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a012:	4b2e      	ldr	r3, [pc, #184]	; (800a0cc <xPortStartScheduler+0x12c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3b01      	subs	r3, #1
 800a018:	4a2c      	ldr	r2, [pc, #176]	; (800a0cc <xPortStartScheduler+0x12c>)
 800a01a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	b2db      	uxtb	r3, r3
 800a024:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a026:	78fb      	ldrb	r3, [r7, #3]
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a02e:	2b80      	cmp	r3, #128	; 0x80
 800a030:	d0ef      	beq.n	800a012 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a032:	4b26      	ldr	r3, [pc, #152]	; (800a0cc <xPortStartScheduler+0x12c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f1c3 0307 	rsb	r3, r3, #7
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d009      	beq.n	800a052 <xPortStartScheduler+0xb2>
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	60bb      	str	r3, [r7, #8]
 800a050:	e7fe      	b.n	800a050 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a052:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <xPortStartScheduler+0x12c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	021b      	lsls	r3, r3, #8
 800a058:	4a1c      	ldr	r2, [pc, #112]	; (800a0cc <xPortStartScheduler+0x12c>)
 800a05a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a05c:	4b1b      	ldr	r3, [pc, #108]	; (800a0cc <xPortStartScheduler+0x12c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a064:	4a19      	ldr	r2, [pc, #100]	; (800a0cc <xPortStartScheduler+0x12c>)
 800a066:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a070:	4b17      	ldr	r3, [pc, #92]	; (800a0d0 <xPortStartScheduler+0x130>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a16      	ldr	r2, [pc, #88]	; (800a0d0 <xPortStartScheduler+0x130>)
 800a076:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a07a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a07c:	4b14      	ldr	r3, [pc, #80]	; (800a0d0 <xPortStartScheduler+0x130>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a13      	ldr	r2, [pc, #76]	; (800a0d0 <xPortStartScheduler+0x130>)
 800a082:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a086:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a088:	f000 f8d6 	bl	800a238 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a08c:	4b11      	ldr	r3, [pc, #68]	; (800a0d4 <xPortStartScheduler+0x134>)
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a092:	f000 f8f5 	bl	800a280 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a096:	4b10      	ldr	r3, [pc, #64]	; (800a0d8 <xPortStartScheduler+0x138>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a0f      	ldr	r2, [pc, #60]	; (800a0d8 <xPortStartScheduler+0x138>)
 800a09c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a0a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0a2:	f7ff ff69 	bl	8009f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0a6:	f7fe ff9f 	bl	8008fe8 <vTaskSwitchContext>
	prvTaskExitError();
 800a0aa:	f7ff ff25 	bl	8009ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	e000ed00 	.word	0xe000ed00
 800a0bc:	410fc271 	.word	0x410fc271
 800a0c0:	410fc270 	.word	0x410fc270
 800a0c4:	e000e400 	.word	0xe000e400
 800a0c8:	20000e88 	.word	0x20000e88
 800a0cc:	20000e8c 	.word	0x20000e8c
 800a0d0:	e000ed20 	.word	0xe000ed20
 800a0d4:	200000e4 	.word	0x200000e4
 800a0d8:	e000ef34 	.word	0xe000ef34

0800a0dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <vPortEnterCritical+0x54>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	4a0d      	ldr	r2, [pc, #52]	; (800a130 <vPortEnterCritical+0x54>)
 800a0fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	; (800a130 <vPortEnterCritical+0x54>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10e      	bne.n	800a124 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a106:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <vPortEnterCritical+0x58>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d009      	beq.n	800a124 <vPortEnterCritical+0x48>
 800a110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a114:	f383 8811 	msr	BASEPRI, r3
 800a118:	f3bf 8f6f 	isb	sy
 800a11c:	f3bf 8f4f 	dsb	sy
 800a120:	603b      	str	r3, [r7, #0]
 800a122:	e7fe      	b.n	800a122 <vPortEnterCritical+0x46>
	}
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	200000e4 	.word	0x200000e4
 800a134:	e000ed04 	.word	0xe000ed04

0800a138 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a13e:	4b11      	ldr	r3, [pc, #68]	; (800a184 <vPortExitCritical+0x4c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <vPortExitCritical+0x22>
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	607b      	str	r3, [r7, #4]
 800a158:	e7fe      	b.n	800a158 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a15a:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <vPortExitCritical+0x4c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3b01      	subs	r3, #1
 800a160:	4a08      	ldr	r2, [pc, #32]	; (800a184 <vPortExitCritical+0x4c>)
 800a162:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a164:	4b07      	ldr	r3, [pc, #28]	; (800a184 <vPortExitCritical+0x4c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d104      	bne.n	800a176 <vPortExitCritical+0x3e>
 800a16c:	2300      	movs	r3, #0
 800a16e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a176:	bf00      	nop
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	200000e4 	.word	0x200000e4
	...

0800a190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a190:	f3ef 8009 	mrs	r0, PSP
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	4b15      	ldr	r3, [pc, #84]	; (800a1f0 <pxCurrentTCBConst>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	f01e 0f10 	tst.w	lr, #16
 800a1a0:	bf08      	it	eq
 800a1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1aa:	6010      	str	r0, [r2, #0]
 800a1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1b4:	f380 8811 	msr	BASEPRI, r0
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f7fe ff12 	bl	8008fe8 <vTaskSwitchContext>
 800a1c4:	f04f 0000 	mov.w	r0, #0
 800a1c8:	f380 8811 	msr	BASEPRI, r0
 800a1cc:	bc09      	pop	{r0, r3}
 800a1ce:	6819      	ldr	r1, [r3, #0]
 800a1d0:	6808      	ldr	r0, [r1, #0]
 800a1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d6:	f01e 0f10 	tst.w	lr, #16
 800a1da:	bf08      	it	eq
 800a1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1e0:	f380 8809 	msr	PSP, r0
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	f3af 8000 	nop.w

0800a1f0 <pxCurrentTCBConst>:
 800a1f0:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1f4:	bf00      	nop
 800a1f6:	bf00      	nop

0800a1f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a210:	f7fe fe2c 	bl	8008e6c <xTaskIncrementTick>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d003      	beq.n	800a222 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a21a:	4b06      	ldr	r3, [pc, #24]	; (800a234 <SysTick_Handler+0x3c>)
 800a21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	2300      	movs	r3, #0
 800a224:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	e000ed04 	.word	0xe000ed04

0800a238 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a23c:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <vPortSetupTimerInterrupt+0x34>)
 800a23e:	2200      	movs	r2, #0
 800a240:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a242:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <vPortSetupTimerInterrupt+0x38>)
 800a244:	2200      	movs	r2, #0
 800a246:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a248:	4b0a      	ldr	r3, [pc, #40]	; (800a274 <vPortSetupTimerInterrupt+0x3c>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a0a      	ldr	r2, [pc, #40]	; (800a278 <vPortSetupTimerInterrupt+0x40>)
 800a24e:	fba2 2303 	umull	r2, r3, r2, r3
 800a252:	099b      	lsrs	r3, r3, #6
 800a254:	4a09      	ldr	r2, [pc, #36]	; (800a27c <vPortSetupTimerInterrupt+0x44>)
 800a256:	3b01      	subs	r3, #1
 800a258:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a25a:	4b04      	ldr	r3, [pc, #16]	; (800a26c <vPortSetupTimerInterrupt+0x34>)
 800a25c:	2207      	movs	r2, #7
 800a25e:	601a      	str	r2, [r3, #0]
}
 800a260:	bf00      	nop
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	e000e010 	.word	0xe000e010
 800a270:	e000e018 	.word	0xe000e018
 800a274:	200000bc 	.word	0x200000bc
 800a278:	10624dd3 	.word	0x10624dd3
 800a27c:	e000e014 	.word	0xe000e014

0800a280 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a280:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a290 <vPortEnableVFP+0x10>
 800a284:	6801      	ldr	r1, [r0, #0]
 800a286:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a28a:	6001      	str	r1, [r0, #0]
 800a28c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a28e:	bf00      	nop
 800a290:	e000ed88 	.word	0xe000ed88

0800a294 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a29a:	f3ef 8305 	mrs	r3, IPSR
 800a29e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b0f      	cmp	r3, #15
 800a2a4:	d913      	bls.n	800a2ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2a6:	4a16      	ldr	r2, [pc, #88]	; (800a300 <vPortValidateInterruptPriority+0x6c>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2b0:	4b14      	ldr	r3, [pc, #80]	; (800a304 <vPortValidateInterruptPriority+0x70>)
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	7afa      	ldrb	r2, [r7, #11]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d209      	bcs.n	800a2ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	607b      	str	r3, [r7, #4]
 800a2cc:	e7fe      	b.n	800a2cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <vPortValidateInterruptPriority+0x74>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2d6:	4b0d      	ldr	r3, [pc, #52]	; (800a30c <vPortValidateInterruptPriority+0x78>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d909      	bls.n	800a2f2 <vPortValidateInterruptPriority+0x5e>
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	e7fe      	b.n	800a2f0 <vPortValidateInterruptPriority+0x5c>
	}
 800a2f2:	bf00      	nop
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	e000e3f0 	.word	0xe000e3f0
 800a304:	20000e88 	.word	0x20000e88
 800a308:	e000ed0c 	.word	0xe000ed0c
 800a30c:	20000e8c 	.word	0x20000e8c

0800a310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08a      	sub	sp, #40	; 0x28
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a318:	2300      	movs	r3, #0
 800a31a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a31c:	f7fe fcec 	bl	8008cf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a320:	4b57      	ldr	r3, [pc, #348]	; (800a480 <pvPortMalloc+0x170>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a328:	f000 f90c 	bl	800a544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a32c:	4b55      	ldr	r3, [pc, #340]	; (800a484 <pvPortMalloc+0x174>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4013      	ands	r3, r2
 800a334:	2b00      	cmp	r3, #0
 800a336:	f040 808c 	bne.w	800a452 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01c      	beq.n	800a37a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a340:	2208      	movs	r2, #8
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4413      	add	r3, r2
 800a346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f003 0307 	and.w	r3, r3, #7
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d013      	beq.n	800a37a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f023 0307 	bic.w	r3, r3, #7
 800a358:	3308      	adds	r3, #8
 800a35a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <pvPortMalloc+0x6a>
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	e7fe      	b.n	800a378 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d068      	beq.n	800a452 <pvPortMalloc+0x142>
 800a380:	4b41      	ldr	r3, [pc, #260]	; (800a488 <pvPortMalloc+0x178>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	429a      	cmp	r2, r3
 800a388:	d863      	bhi.n	800a452 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a38a:	4b40      	ldr	r3, [pc, #256]	; (800a48c <pvPortMalloc+0x17c>)
 800a38c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a38e:	4b3f      	ldr	r3, [pc, #252]	; (800a48c <pvPortMalloc+0x17c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a394:	e004      	b.n	800a3a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d903      	bls.n	800a3b2 <pvPortMalloc+0xa2>
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1f1      	bne.n	800a396 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3b2:	4b33      	ldr	r3, [pc, #204]	; (800a480 <pvPortMalloc+0x170>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d04a      	beq.n	800a452 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	4413      	add	r3, r2
 800a3c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	1ad2      	subs	r2, r2, r3
 800a3d6:	2308      	movs	r3, #8
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d91e      	bls.n	800a41c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d009      	beq.n	800a404 <pvPortMalloc+0xf4>
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	e7fe      	b.n	800a402 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	1ad2      	subs	r2, r2, r3
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a416:	69b8      	ldr	r0, [r7, #24]
 800a418:	f000 f8f6 	bl	800a608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a41c:	4b1a      	ldr	r3, [pc, #104]	; (800a488 <pvPortMalloc+0x178>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	4a18      	ldr	r2, [pc, #96]	; (800a488 <pvPortMalloc+0x178>)
 800a428:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a42a:	4b17      	ldr	r3, [pc, #92]	; (800a488 <pvPortMalloc+0x178>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	4b18      	ldr	r3, [pc, #96]	; (800a490 <pvPortMalloc+0x180>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d203      	bcs.n	800a43e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a436:	4b14      	ldr	r3, [pc, #80]	; (800a488 <pvPortMalloc+0x178>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a15      	ldr	r2, [pc, #84]	; (800a490 <pvPortMalloc+0x180>)
 800a43c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	4b10      	ldr	r3, [pc, #64]	; (800a484 <pvPortMalloc+0x174>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	431a      	orrs	r2, r3
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a452:	f7fe fc5f 	bl	8008d14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d009      	beq.n	800a474 <pvPortMalloc+0x164>
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	e7fe      	b.n	800a472 <pvPortMalloc+0x162>
	return pvReturn;
 800a474:	69fb      	ldr	r3, [r7, #28]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3728      	adds	r7, #40	; 0x28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	20001a50 	.word	0x20001a50
 800a484:	20001a5c 	.word	0x20001a5c
 800a488:	20001a54 	.word	0x20001a54
 800a48c:	20001a48 	.word	0x20001a48
 800a490:	20001a58 	.word	0x20001a58

0800a494 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b086      	sub	sp, #24
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d046      	beq.n	800a534 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	425b      	negs	r3, r3
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	4b20      	ldr	r3, [pc, #128]	; (800a53c <vPortFree+0xa8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4013      	ands	r3, r2
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d109      	bne.n	800a4d6 <vPortFree+0x42>
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	e7fe      	b.n	800a4d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <vPortFree+0x5e>
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	60bb      	str	r3, [r7, #8]
 800a4f0:	e7fe      	b.n	800a4f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	4b11      	ldr	r3, [pc, #68]	; (800a53c <vPortFree+0xa8>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d019      	beq.n	800a534 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d115      	bne.n	800a534 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <vPortFree+0xa8>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	43db      	mvns	r3, r3
 800a512:	401a      	ands	r2, r3
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a518:	f7fe fbee 	bl	8008cf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	4b07      	ldr	r3, [pc, #28]	; (800a540 <vPortFree+0xac>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4413      	add	r3, r2
 800a526:	4a06      	ldr	r2, [pc, #24]	; (800a540 <vPortFree+0xac>)
 800a528:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a52a:	6938      	ldr	r0, [r7, #16]
 800a52c:	f000 f86c 	bl	800a608 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a530:	f7fe fbf0 	bl	8008d14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a534:	bf00      	nop
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20001a5c 	.word	0x20001a5c
 800a540:	20001a54 	.word	0x20001a54

0800a544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a54a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a550:	4b27      	ldr	r3, [pc, #156]	; (800a5f0 <prvHeapInit+0xac>)
 800a552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0307 	and.w	r3, r3, #7
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00c      	beq.n	800a578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3307      	adds	r3, #7
 800a562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 0307 	bic.w	r3, r3, #7
 800a56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	4a1f      	ldr	r2, [pc, #124]	; (800a5f0 <prvHeapInit+0xac>)
 800a574:	4413      	add	r3, r2
 800a576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a57c:	4a1d      	ldr	r2, [pc, #116]	; (800a5f4 <prvHeapInit+0xb0>)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a582:	4b1c      	ldr	r3, [pc, #112]	; (800a5f4 <prvHeapInit+0xb0>)
 800a584:	2200      	movs	r2, #0
 800a586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	4413      	add	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a590:	2208      	movs	r2, #8
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	1a9b      	subs	r3, r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 0307 	bic.w	r3, r3, #7
 800a59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4a15      	ldr	r2, [pc, #84]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5a6:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5c4:	4b0c      	ldr	r3, [pc, #48]	; (800a5f8 <prvHeapInit+0xb4>)
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	4a0a      	ldr	r2, [pc, #40]	; (800a5fc <prvHeapInit+0xb8>)
 800a5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4a09      	ldr	r2, [pc, #36]	; (800a600 <prvHeapInit+0xbc>)
 800a5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <prvHeapInit+0xc0>)
 800a5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5e2:	601a      	str	r2, [r3, #0]
}
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	20000e90 	.word	0x20000e90
 800a5f4:	20001a48 	.word	0x20001a48
 800a5f8:	20001a50 	.word	0x20001a50
 800a5fc:	20001a58 	.word	0x20001a58
 800a600:	20001a54 	.word	0x20001a54
 800a604:	20001a5c 	.word	0x20001a5c

0800a608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a610:	4b28      	ldr	r3, [pc, #160]	; (800a6b4 <prvInsertBlockIntoFreeList+0xac>)
 800a612:	60fb      	str	r3, [r7, #12]
 800a614:	e002      	b.n	800a61c <prvInsertBlockIntoFreeList+0x14>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	429a      	cmp	r2, r3
 800a624:	d8f7      	bhi.n	800a616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4413      	add	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	429a      	cmp	r2, r3
 800a636:	d108      	bne.n	800a64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	441a      	add	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	441a      	add	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d118      	bne.n	800a690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d00d      	beq.n	800a686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	441a      	add	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	e008      	b.n	800a698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a686:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	e003      	b.n	800a698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d002      	beq.n	800a6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	20001a48 	.word	0x20001a48
 800a6b8:	20001a50 	.word	0x20001a50

0800a6bc <__errno>:
 800a6bc:	4b01      	ldr	r3, [pc, #4]	; (800a6c4 <__errno+0x8>)
 800a6be:	6818      	ldr	r0, [r3, #0]
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	200000e8 	.word	0x200000e8

0800a6c8 <__libc_init_array>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	4e0d      	ldr	r6, [pc, #52]	; (800a700 <__libc_init_array+0x38>)
 800a6cc:	4c0d      	ldr	r4, [pc, #52]	; (800a704 <__libc_init_array+0x3c>)
 800a6ce:	1ba4      	subs	r4, r4, r6
 800a6d0:	10a4      	asrs	r4, r4, #2
 800a6d2:	2500      	movs	r5, #0
 800a6d4:	42a5      	cmp	r5, r4
 800a6d6:	d109      	bne.n	800a6ec <__libc_init_array+0x24>
 800a6d8:	4e0b      	ldr	r6, [pc, #44]	; (800a708 <__libc_init_array+0x40>)
 800a6da:	4c0c      	ldr	r4, [pc, #48]	; (800a70c <__libc_init_array+0x44>)
 800a6dc:	f001 fcce 	bl	800c07c <_init>
 800a6e0:	1ba4      	subs	r4, r4, r6
 800a6e2:	10a4      	asrs	r4, r4, #2
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	42a5      	cmp	r5, r4
 800a6e8:	d105      	bne.n	800a6f6 <__libc_init_array+0x2e>
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a6f0:	4798      	blx	r3
 800a6f2:	3501      	adds	r5, #1
 800a6f4:	e7ee      	b.n	800a6d4 <__libc_init_array+0xc>
 800a6f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a6fa:	4798      	blx	r3
 800a6fc:	3501      	adds	r5, #1
 800a6fe:	e7f2      	b.n	800a6e6 <__libc_init_array+0x1e>
 800a700:	0800c300 	.word	0x0800c300
 800a704:	0800c300 	.word	0x0800c300
 800a708:	0800c300 	.word	0x0800c300
 800a70c:	0800c304 	.word	0x0800c304

0800a710 <memcpy>:
 800a710:	b510      	push	{r4, lr}
 800a712:	1e43      	subs	r3, r0, #1
 800a714:	440a      	add	r2, r1
 800a716:	4291      	cmp	r1, r2
 800a718:	d100      	bne.n	800a71c <memcpy+0xc>
 800a71a:	bd10      	pop	{r4, pc}
 800a71c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a720:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a724:	e7f7      	b.n	800a716 <memcpy+0x6>

0800a726 <memset>:
 800a726:	4402      	add	r2, r0
 800a728:	4603      	mov	r3, r0
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d100      	bne.n	800a730 <memset+0xa>
 800a72e:	4770      	bx	lr
 800a730:	f803 1b01 	strb.w	r1, [r3], #1
 800a734:	e7f9      	b.n	800a72a <memset+0x4>
	...

0800a738 <sniprintf>:
 800a738:	b40c      	push	{r2, r3}
 800a73a:	b530      	push	{r4, r5, lr}
 800a73c:	4b17      	ldr	r3, [pc, #92]	; (800a79c <sniprintf+0x64>)
 800a73e:	1e0c      	subs	r4, r1, #0
 800a740:	b09d      	sub	sp, #116	; 0x74
 800a742:	681d      	ldr	r5, [r3, #0]
 800a744:	da08      	bge.n	800a758 <sniprintf+0x20>
 800a746:	238b      	movs	r3, #139	; 0x8b
 800a748:	602b      	str	r3, [r5, #0]
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295
 800a74e:	b01d      	add	sp, #116	; 0x74
 800a750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a754:	b002      	add	sp, #8
 800a756:	4770      	bx	lr
 800a758:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a75c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a760:	bf14      	ite	ne
 800a762:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a766:	4623      	moveq	r3, r4
 800a768:	9304      	str	r3, [sp, #16]
 800a76a:	9307      	str	r3, [sp, #28]
 800a76c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a770:	9002      	str	r0, [sp, #8]
 800a772:	9006      	str	r0, [sp, #24]
 800a774:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a778:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a77a:	ab21      	add	r3, sp, #132	; 0x84
 800a77c:	a902      	add	r1, sp, #8
 800a77e:	4628      	mov	r0, r5
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	f000 f867 	bl	800a854 <_svfiprintf_r>
 800a786:	1c43      	adds	r3, r0, #1
 800a788:	bfbc      	itt	lt
 800a78a:	238b      	movlt	r3, #139	; 0x8b
 800a78c:	602b      	strlt	r3, [r5, #0]
 800a78e:	2c00      	cmp	r4, #0
 800a790:	d0dd      	beq.n	800a74e <sniprintf+0x16>
 800a792:	9b02      	ldr	r3, [sp, #8]
 800a794:	2200      	movs	r2, #0
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	e7d9      	b.n	800a74e <sniprintf+0x16>
 800a79a:	bf00      	nop
 800a79c:	200000e8 	.word	0x200000e8

0800a7a0 <__ssputs_r>:
 800a7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a4:	688e      	ldr	r6, [r1, #8]
 800a7a6:	429e      	cmp	r6, r3
 800a7a8:	4682      	mov	sl, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	4690      	mov	r8, r2
 800a7ae:	4699      	mov	r9, r3
 800a7b0:	d837      	bhi.n	800a822 <__ssputs_r+0x82>
 800a7b2:	898a      	ldrh	r2, [r1, #12]
 800a7b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7b8:	d031      	beq.n	800a81e <__ssputs_r+0x7e>
 800a7ba:	6825      	ldr	r5, [r4, #0]
 800a7bc:	6909      	ldr	r1, [r1, #16]
 800a7be:	1a6f      	subs	r7, r5, r1
 800a7c0:	6965      	ldr	r5, [r4, #20]
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7c8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a7cc:	f109 0301 	add.w	r3, r9, #1
 800a7d0:	443b      	add	r3, r7
 800a7d2:	429d      	cmp	r5, r3
 800a7d4:	bf38      	it	cc
 800a7d6:	461d      	movcc	r5, r3
 800a7d8:	0553      	lsls	r3, r2, #21
 800a7da:	d530      	bpl.n	800a83e <__ssputs_r+0x9e>
 800a7dc:	4629      	mov	r1, r5
 800a7de:	f000 fb21 	bl	800ae24 <_malloc_r>
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	b950      	cbnz	r0, 800a7fc <__ssputs_r+0x5c>
 800a7e6:	230c      	movs	r3, #12
 800a7e8:	f8ca 3000 	str.w	r3, [sl]
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fc:	463a      	mov	r2, r7
 800a7fe:	6921      	ldr	r1, [r4, #16]
 800a800:	f7ff ff86 	bl	800a710 <memcpy>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	6126      	str	r6, [r4, #16]
 800a812:	6165      	str	r5, [r4, #20]
 800a814:	443e      	add	r6, r7
 800a816:	1bed      	subs	r5, r5, r7
 800a818:	6026      	str	r6, [r4, #0]
 800a81a:	60a5      	str	r5, [r4, #8]
 800a81c:	464e      	mov	r6, r9
 800a81e:	454e      	cmp	r6, r9
 800a820:	d900      	bls.n	800a824 <__ssputs_r+0x84>
 800a822:	464e      	mov	r6, r9
 800a824:	4632      	mov	r2, r6
 800a826:	4641      	mov	r1, r8
 800a828:	6820      	ldr	r0, [r4, #0]
 800a82a:	f000 fa93 	bl	800ad54 <memmove>
 800a82e:	68a3      	ldr	r3, [r4, #8]
 800a830:	1b9b      	subs	r3, r3, r6
 800a832:	60a3      	str	r3, [r4, #8]
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	441e      	add	r6, r3
 800a838:	6026      	str	r6, [r4, #0]
 800a83a:	2000      	movs	r0, #0
 800a83c:	e7dc      	b.n	800a7f8 <__ssputs_r+0x58>
 800a83e:	462a      	mov	r2, r5
 800a840:	f000 fb4a 	bl	800aed8 <_realloc_r>
 800a844:	4606      	mov	r6, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	d1e2      	bne.n	800a810 <__ssputs_r+0x70>
 800a84a:	6921      	ldr	r1, [r4, #16]
 800a84c:	4650      	mov	r0, sl
 800a84e:	f000 fa9b 	bl	800ad88 <_free_r>
 800a852:	e7c8      	b.n	800a7e6 <__ssputs_r+0x46>

0800a854 <_svfiprintf_r>:
 800a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a858:	461d      	mov	r5, r3
 800a85a:	898b      	ldrh	r3, [r1, #12]
 800a85c:	061f      	lsls	r7, r3, #24
 800a85e:	b09d      	sub	sp, #116	; 0x74
 800a860:	4680      	mov	r8, r0
 800a862:	460c      	mov	r4, r1
 800a864:	4616      	mov	r6, r2
 800a866:	d50f      	bpl.n	800a888 <_svfiprintf_r+0x34>
 800a868:	690b      	ldr	r3, [r1, #16]
 800a86a:	b96b      	cbnz	r3, 800a888 <_svfiprintf_r+0x34>
 800a86c:	2140      	movs	r1, #64	; 0x40
 800a86e:	f000 fad9 	bl	800ae24 <_malloc_r>
 800a872:	6020      	str	r0, [r4, #0]
 800a874:	6120      	str	r0, [r4, #16]
 800a876:	b928      	cbnz	r0, 800a884 <_svfiprintf_r+0x30>
 800a878:	230c      	movs	r3, #12
 800a87a:	f8c8 3000 	str.w	r3, [r8]
 800a87e:	f04f 30ff 	mov.w	r0, #4294967295
 800a882:	e0c8      	b.n	800aa16 <_svfiprintf_r+0x1c2>
 800a884:	2340      	movs	r3, #64	; 0x40
 800a886:	6163      	str	r3, [r4, #20]
 800a888:	2300      	movs	r3, #0
 800a88a:	9309      	str	r3, [sp, #36]	; 0x24
 800a88c:	2320      	movs	r3, #32
 800a88e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a892:	2330      	movs	r3, #48	; 0x30
 800a894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a898:	9503      	str	r5, [sp, #12]
 800a89a:	f04f 0b01 	mov.w	fp, #1
 800a89e:	4637      	mov	r7, r6
 800a8a0:	463d      	mov	r5, r7
 800a8a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a8a6:	b10b      	cbz	r3, 800a8ac <_svfiprintf_r+0x58>
 800a8a8:	2b25      	cmp	r3, #37	; 0x25
 800a8aa:	d13e      	bne.n	800a92a <_svfiprintf_r+0xd6>
 800a8ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800a8b0:	d00b      	beq.n	800a8ca <_svfiprintf_r+0x76>
 800a8b2:	4653      	mov	r3, sl
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	f7ff ff71 	bl	800a7a0 <__ssputs_r>
 800a8be:	3001      	adds	r0, #1
 800a8c0:	f000 80a4 	beq.w	800aa0c <_svfiprintf_r+0x1b8>
 800a8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c6:	4453      	add	r3, sl
 800a8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ca:	783b      	ldrb	r3, [r7, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 809d 	beq.w	800aa0c <_svfiprintf_r+0x1b8>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8dc:	9304      	str	r3, [sp, #16]
 800a8de:	9307      	str	r3, [sp, #28]
 800a8e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e6:	462f      	mov	r7, r5
 800a8e8:	2205      	movs	r2, #5
 800a8ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a8ee:	4850      	ldr	r0, [pc, #320]	; (800aa30 <_svfiprintf_r+0x1dc>)
 800a8f0:	f7f5 fc6e 	bl	80001d0 <memchr>
 800a8f4:	9b04      	ldr	r3, [sp, #16]
 800a8f6:	b9d0      	cbnz	r0, 800a92e <_svfiprintf_r+0xda>
 800a8f8:	06d9      	lsls	r1, r3, #27
 800a8fa:	bf44      	itt	mi
 800a8fc:	2220      	movmi	r2, #32
 800a8fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a902:	071a      	lsls	r2, r3, #28
 800a904:	bf44      	itt	mi
 800a906:	222b      	movmi	r2, #43	; 0x2b
 800a908:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a90c:	782a      	ldrb	r2, [r5, #0]
 800a90e:	2a2a      	cmp	r2, #42	; 0x2a
 800a910:	d015      	beq.n	800a93e <_svfiprintf_r+0xea>
 800a912:	9a07      	ldr	r2, [sp, #28]
 800a914:	462f      	mov	r7, r5
 800a916:	2000      	movs	r0, #0
 800a918:	250a      	movs	r5, #10
 800a91a:	4639      	mov	r1, r7
 800a91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a920:	3b30      	subs	r3, #48	; 0x30
 800a922:	2b09      	cmp	r3, #9
 800a924:	d94d      	bls.n	800a9c2 <_svfiprintf_r+0x16e>
 800a926:	b1b8      	cbz	r0, 800a958 <_svfiprintf_r+0x104>
 800a928:	e00f      	b.n	800a94a <_svfiprintf_r+0xf6>
 800a92a:	462f      	mov	r7, r5
 800a92c:	e7b8      	b.n	800a8a0 <_svfiprintf_r+0x4c>
 800a92e:	4a40      	ldr	r2, [pc, #256]	; (800aa30 <_svfiprintf_r+0x1dc>)
 800a930:	1a80      	subs	r0, r0, r2
 800a932:	fa0b f000 	lsl.w	r0, fp, r0
 800a936:	4318      	orrs	r0, r3
 800a938:	9004      	str	r0, [sp, #16]
 800a93a:	463d      	mov	r5, r7
 800a93c:	e7d3      	b.n	800a8e6 <_svfiprintf_r+0x92>
 800a93e:	9a03      	ldr	r2, [sp, #12]
 800a940:	1d11      	adds	r1, r2, #4
 800a942:	6812      	ldr	r2, [r2, #0]
 800a944:	9103      	str	r1, [sp, #12]
 800a946:	2a00      	cmp	r2, #0
 800a948:	db01      	blt.n	800a94e <_svfiprintf_r+0xfa>
 800a94a:	9207      	str	r2, [sp, #28]
 800a94c:	e004      	b.n	800a958 <_svfiprintf_r+0x104>
 800a94e:	4252      	negs	r2, r2
 800a950:	f043 0302 	orr.w	r3, r3, #2
 800a954:	9207      	str	r2, [sp, #28]
 800a956:	9304      	str	r3, [sp, #16]
 800a958:	783b      	ldrb	r3, [r7, #0]
 800a95a:	2b2e      	cmp	r3, #46	; 0x2e
 800a95c:	d10c      	bne.n	800a978 <_svfiprintf_r+0x124>
 800a95e:	787b      	ldrb	r3, [r7, #1]
 800a960:	2b2a      	cmp	r3, #42	; 0x2a
 800a962:	d133      	bne.n	800a9cc <_svfiprintf_r+0x178>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	9203      	str	r2, [sp, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	bfb8      	it	lt
 800a970:	f04f 33ff 	movlt.w	r3, #4294967295
 800a974:	3702      	adds	r7, #2
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	4d2e      	ldr	r5, [pc, #184]	; (800aa34 <_svfiprintf_r+0x1e0>)
 800a97a:	7839      	ldrb	r1, [r7, #0]
 800a97c:	2203      	movs	r2, #3
 800a97e:	4628      	mov	r0, r5
 800a980:	f7f5 fc26 	bl	80001d0 <memchr>
 800a984:	b138      	cbz	r0, 800a996 <_svfiprintf_r+0x142>
 800a986:	2340      	movs	r3, #64	; 0x40
 800a988:	1b40      	subs	r0, r0, r5
 800a98a:	fa03 f000 	lsl.w	r0, r3, r0
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	4303      	orrs	r3, r0
 800a992:	3701      	adds	r7, #1
 800a994:	9304      	str	r3, [sp, #16]
 800a996:	7839      	ldrb	r1, [r7, #0]
 800a998:	4827      	ldr	r0, [pc, #156]	; (800aa38 <_svfiprintf_r+0x1e4>)
 800a99a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a99e:	2206      	movs	r2, #6
 800a9a0:	1c7e      	adds	r6, r7, #1
 800a9a2:	f7f5 fc15 	bl	80001d0 <memchr>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d038      	beq.n	800aa1c <_svfiprintf_r+0x1c8>
 800a9aa:	4b24      	ldr	r3, [pc, #144]	; (800aa3c <_svfiprintf_r+0x1e8>)
 800a9ac:	bb13      	cbnz	r3, 800a9f4 <_svfiprintf_r+0x1a0>
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9bc:	444b      	add	r3, r9
 800a9be:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c0:	e76d      	b.n	800a89e <_svfiprintf_r+0x4a>
 800a9c2:	fb05 3202 	mla	r2, r5, r2, r3
 800a9c6:	2001      	movs	r0, #1
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	e7a6      	b.n	800a91a <_svfiprintf_r+0xc6>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	3701      	adds	r7, #1
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	250a      	movs	r5, #10
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9dc:	3a30      	subs	r2, #48	; 0x30
 800a9de:	2a09      	cmp	r2, #9
 800a9e0:	d903      	bls.n	800a9ea <_svfiprintf_r+0x196>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0c8      	beq.n	800a978 <_svfiprintf_r+0x124>
 800a9e6:	9105      	str	r1, [sp, #20]
 800a9e8:	e7c6      	b.n	800a978 <_svfiprintf_r+0x124>
 800a9ea:	fb05 2101 	mla	r1, r5, r1, r2
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	e7f0      	b.n	800a9d6 <_svfiprintf_r+0x182>
 800a9f4:	ab03      	add	r3, sp, #12
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <_svfiprintf_r+0x1ec>)
 800a9fc:	a904      	add	r1, sp, #16
 800a9fe:	4640      	mov	r0, r8
 800aa00:	f3af 8000 	nop.w
 800aa04:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aa08:	4681      	mov	r9, r0
 800aa0a:	d1d6      	bne.n	800a9ba <_svfiprintf_r+0x166>
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	065b      	lsls	r3, r3, #25
 800aa10:	f53f af35 	bmi.w	800a87e <_svfiprintf_r+0x2a>
 800aa14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa16:	b01d      	add	sp, #116	; 0x74
 800aa18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1c:	ab03      	add	r3, sp, #12
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	4622      	mov	r2, r4
 800aa22:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <_svfiprintf_r+0x1ec>)
 800aa24:	a904      	add	r1, sp, #16
 800aa26:	4640      	mov	r0, r8
 800aa28:	f000 f882 	bl	800ab30 <_printf_i>
 800aa2c:	e7ea      	b.n	800aa04 <_svfiprintf_r+0x1b0>
 800aa2e:	bf00      	nop
 800aa30:	0800c280 	.word	0x0800c280
 800aa34:	0800c286 	.word	0x0800c286
 800aa38:	0800c28a 	.word	0x0800c28a
 800aa3c:	00000000 	.word	0x00000000
 800aa40:	0800a7a1 	.word	0x0800a7a1

0800aa44 <_printf_common>:
 800aa44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa48:	4691      	mov	r9, r2
 800aa4a:	461f      	mov	r7, r3
 800aa4c:	688a      	ldr	r2, [r1, #8]
 800aa4e:	690b      	ldr	r3, [r1, #16]
 800aa50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	bfb8      	it	lt
 800aa58:	4613      	movlt	r3, r2
 800aa5a:	f8c9 3000 	str.w	r3, [r9]
 800aa5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa62:	4606      	mov	r6, r0
 800aa64:	460c      	mov	r4, r1
 800aa66:	b112      	cbz	r2, 800aa6e <_printf_common+0x2a>
 800aa68:	3301      	adds	r3, #1
 800aa6a:	f8c9 3000 	str.w	r3, [r9]
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	0699      	lsls	r1, r3, #26
 800aa72:	bf42      	ittt	mi
 800aa74:	f8d9 3000 	ldrmi.w	r3, [r9]
 800aa78:	3302      	addmi	r3, #2
 800aa7a:	f8c9 3000 	strmi.w	r3, [r9]
 800aa7e:	6825      	ldr	r5, [r4, #0]
 800aa80:	f015 0506 	ands.w	r5, r5, #6
 800aa84:	d107      	bne.n	800aa96 <_printf_common+0x52>
 800aa86:	f104 0a19 	add.w	sl, r4, #25
 800aa8a:	68e3      	ldr	r3, [r4, #12]
 800aa8c:	f8d9 2000 	ldr.w	r2, [r9]
 800aa90:	1a9b      	subs	r3, r3, r2
 800aa92:	42ab      	cmp	r3, r5
 800aa94:	dc28      	bgt.n	800aae8 <_printf_common+0xa4>
 800aa96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aa9a:	6822      	ldr	r2, [r4, #0]
 800aa9c:	3300      	adds	r3, #0
 800aa9e:	bf18      	it	ne
 800aaa0:	2301      	movne	r3, #1
 800aaa2:	0692      	lsls	r2, r2, #26
 800aaa4:	d42d      	bmi.n	800ab02 <_printf_common+0xbe>
 800aaa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aaaa:	4639      	mov	r1, r7
 800aaac:	4630      	mov	r0, r6
 800aaae:	47c0      	blx	r8
 800aab0:	3001      	adds	r0, #1
 800aab2:	d020      	beq.n	800aaf6 <_printf_common+0xb2>
 800aab4:	6823      	ldr	r3, [r4, #0]
 800aab6:	68e5      	ldr	r5, [r4, #12]
 800aab8:	f8d9 2000 	ldr.w	r2, [r9]
 800aabc:	f003 0306 	and.w	r3, r3, #6
 800aac0:	2b04      	cmp	r3, #4
 800aac2:	bf08      	it	eq
 800aac4:	1aad      	subeq	r5, r5, r2
 800aac6:	68a3      	ldr	r3, [r4, #8]
 800aac8:	6922      	ldr	r2, [r4, #16]
 800aaca:	bf0c      	ite	eq
 800aacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aad0:	2500      	movne	r5, #0
 800aad2:	4293      	cmp	r3, r2
 800aad4:	bfc4      	itt	gt
 800aad6:	1a9b      	subgt	r3, r3, r2
 800aad8:	18ed      	addgt	r5, r5, r3
 800aada:	f04f 0900 	mov.w	r9, #0
 800aade:	341a      	adds	r4, #26
 800aae0:	454d      	cmp	r5, r9
 800aae2:	d11a      	bne.n	800ab1a <_printf_common+0xd6>
 800aae4:	2000      	movs	r0, #0
 800aae6:	e008      	b.n	800aafa <_printf_common+0xb6>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4652      	mov	r2, sl
 800aaec:	4639      	mov	r1, r7
 800aaee:	4630      	mov	r0, r6
 800aaf0:	47c0      	blx	r8
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d103      	bne.n	800aafe <_printf_common+0xba>
 800aaf6:	f04f 30ff 	mov.w	r0, #4294967295
 800aafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafe:	3501      	adds	r5, #1
 800ab00:	e7c3      	b.n	800aa8a <_printf_common+0x46>
 800ab02:	18e1      	adds	r1, r4, r3
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	2030      	movs	r0, #48	; 0x30
 800ab08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab0c:	4422      	add	r2, r4
 800ab0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab16:	3302      	adds	r3, #2
 800ab18:	e7c5      	b.n	800aaa6 <_printf_common+0x62>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	4622      	mov	r2, r4
 800ab1e:	4639      	mov	r1, r7
 800ab20:	4630      	mov	r0, r6
 800ab22:	47c0      	blx	r8
 800ab24:	3001      	adds	r0, #1
 800ab26:	d0e6      	beq.n	800aaf6 <_printf_common+0xb2>
 800ab28:	f109 0901 	add.w	r9, r9, #1
 800ab2c:	e7d8      	b.n	800aae0 <_printf_common+0x9c>
	...

0800ab30 <_printf_i>:
 800ab30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ab38:	460c      	mov	r4, r1
 800ab3a:	7e09      	ldrb	r1, [r1, #24]
 800ab3c:	b085      	sub	sp, #20
 800ab3e:	296e      	cmp	r1, #110	; 0x6e
 800ab40:	4617      	mov	r7, r2
 800ab42:	4606      	mov	r6, r0
 800ab44:	4698      	mov	r8, r3
 800ab46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab48:	f000 80b3 	beq.w	800acb2 <_printf_i+0x182>
 800ab4c:	d822      	bhi.n	800ab94 <_printf_i+0x64>
 800ab4e:	2963      	cmp	r1, #99	; 0x63
 800ab50:	d036      	beq.n	800abc0 <_printf_i+0x90>
 800ab52:	d80a      	bhi.n	800ab6a <_printf_i+0x3a>
 800ab54:	2900      	cmp	r1, #0
 800ab56:	f000 80b9 	beq.w	800accc <_printf_i+0x19c>
 800ab5a:	2958      	cmp	r1, #88	; 0x58
 800ab5c:	f000 8083 	beq.w	800ac66 <_printf_i+0x136>
 800ab60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ab68:	e032      	b.n	800abd0 <_printf_i+0xa0>
 800ab6a:	2964      	cmp	r1, #100	; 0x64
 800ab6c:	d001      	beq.n	800ab72 <_printf_i+0x42>
 800ab6e:	2969      	cmp	r1, #105	; 0x69
 800ab70:	d1f6      	bne.n	800ab60 <_printf_i+0x30>
 800ab72:	6820      	ldr	r0, [r4, #0]
 800ab74:	6813      	ldr	r3, [r2, #0]
 800ab76:	0605      	lsls	r5, r0, #24
 800ab78:	f103 0104 	add.w	r1, r3, #4
 800ab7c:	d52a      	bpl.n	800abd4 <_printf_i+0xa4>
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6011      	str	r1, [r2, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	da03      	bge.n	800ab8e <_printf_i+0x5e>
 800ab86:	222d      	movs	r2, #45	; 0x2d
 800ab88:	425b      	negs	r3, r3
 800ab8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ab8e:	486f      	ldr	r0, [pc, #444]	; (800ad4c <_printf_i+0x21c>)
 800ab90:	220a      	movs	r2, #10
 800ab92:	e039      	b.n	800ac08 <_printf_i+0xd8>
 800ab94:	2973      	cmp	r1, #115	; 0x73
 800ab96:	f000 809d 	beq.w	800acd4 <_printf_i+0x1a4>
 800ab9a:	d808      	bhi.n	800abae <_printf_i+0x7e>
 800ab9c:	296f      	cmp	r1, #111	; 0x6f
 800ab9e:	d020      	beq.n	800abe2 <_printf_i+0xb2>
 800aba0:	2970      	cmp	r1, #112	; 0x70
 800aba2:	d1dd      	bne.n	800ab60 <_printf_i+0x30>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	f043 0320 	orr.w	r3, r3, #32
 800abaa:	6023      	str	r3, [r4, #0]
 800abac:	e003      	b.n	800abb6 <_printf_i+0x86>
 800abae:	2975      	cmp	r1, #117	; 0x75
 800abb0:	d017      	beq.n	800abe2 <_printf_i+0xb2>
 800abb2:	2978      	cmp	r1, #120	; 0x78
 800abb4:	d1d4      	bne.n	800ab60 <_printf_i+0x30>
 800abb6:	2378      	movs	r3, #120	; 0x78
 800abb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abbc:	4864      	ldr	r0, [pc, #400]	; (800ad50 <_printf_i+0x220>)
 800abbe:	e055      	b.n	800ac6c <_printf_i+0x13c>
 800abc0:	6813      	ldr	r3, [r2, #0]
 800abc2:	1d19      	adds	r1, r3, #4
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6011      	str	r1, [r2, #0]
 800abc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abd0:	2301      	movs	r3, #1
 800abd2:	e08c      	b.n	800acee <_printf_i+0x1be>
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6011      	str	r1, [r2, #0]
 800abd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abdc:	bf18      	it	ne
 800abde:	b21b      	sxthne	r3, r3
 800abe0:	e7cf      	b.n	800ab82 <_printf_i+0x52>
 800abe2:	6813      	ldr	r3, [r2, #0]
 800abe4:	6825      	ldr	r5, [r4, #0]
 800abe6:	1d18      	adds	r0, r3, #4
 800abe8:	6010      	str	r0, [r2, #0]
 800abea:	0628      	lsls	r0, r5, #24
 800abec:	d501      	bpl.n	800abf2 <_printf_i+0xc2>
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	e002      	b.n	800abf8 <_printf_i+0xc8>
 800abf2:	0668      	lsls	r0, r5, #25
 800abf4:	d5fb      	bpl.n	800abee <_printf_i+0xbe>
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	4854      	ldr	r0, [pc, #336]	; (800ad4c <_printf_i+0x21c>)
 800abfa:	296f      	cmp	r1, #111	; 0x6f
 800abfc:	bf14      	ite	ne
 800abfe:	220a      	movne	r2, #10
 800ac00:	2208      	moveq	r2, #8
 800ac02:	2100      	movs	r1, #0
 800ac04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac08:	6865      	ldr	r5, [r4, #4]
 800ac0a:	60a5      	str	r5, [r4, #8]
 800ac0c:	2d00      	cmp	r5, #0
 800ac0e:	f2c0 8095 	blt.w	800ad3c <_printf_i+0x20c>
 800ac12:	6821      	ldr	r1, [r4, #0]
 800ac14:	f021 0104 	bic.w	r1, r1, #4
 800ac18:	6021      	str	r1, [r4, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d13d      	bne.n	800ac9a <_printf_i+0x16a>
 800ac1e:	2d00      	cmp	r5, #0
 800ac20:	f040 808e 	bne.w	800ad40 <_printf_i+0x210>
 800ac24:	4665      	mov	r5, ip
 800ac26:	2a08      	cmp	r2, #8
 800ac28:	d10b      	bne.n	800ac42 <_printf_i+0x112>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	07db      	lsls	r3, r3, #31
 800ac2e:	d508      	bpl.n	800ac42 <_printf_i+0x112>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	6862      	ldr	r2, [r4, #4]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	bfde      	ittt	le
 800ac38:	2330      	movle	r3, #48	; 0x30
 800ac3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac42:	ebac 0305 	sub.w	r3, ip, r5
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	f8cd 8000 	str.w	r8, [sp]
 800ac4c:	463b      	mov	r3, r7
 800ac4e:	aa03      	add	r2, sp, #12
 800ac50:	4621      	mov	r1, r4
 800ac52:	4630      	mov	r0, r6
 800ac54:	f7ff fef6 	bl	800aa44 <_printf_common>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	d14d      	bne.n	800acf8 <_printf_i+0x1c8>
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	b005      	add	sp, #20
 800ac62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac66:	4839      	ldr	r0, [pc, #228]	; (800ad4c <_printf_i+0x21c>)
 800ac68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ac6c:	6813      	ldr	r3, [r2, #0]
 800ac6e:	6821      	ldr	r1, [r4, #0]
 800ac70:	1d1d      	adds	r5, r3, #4
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6015      	str	r5, [r2, #0]
 800ac76:	060a      	lsls	r2, r1, #24
 800ac78:	d50b      	bpl.n	800ac92 <_printf_i+0x162>
 800ac7a:	07ca      	lsls	r2, r1, #31
 800ac7c:	bf44      	itt	mi
 800ac7e:	f041 0120 	orrmi.w	r1, r1, #32
 800ac82:	6021      	strmi	r1, [r4, #0]
 800ac84:	b91b      	cbnz	r3, 800ac8e <_printf_i+0x15e>
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	f022 0220 	bic.w	r2, r2, #32
 800ac8c:	6022      	str	r2, [r4, #0]
 800ac8e:	2210      	movs	r2, #16
 800ac90:	e7b7      	b.n	800ac02 <_printf_i+0xd2>
 800ac92:	064d      	lsls	r5, r1, #25
 800ac94:	bf48      	it	mi
 800ac96:	b29b      	uxthmi	r3, r3
 800ac98:	e7ef      	b.n	800ac7a <_printf_i+0x14a>
 800ac9a:	4665      	mov	r5, ip
 800ac9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800aca0:	fb02 3311 	mls	r3, r2, r1, r3
 800aca4:	5cc3      	ldrb	r3, [r0, r3]
 800aca6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800acaa:	460b      	mov	r3, r1
 800acac:	2900      	cmp	r1, #0
 800acae:	d1f5      	bne.n	800ac9c <_printf_i+0x16c>
 800acb0:	e7b9      	b.n	800ac26 <_printf_i+0xf6>
 800acb2:	6813      	ldr	r3, [r2, #0]
 800acb4:	6825      	ldr	r5, [r4, #0]
 800acb6:	6961      	ldr	r1, [r4, #20]
 800acb8:	1d18      	adds	r0, r3, #4
 800acba:	6010      	str	r0, [r2, #0]
 800acbc:	0628      	lsls	r0, r5, #24
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	d501      	bpl.n	800acc6 <_printf_i+0x196>
 800acc2:	6019      	str	r1, [r3, #0]
 800acc4:	e002      	b.n	800accc <_printf_i+0x19c>
 800acc6:	066a      	lsls	r2, r5, #25
 800acc8:	d5fb      	bpl.n	800acc2 <_printf_i+0x192>
 800acca:	8019      	strh	r1, [r3, #0]
 800accc:	2300      	movs	r3, #0
 800acce:	6123      	str	r3, [r4, #16]
 800acd0:	4665      	mov	r5, ip
 800acd2:	e7b9      	b.n	800ac48 <_printf_i+0x118>
 800acd4:	6813      	ldr	r3, [r2, #0]
 800acd6:	1d19      	adds	r1, r3, #4
 800acd8:	6011      	str	r1, [r2, #0]
 800acda:	681d      	ldr	r5, [r3, #0]
 800acdc:	6862      	ldr	r2, [r4, #4]
 800acde:	2100      	movs	r1, #0
 800ace0:	4628      	mov	r0, r5
 800ace2:	f7f5 fa75 	bl	80001d0 <memchr>
 800ace6:	b108      	cbz	r0, 800acec <_printf_i+0x1bc>
 800ace8:	1b40      	subs	r0, r0, r5
 800acea:	6060      	str	r0, [r4, #4]
 800acec:	6863      	ldr	r3, [r4, #4]
 800acee:	6123      	str	r3, [r4, #16]
 800acf0:	2300      	movs	r3, #0
 800acf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf6:	e7a7      	b.n	800ac48 <_printf_i+0x118>
 800acf8:	6923      	ldr	r3, [r4, #16]
 800acfa:	462a      	mov	r2, r5
 800acfc:	4639      	mov	r1, r7
 800acfe:	4630      	mov	r0, r6
 800ad00:	47c0      	blx	r8
 800ad02:	3001      	adds	r0, #1
 800ad04:	d0aa      	beq.n	800ac5c <_printf_i+0x12c>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	079b      	lsls	r3, r3, #30
 800ad0a:	d413      	bmi.n	800ad34 <_printf_i+0x204>
 800ad0c:	68e0      	ldr	r0, [r4, #12]
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	4298      	cmp	r0, r3
 800ad12:	bfb8      	it	lt
 800ad14:	4618      	movlt	r0, r3
 800ad16:	e7a3      	b.n	800ac60 <_printf_i+0x130>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	464a      	mov	r2, r9
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	4630      	mov	r0, r6
 800ad20:	47c0      	blx	r8
 800ad22:	3001      	adds	r0, #1
 800ad24:	d09a      	beq.n	800ac5c <_printf_i+0x12c>
 800ad26:	3501      	adds	r5, #1
 800ad28:	68e3      	ldr	r3, [r4, #12]
 800ad2a:	9a03      	ldr	r2, [sp, #12]
 800ad2c:	1a9b      	subs	r3, r3, r2
 800ad2e:	42ab      	cmp	r3, r5
 800ad30:	dcf2      	bgt.n	800ad18 <_printf_i+0x1e8>
 800ad32:	e7eb      	b.n	800ad0c <_printf_i+0x1dc>
 800ad34:	2500      	movs	r5, #0
 800ad36:	f104 0919 	add.w	r9, r4, #25
 800ad3a:	e7f5      	b.n	800ad28 <_printf_i+0x1f8>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1ac      	bne.n	800ac9a <_printf_i+0x16a>
 800ad40:	7803      	ldrb	r3, [r0, #0]
 800ad42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad4a:	e76c      	b.n	800ac26 <_printf_i+0xf6>
 800ad4c:	0800c291 	.word	0x0800c291
 800ad50:	0800c2a2 	.word	0x0800c2a2

0800ad54 <memmove>:
 800ad54:	4288      	cmp	r0, r1
 800ad56:	b510      	push	{r4, lr}
 800ad58:	eb01 0302 	add.w	r3, r1, r2
 800ad5c:	d807      	bhi.n	800ad6e <memmove+0x1a>
 800ad5e:	1e42      	subs	r2, r0, #1
 800ad60:	4299      	cmp	r1, r3
 800ad62:	d00a      	beq.n	800ad7a <memmove+0x26>
 800ad64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad68:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ad6c:	e7f8      	b.n	800ad60 <memmove+0xc>
 800ad6e:	4283      	cmp	r3, r0
 800ad70:	d9f5      	bls.n	800ad5e <memmove+0xa>
 800ad72:	1881      	adds	r1, r0, r2
 800ad74:	1ad2      	subs	r2, r2, r3
 800ad76:	42d3      	cmn	r3, r2
 800ad78:	d100      	bne.n	800ad7c <memmove+0x28>
 800ad7a:	bd10      	pop	{r4, pc}
 800ad7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ad84:	e7f7      	b.n	800ad76 <memmove+0x22>
	...

0800ad88 <_free_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	d045      	beq.n	800ae1c <_free_r+0x94>
 800ad90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad94:	1f0c      	subs	r4, r1, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfb8      	it	lt
 800ad9a:	18e4      	addlt	r4, r4, r3
 800ad9c:	f000 f8d2 	bl	800af44 <__malloc_lock>
 800ada0:	4a1f      	ldr	r2, [pc, #124]	; (800ae20 <_free_r+0x98>)
 800ada2:	6813      	ldr	r3, [r2, #0]
 800ada4:	4610      	mov	r0, r2
 800ada6:	b933      	cbnz	r3, 800adb6 <_free_r+0x2e>
 800ada8:	6063      	str	r3, [r4, #4]
 800adaa:	6014      	str	r4, [r2, #0]
 800adac:	4628      	mov	r0, r5
 800adae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adb2:	f000 b8c8 	b.w	800af46 <__malloc_unlock>
 800adb6:	42a3      	cmp	r3, r4
 800adb8:	d90c      	bls.n	800add4 <_free_r+0x4c>
 800adba:	6821      	ldr	r1, [r4, #0]
 800adbc:	1862      	adds	r2, r4, r1
 800adbe:	4293      	cmp	r3, r2
 800adc0:	bf04      	itt	eq
 800adc2:	681a      	ldreq	r2, [r3, #0]
 800adc4:	685b      	ldreq	r3, [r3, #4]
 800adc6:	6063      	str	r3, [r4, #4]
 800adc8:	bf04      	itt	eq
 800adca:	1852      	addeq	r2, r2, r1
 800adcc:	6022      	streq	r2, [r4, #0]
 800adce:	6004      	str	r4, [r0, #0]
 800add0:	e7ec      	b.n	800adac <_free_r+0x24>
 800add2:	4613      	mov	r3, r2
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	b10a      	cbz	r2, 800addc <_free_r+0x54>
 800add8:	42a2      	cmp	r2, r4
 800adda:	d9fa      	bls.n	800add2 <_free_r+0x4a>
 800addc:	6819      	ldr	r1, [r3, #0]
 800adde:	1858      	adds	r0, r3, r1
 800ade0:	42a0      	cmp	r0, r4
 800ade2:	d10b      	bne.n	800adfc <_free_r+0x74>
 800ade4:	6820      	ldr	r0, [r4, #0]
 800ade6:	4401      	add	r1, r0
 800ade8:	1858      	adds	r0, r3, r1
 800adea:	4282      	cmp	r2, r0
 800adec:	6019      	str	r1, [r3, #0]
 800adee:	d1dd      	bne.n	800adac <_free_r+0x24>
 800adf0:	6810      	ldr	r0, [r2, #0]
 800adf2:	6852      	ldr	r2, [r2, #4]
 800adf4:	605a      	str	r2, [r3, #4]
 800adf6:	4401      	add	r1, r0
 800adf8:	6019      	str	r1, [r3, #0]
 800adfa:	e7d7      	b.n	800adac <_free_r+0x24>
 800adfc:	d902      	bls.n	800ae04 <_free_r+0x7c>
 800adfe:	230c      	movs	r3, #12
 800ae00:	602b      	str	r3, [r5, #0]
 800ae02:	e7d3      	b.n	800adac <_free_r+0x24>
 800ae04:	6820      	ldr	r0, [r4, #0]
 800ae06:	1821      	adds	r1, r4, r0
 800ae08:	428a      	cmp	r2, r1
 800ae0a:	bf04      	itt	eq
 800ae0c:	6811      	ldreq	r1, [r2, #0]
 800ae0e:	6852      	ldreq	r2, [r2, #4]
 800ae10:	6062      	str	r2, [r4, #4]
 800ae12:	bf04      	itt	eq
 800ae14:	1809      	addeq	r1, r1, r0
 800ae16:	6021      	streq	r1, [r4, #0]
 800ae18:	605c      	str	r4, [r3, #4]
 800ae1a:	e7c7      	b.n	800adac <_free_r+0x24>
 800ae1c:	bd38      	pop	{r3, r4, r5, pc}
 800ae1e:	bf00      	nop
 800ae20:	20001a60 	.word	0x20001a60

0800ae24 <_malloc_r>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	1ccd      	adds	r5, r1, #3
 800ae28:	f025 0503 	bic.w	r5, r5, #3
 800ae2c:	3508      	adds	r5, #8
 800ae2e:	2d0c      	cmp	r5, #12
 800ae30:	bf38      	it	cc
 800ae32:	250c      	movcc	r5, #12
 800ae34:	2d00      	cmp	r5, #0
 800ae36:	4606      	mov	r6, r0
 800ae38:	db01      	blt.n	800ae3e <_malloc_r+0x1a>
 800ae3a:	42a9      	cmp	r1, r5
 800ae3c:	d903      	bls.n	800ae46 <_malloc_r+0x22>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	6033      	str	r3, [r6, #0]
 800ae42:	2000      	movs	r0, #0
 800ae44:	bd70      	pop	{r4, r5, r6, pc}
 800ae46:	f000 f87d 	bl	800af44 <__malloc_lock>
 800ae4a:	4a21      	ldr	r2, [pc, #132]	; (800aed0 <_malloc_r+0xac>)
 800ae4c:	6814      	ldr	r4, [r2, #0]
 800ae4e:	4621      	mov	r1, r4
 800ae50:	b991      	cbnz	r1, 800ae78 <_malloc_r+0x54>
 800ae52:	4c20      	ldr	r4, [pc, #128]	; (800aed4 <_malloc_r+0xb0>)
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	b91b      	cbnz	r3, 800ae60 <_malloc_r+0x3c>
 800ae58:	4630      	mov	r0, r6
 800ae5a:	f000 f863 	bl	800af24 <_sbrk_r>
 800ae5e:	6020      	str	r0, [r4, #0]
 800ae60:	4629      	mov	r1, r5
 800ae62:	4630      	mov	r0, r6
 800ae64:	f000 f85e 	bl	800af24 <_sbrk_r>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d124      	bne.n	800aeb6 <_malloc_r+0x92>
 800ae6c:	230c      	movs	r3, #12
 800ae6e:	6033      	str	r3, [r6, #0]
 800ae70:	4630      	mov	r0, r6
 800ae72:	f000 f868 	bl	800af46 <__malloc_unlock>
 800ae76:	e7e4      	b.n	800ae42 <_malloc_r+0x1e>
 800ae78:	680b      	ldr	r3, [r1, #0]
 800ae7a:	1b5b      	subs	r3, r3, r5
 800ae7c:	d418      	bmi.n	800aeb0 <_malloc_r+0x8c>
 800ae7e:	2b0b      	cmp	r3, #11
 800ae80:	d90f      	bls.n	800aea2 <_malloc_r+0x7e>
 800ae82:	600b      	str	r3, [r1, #0]
 800ae84:	50cd      	str	r5, [r1, r3]
 800ae86:	18cc      	adds	r4, r1, r3
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f000 f85c 	bl	800af46 <__malloc_unlock>
 800ae8e:	f104 000b 	add.w	r0, r4, #11
 800ae92:	1d23      	adds	r3, r4, #4
 800ae94:	f020 0007 	bic.w	r0, r0, #7
 800ae98:	1ac3      	subs	r3, r0, r3
 800ae9a:	d0d3      	beq.n	800ae44 <_malloc_r+0x20>
 800ae9c:	425a      	negs	r2, r3
 800ae9e:	50e2      	str	r2, [r4, r3]
 800aea0:	e7d0      	b.n	800ae44 <_malloc_r+0x20>
 800aea2:	428c      	cmp	r4, r1
 800aea4:	684b      	ldr	r3, [r1, #4]
 800aea6:	bf16      	itet	ne
 800aea8:	6063      	strne	r3, [r4, #4]
 800aeaa:	6013      	streq	r3, [r2, #0]
 800aeac:	460c      	movne	r4, r1
 800aeae:	e7eb      	b.n	800ae88 <_malloc_r+0x64>
 800aeb0:	460c      	mov	r4, r1
 800aeb2:	6849      	ldr	r1, [r1, #4]
 800aeb4:	e7cc      	b.n	800ae50 <_malloc_r+0x2c>
 800aeb6:	1cc4      	adds	r4, r0, #3
 800aeb8:	f024 0403 	bic.w	r4, r4, #3
 800aebc:	42a0      	cmp	r0, r4
 800aebe:	d005      	beq.n	800aecc <_malloc_r+0xa8>
 800aec0:	1a21      	subs	r1, r4, r0
 800aec2:	4630      	mov	r0, r6
 800aec4:	f000 f82e 	bl	800af24 <_sbrk_r>
 800aec8:	3001      	adds	r0, #1
 800aeca:	d0cf      	beq.n	800ae6c <_malloc_r+0x48>
 800aecc:	6025      	str	r5, [r4, #0]
 800aece:	e7db      	b.n	800ae88 <_malloc_r+0x64>
 800aed0:	20001a60 	.word	0x20001a60
 800aed4:	20001a64 	.word	0x20001a64

0800aed8 <_realloc_r>:
 800aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeda:	4607      	mov	r7, r0
 800aedc:	4614      	mov	r4, r2
 800aede:	460e      	mov	r6, r1
 800aee0:	b921      	cbnz	r1, 800aeec <_realloc_r+0x14>
 800aee2:	4611      	mov	r1, r2
 800aee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aee8:	f7ff bf9c 	b.w	800ae24 <_malloc_r>
 800aeec:	b922      	cbnz	r2, 800aef8 <_realloc_r+0x20>
 800aeee:	f7ff ff4b 	bl	800ad88 <_free_r>
 800aef2:	4625      	mov	r5, r4
 800aef4:	4628      	mov	r0, r5
 800aef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef8:	f000 f826 	bl	800af48 <_malloc_usable_size_r>
 800aefc:	42a0      	cmp	r0, r4
 800aefe:	d20f      	bcs.n	800af20 <_realloc_r+0x48>
 800af00:	4621      	mov	r1, r4
 800af02:	4638      	mov	r0, r7
 800af04:	f7ff ff8e 	bl	800ae24 <_malloc_r>
 800af08:	4605      	mov	r5, r0
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d0f2      	beq.n	800aef4 <_realloc_r+0x1c>
 800af0e:	4631      	mov	r1, r6
 800af10:	4622      	mov	r2, r4
 800af12:	f7ff fbfd 	bl	800a710 <memcpy>
 800af16:	4631      	mov	r1, r6
 800af18:	4638      	mov	r0, r7
 800af1a:	f7ff ff35 	bl	800ad88 <_free_r>
 800af1e:	e7e9      	b.n	800aef4 <_realloc_r+0x1c>
 800af20:	4635      	mov	r5, r6
 800af22:	e7e7      	b.n	800aef4 <_realloc_r+0x1c>

0800af24 <_sbrk_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	4c06      	ldr	r4, [pc, #24]	; (800af40 <_sbrk_r+0x1c>)
 800af28:	2300      	movs	r3, #0
 800af2a:	4605      	mov	r5, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	f7f7 f9d8 	bl	80022e4 <_sbrk>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_sbrk_r+0x1a>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_sbrk_r+0x1a>
 800af3c:	602b      	str	r3, [r5, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	2000221c 	.word	0x2000221c

0800af44 <__malloc_lock>:
 800af44:	4770      	bx	lr

0800af46 <__malloc_unlock>:
 800af46:	4770      	bx	lr

0800af48 <_malloc_usable_size_r>:
 800af48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af4c:	1f18      	subs	r0, r3, #4
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bfbc      	itt	lt
 800af52:	580b      	ldrlt	r3, [r1, r0]
 800af54:	18c0      	addlt	r0, r0, r3
 800af56:	4770      	bx	lr

0800af58 <trunc>:
 800af58:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800af5c:	ec5c bb10 	vmov	fp, ip, d0
 800af60:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800af64:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800af68:	2913      	cmp	r1, #19
 800af6a:	4664      	mov	r4, ip
 800af6c:	dc11      	bgt.n	800af92 <trunc+0x3a>
 800af6e:	2900      	cmp	r1, #0
 800af70:	bfa7      	ittee	ge
 800af72:	4b15      	ldrge	r3, [pc, #84]	; (800afc8 <trunc+0x70>)
 800af74:	fa43 f101 	asrge.w	r1, r3, r1
 800af78:	2200      	movlt	r2, #0
 800af7a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800af7e:	bfa4      	itt	ge
 800af80:	2200      	movge	r2, #0
 800af82:	ea2c 0301 	bicge.w	r3, ip, r1
 800af86:	4693      	mov	fp, r2
 800af88:	469c      	mov	ip, r3
 800af8a:	ec4c bb10 	vmov	d0, fp, ip
 800af8e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800af92:	2933      	cmp	r1, #51	; 0x33
 800af94:	dd0d      	ble.n	800afb2 <trunc+0x5a>
 800af96:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800af9a:	d1f6      	bne.n	800af8a <trunc+0x32>
 800af9c:	4663      	mov	r3, ip
 800af9e:	ee10 2a10 	vmov	r2, s0
 800afa2:	ee10 0a10 	vmov	r0, s0
 800afa6:	4621      	mov	r1, r4
 800afa8:	f7f5 f968 	bl	800027c <__adddf3>
 800afac:	4683      	mov	fp, r0
 800afae:	468c      	mov	ip, r1
 800afb0:	e7eb      	b.n	800af8a <trunc+0x32>
 800afb2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800afb6:	f04f 33ff 	mov.w	r3, #4294967295
 800afba:	fa23 f000 	lsr.w	r0, r3, r0
 800afbe:	ea2b 0600 	bic.w	r6, fp, r0
 800afc2:	46b3      	mov	fp, r6
 800afc4:	46a4      	mov	ip, r4
 800afc6:	e7e0      	b.n	800af8a <trunc+0x32>
 800afc8:	000fffff 	.word	0x000fffff

0800afcc <pow>:
 800afcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd0:	ed2d 8b04 	vpush	{d8-d9}
 800afd4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b2a8 <pow+0x2dc>
 800afd8:	b08d      	sub	sp, #52	; 0x34
 800afda:	ec57 6b10 	vmov	r6, r7, d0
 800afde:	ec55 4b11 	vmov	r4, r5, d1
 800afe2:	f000 f965 	bl	800b2b0 <__ieee754_pow>
 800afe6:	f999 3000 	ldrsb.w	r3, [r9]
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	3301      	adds	r3, #1
 800afee:	eeb0 8a40 	vmov.f32	s16, s0
 800aff2:	eef0 8a60 	vmov.f32	s17, s1
 800aff6:	46c8      	mov	r8, r9
 800aff8:	d05f      	beq.n	800b0ba <pow+0xee>
 800affa:	4622      	mov	r2, r4
 800affc:	462b      	mov	r3, r5
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	f7f5 fd8b 	bl	8000b1c <__aeabi_dcmpun>
 800b006:	4683      	mov	fp, r0
 800b008:	2800      	cmp	r0, #0
 800b00a:	d156      	bne.n	800b0ba <pow+0xee>
 800b00c:	4632      	mov	r2, r6
 800b00e:	463b      	mov	r3, r7
 800b010:	4630      	mov	r0, r6
 800b012:	4639      	mov	r1, r7
 800b014:	f7f5 fd82 	bl	8000b1c <__aeabi_dcmpun>
 800b018:	9001      	str	r0, [sp, #4]
 800b01a:	b1e8      	cbz	r0, 800b058 <pow+0x8c>
 800b01c:	2200      	movs	r2, #0
 800b01e:	2300      	movs	r3, #0
 800b020:	4620      	mov	r0, r4
 800b022:	4629      	mov	r1, r5
 800b024:	f7f5 fd48 	bl	8000ab8 <__aeabi_dcmpeq>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d046      	beq.n	800b0ba <pow+0xee>
 800b02c:	2301      	movs	r3, #1
 800b02e:	9302      	str	r3, [sp, #8]
 800b030:	4b96      	ldr	r3, [pc, #600]	; (800b28c <pow+0x2c0>)
 800b032:	9303      	str	r3, [sp, #12]
 800b034:	4b96      	ldr	r3, [pc, #600]	; (800b290 <pow+0x2c4>)
 800b036:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b03a:	2200      	movs	r2, #0
 800b03c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b040:	9b00      	ldr	r3, [sp, #0]
 800b042:	2b02      	cmp	r3, #2
 800b044:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b048:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b04c:	d033      	beq.n	800b0b6 <pow+0xea>
 800b04e:	a802      	add	r0, sp, #8
 800b050:	f000 fefd 	bl	800be4e <matherr>
 800b054:	bb48      	cbnz	r0, 800b0aa <pow+0xde>
 800b056:	e05d      	b.n	800b114 <pow+0x148>
 800b058:	f04f 0a00 	mov.w	sl, #0
 800b05c:	f04f 0b00 	mov.w	fp, #0
 800b060:	4652      	mov	r2, sl
 800b062:	465b      	mov	r3, fp
 800b064:	4630      	mov	r0, r6
 800b066:	4639      	mov	r1, r7
 800b068:	f7f5 fd26 	bl	8000ab8 <__aeabi_dcmpeq>
 800b06c:	ec4b ab19 	vmov	d9, sl, fp
 800b070:	2800      	cmp	r0, #0
 800b072:	d054      	beq.n	800b11e <pow+0x152>
 800b074:	4652      	mov	r2, sl
 800b076:	465b      	mov	r3, fp
 800b078:	4620      	mov	r0, r4
 800b07a:	4629      	mov	r1, r5
 800b07c:	f7f5 fd1c 	bl	8000ab8 <__aeabi_dcmpeq>
 800b080:	4680      	mov	r8, r0
 800b082:	b318      	cbz	r0, 800b0cc <pow+0x100>
 800b084:	2301      	movs	r3, #1
 800b086:	9302      	str	r3, [sp, #8]
 800b088:	4b80      	ldr	r3, [pc, #512]	; (800b28c <pow+0x2c0>)
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	9b01      	ldr	r3, [sp, #4]
 800b08e:	930a      	str	r3, [sp, #40]	; 0x28
 800b090:	9b00      	ldr	r3, [sp, #0]
 800b092:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b096:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b09a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0d5      	beq.n	800b04e <pow+0x82>
 800b0a2:	4b7b      	ldr	r3, [pc, #492]	; (800b290 <pow+0x2c4>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ac:	b11b      	cbz	r3, 800b0b6 <pow+0xea>
 800b0ae:	f7ff fb05 	bl	800a6bc <__errno>
 800b0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b4:	6003      	str	r3, [r0, #0]
 800b0b6:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b0ba:	eeb0 0a48 	vmov.f32	s0, s16
 800b0be:	eef0 0a68 	vmov.f32	s1, s17
 800b0c2:	b00d      	add	sp, #52	; 0x34
 800b0c4:	ecbd 8b04 	vpop	{d8-d9}
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	ec45 4b10 	vmov	d0, r4, r5
 800b0d0:	f000 feb5 	bl	800be3e <finite>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d0f0      	beq.n	800b0ba <pow+0xee>
 800b0d8:	4652      	mov	r2, sl
 800b0da:	465b      	mov	r3, fp
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4629      	mov	r1, r5
 800b0e0:	f7f5 fcf4 	bl	8000acc <__aeabi_dcmplt>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d0e8      	beq.n	800b0ba <pow+0xee>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	9302      	str	r3, [sp, #8]
 800b0ec:	4b67      	ldr	r3, [pc, #412]	; (800b28c <pow+0x2c0>)
 800b0ee:	9303      	str	r3, [sp, #12]
 800b0f0:	f999 3000 	ldrsb.w	r3, [r9]
 800b0f4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b0f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b0fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b100:	b913      	cbnz	r3, 800b108 <pow+0x13c>
 800b102:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b106:	e7a2      	b.n	800b04e <pow+0x82>
 800b108:	4962      	ldr	r1, [pc, #392]	; (800b294 <pow+0x2c8>)
 800b10a:	2000      	movs	r0, #0
 800b10c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b110:	2b02      	cmp	r3, #2
 800b112:	d19c      	bne.n	800b04e <pow+0x82>
 800b114:	f7ff fad2 	bl	800a6bc <__errno>
 800b118:	2321      	movs	r3, #33	; 0x21
 800b11a:	6003      	str	r3, [r0, #0]
 800b11c:	e7c5      	b.n	800b0aa <pow+0xde>
 800b11e:	eeb0 0a48 	vmov.f32	s0, s16
 800b122:	eef0 0a68 	vmov.f32	s1, s17
 800b126:	f000 fe8a 	bl	800be3e <finite>
 800b12a:	9000      	str	r0, [sp, #0]
 800b12c:	2800      	cmp	r0, #0
 800b12e:	f040 8081 	bne.w	800b234 <pow+0x268>
 800b132:	ec47 6b10 	vmov	d0, r6, r7
 800b136:	f000 fe82 	bl	800be3e <finite>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d07a      	beq.n	800b234 <pow+0x268>
 800b13e:	ec45 4b10 	vmov	d0, r4, r5
 800b142:	f000 fe7c 	bl	800be3e <finite>
 800b146:	2800      	cmp	r0, #0
 800b148:	d074      	beq.n	800b234 <pow+0x268>
 800b14a:	ec53 2b18 	vmov	r2, r3, d8
 800b14e:	ee18 0a10 	vmov	r0, s16
 800b152:	4619      	mov	r1, r3
 800b154:	f7f5 fce2 	bl	8000b1c <__aeabi_dcmpun>
 800b158:	f999 9000 	ldrsb.w	r9, [r9]
 800b15c:	4b4b      	ldr	r3, [pc, #300]	; (800b28c <pow+0x2c0>)
 800b15e:	b1b0      	cbz	r0, 800b18e <pow+0x1c2>
 800b160:	2201      	movs	r2, #1
 800b162:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b166:	9b00      	ldr	r3, [sp, #0]
 800b168:	930a      	str	r3, [sp, #40]	; 0x28
 800b16a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b16e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b172:	f1b9 0f00 	cmp.w	r9, #0
 800b176:	d0c4      	beq.n	800b102 <pow+0x136>
 800b178:	4652      	mov	r2, sl
 800b17a:	465b      	mov	r3, fp
 800b17c:	4650      	mov	r0, sl
 800b17e:	4659      	mov	r1, fp
 800b180:	f7f5 fb5c 	bl	800083c <__aeabi_ddiv>
 800b184:	f1b9 0f02 	cmp.w	r9, #2
 800b188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b18c:	e7c1      	b.n	800b112 <pow+0x146>
 800b18e:	2203      	movs	r2, #3
 800b190:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b194:	900a      	str	r0, [sp, #40]	; 0x28
 800b196:	4629      	mov	r1, r5
 800b198:	4620      	mov	r0, r4
 800b19a:	2200      	movs	r2, #0
 800b19c:	4b3e      	ldr	r3, [pc, #248]	; (800b298 <pow+0x2cc>)
 800b19e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b1a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b1a6:	f7f5 fa1f 	bl	80005e8 <__aeabi_dmul>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	f1b9 0f00 	cmp.w	r9, #0
 800b1b2:	d124      	bne.n	800b1fe <pow+0x232>
 800b1b4:	4b39      	ldr	r3, [pc, #228]	; (800b29c <pow+0x2d0>)
 800b1b6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b1ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4652      	mov	r2, sl
 800b1c2:	465b      	mov	r3, fp
 800b1c4:	4639      	mov	r1, r7
 800b1c6:	f7f5 fc81 	bl	8000acc <__aeabi_dcmplt>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d056      	beq.n	800b27c <pow+0x2b0>
 800b1ce:	ec45 4b10 	vmov	d0, r4, r5
 800b1d2:	f000 fe49 	bl	800be68 <rint>
 800b1d6:	4622      	mov	r2, r4
 800b1d8:	462b      	mov	r3, r5
 800b1da:	ec51 0b10 	vmov	r0, r1, d0
 800b1de:	f7f5 fc6b 	bl	8000ab8 <__aeabi_dcmpeq>
 800b1e2:	b920      	cbnz	r0, 800b1ee <pow+0x222>
 800b1e4:	4b2e      	ldr	r3, [pc, #184]	; (800b2a0 <pow+0x2d4>)
 800b1e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b1ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b1ee:	f998 3000 	ldrsb.w	r3, [r8]
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d142      	bne.n	800b27c <pow+0x2b0>
 800b1f6:	f7ff fa61 	bl	800a6bc <__errno>
 800b1fa:	2322      	movs	r3, #34	; 0x22
 800b1fc:	e78d      	b.n	800b11a <pow+0x14e>
 800b1fe:	4b29      	ldr	r3, [pc, #164]	; (800b2a4 <pow+0x2d8>)
 800b200:	2200      	movs	r2, #0
 800b202:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b206:	4630      	mov	r0, r6
 800b208:	4652      	mov	r2, sl
 800b20a:	465b      	mov	r3, fp
 800b20c:	4639      	mov	r1, r7
 800b20e:	f7f5 fc5d 	bl	8000acc <__aeabi_dcmplt>
 800b212:	2800      	cmp	r0, #0
 800b214:	d0eb      	beq.n	800b1ee <pow+0x222>
 800b216:	ec45 4b10 	vmov	d0, r4, r5
 800b21a:	f000 fe25 	bl	800be68 <rint>
 800b21e:	4622      	mov	r2, r4
 800b220:	462b      	mov	r3, r5
 800b222:	ec51 0b10 	vmov	r0, r1, d0
 800b226:	f7f5 fc47 	bl	8000ab8 <__aeabi_dcmpeq>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d1df      	bne.n	800b1ee <pow+0x222>
 800b22e:	2200      	movs	r2, #0
 800b230:	4b18      	ldr	r3, [pc, #96]	; (800b294 <pow+0x2c8>)
 800b232:	e7da      	b.n	800b1ea <pow+0x21e>
 800b234:	2200      	movs	r2, #0
 800b236:	2300      	movs	r3, #0
 800b238:	ec51 0b18 	vmov	r0, r1, d8
 800b23c:	f7f5 fc3c 	bl	8000ab8 <__aeabi_dcmpeq>
 800b240:	2800      	cmp	r0, #0
 800b242:	f43f af3a 	beq.w	800b0ba <pow+0xee>
 800b246:	ec47 6b10 	vmov	d0, r6, r7
 800b24a:	f000 fdf8 	bl	800be3e <finite>
 800b24e:	2800      	cmp	r0, #0
 800b250:	f43f af33 	beq.w	800b0ba <pow+0xee>
 800b254:	ec45 4b10 	vmov	d0, r4, r5
 800b258:	f000 fdf1 	bl	800be3e <finite>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	f43f af2c 	beq.w	800b0ba <pow+0xee>
 800b262:	2304      	movs	r3, #4
 800b264:	9302      	str	r3, [sp, #8]
 800b266:	4b09      	ldr	r3, [pc, #36]	; (800b28c <pow+0x2c0>)
 800b268:	9303      	str	r3, [sp, #12]
 800b26a:	2300      	movs	r3, #0
 800b26c:	930a      	str	r3, [sp, #40]	; 0x28
 800b26e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b272:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b276:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b27a:	e7b8      	b.n	800b1ee <pow+0x222>
 800b27c:	a802      	add	r0, sp, #8
 800b27e:	f000 fde6 	bl	800be4e <matherr>
 800b282:	2800      	cmp	r0, #0
 800b284:	f47f af11 	bne.w	800b0aa <pow+0xde>
 800b288:	e7b5      	b.n	800b1f6 <pow+0x22a>
 800b28a:	bf00      	nop
 800b28c:	0800c2b3 	.word	0x0800c2b3
 800b290:	3ff00000 	.word	0x3ff00000
 800b294:	fff00000 	.word	0xfff00000
 800b298:	3fe00000 	.word	0x3fe00000
 800b29c:	47efffff 	.word	0x47efffff
 800b2a0:	c7efffff 	.word	0xc7efffff
 800b2a4:	7ff00000 	.word	0x7ff00000
 800b2a8:	2000014c 	.word	0x2000014c
 800b2ac:	00000000 	.word	0x00000000

0800b2b0 <__ieee754_pow>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	b091      	sub	sp, #68	; 0x44
 800b2b6:	ed8d 1b00 	vstr	d1, [sp]
 800b2ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b2be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b2c2:	ea58 0302 	orrs.w	r3, r8, r2
 800b2c6:	ec57 6b10 	vmov	r6, r7, d0
 800b2ca:	f000 84be 	beq.w	800bc4a <__ieee754_pow+0x99a>
 800b2ce:	4b7a      	ldr	r3, [pc, #488]	; (800b4b8 <__ieee754_pow+0x208>)
 800b2d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b2d4:	429c      	cmp	r4, r3
 800b2d6:	463d      	mov	r5, r7
 800b2d8:	ee10 aa10 	vmov	sl, s0
 800b2dc:	dc09      	bgt.n	800b2f2 <__ieee754_pow+0x42>
 800b2de:	d103      	bne.n	800b2e8 <__ieee754_pow+0x38>
 800b2e0:	b93e      	cbnz	r6, 800b2f2 <__ieee754_pow+0x42>
 800b2e2:	45a0      	cmp	r8, r4
 800b2e4:	dc0d      	bgt.n	800b302 <__ieee754_pow+0x52>
 800b2e6:	e001      	b.n	800b2ec <__ieee754_pow+0x3c>
 800b2e8:	4598      	cmp	r8, r3
 800b2ea:	dc02      	bgt.n	800b2f2 <__ieee754_pow+0x42>
 800b2ec:	4598      	cmp	r8, r3
 800b2ee:	d10e      	bne.n	800b30e <__ieee754_pow+0x5e>
 800b2f0:	b16a      	cbz	r2, 800b30e <__ieee754_pow+0x5e>
 800b2f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b2f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b2fa:	ea54 030a 	orrs.w	r3, r4, sl
 800b2fe:	f000 84a4 	beq.w	800bc4a <__ieee754_pow+0x99a>
 800b302:	486e      	ldr	r0, [pc, #440]	; (800b4bc <__ieee754_pow+0x20c>)
 800b304:	b011      	add	sp, #68	; 0x44
 800b306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30a:	f000 bda5 	b.w	800be58 <nan>
 800b30e:	2d00      	cmp	r5, #0
 800b310:	da53      	bge.n	800b3ba <__ieee754_pow+0x10a>
 800b312:	4b6b      	ldr	r3, [pc, #428]	; (800b4c0 <__ieee754_pow+0x210>)
 800b314:	4598      	cmp	r8, r3
 800b316:	dc4d      	bgt.n	800b3b4 <__ieee754_pow+0x104>
 800b318:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b31c:	4598      	cmp	r8, r3
 800b31e:	dd4c      	ble.n	800b3ba <__ieee754_pow+0x10a>
 800b320:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b324:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b328:	2b14      	cmp	r3, #20
 800b32a:	dd26      	ble.n	800b37a <__ieee754_pow+0xca>
 800b32c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b330:	fa22 f103 	lsr.w	r1, r2, r3
 800b334:	fa01 f303 	lsl.w	r3, r1, r3
 800b338:	4293      	cmp	r3, r2
 800b33a:	d13e      	bne.n	800b3ba <__ieee754_pow+0x10a>
 800b33c:	f001 0101 	and.w	r1, r1, #1
 800b340:	f1c1 0b02 	rsb	fp, r1, #2
 800b344:	2a00      	cmp	r2, #0
 800b346:	d15b      	bne.n	800b400 <__ieee754_pow+0x150>
 800b348:	4b5b      	ldr	r3, [pc, #364]	; (800b4b8 <__ieee754_pow+0x208>)
 800b34a:	4598      	cmp	r8, r3
 800b34c:	d124      	bne.n	800b398 <__ieee754_pow+0xe8>
 800b34e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b352:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b356:	ea53 030a 	orrs.w	r3, r3, sl
 800b35a:	f000 8476 	beq.w	800bc4a <__ieee754_pow+0x99a>
 800b35e:	4b59      	ldr	r3, [pc, #356]	; (800b4c4 <__ieee754_pow+0x214>)
 800b360:	429c      	cmp	r4, r3
 800b362:	dd2d      	ble.n	800b3c0 <__ieee754_pow+0x110>
 800b364:	f1b9 0f00 	cmp.w	r9, #0
 800b368:	f280 8473 	bge.w	800bc52 <__ieee754_pow+0x9a2>
 800b36c:	2000      	movs	r0, #0
 800b36e:	2100      	movs	r1, #0
 800b370:	ec41 0b10 	vmov	d0, r0, r1
 800b374:	b011      	add	sp, #68	; 0x44
 800b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37a:	2a00      	cmp	r2, #0
 800b37c:	d13e      	bne.n	800b3fc <__ieee754_pow+0x14c>
 800b37e:	f1c3 0314 	rsb	r3, r3, #20
 800b382:	fa48 f103 	asr.w	r1, r8, r3
 800b386:	fa01 f303 	lsl.w	r3, r1, r3
 800b38a:	4543      	cmp	r3, r8
 800b38c:	f040 8469 	bne.w	800bc62 <__ieee754_pow+0x9b2>
 800b390:	f001 0101 	and.w	r1, r1, #1
 800b394:	f1c1 0b02 	rsb	fp, r1, #2
 800b398:	4b4b      	ldr	r3, [pc, #300]	; (800b4c8 <__ieee754_pow+0x218>)
 800b39a:	4598      	cmp	r8, r3
 800b39c:	d118      	bne.n	800b3d0 <__ieee754_pow+0x120>
 800b39e:	f1b9 0f00 	cmp.w	r9, #0
 800b3a2:	f280 845a 	bge.w	800bc5a <__ieee754_pow+0x9aa>
 800b3a6:	4948      	ldr	r1, [pc, #288]	; (800b4c8 <__ieee754_pow+0x218>)
 800b3a8:	4632      	mov	r2, r6
 800b3aa:	463b      	mov	r3, r7
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	f7f5 fa45 	bl	800083c <__aeabi_ddiv>
 800b3b2:	e7dd      	b.n	800b370 <__ieee754_pow+0xc0>
 800b3b4:	f04f 0b02 	mov.w	fp, #2
 800b3b8:	e7c4      	b.n	800b344 <__ieee754_pow+0x94>
 800b3ba:	f04f 0b00 	mov.w	fp, #0
 800b3be:	e7c1      	b.n	800b344 <__ieee754_pow+0x94>
 800b3c0:	f1b9 0f00 	cmp.w	r9, #0
 800b3c4:	dad2      	bge.n	800b36c <__ieee754_pow+0xbc>
 800b3c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b3ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b3ce:	e7cf      	b.n	800b370 <__ieee754_pow+0xc0>
 800b3d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b3d4:	d106      	bne.n	800b3e4 <__ieee754_pow+0x134>
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	463b      	mov	r3, r7
 800b3da:	4610      	mov	r0, r2
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f7f5 f903 	bl	80005e8 <__aeabi_dmul>
 800b3e2:	e7c5      	b.n	800b370 <__ieee754_pow+0xc0>
 800b3e4:	4b39      	ldr	r3, [pc, #228]	; (800b4cc <__ieee754_pow+0x21c>)
 800b3e6:	4599      	cmp	r9, r3
 800b3e8:	d10a      	bne.n	800b400 <__ieee754_pow+0x150>
 800b3ea:	2d00      	cmp	r5, #0
 800b3ec:	db08      	blt.n	800b400 <__ieee754_pow+0x150>
 800b3ee:	ec47 6b10 	vmov	d0, r6, r7
 800b3f2:	b011      	add	sp, #68	; 0x44
 800b3f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	f000 bc68 	b.w	800bccc <__ieee754_sqrt>
 800b3fc:	f04f 0b00 	mov.w	fp, #0
 800b400:	ec47 6b10 	vmov	d0, r6, r7
 800b404:	f000 fd12 	bl	800be2c <fabs>
 800b408:	ec51 0b10 	vmov	r0, r1, d0
 800b40c:	f1ba 0f00 	cmp.w	sl, #0
 800b410:	d127      	bne.n	800b462 <__ieee754_pow+0x1b2>
 800b412:	b124      	cbz	r4, 800b41e <__ieee754_pow+0x16e>
 800b414:	4b2c      	ldr	r3, [pc, #176]	; (800b4c8 <__ieee754_pow+0x218>)
 800b416:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d121      	bne.n	800b462 <__ieee754_pow+0x1b2>
 800b41e:	f1b9 0f00 	cmp.w	r9, #0
 800b422:	da05      	bge.n	800b430 <__ieee754_pow+0x180>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	2000      	movs	r0, #0
 800b42a:	4927      	ldr	r1, [pc, #156]	; (800b4c8 <__ieee754_pow+0x218>)
 800b42c:	f7f5 fa06 	bl	800083c <__aeabi_ddiv>
 800b430:	2d00      	cmp	r5, #0
 800b432:	da9d      	bge.n	800b370 <__ieee754_pow+0xc0>
 800b434:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b438:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b43c:	ea54 030b 	orrs.w	r3, r4, fp
 800b440:	d108      	bne.n	800b454 <__ieee754_pow+0x1a4>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4610      	mov	r0, r2
 800b448:	4619      	mov	r1, r3
 800b44a:	f7f4 ff15 	bl	8000278 <__aeabi_dsub>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	e7ac      	b.n	800b3ae <__ieee754_pow+0xfe>
 800b454:	f1bb 0f01 	cmp.w	fp, #1
 800b458:	d18a      	bne.n	800b370 <__ieee754_pow+0xc0>
 800b45a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b45e:	4619      	mov	r1, r3
 800b460:	e786      	b.n	800b370 <__ieee754_pow+0xc0>
 800b462:	0fed      	lsrs	r5, r5, #31
 800b464:	1e6b      	subs	r3, r5, #1
 800b466:	930d      	str	r3, [sp, #52]	; 0x34
 800b468:	ea5b 0303 	orrs.w	r3, fp, r3
 800b46c:	d102      	bne.n	800b474 <__ieee754_pow+0x1c4>
 800b46e:	4632      	mov	r2, r6
 800b470:	463b      	mov	r3, r7
 800b472:	e7e8      	b.n	800b446 <__ieee754_pow+0x196>
 800b474:	4b16      	ldr	r3, [pc, #88]	; (800b4d0 <__ieee754_pow+0x220>)
 800b476:	4598      	cmp	r8, r3
 800b478:	f340 80fe 	ble.w	800b678 <__ieee754_pow+0x3c8>
 800b47c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b480:	4598      	cmp	r8, r3
 800b482:	dd0a      	ble.n	800b49a <__ieee754_pow+0x1ea>
 800b484:	4b0f      	ldr	r3, [pc, #60]	; (800b4c4 <__ieee754_pow+0x214>)
 800b486:	429c      	cmp	r4, r3
 800b488:	dc0d      	bgt.n	800b4a6 <__ieee754_pow+0x1f6>
 800b48a:	f1b9 0f00 	cmp.w	r9, #0
 800b48e:	f6bf af6d 	bge.w	800b36c <__ieee754_pow+0xbc>
 800b492:	a307      	add	r3, pc, #28	; (adr r3, 800b4b0 <__ieee754_pow+0x200>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	e79f      	b.n	800b3da <__ieee754_pow+0x12a>
 800b49a:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <__ieee754_pow+0x224>)
 800b49c:	429c      	cmp	r4, r3
 800b49e:	ddf4      	ble.n	800b48a <__ieee754_pow+0x1da>
 800b4a0:	4b09      	ldr	r3, [pc, #36]	; (800b4c8 <__ieee754_pow+0x218>)
 800b4a2:	429c      	cmp	r4, r3
 800b4a4:	dd18      	ble.n	800b4d8 <__ieee754_pow+0x228>
 800b4a6:	f1b9 0f00 	cmp.w	r9, #0
 800b4aa:	dcf2      	bgt.n	800b492 <__ieee754_pow+0x1e2>
 800b4ac:	e75e      	b.n	800b36c <__ieee754_pow+0xbc>
 800b4ae:	bf00      	nop
 800b4b0:	8800759c 	.word	0x8800759c
 800b4b4:	7e37e43c 	.word	0x7e37e43c
 800b4b8:	7ff00000 	.word	0x7ff00000
 800b4bc:	0800c285 	.word	0x0800c285
 800b4c0:	433fffff 	.word	0x433fffff
 800b4c4:	3fefffff 	.word	0x3fefffff
 800b4c8:	3ff00000 	.word	0x3ff00000
 800b4cc:	3fe00000 	.word	0x3fe00000
 800b4d0:	41e00000 	.word	0x41e00000
 800b4d4:	3feffffe 	.word	0x3feffffe
 800b4d8:	2200      	movs	r2, #0
 800b4da:	4b63      	ldr	r3, [pc, #396]	; (800b668 <__ieee754_pow+0x3b8>)
 800b4dc:	f7f4 fecc 	bl	8000278 <__aeabi_dsub>
 800b4e0:	a355      	add	r3, pc, #340	; (adr r3, 800b638 <__ieee754_pow+0x388>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	f7f5 f87d 	bl	80005e8 <__aeabi_dmul>
 800b4ee:	a354      	add	r3, pc, #336	; (adr r3, 800b640 <__ieee754_pow+0x390>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460f      	mov	r7, r1
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	f7f5 f874 	bl	80005e8 <__aeabi_dmul>
 800b500:	2200      	movs	r2, #0
 800b502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b506:	4b59      	ldr	r3, [pc, #356]	; (800b66c <__ieee754_pow+0x3bc>)
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	f7f5 f86c 	bl	80005e8 <__aeabi_dmul>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	a14c      	add	r1, pc, #304	; (adr r1, 800b648 <__ieee754_pow+0x398>)
 800b516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b51a:	f7f4 fead 	bl	8000278 <__aeabi_dsub>
 800b51e:	4622      	mov	r2, r4
 800b520:	462b      	mov	r3, r5
 800b522:	f7f5 f861 	bl	80005e8 <__aeabi_dmul>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	2000      	movs	r0, #0
 800b52c:	4950      	ldr	r1, [pc, #320]	; (800b670 <__ieee754_pow+0x3c0>)
 800b52e:	f7f4 fea3 	bl	8000278 <__aeabi_dsub>
 800b532:	4622      	mov	r2, r4
 800b534:	462b      	mov	r3, r5
 800b536:	4680      	mov	r8, r0
 800b538:	4689      	mov	r9, r1
 800b53a:	4620      	mov	r0, r4
 800b53c:	4629      	mov	r1, r5
 800b53e:	f7f5 f853 	bl	80005e8 <__aeabi_dmul>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4640      	mov	r0, r8
 800b548:	4649      	mov	r1, r9
 800b54a:	f7f5 f84d 	bl	80005e8 <__aeabi_dmul>
 800b54e:	a340      	add	r3, pc, #256	; (adr r3, 800b650 <__ieee754_pow+0x3a0>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f7f5 f848 	bl	80005e8 <__aeabi_dmul>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b560:	f7f4 fe8a 	bl	8000278 <__aeabi_dsub>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4604      	mov	r4, r0
 800b56a:	460d      	mov	r5, r1
 800b56c:	4630      	mov	r0, r6
 800b56e:	4639      	mov	r1, r7
 800b570:	f7f4 fe84 	bl	800027c <__adddf3>
 800b574:	2000      	movs	r0, #0
 800b576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b57a:	4632      	mov	r2, r6
 800b57c:	463b      	mov	r3, r7
 800b57e:	f7f4 fe7b 	bl	8000278 <__aeabi_dsub>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	4620      	mov	r0, r4
 800b588:	4629      	mov	r1, r5
 800b58a:	f7f4 fe75 	bl	8000278 <__aeabi_dsub>
 800b58e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b590:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b594:	4313      	orrs	r3, r2
 800b596:	4606      	mov	r6, r0
 800b598:	460f      	mov	r7, r1
 800b59a:	f040 81eb 	bne.w	800b974 <__ieee754_pow+0x6c4>
 800b59e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b658 <__ieee754_pow+0x3a8>
 800b5a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b5a6:	2400      	movs	r4, #0
 800b5a8:	4622      	mov	r2, r4
 800b5aa:	462b      	mov	r3, r5
 800b5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5b4:	f7f4 fe60 	bl	8000278 <__aeabi_dsub>
 800b5b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5bc:	f7f5 f814 	bl	80005e8 <__aeabi_dmul>
 800b5c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5c4:	4680      	mov	r8, r0
 800b5c6:	4689      	mov	r9, r1
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f7f5 f80c 	bl	80005e8 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	4649      	mov	r1, r9
 800b5d8:	f7f4 fe50 	bl	800027c <__adddf3>
 800b5dc:	4622      	mov	r2, r4
 800b5de:	462b      	mov	r3, r5
 800b5e0:	4680      	mov	r8, r0
 800b5e2:	4689      	mov	r9, r1
 800b5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5e8:	f7f4 fffe 	bl	80005e8 <__aeabi_dmul>
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	e9cd 4500 	strd	r4, r5, [sp]
 800b5fc:	f7f4 fe3e 	bl	800027c <__adddf3>
 800b600:	4b1c      	ldr	r3, [pc, #112]	; (800b674 <__ieee754_pow+0x3c4>)
 800b602:	4299      	cmp	r1, r3
 800b604:	4606      	mov	r6, r0
 800b606:	460f      	mov	r7, r1
 800b608:	468b      	mov	fp, r1
 800b60a:	f340 82f7 	ble.w	800bbfc <__ieee754_pow+0x94c>
 800b60e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b612:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b616:	4303      	orrs	r3, r0
 800b618:	f000 81ea 	beq.w	800b9f0 <__ieee754_pow+0x740>
 800b61c:	a310      	add	r3, pc, #64	; (adr r3, 800b660 <__ieee754_pow+0x3b0>)
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b626:	f7f4 ffdf 	bl	80005e8 <__aeabi_dmul>
 800b62a:	a30d      	add	r3, pc, #52	; (adr r3, 800b660 <__ieee754_pow+0x3b0>)
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	e6d5      	b.n	800b3de <__ieee754_pow+0x12e>
 800b632:	bf00      	nop
 800b634:	f3af 8000 	nop.w
 800b638:	60000000 	.word	0x60000000
 800b63c:	3ff71547 	.word	0x3ff71547
 800b640:	f85ddf44 	.word	0xf85ddf44
 800b644:	3e54ae0b 	.word	0x3e54ae0b
 800b648:	55555555 	.word	0x55555555
 800b64c:	3fd55555 	.word	0x3fd55555
 800b650:	652b82fe 	.word	0x652b82fe
 800b654:	3ff71547 	.word	0x3ff71547
 800b658:	00000000 	.word	0x00000000
 800b65c:	bff00000 	.word	0xbff00000
 800b660:	8800759c 	.word	0x8800759c
 800b664:	7e37e43c 	.word	0x7e37e43c
 800b668:	3ff00000 	.word	0x3ff00000
 800b66c:	3fd00000 	.word	0x3fd00000
 800b670:	3fe00000 	.word	0x3fe00000
 800b674:	408fffff 	.word	0x408fffff
 800b678:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b67c:	f04f 0200 	mov.w	r2, #0
 800b680:	da05      	bge.n	800b68e <__ieee754_pow+0x3de>
 800b682:	4bd3      	ldr	r3, [pc, #844]	; (800b9d0 <__ieee754_pow+0x720>)
 800b684:	f7f4 ffb0 	bl	80005e8 <__aeabi_dmul>
 800b688:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b68c:	460c      	mov	r4, r1
 800b68e:	1523      	asrs	r3, r4, #20
 800b690:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b694:	4413      	add	r3, r2
 800b696:	9309      	str	r3, [sp, #36]	; 0x24
 800b698:	4bce      	ldr	r3, [pc, #824]	; (800b9d4 <__ieee754_pow+0x724>)
 800b69a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b69e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b6a2:	429c      	cmp	r4, r3
 800b6a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b6a8:	dd08      	ble.n	800b6bc <__ieee754_pow+0x40c>
 800b6aa:	4bcb      	ldr	r3, [pc, #812]	; (800b9d8 <__ieee754_pow+0x728>)
 800b6ac:	429c      	cmp	r4, r3
 800b6ae:	f340 815e 	ble.w	800b96e <__ieee754_pow+0x6be>
 800b6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b6bc:	f04f 0a00 	mov.w	sl, #0
 800b6c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b6c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b6c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6c8:	4bc4      	ldr	r3, [pc, #784]	; (800b9dc <__ieee754_pow+0x72c>)
 800b6ca:	4413      	add	r3, r2
 800b6cc:	ed93 7b00 	vldr	d7, [r3]
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	ec53 2b17 	vmov	r2, r3, d7
 800b6d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b6de:	f7f4 fdcb 	bl	8000278 <__aeabi_dsub>
 800b6e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	460f      	mov	r7, r1
 800b6ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6ee:	f7f4 fdc5 	bl	800027c <__adddf3>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	49b9      	ldr	r1, [pc, #740]	; (800b9e0 <__ieee754_pow+0x730>)
 800b6fa:	f7f5 f89f 	bl	800083c <__aeabi_ddiv>
 800b6fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4630      	mov	r0, r6
 800b708:	4639      	mov	r1, r7
 800b70a:	f7f4 ff6d 	bl	80005e8 <__aeabi_dmul>
 800b70e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b712:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b716:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b71a:	2300      	movs	r3, #0
 800b71c:	9302      	str	r3, [sp, #8]
 800b71e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b722:	106d      	asrs	r5, r5, #1
 800b724:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b728:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b72c:	2200      	movs	r2, #0
 800b72e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b732:	4640      	mov	r0, r8
 800b734:	4649      	mov	r1, r9
 800b736:	4614      	mov	r4, r2
 800b738:	461d      	mov	r5, r3
 800b73a:	f7f4 ff55 	bl	80005e8 <__aeabi_dmul>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4630      	mov	r0, r6
 800b744:	4639      	mov	r1, r7
 800b746:	f7f4 fd97 	bl	8000278 <__aeabi_dsub>
 800b74a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b74e:	4606      	mov	r6, r0
 800b750:	460f      	mov	r7, r1
 800b752:	4620      	mov	r0, r4
 800b754:	4629      	mov	r1, r5
 800b756:	f7f4 fd8f 	bl	8000278 <__aeabi_dsub>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b762:	f7f4 fd89 	bl	8000278 <__aeabi_dsub>
 800b766:	4642      	mov	r2, r8
 800b768:	464b      	mov	r3, r9
 800b76a:	f7f4 ff3d 	bl	80005e8 <__aeabi_dmul>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4630      	mov	r0, r6
 800b774:	4639      	mov	r1, r7
 800b776:	f7f4 fd7f 	bl	8000278 <__aeabi_dsub>
 800b77a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b77e:	f7f4 ff33 	bl	80005e8 <__aeabi_dmul>
 800b782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b786:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b78a:	4610      	mov	r0, r2
 800b78c:	4619      	mov	r1, r3
 800b78e:	f7f4 ff2b 	bl	80005e8 <__aeabi_dmul>
 800b792:	a37b      	add	r3, pc, #492	; (adr r3, 800b980 <__ieee754_pow+0x6d0>)
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	4604      	mov	r4, r0
 800b79a:	460d      	mov	r5, r1
 800b79c:	f7f4 ff24 	bl	80005e8 <__aeabi_dmul>
 800b7a0:	a379      	add	r3, pc, #484	; (adr r3, 800b988 <__ieee754_pow+0x6d8>)
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f7f4 fd69 	bl	800027c <__adddf3>
 800b7aa:	4622      	mov	r2, r4
 800b7ac:	462b      	mov	r3, r5
 800b7ae:	f7f4 ff1b 	bl	80005e8 <__aeabi_dmul>
 800b7b2:	a377      	add	r3, pc, #476	; (adr r3, 800b990 <__ieee754_pow+0x6e0>)
 800b7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b8:	f7f4 fd60 	bl	800027c <__adddf3>
 800b7bc:	4622      	mov	r2, r4
 800b7be:	462b      	mov	r3, r5
 800b7c0:	f7f4 ff12 	bl	80005e8 <__aeabi_dmul>
 800b7c4:	a374      	add	r3, pc, #464	; (adr r3, 800b998 <__ieee754_pow+0x6e8>)
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	f7f4 fd57 	bl	800027c <__adddf3>
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	462b      	mov	r3, r5
 800b7d2:	f7f4 ff09 	bl	80005e8 <__aeabi_dmul>
 800b7d6:	a372      	add	r3, pc, #456	; (adr r3, 800b9a0 <__ieee754_pow+0x6f0>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f4 fd4e 	bl	800027c <__adddf3>
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	462b      	mov	r3, r5
 800b7e4:	f7f4 ff00 	bl	80005e8 <__aeabi_dmul>
 800b7e8:	a36f      	add	r3, pc, #444	; (adr r3, 800b9a8 <__ieee754_pow+0x6f8>)
 800b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ee:	f7f4 fd45 	bl	800027c <__adddf3>
 800b7f2:	4622      	mov	r2, r4
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	460f      	mov	r7, r1
 800b7f8:	462b      	mov	r3, r5
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	f7f4 fef3 	bl	80005e8 <__aeabi_dmul>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	4630      	mov	r0, r6
 800b808:	4639      	mov	r1, r7
 800b80a:	f7f4 feed 	bl	80005e8 <__aeabi_dmul>
 800b80e:	4642      	mov	r2, r8
 800b810:	4604      	mov	r4, r0
 800b812:	460d      	mov	r5, r1
 800b814:	464b      	mov	r3, r9
 800b816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b81a:	f7f4 fd2f 	bl	800027c <__adddf3>
 800b81e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b822:	f7f4 fee1 	bl	80005e8 <__aeabi_dmul>
 800b826:	4622      	mov	r2, r4
 800b828:	462b      	mov	r3, r5
 800b82a:	f7f4 fd27 	bl	800027c <__adddf3>
 800b82e:	4642      	mov	r2, r8
 800b830:	4606      	mov	r6, r0
 800b832:	460f      	mov	r7, r1
 800b834:	464b      	mov	r3, r9
 800b836:	4640      	mov	r0, r8
 800b838:	4649      	mov	r1, r9
 800b83a:	f7f4 fed5 	bl	80005e8 <__aeabi_dmul>
 800b83e:	2200      	movs	r2, #0
 800b840:	4b68      	ldr	r3, [pc, #416]	; (800b9e4 <__ieee754_pow+0x734>)
 800b842:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b846:	f7f4 fd19 	bl	800027c <__adddf3>
 800b84a:	4632      	mov	r2, r6
 800b84c:	463b      	mov	r3, r7
 800b84e:	f7f4 fd15 	bl	800027c <__adddf3>
 800b852:	9802      	ldr	r0, [sp, #8]
 800b854:	460d      	mov	r5, r1
 800b856:	4604      	mov	r4, r0
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4640      	mov	r0, r8
 800b85e:	4649      	mov	r1, r9
 800b860:	f7f4 fec2 	bl	80005e8 <__aeabi_dmul>
 800b864:	2200      	movs	r2, #0
 800b866:	4680      	mov	r8, r0
 800b868:	4689      	mov	r9, r1
 800b86a:	4b5e      	ldr	r3, [pc, #376]	; (800b9e4 <__ieee754_pow+0x734>)
 800b86c:	4620      	mov	r0, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f4 fd02 	bl	8000278 <__aeabi_dsub>
 800b874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b878:	f7f4 fcfe 	bl	8000278 <__aeabi_dsub>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4630      	mov	r0, r6
 800b882:	4639      	mov	r1, r7
 800b884:	f7f4 fcf8 	bl	8000278 <__aeabi_dsub>
 800b888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b88c:	f7f4 feac 	bl	80005e8 <__aeabi_dmul>
 800b890:	4622      	mov	r2, r4
 800b892:	4606      	mov	r6, r0
 800b894:	460f      	mov	r7, r1
 800b896:	462b      	mov	r3, r5
 800b898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b89c:	f7f4 fea4 	bl	80005e8 <__aeabi_dmul>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	f7f4 fce8 	bl	800027c <__adddf3>
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	460f      	mov	r7, r1
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	4649      	mov	r1, r9
 800b8b8:	f7f4 fce0 	bl	800027c <__adddf3>
 800b8bc:	9802      	ldr	r0, [sp, #8]
 800b8be:	a33c      	add	r3, pc, #240	; (adr r3, 800b9b0 <__ieee754_pow+0x700>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	f7f4 fe8e 	bl	80005e8 <__aeabi_dmul>
 800b8cc:	4642      	mov	r2, r8
 800b8ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8d2:	464b      	mov	r3, r9
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	f7f4 fcce 	bl	8000278 <__aeabi_dsub>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	f7f4 fcc8 	bl	8000278 <__aeabi_dsub>
 800b8e8:	a333      	add	r3, pc, #204	; (adr r3, 800b9b8 <__ieee754_pow+0x708>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f7f4 fe7b 	bl	80005e8 <__aeabi_dmul>
 800b8f2:	a333      	add	r3, pc, #204	; (adr r3, 800b9c0 <__ieee754_pow+0x710>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	460f      	mov	r7, r1
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	f7f4 fe72 	bl	80005e8 <__aeabi_dmul>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4630      	mov	r0, r6
 800b90a:	4639      	mov	r1, r7
 800b90c:	f7f4 fcb6 	bl	800027c <__adddf3>
 800b910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b912:	4b35      	ldr	r3, [pc, #212]	; (800b9e8 <__ieee754_pow+0x738>)
 800b914:	4413      	add	r3, r2
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f7f4 fcaf 	bl	800027c <__adddf3>
 800b91e:	4604      	mov	r4, r0
 800b920:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b922:	460d      	mov	r5, r1
 800b924:	f7f4 fdf6 	bl	8000514 <__aeabi_i2d>
 800b928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b92a:	4b30      	ldr	r3, [pc, #192]	; (800b9ec <__ieee754_pow+0x73c>)
 800b92c:	4413      	add	r3, r2
 800b92e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b932:	4606      	mov	r6, r0
 800b934:	460f      	mov	r7, r1
 800b936:	4622      	mov	r2, r4
 800b938:	462b      	mov	r3, r5
 800b93a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b93e:	f7f4 fc9d 	bl	800027c <__adddf3>
 800b942:	4642      	mov	r2, r8
 800b944:	464b      	mov	r3, r9
 800b946:	f7f4 fc99 	bl	800027c <__adddf3>
 800b94a:	4632      	mov	r2, r6
 800b94c:	463b      	mov	r3, r7
 800b94e:	f7f4 fc95 	bl	800027c <__adddf3>
 800b952:	9802      	ldr	r0, [sp, #8]
 800b954:	4632      	mov	r2, r6
 800b956:	463b      	mov	r3, r7
 800b958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b95c:	f7f4 fc8c 	bl	8000278 <__aeabi_dsub>
 800b960:	4642      	mov	r2, r8
 800b962:	464b      	mov	r3, r9
 800b964:	f7f4 fc88 	bl	8000278 <__aeabi_dsub>
 800b968:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b96c:	e607      	b.n	800b57e <__ieee754_pow+0x2ce>
 800b96e:	f04f 0a01 	mov.w	sl, #1
 800b972:	e6a5      	b.n	800b6c0 <__ieee754_pow+0x410>
 800b974:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b9c8 <__ieee754_pow+0x718>
 800b978:	e613      	b.n	800b5a2 <__ieee754_pow+0x2f2>
 800b97a:	bf00      	nop
 800b97c:	f3af 8000 	nop.w
 800b980:	4a454eef 	.word	0x4a454eef
 800b984:	3fca7e28 	.word	0x3fca7e28
 800b988:	93c9db65 	.word	0x93c9db65
 800b98c:	3fcd864a 	.word	0x3fcd864a
 800b990:	a91d4101 	.word	0xa91d4101
 800b994:	3fd17460 	.word	0x3fd17460
 800b998:	518f264d 	.word	0x518f264d
 800b99c:	3fd55555 	.word	0x3fd55555
 800b9a0:	db6fabff 	.word	0xdb6fabff
 800b9a4:	3fdb6db6 	.word	0x3fdb6db6
 800b9a8:	33333303 	.word	0x33333303
 800b9ac:	3fe33333 	.word	0x3fe33333
 800b9b0:	e0000000 	.word	0xe0000000
 800b9b4:	3feec709 	.word	0x3feec709
 800b9b8:	dc3a03fd 	.word	0xdc3a03fd
 800b9bc:	3feec709 	.word	0x3feec709
 800b9c0:	145b01f5 	.word	0x145b01f5
 800b9c4:	be3e2fe0 	.word	0xbe3e2fe0
 800b9c8:	00000000 	.word	0x00000000
 800b9cc:	3ff00000 	.word	0x3ff00000
 800b9d0:	43400000 	.word	0x43400000
 800b9d4:	0003988e 	.word	0x0003988e
 800b9d8:	000bb679 	.word	0x000bb679
 800b9dc:	0800c2b8 	.word	0x0800c2b8
 800b9e0:	3ff00000 	.word	0x3ff00000
 800b9e4:	40080000 	.word	0x40080000
 800b9e8:	0800c2d8 	.word	0x0800c2d8
 800b9ec:	0800c2c8 	.word	0x0800c2c8
 800b9f0:	a3b4      	add	r3, pc, #720	; (adr r3, 800bcc4 <__ieee754_pow+0xa14>)
 800b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f6:	4640      	mov	r0, r8
 800b9f8:	4649      	mov	r1, r9
 800b9fa:	f7f4 fc3f 	bl	800027c <__adddf3>
 800b9fe:	4622      	mov	r2, r4
 800ba00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba04:	462b      	mov	r3, r5
 800ba06:	4630      	mov	r0, r6
 800ba08:	4639      	mov	r1, r7
 800ba0a:	f7f4 fc35 	bl	8000278 <__aeabi_dsub>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba16:	f7f5 f877 	bl	8000b08 <__aeabi_dcmpgt>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	f47f adfe 	bne.w	800b61c <__ieee754_pow+0x36c>
 800ba20:	4aa3      	ldr	r2, [pc, #652]	; (800bcb0 <__ieee754_pow+0xa00>)
 800ba22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba26:	4293      	cmp	r3, r2
 800ba28:	f340 810a 	ble.w	800bc40 <__ieee754_pow+0x990>
 800ba2c:	151b      	asrs	r3, r3, #20
 800ba2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ba32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ba36:	fa4a f303 	asr.w	r3, sl, r3
 800ba3a:	445b      	add	r3, fp
 800ba3c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ba40:	4e9c      	ldr	r6, [pc, #624]	; (800bcb4 <__ieee754_pow+0xa04>)
 800ba42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ba46:	4116      	asrs	r6, r2
 800ba48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	ea23 0106 	bic.w	r1, r3, r6
 800ba52:	f1c2 0214 	rsb	r2, r2, #20
 800ba56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ba5a:	fa4a fa02 	asr.w	sl, sl, r2
 800ba5e:	f1bb 0f00 	cmp.w	fp, #0
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4620      	mov	r0, r4
 800ba68:	4629      	mov	r1, r5
 800ba6a:	bfb8      	it	lt
 800ba6c:	f1ca 0a00 	rsblt	sl, sl, #0
 800ba70:	f7f4 fc02 	bl	8000278 <__aeabi_dsub>
 800ba74:	e9cd 0100 	strd	r0, r1, [sp]
 800ba78:	4642      	mov	r2, r8
 800ba7a:	464b      	mov	r3, r9
 800ba7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba80:	f7f4 fbfc 	bl	800027c <__adddf3>
 800ba84:	2000      	movs	r0, #0
 800ba86:	a378      	add	r3, pc, #480	; (adr r3, 800bc68 <__ieee754_pow+0x9b8>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	f7f4 fdaa 	bl	80005e8 <__aeabi_dmul>
 800ba94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba98:	4606      	mov	r6, r0
 800ba9a:	460f      	mov	r7, r1
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fbea 	bl	8000278 <__aeabi_dsub>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4640      	mov	r0, r8
 800baaa:	4649      	mov	r1, r9
 800baac:	f7f4 fbe4 	bl	8000278 <__aeabi_dsub>
 800bab0:	a36f      	add	r3, pc, #444	; (adr r3, 800bc70 <__ieee754_pow+0x9c0>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fd97 	bl	80005e8 <__aeabi_dmul>
 800baba:	a36f      	add	r3, pc, #444	; (adr r3, 800bc78 <__ieee754_pow+0x9c8>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	4680      	mov	r8, r0
 800bac2:	4689      	mov	r9, r1
 800bac4:	4620      	mov	r0, r4
 800bac6:	4629      	mov	r1, r5
 800bac8:	f7f4 fd8e 	bl	80005e8 <__aeabi_dmul>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4640      	mov	r0, r8
 800bad2:	4649      	mov	r1, r9
 800bad4:	f7f4 fbd2 	bl	800027c <__adddf3>
 800bad8:	4604      	mov	r4, r0
 800bada:	460d      	mov	r5, r1
 800badc:	4602      	mov	r2, r0
 800bade:	460b      	mov	r3, r1
 800bae0:	4630      	mov	r0, r6
 800bae2:	4639      	mov	r1, r7
 800bae4:	f7f4 fbca 	bl	800027c <__adddf3>
 800bae8:	4632      	mov	r2, r6
 800baea:	463b      	mov	r3, r7
 800baec:	4680      	mov	r8, r0
 800baee:	4689      	mov	r9, r1
 800baf0:	f7f4 fbc2 	bl	8000278 <__aeabi_dsub>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4620      	mov	r0, r4
 800bafa:	4629      	mov	r1, r5
 800bafc:	f7f4 fbbc 	bl	8000278 <__aeabi_dsub>
 800bb00:	4642      	mov	r2, r8
 800bb02:	4606      	mov	r6, r0
 800bb04:	460f      	mov	r7, r1
 800bb06:	464b      	mov	r3, r9
 800bb08:	4640      	mov	r0, r8
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	f7f4 fd6c 	bl	80005e8 <__aeabi_dmul>
 800bb10:	a35b      	add	r3, pc, #364	; (adr r3, 800bc80 <__ieee754_pow+0x9d0>)
 800bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb16:	4604      	mov	r4, r0
 800bb18:	460d      	mov	r5, r1
 800bb1a:	f7f4 fd65 	bl	80005e8 <__aeabi_dmul>
 800bb1e:	a35a      	add	r3, pc, #360	; (adr r3, 800bc88 <__ieee754_pow+0x9d8>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f7f4 fba8 	bl	8000278 <__aeabi_dsub>
 800bb28:	4622      	mov	r2, r4
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	f7f4 fd5c 	bl	80005e8 <__aeabi_dmul>
 800bb30:	a357      	add	r3, pc, #348	; (adr r3, 800bc90 <__ieee754_pow+0x9e0>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f7f4 fba1 	bl	800027c <__adddf3>
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	462b      	mov	r3, r5
 800bb3e:	f7f4 fd53 	bl	80005e8 <__aeabi_dmul>
 800bb42:	a355      	add	r3, pc, #340	; (adr r3, 800bc98 <__ieee754_pow+0x9e8>)
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 fb96 	bl	8000278 <__aeabi_dsub>
 800bb4c:	4622      	mov	r2, r4
 800bb4e:	462b      	mov	r3, r5
 800bb50:	f7f4 fd4a 	bl	80005e8 <__aeabi_dmul>
 800bb54:	a352      	add	r3, pc, #328	; (adr r3, 800bca0 <__ieee754_pow+0x9f0>)
 800bb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5a:	f7f4 fb8f 	bl	800027c <__adddf3>
 800bb5e:	4622      	mov	r2, r4
 800bb60:	462b      	mov	r3, r5
 800bb62:	f7f4 fd41 	bl	80005e8 <__aeabi_dmul>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	f7f4 fb83 	bl	8000278 <__aeabi_dsub>
 800bb72:	4604      	mov	r4, r0
 800bb74:	460d      	mov	r5, r1
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	f7f4 fd33 	bl	80005e8 <__aeabi_dmul>
 800bb82:	2200      	movs	r2, #0
 800bb84:	e9cd 0100 	strd	r0, r1, [sp]
 800bb88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	4629      	mov	r1, r5
 800bb90:	f7f4 fb72 	bl	8000278 <__aeabi_dsub>
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb9c:	f7f4 fe4e 	bl	800083c <__aeabi_ddiv>
 800bba0:	4632      	mov	r2, r6
 800bba2:	4604      	mov	r4, r0
 800bba4:	460d      	mov	r5, r1
 800bba6:	463b      	mov	r3, r7
 800bba8:	4640      	mov	r0, r8
 800bbaa:	4649      	mov	r1, r9
 800bbac:	f7f4 fd1c 	bl	80005e8 <__aeabi_dmul>
 800bbb0:	4632      	mov	r2, r6
 800bbb2:	463b      	mov	r3, r7
 800bbb4:	f7f4 fb62 	bl	800027c <__adddf3>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4629      	mov	r1, r5
 800bbc0:	f7f4 fb5a 	bl	8000278 <__aeabi_dsub>
 800bbc4:	4642      	mov	r2, r8
 800bbc6:	464b      	mov	r3, r9
 800bbc8:	f7f4 fb56 	bl	8000278 <__aeabi_dsub>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	4939      	ldr	r1, [pc, #228]	; (800bcb8 <__ieee754_pow+0xa08>)
 800bbd4:	f7f4 fb50 	bl	8000278 <__aeabi_dsub>
 800bbd8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bbdc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	da2f      	bge.n	800bc46 <__ieee754_pow+0x996>
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	ec43 2b10 	vmov	d0, r2, r3
 800bbec:	f000 f9c0 	bl	800bf70 <scalbn>
 800bbf0:	ec51 0b10 	vmov	r0, r1, d0
 800bbf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbf8:	f7ff bbf1 	b.w	800b3de <__ieee754_pow+0x12e>
 800bbfc:	4b2f      	ldr	r3, [pc, #188]	; (800bcbc <__ieee754_pow+0xa0c>)
 800bbfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bc02:	429e      	cmp	r6, r3
 800bc04:	f77f af0c 	ble.w	800ba20 <__ieee754_pow+0x770>
 800bc08:	4b2d      	ldr	r3, [pc, #180]	; (800bcc0 <__ieee754_pow+0xa10>)
 800bc0a:	440b      	add	r3, r1
 800bc0c:	4303      	orrs	r3, r0
 800bc0e:	d00b      	beq.n	800bc28 <__ieee754_pow+0x978>
 800bc10:	a325      	add	r3, pc, #148	; (adr r3, 800bca8 <__ieee754_pow+0x9f8>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc1a:	f7f4 fce5 	bl	80005e8 <__aeabi_dmul>
 800bc1e:	a322      	add	r3, pc, #136	; (adr r3, 800bca8 <__ieee754_pow+0x9f8>)
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	f7ff bbdb 	b.w	800b3de <__ieee754_pow+0x12e>
 800bc28:	4622      	mov	r2, r4
 800bc2a:	462b      	mov	r3, r5
 800bc2c:	f7f4 fb24 	bl	8000278 <__aeabi_dsub>
 800bc30:	4642      	mov	r2, r8
 800bc32:	464b      	mov	r3, r9
 800bc34:	f7f4 ff5e 	bl	8000af4 <__aeabi_dcmpge>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	f43f aef1 	beq.w	800ba20 <__ieee754_pow+0x770>
 800bc3e:	e7e7      	b.n	800bc10 <__ieee754_pow+0x960>
 800bc40:	f04f 0a00 	mov.w	sl, #0
 800bc44:	e718      	b.n	800ba78 <__ieee754_pow+0x7c8>
 800bc46:	4621      	mov	r1, r4
 800bc48:	e7d4      	b.n	800bbf4 <__ieee754_pow+0x944>
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	491a      	ldr	r1, [pc, #104]	; (800bcb8 <__ieee754_pow+0xa08>)
 800bc4e:	f7ff bb8f 	b.w	800b370 <__ieee754_pow+0xc0>
 800bc52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc56:	f7ff bb8b 	b.w	800b370 <__ieee754_pow+0xc0>
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	f7ff bb87 	b.w	800b370 <__ieee754_pow+0xc0>
 800bc62:	4693      	mov	fp, r2
 800bc64:	f7ff bb98 	b.w	800b398 <__ieee754_pow+0xe8>
 800bc68:	00000000 	.word	0x00000000
 800bc6c:	3fe62e43 	.word	0x3fe62e43
 800bc70:	fefa39ef 	.word	0xfefa39ef
 800bc74:	3fe62e42 	.word	0x3fe62e42
 800bc78:	0ca86c39 	.word	0x0ca86c39
 800bc7c:	be205c61 	.word	0xbe205c61
 800bc80:	72bea4d0 	.word	0x72bea4d0
 800bc84:	3e663769 	.word	0x3e663769
 800bc88:	c5d26bf1 	.word	0xc5d26bf1
 800bc8c:	3ebbbd41 	.word	0x3ebbbd41
 800bc90:	af25de2c 	.word	0xaf25de2c
 800bc94:	3f11566a 	.word	0x3f11566a
 800bc98:	16bebd93 	.word	0x16bebd93
 800bc9c:	3f66c16c 	.word	0x3f66c16c
 800bca0:	5555553e 	.word	0x5555553e
 800bca4:	3fc55555 	.word	0x3fc55555
 800bca8:	c2f8f359 	.word	0xc2f8f359
 800bcac:	01a56e1f 	.word	0x01a56e1f
 800bcb0:	3fe00000 	.word	0x3fe00000
 800bcb4:	000fffff 	.word	0x000fffff
 800bcb8:	3ff00000 	.word	0x3ff00000
 800bcbc:	4090cbff 	.word	0x4090cbff
 800bcc0:	3f6f3400 	.word	0x3f6f3400
 800bcc4:	652b82fe 	.word	0x652b82fe
 800bcc8:	3c971547 	.word	0x3c971547

0800bccc <__ieee754_sqrt>:
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	4955      	ldr	r1, [pc, #340]	; (800be28 <__ieee754_sqrt+0x15c>)
 800bcd2:	ec55 4b10 	vmov	r4, r5, d0
 800bcd6:	43a9      	bics	r1, r5
 800bcd8:	462b      	mov	r3, r5
 800bcda:	462a      	mov	r2, r5
 800bcdc:	d112      	bne.n	800bd04 <__ieee754_sqrt+0x38>
 800bcde:	ee10 2a10 	vmov	r2, s0
 800bce2:	ee10 0a10 	vmov	r0, s0
 800bce6:	4629      	mov	r1, r5
 800bce8:	f7f4 fc7e 	bl	80005e8 <__aeabi_dmul>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f7f4 fac2 	bl	800027c <__adddf3>
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	460d      	mov	r5, r1
 800bcfc:	ec45 4b10 	vmov	d0, r4, r5
 800bd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd04:	2d00      	cmp	r5, #0
 800bd06:	ee10 0a10 	vmov	r0, s0
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	dc0f      	bgt.n	800bd2e <__ieee754_sqrt+0x62>
 800bd0e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd12:	4330      	orrs	r0, r6
 800bd14:	d0f2      	beq.n	800bcfc <__ieee754_sqrt+0x30>
 800bd16:	b155      	cbz	r5, 800bd2e <__ieee754_sqrt+0x62>
 800bd18:	ee10 2a10 	vmov	r2, s0
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	4629      	mov	r1, r5
 800bd20:	f7f4 faaa 	bl	8000278 <__aeabi_dsub>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	f7f4 fd88 	bl	800083c <__aeabi_ddiv>
 800bd2c:	e7e4      	b.n	800bcf8 <__ieee754_sqrt+0x2c>
 800bd2e:	151b      	asrs	r3, r3, #20
 800bd30:	d073      	beq.n	800be1a <__ieee754_sqrt+0x14e>
 800bd32:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bd36:	07dd      	lsls	r5, r3, #31
 800bd38:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bd3c:	bf48      	it	mi
 800bd3e:	0fc8      	lsrmi	r0, r1, #31
 800bd40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bd44:	bf44      	itt	mi
 800bd46:	0049      	lslmi	r1, r1, #1
 800bd48:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800bd4c:	2500      	movs	r5, #0
 800bd4e:	1058      	asrs	r0, r3, #1
 800bd50:	0fcb      	lsrs	r3, r1, #31
 800bd52:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800bd56:	0049      	lsls	r1, r1, #1
 800bd58:	2316      	movs	r3, #22
 800bd5a:	462c      	mov	r4, r5
 800bd5c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bd60:	19a7      	adds	r7, r4, r6
 800bd62:	4297      	cmp	r7, r2
 800bd64:	bfde      	ittt	le
 800bd66:	19bc      	addle	r4, r7, r6
 800bd68:	1bd2      	suble	r2, r2, r7
 800bd6a:	19ad      	addle	r5, r5, r6
 800bd6c:	0fcf      	lsrs	r7, r1, #31
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800bd74:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bd78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bd7c:	d1f0      	bne.n	800bd60 <__ieee754_sqrt+0x94>
 800bd7e:	f04f 0c20 	mov.w	ip, #32
 800bd82:	469e      	mov	lr, r3
 800bd84:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bd88:	42a2      	cmp	r2, r4
 800bd8a:	eb06 070e 	add.w	r7, r6, lr
 800bd8e:	dc02      	bgt.n	800bd96 <__ieee754_sqrt+0xca>
 800bd90:	d112      	bne.n	800bdb8 <__ieee754_sqrt+0xec>
 800bd92:	428f      	cmp	r7, r1
 800bd94:	d810      	bhi.n	800bdb8 <__ieee754_sqrt+0xec>
 800bd96:	2f00      	cmp	r7, #0
 800bd98:	eb07 0e06 	add.w	lr, r7, r6
 800bd9c:	da42      	bge.n	800be24 <__ieee754_sqrt+0x158>
 800bd9e:	f1be 0f00 	cmp.w	lr, #0
 800bda2:	db3f      	blt.n	800be24 <__ieee754_sqrt+0x158>
 800bda4:	f104 0801 	add.w	r8, r4, #1
 800bda8:	1b12      	subs	r2, r2, r4
 800bdaa:	428f      	cmp	r7, r1
 800bdac:	bf88      	it	hi
 800bdae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bdb2:	1bc9      	subs	r1, r1, r7
 800bdb4:	4433      	add	r3, r6
 800bdb6:	4644      	mov	r4, r8
 800bdb8:	0052      	lsls	r2, r2, #1
 800bdba:	f1bc 0c01 	subs.w	ip, ip, #1
 800bdbe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800bdc2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bdc6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bdca:	d1dd      	bne.n	800bd88 <__ieee754_sqrt+0xbc>
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	d006      	beq.n	800bdde <__ieee754_sqrt+0x112>
 800bdd0:	1c5c      	adds	r4, r3, #1
 800bdd2:	bf13      	iteet	ne
 800bdd4:	3301      	addne	r3, #1
 800bdd6:	3501      	addeq	r5, #1
 800bdd8:	4663      	moveq	r3, ip
 800bdda:	f023 0301 	bicne.w	r3, r3, #1
 800bdde:	106a      	asrs	r2, r5, #1
 800bde0:	085b      	lsrs	r3, r3, #1
 800bde2:	07e9      	lsls	r1, r5, #31
 800bde4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bde8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bdec:	bf48      	it	mi
 800bdee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bdf2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800bdf6:	461c      	mov	r4, r3
 800bdf8:	e780      	b.n	800bcfc <__ieee754_sqrt+0x30>
 800bdfa:	0aca      	lsrs	r2, r1, #11
 800bdfc:	3815      	subs	r0, #21
 800bdfe:	0549      	lsls	r1, r1, #21
 800be00:	2a00      	cmp	r2, #0
 800be02:	d0fa      	beq.n	800bdfa <__ieee754_sqrt+0x12e>
 800be04:	02d6      	lsls	r6, r2, #11
 800be06:	d50a      	bpl.n	800be1e <__ieee754_sqrt+0x152>
 800be08:	f1c3 0420 	rsb	r4, r3, #32
 800be0c:	fa21 f404 	lsr.w	r4, r1, r4
 800be10:	1e5d      	subs	r5, r3, #1
 800be12:	4099      	lsls	r1, r3
 800be14:	4322      	orrs	r2, r4
 800be16:	1b43      	subs	r3, r0, r5
 800be18:	e78b      	b.n	800bd32 <__ieee754_sqrt+0x66>
 800be1a:	4618      	mov	r0, r3
 800be1c:	e7f0      	b.n	800be00 <__ieee754_sqrt+0x134>
 800be1e:	0052      	lsls	r2, r2, #1
 800be20:	3301      	adds	r3, #1
 800be22:	e7ef      	b.n	800be04 <__ieee754_sqrt+0x138>
 800be24:	46a0      	mov	r8, r4
 800be26:	e7bf      	b.n	800bda8 <__ieee754_sqrt+0xdc>
 800be28:	7ff00000 	.word	0x7ff00000

0800be2c <fabs>:
 800be2c:	ec51 0b10 	vmov	r0, r1, d0
 800be30:	ee10 2a10 	vmov	r2, s0
 800be34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be38:	ec43 2b10 	vmov	d0, r2, r3
 800be3c:	4770      	bx	lr

0800be3e <finite>:
 800be3e:	ee10 3a90 	vmov	r3, s1
 800be42:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800be46:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800be4a:	0fc0      	lsrs	r0, r0, #31
 800be4c:	4770      	bx	lr

0800be4e <matherr>:
 800be4e:	2000      	movs	r0, #0
 800be50:	4770      	bx	lr
 800be52:	0000      	movs	r0, r0
 800be54:	0000      	movs	r0, r0
	...

0800be58 <nan>:
 800be58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be60 <nan+0x8>
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	00000000 	.word	0x00000000
 800be64:	7ff80000 	.word	0x7ff80000

0800be68 <rint>:
 800be68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be6a:	ec51 0b10 	vmov	r0, r1, d0
 800be6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be72:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800be76:	2e13      	cmp	r6, #19
 800be78:	460b      	mov	r3, r1
 800be7a:	ee10 4a10 	vmov	r4, s0
 800be7e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800be82:	dc56      	bgt.n	800bf32 <rint+0xca>
 800be84:	2e00      	cmp	r6, #0
 800be86:	da2b      	bge.n	800bee0 <rint+0x78>
 800be88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800be8c:	4302      	orrs	r2, r0
 800be8e:	d023      	beq.n	800bed8 <rint+0x70>
 800be90:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800be94:	4302      	orrs	r2, r0
 800be96:	4254      	negs	r4, r2
 800be98:	4314      	orrs	r4, r2
 800be9a:	0c4b      	lsrs	r3, r1, #17
 800be9c:	0b24      	lsrs	r4, r4, #12
 800be9e:	045b      	lsls	r3, r3, #17
 800bea0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800bea4:	ea44 0103 	orr.w	r1, r4, r3
 800bea8:	460b      	mov	r3, r1
 800beaa:	492f      	ldr	r1, [pc, #188]	; (800bf68 <rint+0x100>)
 800beac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800beb0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800beb4:	4602      	mov	r2, r0
 800beb6:	4639      	mov	r1, r7
 800beb8:	4630      	mov	r0, r6
 800beba:	f7f4 f9df 	bl	800027c <__adddf3>
 800bebe:	e9cd 0100 	strd	r0, r1, [sp]
 800bec2:	463b      	mov	r3, r7
 800bec4:	4632      	mov	r2, r6
 800bec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beca:	f7f4 f9d5 	bl	8000278 <__aeabi_dsub>
 800bece:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bed2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800bed6:	4639      	mov	r1, r7
 800bed8:	ec41 0b10 	vmov	d0, r0, r1
 800bedc:	b003      	add	sp, #12
 800bede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bee0:	4a22      	ldr	r2, [pc, #136]	; (800bf6c <rint+0x104>)
 800bee2:	4132      	asrs	r2, r6
 800bee4:	ea01 0702 	and.w	r7, r1, r2
 800bee8:	4307      	orrs	r7, r0
 800beea:	d0f5      	beq.n	800bed8 <rint+0x70>
 800beec:	0852      	lsrs	r2, r2, #1
 800beee:	4011      	ands	r1, r2
 800bef0:	430c      	orrs	r4, r1
 800bef2:	d00b      	beq.n	800bf0c <rint+0xa4>
 800bef4:	ea23 0202 	bic.w	r2, r3, r2
 800bef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800befc:	2e13      	cmp	r6, #19
 800befe:	fa43 f306 	asr.w	r3, r3, r6
 800bf02:	bf0c      	ite	eq
 800bf04:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800bf08:	2400      	movne	r4, #0
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	4916      	ldr	r1, [pc, #88]	; (800bf68 <rint+0x100>)
 800bf0e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800bf12:	4622      	mov	r2, r4
 800bf14:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 f9ae 	bl	800027c <__adddf3>
 800bf20:	e9cd 0100 	strd	r0, r1, [sp]
 800bf24:	4622      	mov	r2, r4
 800bf26:	462b      	mov	r3, r5
 800bf28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf2c:	f7f4 f9a4 	bl	8000278 <__aeabi_dsub>
 800bf30:	e7d2      	b.n	800bed8 <rint+0x70>
 800bf32:	2e33      	cmp	r6, #51	; 0x33
 800bf34:	dd07      	ble.n	800bf46 <rint+0xde>
 800bf36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bf3a:	d1cd      	bne.n	800bed8 <rint+0x70>
 800bf3c:	ee10 2a10 	vmov	r2, s0
 800bf40:	f7f4 f99c 	bl	800027c <__adddf3>
 800bf44:	e7c8      	b.n	800bed8 <rint+0x70>
 800bf46:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800bf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4e:	40f2      	lsrs	r2, r6
 800bf50:	4210      	tst	r0, r2
 800bf52:	d0c1      	beq.n	800bed8 <rint+0x70>
 800bf54:	0852      	lsrs	r2, r2, #1
 800bf56:	4210      	tst	r0, r2
 800bf58:	bf1f      	itttt	ne
 800bf5a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800bf5e:	ea20 0202 	bicne.w	r2, r0, r2
 800bf62:	4134      	asrne	r4, r6
 800bf64:	4314      	orrne	r4, r2
 800bf66:	e7d1      	b.n	800bf0c <rint+0xa4>
 800bf68:	0800c2e8 	.word	0x0800c2e8
 800bf6c:	000fffff 	.word	0x000fffff

0800bf70 <scalbn>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	ec55 4b10 	vmov	r4, r5, d0
 800bf76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	462b      	mov	r3, r5
 800bf7e:	b9aa      	cbnz	r2, 800bfac <scalbn+0x3c>
 800bf80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf84:	4323      	orrs	r3, r4
 800bf86:	d03b      	beq.n	800c000 <scalbn+0x90>
 800bf88:	4b31      	ldr	r3, [pc, #196]	; (800c050 <scalbn+0xe0>)
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	ee10 0a10 	vmov	r0, s0
 800bf92:	f7f4 fb29 	bl	80005e8 <__aeabi_dmul>
 800bf96:	4b2f      	ldr	r3, [pc, #188]	; (800c054 <scalbn+0xe4>)
 800bf98:	429e      	cmp	r6, r3
 800bf9a:	4604      	mov	r4, r0
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	da12      	bge.n	800bfc6 <scalbn+0x56>
 800bfa0:	a327      	add	r3, pc, #156	; (adr r3, 800c040 <scalbn+0xd0>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 fb1f 	bl	80005e8 <__aeabi_dmul>
 800bfaa:	e009      	b.n	800bfc0 <scalbn+0x50>
 800bfac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bfb0:	428a      	cmp	r2, r1
 800bfb2:	d10c      	bne.n	800bfce <scalbn+0x5e>
 800bfb4:	ee10 2a10 	vmov	r2, s0
 800bfb8:	4620      	mov	r0, r4
 800bfba:	4629      	mov	r1, r5
 800bfbc:	f7f4 f95e 	bl	800027c <__adddf3>
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	460d      	mov	r5, r1
 800bfc4:	e01c      	b.n	800c000 <scalbn+0x90>
 800bfc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bfca:	460b      	mov	r3, r1
 800bfcc:	3a36      	subs	r2, #54	; 0x36
 800bfce:	4432      	add	r2, r6
 800bfd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bfd4:	428a      	cmp	r2, r1
 800bfd6:	dd0b      	ble.n	800bff0 <scalbn+0x80>
 800bfd8:	ec45 4b11 	vmov	d1, r4, r5
 800bfdc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c048 <scalbn+0xd8>
 800bfe0:	f000 f83c 	bl	800c05c <copysign>
 800bfe4:	a318      	add	r3, pc, #96	; (adr r3, 800c048 <scalbn+0xd8>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	ec51 0b10 	vmov	r0, r1, d0
 800bfee:	e7da      	b.n	800bfa6 <scalbn+0x36>
 800bff0:	2a00      	cmp	r2, #0
 800bff2:	dd08      	ble.n	800c006 <scalbn+0x96>
 800bff4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bff8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bffc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c000:	ec45 4b10 	vmov	d0, r4, r5
 800c004:	bd70      	pop	{r4, r5, r6, pc}
 800c006:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c00a:	da0d      	bge.n	800c028 <scalbn+0xb8>
 800c00c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c010:	429e      	cmp	r6, r3
 800c012:	ec45 4b11 	vmov	d1, r4, r5
 800c016:	dce1      	bgt.n	800bfdc <scalbn+0x6c>
 800c018:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c040 <scalbn+0xd0>
 800c01c:	f000 f81e 	bl	800c05c <copysign>
 800c020:	a307      	add	r3, pc, #28	; (adr r3, 800c040 <scalbn+0xd0>)
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	e7e0      	b.n	800bfea <scalbn+0x7a>
 800c028:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c02c:	3236      	adds	r2, #54	; 0x36
 800c02e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c036:	4620      	mov	r0, r4
 800c038:	4629      	mov	r1, r5
 800c03a:	2200      	movs	r2, #0
 800c03c:	4b06      	ldr	r3, [pc, #24]	; (800c058 <scalbn+0xe8>)
 800c03e:	e7b2      	b.n	800bfa6 <scalbn+0x36>
 800c040:	c2f8f359 	.word	0xc2f8f359
 800c044:	01a56e1f 	.word	0x01a56e1f
 800c048:	8800759c 	.word	0x8800759c
 800c04c:	7e37e43c 	.word	0x7e37e43c
 800c050:	43500000 	.word	0x43500000
 800c054:	ffff3cb0 	.word	0xffff3cb0
 800c058:	3c900000 	.word	0x3c900000

0800c05c <copysign>:
 800c05c:	ec51 0b10 	vmov	r0, r1, d0
 800c060:	ee11 0a90 	vmov	r0, s3
 800c064:	ee10 2a10 	vmov	r2, s0
 800c068:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c06c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c070:	ea41 0300 	orr.w	r3, r1, r0
 800c074:	ec43 2b10 	vmov	d0, r2, r3
 800c078:	4770      	bx	lr
	...

0800c07c <_init>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	bf00      	nop
 800c080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c082:	bc08      	pop	{r3}
 800c084:	469e      	mov	lr, r3
 800c086:	4770      	bx	lr

0800c088 <_fini>:
 800c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08a:	bf00      	nop
 800c08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c08e:	bc08      	pop	{r3}
 800c090:	469e      	mov	lr, r3
 800c092:	4770      	bx	lr
